window.jBartWidgets = window.jBartWidgets || { vars: {} };
window.jBart = { vars: {}, api: {}, utils: {}, dialogs: {}, bart: {}, db: {} };
var ajaxart = { 
	debugmode: false, trace_level: 2, // 0-input output, 1-also variables, 2-nested values
    xtmls_to_trace: [], traces: [], components: [], componentsXtmlCache: [], usages: [], types: [], plugins: [], gcs: {}, 
    log_str: '', loading_objects: 0, logs: {}, default_values: [], inPreviewMode: false, stack_trace: [], build_version: 'ART_NOW', 
    xml: {}, cookies: {}, ui: {}, yesno: {}, dialog: { openPopups: []}, xmlsToMonitor: [], lookup_cache: {}, occurrence_cache: {}, 
    unique_number: 1, action: {}, runningTimers: {}, runDelayed: [],
    classes: {},
  	base_lib: '//jbartlib.appspot.com/lib', base_images: '//jbartlib.appspot.com/images',
  	STRING_WITH_EXP: /%[^ ,;\(\)]/,
  	NOT_EXP: /^[ ,;\(\)]/,

run: function(data,script,field,context,method,booleanExpression,noDtSupport) 
{
   try {
	 var origData = data;
     if (ajaxart.debugmode && ! aa_isArray(data))
     {
    	 ajaxart.log("run called with input not an array","error");
    	 return [];
     }
     if (script == null) return [];
     if (script.nodeType && script.nodeType == 2) { // attribute
    	 field = script.nodeName;
    	 script = ajaxart.xml.parentNode(script);
    	 if (!script) return [];
     }
     if (field != "" && aa_hasAttribute(script,field) ) {
       if (script.getAttribute("Break") == field)
      	 debugger;
       var out = ajaxart.dynamicText(data,script.getAttribute(field),context,null,booleanExpression);
       
       if (script.getAttribute("Trace") == field) ajaxart.trace(script,data,out,context,field);
       aa_try_probe_test_attribute(script,field,data,out,context,origData);
       return out;
     }
     var field_script = ajaxart.fieldscript(script, field,false);
     if (field_script == null) return [];
     if (field_script.nodeType == 2) return ajaxart.run(data,field_script,'',context,method,booleanExpression); // For Default param values in attributes
      
	 var childElems = [];
	 var node = field_script.firstChild;
	 while (node != null)
	 {
		if (node.nodeType == 1) childElems.push(node);
		node=node.nextSibling;
	 }
     ajaxart.stack_trace.push(field_script);
     // decorators
	 var classDecorator="";
	 var cssStyleDecorator="";
	 var atts = field_script.attributes;
	 for(var i=0;i<atts.length;i++)
	 {
		var aname = atts.item(i).nodeName;
		
		if (aname == "t") {}
		else if (aname == "Condition" && ! aa_bool(data,atts.item(i),"",context))
		{
			ajaxart.stack_trace.pop();
			return [];
		}
		else if (aname == "Data")
		{
			data = [aa_first(data,atts.item(i),'',context)];
			if (data[0] == null) data = [];
		}
		else if( aname == "RunOn")
  	 	  context = ajaxart.calcParamsForRunOn(context,ajaxart.run(data,atts.item(i),"",context));
		else if( aname == "Class") 
			classDecorator = aa_text(data,atts.item(i),"",context);
		else if( aname == "CssStyle") 
			cssStyleDecorator = aa_text(data,atts.item(i),"",context);
		else if( aname == "NameForTrace")
			ajaxart.log(atts.item(i), "actions trace");
	 }
	 
	 var firstVar=true;
	 for(var childElem in childElems)
	 {
	 	if (!childElems.hasOwnProperty(childElem)) continue;
		var item = childElems[childElem]; 
		var tag = item.tagName;  //Todo: if backend use getTagName
		if (tag == "Condition" && ! aa_bool(data,item,"",context))
		{
			ajaxart.stack_trace.pop();
			return [];
		}
		else if (tag == "Data")
		{
			data = [aa_first(data,item,"",context)];
			if (data[0] == null) data = [];
		}
		else if (tag == "RunOn")
  	 	  context = ajaxart.calcParamsForRunOn(context,ajaxart.run(data,item,"",context));
		else if (tag == "Class")
			classDecorator = aa_text(data,item,"",context);
		else if (tag == "CssStyle")
			cssStyleDecorator = aa_text(data,item,"",context);
		else if (tag == "Var")
		{
			if (firstVar) { context = ajaxart.clone_context(context); firstVar = false;}
			var scope = item.getAttribute('varScope') || 'stack';

      var varname = item.getAttribute("name");
      if (varname == "ControlElement") {	// special case. todo: try to fix this
				var elementPointer = {};
        ajaxart.setVariable(context,varname,elementPointer);         
      }
      var var_value = null;
      if (! aa_hasAttribute(item,"t") && ! aa_hasAttribute(item,"value") )
        var_value = data;
      else
        var_value = ajaxart.run(data,item,"",context);

      if (varname == "ControlElement") {	// special case. todo: try to fix this
        elementPointer.controlElement = var_value;
      }
      if (scope == 'Component') {
        context.params[varname] = var_value;
      } else { // scope == stack
        ajaxart.setVariable(context,varname,var_value);
      }
		}
	 }

	 var component = field_script.getAttribute("t") || "";
	 if (component == "") 
	 {
       if (aa_hasAttribute(field_script,"value") ) {
  		 if (field_script.getAttribute("Break") == "true")
  	    	 debugger;
      	 var out = ajaxart.dynamicText(data,field_script.getAttribute("value"),context,null,booleanExpression);
         if (aa_hasAttribute(field_script,"Trace"))
        	 ajaxart.trace(script,data,out,context,field,field_script.getAttribute("Trace"));
		 if (ajaxart.inPreviewMode)
		 	aa_trace_run_for_preview(field_script,data,out,context,origData);

  		 ajaxart.stack_trace.pop();
         return out;
       }
       else {  // maybe CDATA
   		for (var child = field_script.firstChild; child; child=child.nextSibling)
			if (child.nodeType == 4 && child.nodeValue)
				return ajaxart.dynamicText(data,child.nodeValue,context,null,booleanExpression);
       }
       ajaxart.stack_trace.pop();
	   return [];
	 }	   	   	   
	 // component definition
	 var global = aa_componentById(component);
	 if (!global) {
		ajaxart.stack_trace.pop();
		return [];
	 }
	 //aa_mark_component_usage(component,global);	// used for compression- do not delete
	 if (global.getAttribute("execution") == "native")
	 {
	   var gc_component = (method && method.length > 0) ? component + "_" + method : component;
	   var func = aa_componentById(gc_component,'gcs');
	   if (!func) {
		   ajaxart.stack_trace.pop();
		   return [];
	   }
	   if (field_script.getAttribute("Break") == "true")
		   debugger;
       if (ajaxart.profiling_of_globals == null)
    	   out = func(field_script,data,context);
       else {
	 		 var before = new Date().getTime();
        	 out = func(field_script,data,context);
        	 ajaxart.write_profiling_at_end(before,component);
        }
	 }
	 else   // xtml-defined component
	 {
		 var global_xtml = ajaxart.componentsXtmlCache[component]; 
		 if (global_xtml == null) {
	       global_xtml = ajaxart.childElem(global,'xtml');
	       ajaxart.componentsXtmlCache[component] = global_xtml;
		 }
		 if (global_xtml == null)
			 ajaxart.log("missing implementation for component " + component,"error");
		 var paramDefinitions = ajaxart.childElems(global,"Param");
		 var contextForXtml = ajaxart.newContext();
		 contextForXtml.vars = context.vars;
	     contextForXtml.componentContext = context;
	     contextForXtml.counter = (context.counter!=null) ? context.counter+1 : 1;
//	     if (contextForXtml.counter == 50) { debugger; window.alert('endless loop'); throw "endless loop"; }
	     if (contextForXtml.counter > 100) { ajaxart.log("endless loop"); return []; }
		 
		 for(var i=0;i<paramDefinitions.length;i++)
		 {
			 var paramDef = paramDefinitions[i];
			 var param_name = paramDef.getAttribute("name");
			 var param_value;
			 if (aa_hasAttribute(paramDef,"type") && (''+paramDef.getAttribute("type")).indexOf("[]") > 0)  //array
			 {
			   var param_value = [];
			   var subprofiles = ajaxart.childElems(field_script,param_name);
  		       if (paramDef.getAttribute("script") != "true" ) { 
			     for(var j=0;j<subprofiles.length;j++)
  			       ajaxart.concat(param_value, ajaxart.run(data,subprofiles[j],"",context) );
  		       } else { 
  		    	 param_value = { isArrayParamScript: true , script: field_script, field:param_name, context: context };
  		       }
			 }
		     else if (paramDef.getAttribute("script") != "true" ) 
			   param_value = ajaxart.run(data,field_script,param_name,context);
	         else { // script=true
	           param_value = { isParamScript: true }; 
			   param_value.script = ajaxart.fieldscript(field_script, param_name,true,contextForXtml);
	           param_value.compiled = ajaxart.compile(param_value.script,'',context,paramDef.getAttribute("paramVars"));
	         }

			 ajaxart.setParameterVariable(contextForXtml,param_name,param_value);
	     }
	     if (global.getAttribute("useCallerScript") == "true")
			   ajaxart.setVariable(contextForXtml,"_CallerScript", [field_script]);
	     
	     if (ajaxart.profiling_of_globals == null)
	    	 out = ajaxart.run(data,global_xtml,"",contextForXtml,method);
	     else {
	 		 var before = new Date().getTime();
	    	 out = ajaxart.run(data,global_xtml,"",contextForXtml,method);
        	 ajaxart.write_profiling_at_end(before,component);
	     }
	   } 
	   
       // decorators - post function
	   if (out == null) out = [];
	   
	   if (classDecorator != "") {
		 if (ajaxart.ishtml(out))
		   for(var item in out)
		   	if (out.hasOwnProperty(item))
				 jQuery(out[item]).addClass(classDecorator);
       }
	   if (cssStyleDecorator != "") {
		   for(var item in out)
		   	if (out.hasOwnProperty(item) && ajaxart.ishtml(out[item]))
				aa_setCssText(out[item],cssStyleDecorator);
	   }
	   if (global.getAttribute('databind') == "true") {
		   ajaxart.databind(out,data,context,field_script,origData);
	   }
	   try {
	     if (field_script.nodeType == 1 && out.length > 0 && ajaxart.isObject(out[0]))
		   if (global.getAttribute('dtsupport') != "false" && field_script.nodeType == 1 && field_script.getAttribute('dtsupport') != "false" && !noDtSupport)
		     out[0].XtmlSource = [{ script: field_script , input: data, context: context }];
	   } catch(e) {  }
	   
	   // trace
	   if (aa_hasAttribute(field_script,"Trace"))
		   ajaxart.trace(field_script,data,out,context,null,field_script.getAttribute("Trace"));
	   
	   if (aa_hasAttribute(field_script,"Alert")) {
	   	  if (field_script.getAttribute("Alert") == "true")
		   aa_alert(ajaxart.totext_array(out));
		  else
		  	aa_alert(ajaxart.dynamicText(out,field_script.getAttribute("Alert"),context));
		}

	  	if (aa_hasAttribute(field_script,"Name"))
	  	{
	  		var id = ('' + field_script.getAttribute("Name")).replace(/ /g, "_");
			 for(var item in out)
		   		if (out.hasOwnProperty(item) && ajaxart.ishtml(out[item]))
					 out[item].setAttribute("id", id);
	  	}
		if (ajaxart.inPreviewMode)
		 	aa_trace_run_for_preview(field_script,data,out,context,origData);
	   ajaxart.stack_trace.pop();
       return out;
	   } catch (e) {
	   	   if (e && e.BreakPreviewCircuit) 
	   	   		throw e;
	   	   	
		   var prefix = '';
		   if (script) {
			   var field_script = ajaxart.fieldscript(script, field,false) || script;
			   if (script.getAttribute('t')) prefix = 't=' + script.getAttribute('t') + ' - ';
		   }
	   	   ajaxart.logException(e,prefix);
	       return [];
	   };
},
compile_text: function (script, field ,context) {
	var fieldscript = ajaxart.fieldscript(script,field,true);
	if (fieldscript == null) return function() { return ''};
	
	if (fieldscript.nodeType == 2) { 
		var value = fieldscript.nodeValue;
		if (value == "%%" ) return function(data1) { return aa_totext(data1) };
		if (!value.match(ajaxart.STRING_WITH_EXP)) // no vars
		  return function() { return value };
	
		var att = value.match(/^%@([^%]+)%$/);
		if (att) 
			return function(data) { return data[0].getAttribute(att[1]) || ''; };
	}

	return function(data,ctx) { return aa_text(data,script,field,ctx); };  // the default - no compile
},
compile: function (script, field ,context,paramVars,isReadOnly, bool) {
	function normalRun(data,context) { 
		return ajaxart.run(data,script, field, context, '', bool) };

	if (ajaxart.xtmls_to_trace.length > 0 || script == null) return normalRun;
	if (!script) { ajaxart.log('compile with no script','error'); return;	}
	
	var fieldscript = ajaxart.fieldscript(script,field,true);
	if (fieldscript == null) return function(context) { return [];};
	
	var value = null;
	if (fieldscript.nodeType == 1) {
	  var extraAttrs=0;
	  if (aa_hasAttribute(fieldscript,'name')) extraAttrs=1;
	  if (aa_hasAttribute(fieldscript,'paramVars') ) extraAttrs=1;
	  
	  if (fieldscript.attributes.length == 2+extraAttrs && fieldscript.getAttribute("t") == "xtml.UseParam" && fieldscript.firstChild == null) {
		  var param = fieldscript.getAttribute("Param");
		  if (aa_hasAttribute(fieldscript,'Param')) {
			var paramScript = context.params[param];
  		    if (!paramScript || !paramScript.script || aa_isArray(paramScript) ) return normalRun;
  		    if (paramScript.compiled == "same") return aa_same; // aa_same() 
  	        return function(data,context1) {
  	  	  	    var newContext = {};
  		  	    newContext.vars = context1.vars;
  		  	    newContext.params = context.componentContext.params;
  		  	    newContext.componentContext = context.componentContext.componentContext;
  		  	
  		  	    if (paramScript.compiled == null)  
  		  	    	return ajaxart.run(data,paramScript.script,"",newContext);
  	            else
  	            	return paramScript.compiled(data,newContext);
  	        };
		  };
  	      return normalRun;
	  }
 	  if (fieldscript.getAttribute("t") == "js.JavaScript" ) {
	  	var scriptNode = ajaxart.childElem(fieldscript,'Javascript');
	  	if (!scriptNode) return function() { return [] };
			var code = aa_cdata_value(scriptNode) || ajaxart.xml.innerTextStr(scriptNode);
 	  	var run_js = aa_get_func(code);
 	  	return function(data,context) {
				var data_item = data;
				if (data.length == 1)
					data_item = data[0];
				var ret = run_js(data_item,context.vars._ElemsOfOperation ? context.vars._ElemsOfOperation[0] : null,context);
				if (!ret) return [];
				if (typeof(ret) == 'string') return [ret];
				if (typeof(ret) == 'number') return [""+ret];
				if (typeof(ret) == 'boolean') return (ret) ? ["true"] : [];
				if (aa_isArray(ret)) return ret;
				return [ret];
 	  	}
 	  }
	  if (fieldscript.attributes.length <= 3+extraAttrs && fieldscript.getAttribute("t") == "xtml.RunXtml" && fieldscript.firstChild == null) {
		  return aa_compile(fieldscript);
	  }
  	  if (fieldscript.getAttribute("t") == "uiaspect.JavaScriptControl" ) {
      	var func_name = aa_text([],fieldscript,'FunctionName',context);
      	if (func_name != "" && window[func_name] == null) { ajaxart.log("function " + func_name + " does not exist","error"); return []; }
    		return function(data,context) { 
    			var control = jQuery(aa_text(data,fieldscript,'Html',context));
    			if (window[func_name] == null) return control;
    			else return [window[func_name](data,context,control)] };
  	  }
	  if (fieldscript.attributes.length > 1+extraAttrs || fieldscript.firstChild != null) return normalRun;  // no compilation possible
  	  if (fieldscript.getAttribute("t") == "data.Same" ) return aa_same;
	  value = aa_hasAttribute(fieldscript,'value') ? fieldscript.getAttribute('value') : null;
	}
	else if (fieldscript.nodeType == 2) value = fieldscript.nodeValue;
	
	if (value == null) return normalRun;
	if (value == "%%") return aa_same;
	if (!value.match(ajaxart.STRING_WITH_EXP))
		return function(data,context) { return [value]; };
	var items = value.split("%");
	if (items.length == 3) {
		if (items[1].charAt(items[1].length-1) == "\\" || items[2].charAt(items[2].length-1) == "\\") return normalRun;// width:50\%, height:30\%
		if (value.charAt(0) == '%' && value.charAt(value.length-1) == '%' ) { // xpath
			if (value.charAt(1) == '@') { // attribute
				if (value.indexOf('{') != -1) return normalRun;
				var attr = value.substring(2,value.length-1);
				if (isReadOnly) {
					var myFunc = function(attr) { return function(data,context) {
						var out = [];
						for(var i=0;i<data.length;i++) {
							var item = data[0];
							if (typeof(item.nodeType) == "undefined" || item.nodeType != 1) continue;
							if (aa_hasAttribute(item,attr)) out.push(value);
						}
						return out;
					} };
					return myFunc(attr);
				}
				var myFunc = function(attr) { return function(data,context) {
					var out = [];
					for(var i=0;i<data.length;i++) {
						var item = data[0];
						if (typeof(item.nodeType) == "undefined" || item.nodeType != 1) continue;
						var atts = item.attributes;
						for (var j = 0; j < atts.length; j++)
						  if (atts.item(j).nodeName == attr)
							out.push(atts.item(j));
					}
					return out;
				} };
				return myFunc(attr);
			}
			return normalRun;
		}
		if (!bool ) { // text with prefix && suffix. Not for boolean,e.g: %%=='Europe' ==> Europe=='Europe' and not 'Europe'=='Europe'
			var prefix = items[0];
			var suffix = items[2];
			var xpath = items[1];
			if (xpath.length == 0) { // text
				var myFunc = function(prefix,suffix) { return function(data,context) { return [prefix+ajaxart.totext_array(data)+suffix]; } }
				return myFunc(prefix,suffix);
			}
		}
	}
	return normalRun;
},
fieldscript: function (script, field,lookInAttributes) 
{
	if (!field) return script;
	if (lookInAttributes && aa_hasAttribute(script,field))
		return ajaxart.xml.attributeObject(script,field);
	
	var field_script = ajaxart.childElem(script,field);
	if (!field_script) 
		field_script = aa_get_default_value(script.getAttribute("t"),field);
	return field_script;
},
splitCommasForAggregatorParams: function(params_str)
{	// a,'b,d,t',c --> [ 'a', 'b,d,t', 'c' ]
	if (!params_str) return [];
	var out = [];
	var single_quot= false, double_quot= false, last_index= 0;
	for (var i=0; i<params_str.length; i++) {
		if (params_str[i] == '"')
			double_quot = !double_quot;
		else if (params_str[i] == "'")
			single_quot = !single_quot;
		else if (params_str[i] == "," && !single_quot && !double_quot) {
			var param = params_str.substring(last_index,i);
			out.push(param);
			last_index = i+1;
		}
	}
	out.push(params_str.substring(last_index));
	for (var j=0; j<out.length; j++) {
		var match = out[j].match(/^'([^']*)'$/);
		if (match) out[j] = match[1];
		match = out[j].match(/^"([^"]*)"$/);
		if (match) out[j] = match[1];
	}
	return out;
},
runNativeHelperNoParams: function(data,script,helpername,context)
{
	var component = script.getAttribute('t');
	var global = aa_componentById(component);
	if (!global) return [];  // should not happen
	
	var helperXml = aa_xpath(global,'NativeHelper[@name="'+helpername+'"]');
	if (helperXml.length > 0)
		return ajaxart.run(data,helperXml[0],"",context);

	ajaxart.log("calling runNativeHelper for none existing helper - " + helpername);
	return [];
},
runNativeHelper: function(data,script,helpername,context)
{
	var new_context = ajaxart.clone_context(context);
	var comp_context = ajaxart.clone_context(context);
	new_context.params = [];
	
	for (i in context.params)
	   	if (context.params.hasOwnProperty(i))
			comp_context.params[i] = context.params[i];
	
	var field_script = script;
	
	var component = script.getAttribute('t');
	var global = aa_componentById(component);
	if (!global) return [];  // should not happen

  var paramDefinitions = ajaxart.childElems(global,"Param");
  new_context.componentContext = comp_context; // context.componentContext || context; 
	 
	for(var i=0;i<paramDefinitions.length;i++)
	{
		 var paramDef = paramDefinitions[i];
		 var param_name = aa_hasAttribute(paramDef,'name') ? paramDef.getAttribute("name") : null;
		 var param_value;

		 if (aa_hasAttribute(paramDef,"type") && (''+paramDef.getAttribute("type")).indexOf("[]") > 0)  //array
		 {
		   var param_value = [];
		   var subprofiles = ajaxart.childElems(field_script,param_name);
		   if (paramDef.getAttribute("script") != "true" ) { 
		     for(var j=0;j<subprofiles.length;j++)
			       ajaxart.concat(param_value, ajaxart.run(data,subprofiles[j],"",new_context) );
		   } else { 
		   	 param_value = { isArrayParamScript: true , script: script, field:param_name, context: new_context };
		   }
		 } else if (paramDef.getAttribute("script") != "true" ) 
		   param_value = ajaxart.run(data,field_script,param_name,comp_context);
     else { // script=true
       param_value = { isParamScript: true };
       param_value.script = ajaxart.fieldscript(field_script, param_name,true,comp_context);
       param_value.compiled = ajaxart.compile(param_value.script,'',comp_context,paramDef.getAttribute("paramVars"));
     }

		 ajaxart.setParameterVariable(new_context,param_name,param_value);
    }
	
	var helperXml = aa_xpath(global,'NativeHelper[@name="'+helpername+'"]');
	if (helperXml.length > 0)
		return ajaxart.run(data,helperXml[0],"",new_context);

	ajaxart.log("calling runNativeHelper for none existing helper - " + helpername);
	return [];
},
dynamicTextWithAggregator: function(item,str,context)
{
	// =Min(person/@age) or =Concat(person/@name,',') or =gstudio.Selected()
	var match = str.match(/=([a-zA-Z.]+)[(]([^)]*)[)]/);
	if (!match) return '';
	var funcName = match[1];
	var ns = "data";
	if (funcName.indexOf('.') > -1) {
		ns = funcName.split('.')[0];
		funcName = funcName.split('.')[1];
	} else {
		if (!ajaxart.components[ns][funcName]) ns='text';
	}

	var params = match[2];
	var params_arr = ajaxart.splitCommasForAggregatorParams(params); 
	if (ajaxart.components[ns][funcName] == null) return '';
	var extraParams = "";
	var itemArr = item ? [item] : [];
	var data = params_arr[0] ? ajaxart.dynamicText(itemArr,"%"+params_arr[0]+"%",context,itemArr) : itemArr;
	for (var i=1; i<params_arr.length; i++) {
		var shortParams = aa_xpath(ajaxart.components[ns][funcName], "Param[@short='true']/@name");
		if (shortParams.length <= i-1) break;
		var paramText = params_arr[i].replace('{','%').replace('}','%');
		extraParams += ' ' + ajaxart.totext_item(shortParams[i-1]) + '="' + paramText + '" ';
	}
	var script = '<Script t="' + ns + '.' + funcName +'"'+ extraParams+ ' />';
	return aa_first(data,aa_parsexml(script,'aggregator'),"",context);
},
dynamicText: function(data,str,context,origData,booleanExpression,xmlescape) 
{
    function expand(data,func,isFirst) {
    	var result = [];
    	for(var i=0;i<data.length;i++)
    		result = result.concat(func(data[i]))
    	if (!data.length && isFirst)
    		result = [func()];

    	return result;
    }
    function xpathFilterForObjects(item,filterExp) {
    	function opValue(op) {
    		var str_match = op.match(/'[^']*'/) || op.match(/"[^"]*"/);
    		if (str_match) return op.slice(1,-1);
    		return ''+item[op];
    	}
    	var equal_exp = filterExp.match(/([^!=]*)(=|!=|==)(.*)/);
    	if (!equal_exp) return false;
    	var oper = equal_exp[2];
    	var op1 = opValue(equal_exp[1]);
    	var op2 = opValue(equal_exp[3]);
   		return 	(oper == '=' && op1 == op2) || 
				(oper == '==' && op1 == op2) ||
				(oper == '!=' && op1 != op2);
    	return false;
    }
    function calcExp(exp) {
		var createIfNotExist = false,byRef=false;
		if (exp[0] == '=') // e.g =Min(person/@age)
			return expand(data,function(elem) { 
				return ajaxart.dynamicTextWithAggregator(elem,exp,context);
			},true);
		if (exp.indexOf('{') != -1 && exp.match(/{[^}]*}/)) // inner vars
			exp = ajaxart.totext(ajaxart.dynamicText(data,exp.replace(/(^|[^\\]){/g,'$1%')
					.replace(/(^|[^\\])}/g,'$1%')
					.replace(/\\({|})/g,'$1'),context));
    	var items = exp.split('/'); // xpath pipline
    	var result = data;
    	for(var i=0;i<items.length;i++) {
    		var item = items[i];
   			var is_hash_filter = item.indexOf('[#') > -1;
    		var filter_match = null;
    		if (item.indexOf('[') != -1) {
    			filter_match = item.match(/([^\[]*)(\[[^\]]*\])/); // elem[@id=15]
    			if (filter_match) item = is_hash_filter ? filter_match[0] : filter_match[1];
    		}
    		if (item.charAt(0) == '!') { 
    			createIfNotExist = true; item = item.substr(1);
    		}
    		if (item.charAt(0) == '>') { 
    			byRef = true; item = item.substr(1);
    		}
    		if (item.charAt(0) == '$') {
    			result = ajaxart.getVariable(context,item.substr(1));
    		} else if (result[0] && result[0].nodeType && result[0].nodeType == 1 && !createIfNotExist && exp.indexOf('/!') == -1 && ! ajaxart.ishtml_item(result[0]) ) { // xml xpath
    			var remaining_xpath = items.slice(i).join('/');
    			return expand(result,function(elem) { 
    				return aa_xpath(elem,remaining_xpath);
    			});
    		} else if (item == '') { 
    			result = result;
    		} else { // 'path1/path2'
    			result = expand(result,function(elem) { 
    				if (elem.nodeType && !ajaxart.ishtml(elem)) return aa_xpath(elem,item,createIfNotExist);
   					var res = elem[item];
    				if (ajaxart.isObject(elem)) { // JSON support
    					if (item == '..' && elem.ParentNode) return [elem.ParentNode()];
    					if (item == '*') {
    						var result = [];
							for (var p in elem) if (elem.hasOwnProperty(p))
								result.push(aa_new_JsonByRef(elem,p));
    						return result;
    					}
						var last = i == items.length -1;
						if (last && byRef) 
							return [ aa_new_JsonByRef(elem,item) ];
						if (res == null && createIfNotExist) res = elem[item] = {};
					}
   					if (res == null) return [];
   					return aa_isArray(res) ? res: [res]; 
    			});
    		}
    		if (filter_match) {
    			var index = parseInt(filter_match[2].slice(1,-1));
    			if (isNaN(index))
    				result = expand(result,function(elem) { 
    					if (is_hash_filter) return [elem];
    					if (elem.nodeType)
    						return aa_xpath(elem,'self::*'+filter_match[2],createIfNotExist);
    					return xpathFilterForObjects(elem,filter_match[2].slice(1,-1)) ? [elem] : [];
    				});
    			else
    				result = result.slice(index-1,index);
    		}
    	}
    	return result;
    }
	if (!str.match(ajaxart.STRING_WITH_EXP)) return [str.replace(/\\%/g,'%')];
	if (str == "%%") return data;
	var oneVar = str.match(/^%\$([a-zA-Z_0-9]+)%$/); // 12% performance boost
	if (oneVar) {
		var result = ajaxart.getVariable(context,oneVar[1]);
		//if (booleanExpression) 
		//	return result[0] ? ['true'] : ['false'];
		return result;
	}
		
    var arr = str.split("%");
    var escaped=[], i=0;
    while (i < arr.length) { // unifying segments - handle escaped \%
        var segment = arr[i];
        while (segment.substr(segment.length-1) === '\\' && i < arr.length-1)
            segment = segment.slice(0,-1) + '%' + arr[++i];
        escaped.push(segment);
        i++;
    }
    if (escaped.length == 2) return [str]; // non closing %
    if (escaped.length == 3 && escaped[0] == '' && escaped[2] == '') { // one variable - return array result
    	try {
    		return calcExp(escaped[1]);
    	} catch(e) {
//    		debugger;
    	}
    }
    var result=[], in_expression = false;
    for(var i=0;i<escaped.length;i++) {
        var segment = escaped[i];
        if (!in_expression) {
            result.push(segment);
            in_expression = true;
        } else if (segment.match(ajaxart.NOT_EXP)) { // auto escaped %. non-closing % followed by space/comma/etc  
            result.push('%' + segment)
            in_expression = true;
        } else {
        	try {
        		var item_to_add = ajaxart.totext_array(calcExp(segment));
                if (booleanExpression) {
                	// wrap with '' if not a number
                	// example: %@type% == 'company' ==> 'company' = 'company'
                	// example: %@%count% > 4        ==> 5 > 4
                	if (! item_to_add.match(/^([0-9]+|[0-9]*\.[0-9]+)$/) )
                		item_to_add = "'" + item_to_add.replace(/'/g, "\\'") + "'";
                }
	            if (xmlescape) item_to_add = aa_xmlescape(item_to_add);
       			result.push(item_to_add);
        	} catch(e) {
//        		debugger;
        	}
            in_expression = false;
        }
    }
    return [result.join('')];
},
newContext: function() {
	return { vars: {_Images: [aa_base_images()] ,_Lib: [aa_base_lib()]} , params: [] ,componentContext: null};
},
clone_context: function(context)
{
	var new_context = ajaxart.newContext();
	for (i in context.vars) {
	   	if (context.vars.hasOwnProperty(i))
			new_context.vars[i] = context.vars[i];
	}
	new_context.params = context.params;
	new_context.componentContext = context.componentContext;
	new_context._This = context._This;
	
	return new_context;
},
setVariable: function(context,varName,varValue)
{
	if (varName == null) return;
	try {
		context.vars[""+varName] = varValue;
	} catch(e) { ajaxart.log("cannot set variable" + varName,"error"); }
},
setParameterVariable: function(context,varName,varValue)
{
	if (varName == null) return;
	try {
		context.params[''+varName] = varValue;
	} catch(e) { ajaxart.log("cannot set param " + varName,"error"); }
},
getVariable: function(context,varName)
{
	if (!varName) return [];
	varName = '' + varName;
	var val = context.params && context.params[varName];
	if (val) {
		if (val.isParamScript) {
			if (val.script) 
				return [val.script];
			else
				return [];
		}
		return val;
	}
	if (varName == "_This" && context._This) return [context._This];
	
	val = context.vars && context.vars[varName];
	if (val) return val;

	var func = context.vars._AppContext && context.vars._AppContext[0].Vars && context.vars._AppContext[0].Vars[varName];
	func = func || context.vars._GlobalVars && context.vars._GlobalVars[0][varName];
	if ('function' == typeof func) 
		val = func(varName,context);
	if (val) return val;
	
	return [];
},
istrue: function(item)
{
	if (!item) return false;
	return (ajaxart.totext(item) == "true");
},
tobool_array: function(arr)
{
	return ajaxart.totext_array(arr) == "true";
},
totext_array: function(arr)
{
	if (arr == null || arr.length == 0) return '';
	return ajaxart.totext_item(arr[0]);
},
totext: function(item) 
{
	if (aa_isArray(item)) return ajaxart.totext_array(item);
	return ajaxart.totext_item(item);
},
totext_item: function(item)
{
	if (item == null || item == undefined) return '';
	if (typeof item == 'string') return item;
	if (item.nodeType && item.nodeType == 2) return item.nodeValue;
	
	if (ajaxart.ishtml_item(item))
		return ajaxart.xml2text(item);

	if (ajaxart.isxml_item(item))
	{
		if (item.nodeValue != null) return item.nodeValue;
		// if has no sub elements : return inner text
   		for (var child = item.firstChild; child; child=child.nextSibling)
			if (child.nodeType == 4 && child.nodeValue) // promote cdata
				return child.nodeValue;
			else if (child.nodeType == 1) 
				return ''; // mixed 
		if (item.text != null) return item.text;
		return item.textContent;
	}
	if (item.GetValue)
		return '' + item.GetValue();

	return '' + item;
},
subprofiles: function (profile,field) 
{
  return ajaxart.childElems(profile,field);
},
runsubprofiles: function (data,profile,field,context,trycatch_oneachitem)
{
	var subProfs = ajaxart.childElems(profile,field);
	var out = [];
	for(var i=0;i<subProfs.length;i++) {
		if (ajaxart.debugmode)
			ajaxart.concat(out,ajaxart.run(data,subProfs[i],'',context) );
		else {
 		  try {
		    ajaxart.concat(out,ajaxart.run(data,subProfs[i],'',context) );
		  }
		  catch(e) {
			if (trycatch_oneachitem != true) throw(e);
			ajaxart.logException(e);
		  }
		}
	}
	return out;
},
each: function(arr,func)
{
	for(var i=0;i<arr.length;i++)
		func(arr[i],i);
},
load_xtml_content: function(xtml_name,xtml)
{
	if (xtml == null) { 
		alert('could not load xtml ' + xtml_name); 
		if (window.console) console.error('could not load xtml ' + xtml_name); 
		return;
	}
	if (xtml.getAttribute("package") == "true") {
		var plugins = ajaxart.childElems(xtml,"*");
		ajaxart.each(plugins,function(plugin_xml) {
			ajaxart.load_xtml_content(xtml_name,plugin_xml);
		});
		return;
	}
	plugin_name = xtml.getAttribute("ns");
	if (! plugin_name || plugin_name == '')
		plugin_name = xtml.getAttribute("id");
	if (! plugin_name || plugin_name == '') {
		ajaxart.log("xtml file does not have ns or id attribute in the main xtml element. Tag: " + aa_tag(xtml), "error");
		ajaxart.log();
		return;
	}
	xtml.setAttribute("file",xtml_name);
		
	var globalsInFile = ajaxart.childElems(xtml,"*");
	ajaxart.each(globalsInFile,function(item) {
		switch (item.tagName) {
		case "Component":
			var id = item.getAttribute("id");
			if (ajaxart.components[plugin_name] == null)
				ajaxart.components[plugin_name] = [];
			ajaxart.components[plugin_name][id] = item;
			aa_load_inplace_gc(item,plugin_name);
			break;
		case "C":
			var id = item.getAttribute("id");
			if (ajaxart.components[plugin_name] == null)
				ajaxart.components[plugin_name] = [];
			ajaxart.components[plugin_name][id] = item;
			break;
		case "Usage":
			if (ajaxart.usages[plugin_name] == null)
				ajaxart.usages[plugin_name] = [];
			
			ajaxart.usages[plugin_name].push(item);
			break;
		case "Plugin":
			if (ajaxart.plugins[plugin_name] == null)
				ajaxart.plugins[plugin_name] = [];
			
			ajaxart.plugins[plugin_name] = item;
			break;
		case "Type":
			var id = item.getAttribute("id");
			ajaxart.types[plugin_name + "_" + id] = item;
			break;
		}
	});
},
parsexml: function(contents, filename, errorMsgOut, onlyWarning,baseXml)
{
	return aa_parsexml(contents, filename, errorMsgOut, onlyWarning,baseXml);
},
childElem: function(parent,elemName)
{
	if ( parent == null || parent.childNodes == null ) return null;
	var node = parent.firstChild;
	while (node)
	{
		if (node.nodeType == 1) {
			if (elemName == "*") return node;
			if (node.tagName == elemName) return node; 
		}
		node=node.nextSibling;
	}
	return null;
},

childElems: function(parent,elemName)
{
	var out = [];
	if ( parent == null || parent.childNodes == null ) return out;
	var node = parent.firstChild;
	while (node)
	{
		if (node.nodeType == 1) {
			if (elemName == "*") out.push(node);
			if (node.tagName == elemName) out.push(node);   
		}
		node=node.nextSibling;
	}
	return out;
},

childElemByAttrValue: function(parent,elemName,attrName,attrValue)
{
	if ( parent == null || parent.childNodes == null ) return null;
	for(var i=0;i<parent.childNodes.length;i++)
	{
		var node = parent.childNodes.item(i);
		if (node.nodeType != 1) continue;
		if (elemName == "*" || node.tagName == elemName) // TODO: if BackEnd run this loop with node.getTagName
			if (node.getAttribute(attrName) == attrValue)
				return node;
	}
	return null;
},
isxml_array: function(arr)
{
	if (arr.length == 0) return false;
	return ajaxart.isxml_item(arr[0]);
},
isxml_item: function(xml)
{
	if (xml == null) return false;
	return (xml.nodeType != null);
},
isxml: function(xml)
{
	if (aa_isArray(xml)) return ajaxart.isxml_array(xml);
	return ajaxart.isxml_item(xml);
},
isObject_array: function(array) {
	return array.length > 0 && ajaxart.isObject(array[0]); 
},
isObject: function(item) {
    if (!item || item.nodeType) return false; 
	var type =  Object.prototype.toString.call(item);
	if (type === '[object Array]' && item.length > 0) 
		return ajaxart.isObject(item[0]);
	return type === '[object Object]';
},
ishtml_array: function(arr)
{
	if (arr.length == 0) return false;
	return ajaxart.ishtml_item(arr[0]);
},
ishtml_item: function(item)
{
	if (!item || !item.ownerDocument || !item.nodeType) return false;
	return (item.body || item.ownerDocument.body) ? true : false;
},
ishtml: function(item)
{
	if (!item) return false;
	if (aa_isArray(item) && item.length > 0) 
		return ajaxart.ishtml_item(item[0]);
	else
		return ajaxart.ishtml_item(item);
},
urlparam: function(strParamName)
{
    var strHref = window.location.href;
    if (strHref.indexOf('#') > -1) strHref = strHref.substr(0,strHref.indexOf("#"));
    if ( strHref.indexOf("?") > -1 ) {
        var strQueryString = strHref.substr(strHref.indexOf("?")+1);
        var aQueryString = strQueryString.split("&");
        for ( var iParam = 0; iParam < aQueryString.length; iParam++ ){
          var aParam = aQueryString[iParam].match(/([^=]*)=(.*)/); 
          if (aParam && aParam[1] == strParamName)
            return aParam[2] && unescape(aParam[2]).replace(/_AMP_/g,'&');
        }
      }
    return "";
},
xtmls: null,
xml: {
	attributeObject: function(parent,attrName)
	{
		if ( parent == null || parent.childNodes == null ) return null;
		for(var i=0;i<parent.attributes.length;i++)
		{
			if (parent.attributes.item(i).nodeName == attrName)
				return parent.attributes.item(i);
		}
		return null;
	}
},
trycatch : function(func, whenerror) {
	if (ajaxart.debugmode)
		return func();
	
	try {
		return func();
	} catch(e) {
		if (e == "endless loop") throw e;
		return whenerror(e);
	};
}
};

function aa_componentById(id,type)
{
	if (!id) return null;
	type = type || 'components';
	var middlePos = id.indexOf('.');
	var ns = id.substring(0,middlePos);
	var compName = id.substr(middlePos+1);
	var result = ajaxart[type][ns] && ajaxart[type][ns][compName];
	if (!result) 
		ajaxart.log('Can not find : ' + id + ' in ' + type,'error');
	return result;
}
function aa_get_default_value(parent_comp,field)
{
	if (!parent_comp) return null;
	var default_value = ajaxart.default_values[parent_comp + "__" + field];
	if (!default_value) {
		var global = aa_componentById(parent_comp);
		var param = ajaxart.childElemByAttrValue(global,"Param","name",field);
		if (param && aa_hasAttribute(param,'Default'))
			default_value = ajaxart.xml.attributeObject(param,"Default");
		else
			default_value = ajaxart.childElem(param,"Default");
		
		field_script = ajaxart.default_values[parent_comp + "__" + field] = default_value || 'none';
	}
	if (default_value === 'none') return null; // === for IE8
	return default_value;
}

function aa_compile(script)
{
	  var xtml = script.getAttribute('Xtml');
	  if (script.getAttribute('Field') != null) return null;
	  
	  if (xtml == null || xtml.length < 4) return null;
	  if (xtml.charAt(0) == '%' && xtml.charAt(1) == '$') {
		  var slashPos = xtml.indexOf('/');
		  if (slashPos == -1) return null;
		  if (xtml.split('/').length != 2) return null;
		  
		  var varName = xtml.substring(2,slashPos);
		  var funcName = xtml.substring(slashPos+1,xtml.length-1);
		  
		  var myFunc = function(varName,funcName) { return function(data,context) { 
			  if (script.getAttribute('Input') != null)
				  data = ajaxart.dynamicText(data,script.getAttribute('Input'),context);
			  
			  var struct = ajaxart.getVariable(context,varName);
			  if (struct == null || ! ajaxart.isObject_array(struct)) { return ajaxart.run(data,script,'',context); }
			  var xtml = struct[0][funcName];
			  if (xtml == null) return [];
			  
			  if (xtml.compiled == "same") return data;
			  
		  	  var newContext = ajaxart.newContext();
		  	  
			  if (xtml.context != null) { // the xtml object comes with its own context
			  	  newContext.params = xtml.context.params;
			  	  newContext.componentContext = xtml.context.componentContext;
			  } 
		      newContext.vars = context.vars;
			  if (xtml.objectForMethod)
				  newContext._This = xtml.objectForMethod[0];
			  
			  if (xtml.compiled == null)
			    return ajaxart.run(data,xtml.script,'',newContext);
			  else
				return xtml.compiled(data,newContext);
			  
		  } }
		  return myFunc(varName,funcName);
	  }
	  return null;
}
function ajaxart_runcompiled_text(compiledFunc, data, profile, field ,context)
{
	if (compiledFunc == 'same') return ajaxart.totext_array(data);
	if (compiledFunc == null)
		return aa_text(data,profile,field,context);
	else
		return ajaxart.totext_array(compiledFunc(data,context));
}
function ajaxart_runcompiled_bool(compiledFunc, data, profile, field ,context, empty_value_is_true)
{
	var text_val;
	if (compiledFunc == 'same') text_val = ajaxart.totext_array(data);
	if (compiledFunc == null)
		return aa_bool(data,profile,field,context,empty_value_is_true);
	else
		text_val = ajaxart.totext_array(compiledFunc(data,context));
    if (text_val == "") return (empty_value_is_true) ? true : false;
    if (text_val == "false") return false;
    if (text_val == "true") return true;

    if (! isNaN(text_val)) return false;// in js : if(2) == true
	var boolean_result = false;
	text_to_eval = "if (" + text_val + ") boolean_result=true;";
	try { eval(text_to_eval); }
	catch(e) { ajaxart.log("Failed to evaluate boolean expression: " + text_val + "," +  e.message
			+ "\n script :" + aa_xtml_path(profile,"id",true),"warning"); }
    return boolean_result;
}

function aa_totext(data)
{
	if (typeof(data) == "string") return data;
	if (data == null || data.length == 0) return "";
	return ajaxart.totext_item(data[0]);
}
function aa_tobool(data)
{
  if (data == null || data.length == 0) return false;
  if (ajaxart.totext_array(data)=="true") return true;
  return false;
}
function aa_frombool(bool) 
{
  return bool ? ["true"] : [];
}
function aa_fromPromise(promise) 
{
	return promise ? [promise] : [];
}
function aa_paramExists(profile,param,excludeEmptyAttribute)
{
  var script = ajaxart.fieldscript(profile,param,true);
  if (script == null) return false;
  if (script.nodeType == 1 && !script.getAttribute('t') && !script.getAttribute('value')) return false;
  if (excludeEmptyAttribute && profile.getAttribute(param) == '') return false;
	  
  return true;
}
function aa_first(data,script,field,params,method) {
	var result = ajaxart.run(data,script,field,params,method);
	if (result.length == 0) return null;
	return result[0];
}
function aa_text(data,script,field,params,method,booleanExpression)
{
	if (booleanExpression) 
		return ajaxart.totext(ajaxart.run(data,script,field,params,method,booleanExpression));
	return ajaxart.totext_array(ajaxart.run(data,script,field,params,method,booleanExpression));
}
function aa_int(data,script,field,params,method)
{
	var result = ajaxart.totext_array(ajaxart.run(data,script,field,params,method));
	if (!result) return null;
	return parseInt(result);
}
function aa_float(data,script,field,params,method)
{
	var result = ajaxart.totext_array(ajaxart.run(data,script,field,params,method));
	if (!result) return null;
	return parseFloat(result);
}
function aa_bool(data,script,field,params,method,empty_value_is_true)
{
	var result = aa_text(data,script,field,params,method,true);

    if (result == "") return (empty_value_is_true) ? true : false;
    if (result == "false") return false;
    if (result == "true") return true;

    if (! isNaN(result)) return false;// in js : if(2) == true
    var boolean_result = false;
    text_to_eval = "if (" + result + ") boolean_result=true;";
    try { 
    	eval(text_to_eval); 
    }	catch(e) { 
    	ajaxart.log("Failed to evaluate boolean expression: " + result + "," +  e.message + "\n script :" + aa_xtml_path(script,"id",true),"warning"); 
    }
    return boolean_result;
}
function aa_tag(item)
{
	return item.tagName;
}
function aa_hasAttribute(elem,attr)
{
	if (window.jBartNodeJS) return jBartNodeJS.hasAttribute(elem,attr);
	return elem.getAttribute(attr) !== null;
}

function aa_gcs(plugin, gcs) {
	if (!ajaxart.gcs[plugin])
		ajaxart.gcs[plugin] = gcs;
	else {
		var plugin = ajaxart.gcs[plugin];
		for (var gc in gcs)
		   	if (gcs.hasOwnProperty(gc))
				plugin[gc] = gcs[gc];
	}
}

function aa_trace_run_for_preview(field_script,data,out,context,origData) {
		for (i=0; i<ajaxart.xtmls_to_trace.length; i++)
		 if (field_script == ajaxart.xtmls_to_trace[i].xtml)
			 ajaxart.fill_trace_result(ajaxart.xtmls_to_trace[i].results,data,out,context,origData);

	if (jBart.previewCircuit) {
		if (ajaxart.xtmls_to_trace && ajaxart.xtmls_to_trace[0].xtml == field_script)	{ // probing current item
			jBart.previewCircuit.itemsFound++;
			if (jBart.previewCircuit.itemsFound >= jBart.previewCircuit.maxItemsToFind) {
				throw { BreakPreviewCircuit:true, message:"Calculation was cut-off after " + jBart.previewCircuit.itemsFound + " items" };
			}
		}
		if (Date.now() - jBart.previewCircuit.startTime > jBart.previewCircuit.maxTime) {
			throw { BreakPreviewCircuit:true, message:"Calculation was cut-off after " + jBart.previewCircuit.maxTime + " ms"};
		}
   }
}
function aa_same(data) { return data; };

aa_determine_device();
function aa_extend(obj,extra) {
	if (!obj || !extra) return obj;
	for (var elem in extra)
		if (extra.hasOwnProperty(elem))
			obj[elem] = extra[elem];
	return obj;
}
function aa_defaults(obj,extra) {
	obj = obj || {};
	for (var elem in extra) {
		if (typeof(obj[elem]) == 'undefined' && extra.hasOwnProperty(elem))
			obj[elem] = extra[elem];
	}
	return obj;
}

// loading dev
function aa_handleHttpError(e,options,context)
{
	try
	{
		var text = "HTTP error. url: " + options.url + " status: " + e.statusText;
	//	if (window.aad_showProgressIndicator)
	//		aad_showProgressIndicator(aa_ctx(ajaxart.newContext(), { ProgressIndicationText: [text] }),true);
		ajaxart.log(text,'error');
	} catch(e) {}
}

aa_extend(ajaxart,{
	load_usage_plugin: function(plugin_name,xtml_name)
	{
	  if ( xtml_name == null)
		  xtml_name = "plugins/"+plugin_name+"/"+plugin_name+"_usage.xtml";
		  
	  
	},
	load_plugin: function(plugin_name,xtml_name)
	{
		if (xtml_name == null)
			xtml_name = "plugins/" + plugin_name + "/" + plugin_name + ".xtml?cacheKiller="+new Date().getTime();
		ajaxart.loading_objects++;
		  $.ajax({
			   type: "GET",
			   url: xtml_name,
			   success: function (xtml_content) {
			   		xtml_content = xtml_content.replace(/\r([^\n])/g,'\r\n$1');	// adding \n when having only \r, otherwise newlines are not shown, most relevant for CDATA content
			  		var xtml = aa_parsexml(xtml_content, xtml_name);
			  		ajaxart.load_xtml_content(xtml_name,xtml);
			  		ajaxart.object_finished_loading();
		  		},
		  		error: function (e){ 
		  			aa_handleHttpError(e,this);
					ajaxart.log("failed loading plugin " + xtml_name + "," + e.message,"error"); 
					ajaxart.object_finished_loading();
				}
		  }); 
	},
	load_xtml: function(file_name)
	{
	  jQuery.ajax({ url: file_name, cache: false, async: false,
		   success: function (xtml_content) {
		  		var xtml = aa_parsexml(xtml_content, file_name);
		  		ajaxart.load_xtml_content(file_name,xtml);
	  		},
	  		error: function (e){ 
	  			aa_handleHttpError(e,this);
				ajaxart.log("failed loading xtml file " + file_name + "," + e.message,"error"); 
			}
	  }); 
	}
});

// loading RT
var ajaxart_altPressed = false;
function aa_register_document_events(context) {
	if (jBart.vars.document_events_registered) return;
	jBart.vars.document_events_registered = true;
  	jQuery(document).keydown(function(event) { 
  		if (event.keyCode == 18)
  			ajaxart_altPressed = true;		  		
	  	if (event.keyCode == 192 && event.ctrlKey && !event.shiftKey) { // ctrl+`  (~)
	  		ajaxart.inPreviewMode = false;
	  		if (ajaxart.gcs.debugui)
	  		  aa_run_component("debugui.ShowDebugUi",[],context);
	  	}
	  	if (event.keyCode == 192 && event.ctrlKey && event.shiftKey) { // ctrl+Shift+`  (~)
	  		aa_run_component("debugui.OpenComponent",[],context);
	  	}
	  	if (event.keyCode == 8) {
  	        var element = (typeof(event.target)== 'undefined')? event.srcElement : event.target;
	  		if (element.tagName.toLowerCase() != 'input' && element.tagName.toLowerCase() != 'textarea' && !$(event.target).hasClass('nicEdit-main')) {
	  		  ajaxart_stop_event_propogation(event);
	  		  return false;
	  		}
	  	}
	  	if (event.keyCode == 88 && ajaxart_altPressed && ajaxart.jbart_studio) { // alt+x
	  		var element = (typeof(event.target)== 'undefined')? event.srcElement : event.target;
	  		ajaxart.runComponent('xtml_dt.GlobalOpenAAEditor',[element]);
	  	}
  	});
  	jQuery(document).keyup(function(event) { ajaxart_altPressed = false; });
} 

aa_extend(ajaxart,{
	start: function(divId,data,script)
	{
		jQuery(document).ready(function() {
			ajaxart.ready(function() {
				if (ajaxart.urlparam('debugmode')=="true") ajaxart.debugmode = true;
				if (ajaxart.isChrome) jQuery("body").addClass('chrome');
				
			  	var scriptXml = aa_parsexml(script);
			  	if (data == null) data = [""];

			  	var context = ajaxart.newContext();
			  	var result = ajaxart.run(data,scriptXml,"",context);
			  	var div = jQuery(divId).addClass("ajaxart ajaxart_topmost " + ajaxart.deviceCssClass);
			  	ajaxart.databind([div[0]],data,context,scriptXml,data);
		  		if (div.length > 0 && ajaxart.ishtml(result)) {
			  		div[0].appendChild(result[0]);
			  		aa_element_attached(result[0]);
				  	aa_register_document_events(context);
			  	} else {
			  		ajaxart.log("scriptxml did not return html","warning");
			  	}
//			  	var debugui = ajaxart.run(data,aa_parsexml('<Control t="debugui.HiddenButton" />'),"",context);
			  	
			  	var loading = jQuery("#ajaxart_loading");
			  	if (loading.length > 0 && ! loading[0].IsUsed)
			  		loading.hide();
	    });
	  }); 
	},
	ready: function(func)
	{
		  ajaxart.ready_func = func;
		  if (ajaxart.loading_objects == 0 ) func();
	},
	object_finished_loading: function()
	{
		var loading_div = jQuery("#ajaxart_loading");
		if (loading_div.length > 0)
			loading_div.html(loading_div.html()+".");
		ajaxart.loading_objects--;
		if (ajaxart.loading_objects == 0 && ajaxart.ready_func != null) 
			  ajaxart.ready_func();
	}
});

// log & trace
function aa_try_probe_test_attribute(script,field,data,out,context,origData)
{
   for (i=0; i<ajaxart.xtmls_to_trace.length; i++)
	   if (ajaxart.xtmls_to_trace[i].xtml.nodeType == 2 && ajaxart.xtmls_to_trace[i].xtml.nodeName == field)
		   if (ajaxart.xml.parentNode(ajaxart.xtmls_to_trace[i].xtml) == script)
			   ajaxart.fill_trace_result(ajaxart.xtmls_to_trace[i].results,data,out,context,origData);
}

function aa_index_of_element(elem)
{
	for (var k=0,e=elem; e = e.previousSibling; ++k);
	return k;
}
function aa_xtml_path(elem)
{
	var path = [];
	while(elem && elem.nodeType != 9 && elem.tagName != 'Component')
	{
		if (elem.nodeType == 1) // Elem 
		{
			var id = elem.getAttribute('id') || elem.getAttribute('ns') || elem.getAttribute('Name') || elem.getAttribute('Of') || ('' + aa_index_of_element(elem));
			path.push(aa_tag(elem) + '[' + id + ']');
		}
		else if (elem.nodeType == 2) // Attribute
			path.push("@" + elem.name);
		elem = elem.parentNode;
	}
	if (elem && elem.nodeType == 1)
		path.push(elem.getAttribute('id') || elem.getAttribute('ns') + ':/');
	return path.reverse().join('/');
}

function aa_st() 
{
	var result = "";
	var last_component = "";
	for(var i=0;i<ajaxart.stack_trace.length;i++)
	{
		var comp_node = aa_xtml_path(ajaxart.stack_trace[i],"id",true).split("@id='");
		if (comp_node.length > 1) 
			comp = comp_node[1].split("'")[0];
		else
			comp = comp_node[0];
		if (last_component == comp) continue;
		result += comp + ",";
		last_component = comp;
	}
	return result;
}

aa_extend(ajaxart,{
	logException: function(e,prefix)
	{
		var msg = e.message || e;
		if (e.stack) {
			msg += '\n' + e.stack;
		}
		if (prefix) msg = prefix + ' - ' + msg;
		ajaxart.log(msg,'error');
	},
	log: function(message,type)
	{
		if (type == null) type = "";
		var log_message = type + " - " + message;
		ajaxart.log_str += log_message + "\n\r";
		if (window.jBart) jBart.logs_str = ajaxart.log_str || '';

		if (type == "") type = "general";
		if (ajaxart.logs[type] == null)
			ajaxart.logs[type] = [];
//		if (type=="error") debugger;
		ajaxart.logs[type].push(message);
		if (type == "error" && ajaxart.debugmode)
			debugger;
		
//		if (ajaxart.log_level == "error" && type == "warning") return;
		if (!window.jBartNodeJS) {
			var msg = typeof(aa_xmlescape) == 'function' ? aa_xmlescape(log_message) : log_message;
			$("#ajaxart_log").append($("<div class='aa_log " + type + "'>"+msg+"</div>"));
		}
		
		try {
		  jBart.trigger(jBart,'log',{ message: message, type: type});
		} catch(e) {}

		if (type=='error' && window.console) console.log('error - ' + log_message);
		if (type == 'error' && ajaxart.jbart_studio) {	// adding error sign
			setTimeout( function() {
				jQuery(".fld_toolbar_errors_sign").removeClass("hidden"),1
			});
		}
	},
	tryShortXmlWithTag: function(xml,attrName)
	{
		if (aa_hasAttribute(xml,attrName))
			return "<" + aa_tag(xml) + " " + attrName + '="' + xml.getAttribute(attrName) + '" .../>';  
	},
	fill_trace_result: function(results, input,output,params,origData)
	{
		var result = { isObject: true, Input: input, Output: output, context:params }
		if (origData != null)
			result.OrigData = origData;
		results.push(result);
	},
	text4trace: function(obj, depth, max_depth)
	{
		if (depth == null) depth=0;
//		if (!max_depth) debugger;
		if (depth >= max_depth) return "...";
		if (typeof(obj) == "undefined") return "";
		
		if (!aa_isArray(obj)) obj=[obj];
		if (typeof(obj) == undefined || obj==null) return "";
		var out = "";
		if (obj.length > 1) out = obj.length + " items : \r\n";
		ajaxart.each(obj, function(item) {
			if (item == null) { return; }
			if (typeof(item) == "function") return;
			if (ajaxart.isxml(item))
			{
			  var xml_val = "";
			  if ( depth+1 == max_depth && item.nodeType == 1)
			  {
				  xml_val = ajaxart.tryShortXmlWithTag(item,"name");
				  if (xml_val == null) xml_val = ajaxart.tryShortXmlWithTag(item,"id")
				  if (xml_val == null) xml_val = ajaxart.tryShortXmlWithTag(item,"Name")
				  if (xml_val == null) xml_val = "<" + aa_tag(item) + " .../>";
			  }
			  else if (item.nodeType == 2) // attribute
				  xml_val = "@" + item.nodeName + '="' + aa_xmlescape(ajaxart.xml2text(item)) + '"';
			  else
				  // xml_val = aa_xmlescape( ajaxart.xml2text(item) );
				  xml_val = ajaxart.xml2text(item);
				 
			  if (ajaxart.ishtml(item))
	  	    out += "html: " +  xml_val;
			  else
			  	out += "xml: " +  xml_val;
			}
			else if (ajaxart.isObject(item)) {
				if (depth+1 == max_depth) {
					out += "object (";
					for (i in item)
						if (item.hasOwnProperty(i) && i != "isObject")
							out += i + ", ";
					out = out.substring(0,out.length-2) + ")";
				}
				else {
					out = { isObject: true };
					for (i in item) {
						if (item.hasOwnProperty(i) && i != "isObject" && i != "XtmlSource") {
							var item_trace = ajaxart.text4trace(item[i],depth+1,max_depth);
							if (item_trace.length > max_depth && item_trace.substring(0,3)=="xml")
								item_trace = { isObject: true, xml:item_trace };
							out[i] = item_trace;
		//				  out += "" + i + ": " + ;
						}
					}
					return out;
				}
			}
			else if (typeof(item.script) != "undefined") {
				out += "script:" + ajaxart.text4trace(item.script,depth+1,max_depth);
			}
			else {
//					var text = aa_xmlescape( ajaxart.totext(item) );
//					out += "text:" + text.replace(new RegExp("\n", "g"), "<br/>");
				out += "text:" + ajaxart.totext(item);
			}
			out += "\r\n";
		});
		return out;
	},
	trace: function(script,input,output,context,trace_param,level) 
	{
		if (ajaxart.xtmls_to_trace.length > 0) return;	// not having trace inside aaeditor tester
		var level_int = 2;	// default
		if (level != null && !isNaN(parseInt(level)))
			level_int = parseInt(level);
		var trace_item = { isObject: true };
		message = "<b>id:</b> " + aa_xtml_path(script,"id",true);
		if (typeof(trace_param) != "undefined")
			message += "/" + trace_param;
//		message += "<br> <b>stack:</b> " + aa_st();
//		message += "<br> <b>input:</b> " + ajaxart.text4trace(input,-1,level_int) + "<br> <b>output:</b> " + ajaxart.text4trace(output,-1,level_int);
		trace_item.id = aa_xtml_path(script,"id",true);
		if (trace_param != null)
			trace_item.id += "/" + trace_param;
		trace_item.stack = aa_st();
		trace_item.input = ajaxart.text4trace(input,-1,level_int);
		trace_item.output = ajaxart.text4trace(output,-1,level_int);
		trace_item.params = [];
		trace_item.context = [];
		if (level_int > 0)
		{
			message += "<b>params:</b> <ul>";
			for (varname in context.params) {
				message += "<li>" + varname + ": " + ajaxart.text4trace(ajaxart.getVariable(context,varname),0,0) + "</li>";
				trace_item["params"].push({ isObject: true,	name:	varname, value: ajaxart.text4trace(ajaxart.getVariable(context,varname),0,level_int)});
			}
			message += "</ul>";
			message += "<br> <b>stack:</b> <ul>";
			for (varname in context.vars) {
				var txt = ajaxart.text4trace(ajaxart.getVariable(context,varname),0,level_int);
				message += "<li>" + varname + ": " + txt + "</li>";
//				if (varname == "_ServerAdapter") debugger;
				trace_item["context"].push({ isObject: true, name: varname, value: [txt] });
			}
			message += "</ul>";
			message += "<b>server data: </b>";
		}
		trace_item["context"] = trace_item["context"].reverse();
		
//		if (typeof(console) != "undefined") 
//		  console.log(message);
		
//		jQuery("#ajaxart_trace_control").append(message);
//		jQuery("#ajaxart_trace_control").append("<br><br>");
		ajaxart.traces.push(trace_item);
		
		if (!window.jBartNodeJS)
			$("#trace_bugs").html("There are traces which can cause performence problems");
	},
	write_profiling_at_end: function(start_time,component_id) {
		 var time_passes = new Date().getTime() - start_time;
		 if (ajaxart.profiling_of_globals[component_id] == null)
			 ajaxart.profiling_of_globals[component_id] = { calls:0, total:0 };
		 ajaxart.profiling_of_globals[component_id].calls++;
		 ajaxart.profiling_of_globals[component_id].total += time_passes;
	}
});

// general
function aa_get_func(code,notReturningValue) { // caching functions to save expensive calls to eval
	if (!ajaxart.functions_cache)
		ajaxart.functions_cache = {};
	if (code == "") return function(){}
	if (code.indexOf('function') != 0) {
		if (notReturningValue) code = 'function() { ' + code + '}';
		else code = 'function() { return ' + code + '}';
	}
	if (!ajaxart.functions_cache[code])
		try {
			ajaxart.functions_cache[code] = eval('f =' + code);
		} catch (e) { 
			ajaxart.log("RunJavaScript: " + e.message + '   code = ' + code, "error"); 
		}
	return ajaxart.functions_cache[code];
}
function aa_run_js_code(code,data,context,elem)
{
	var func = aa_get_func(code);
	if (!elem)
		if (context.vars._ElemsOfOperation && context.vars._ElemsOfOperation.length)
			elem = context.vars._ElemsOfOperation[0];
	elem = elem || aa_var_first(context,'ControlElement');
	
	var data_item = data;
	if (data.length == 1)
		data_item = data[0];
	try {
		if (func)
			return func(data_item,elem,context);
	} catch(e) {
		ajaxart.logException(e,'aa_run_js_code failed, code: ' + code); 
	}
	return null;
}

aa_extend(ajaxart,{
	xmlunescape: function(text) 
	{
		if (aa_isArray(text))
		{
			if (text.length > 0 ) return aa_xmlescape(text[0]);
			return "";
		}
		if (ajaxart.isObject(text))
			return "struct";
		return text.replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, "\"").replace(/&apos;/g, "'").replace(/&#xa;/g, "\n");  
	},
	isattached: function(elem)
	{
		if (elem == null) return false;
		if (ajaxart.isIE) return jQuery(elem).parents("body").length > 0;
		return (elem.offsetParent || jQuery(elem).parents("body").length > 0);
	},
	getControlElement: function(params, single)
	{
	  var elem = ajaxart.getVariable(params,"ControlElement");
	  if (typeof(elem.controlElement) != "undefined")
		  elem = elem.controlElement;
	  
	  if (single != null && single == true) {
		  if (elem == null || elem.length == 0)
			  return null;
		  return elem[0];
	  }
	  if (elem == null) return [];
	  return elem; 
	},

	writevalue: function(data, newValueObj,disableXmlChangeEvent) {
	var assigned = false;
	if (data == null || data.length == 0 || data[0] == null) return assigned;
	var xml = data[0];
	if (xml.WriteValue) return xml.WriteValue(aa_isArray(newValueObj) ? newValueObj[0] : newValueObj); 
	
	if (ajaxart.isxml(newValueObj))
	{
		var newNode = newValueObj; 
		if (aa_isArray(newValueObj))
			newNode = newValueObj[0];

		if (newNode.nodeType == 1 && xml.nodeType == 1)
		{
		  if (newNode == xml) return;
		  if (aa_tag(newNode) == aa_tag(xml))
			  ajaxart.xml.copyElementContents(xml,newNode);
		  else
			  ajaxart.replaceXmlElement(xml,newNode);
		  assigned=true;
		}
	}
	if (!assigned)
	{
		var newValue = ajaxart.totext(newValueObj);
		if (ajaxart.isxml(xml)) {
			if (xml.nodeType == 2 && window.jBartNodeJS) {
				window.jBartNodeJS.setAttributeValue(xml,newValue);
			} else if (xml.nodeType == 2 || xml.nodeType == 3 || xml.nodeType == 4)  {// attribute or inner text
				if (newValue == xml.nodeValue) return true; // no need to do anything like auto save
				xml.nodeValue = newValue;
			}
			else {// inner xml for element
				var text_node = xml.firstChild;
		   		for (var child = xml.firstChild; child; child=child.nextSibling) // promote cdata
					if (child.nodeType == 4) // cdata
						text_node = child;
				if (text_node && text_node.nodeType == 3 ) // text node
					text_node.nodeValue = newValue;
				else if (text_node && text_node.nodeType == 4) // cdata
					text_node.nodeValue = newValue.replace(/\]\]>/g,']\\]>'); // BUG - escaping cdata end token - http://stackoverflow.com/questions/223652/is-there-a-way-to-escape-a-cdata-end-token-in-xml 
				else
					xml.appendChild(xml.ownerDocument.createTextNode(newValue));
			}
			assigned=true;
		} else if (typeof(xml) == "string")	{
			data[0] = ajaxart.totext(newValueObj);
			assigned=true;
		}
	}
	if (! disableXmlChangeEvent && ajaxart.isxml(xml))
		aa_triggerXmlChange(xml);
	return assigned;
},
body_contents_of_soap_envelope: function(envelope)
{
	for(var i=0;i<envelope.childNodes.length;i++)
	{
		var node = envelope.childNodes.item(i);
		if (node.nodeType == 1 && aa_tag(tagName).toLowerCase() == 'body') {
			for (var j=0;j<node.childNodes.length;j++)
			{
				var innernode = node.childNodes.item(i);
				if (innernode.nodeType == 1) return innernode; 
			}
		}
	}
	return envelope;
},
ajaxart_clean_ns: function(xmltext)
{
	xmltext = xmltext.replace(new RegExp('<[A-Za-z0-9_]*:', 'g'), '<');
	xmltext = xmltext.replace(new RegExp('</[A-Za-z0-9_]*:', 'g'), '</');
	xmltext = xmltext.replace(new RegExp('xmlns[a-zA-Z0-9_:"\'=/.-]*', 'g'), '');
	xmltext = xmltext.replace(new RegExp('[A-Za-z0-9_]*:([A-Za-z0-9_]*)="', 'g'), '$1="');

	return xmltext;
}

});
// studio 
aa_extend(ajaxart,{
	xtmls: aa_parsexml('<Plugins/>')
});
// deprecated
aa_extend(ajaxart,{
	make_array: function(input_array,func,workWithEmptyInput)
	{
		var result = [];
		ajaxart.each(input_array,function(item) {
			var myitem = func([item]);
			if (aa_isArray(myitem))
				ajaxart.concat(result,myitem);
			else if (myitem != null)
		      result.push(myitem);
		});
		if (input_array.length == 0 && (typeof workWithEmptyInput == "undefined" || workWithEmptyInput == true))
		{
			var myitem = func([]);
			if (myitem != null)
				result.push(myitem);
		}
		return result;
	},
	jrootElem: function(elemList)
	{
		var list = elemList.parents();
		if (list.length > 0 ) {
			var rootItem = list[list.length-1];
			return jQuery(rootItem);
		}
		return jQuery([]);
	},
	calcParamsForRunOn: function(params,runOn,startFrom)
	{
		var result = jQuery([]);
		if (ajaxart.ishtml(runOn))
			result = jQuery(runOn);
		else
		{
			runOn = ajaxart.totext(runOn);
//			runOn = runOn.replace(/ /g, "_");
			if (runOn == "") { 
				ajaxart.setVariable(params,"ControlElement",[]);
				return params;
			}
			var old_elem = [];
			if ( typeof(startFrom) != "undefined" ) 
			  old_elem = startFrom;
	    	else 
			  old_elem = ajaxart.getControlElement(params);
	    	
			if (old_elem.length > 0)
			  var baseElem = jQuery(old_elem);
			else
			  var baseElem = jQuery("body");
			
			if (runOn.indexOf('(') == -1) {
			  var jexp = "#"+runOn;
			  if (runOn.charAt(0) == ".") jexp = runOn;
			  try {
			  	var result = baseElem.find(jexp);
			  } catch(e) {
			  	ajaxart.log('RunOn bad expression ' + jexp);
			  	ajaxart.logException('RunOn bad expression',e);
			  	var result = jQuery([]);
			  }
			} else {
				var result = jQuery([]);
			}
			if (runOn.substr(0,3) == "up(") {
				jexp = runOn.substring(3,runOn.length-1);
				if (baseElem.filter(jexp).length != 0) // try ourselves first
					result = baseElem;
				else
					result = baseElem.parents(jexp).slice(0,1);
			}
			if (runOn.substr(0,2) == "$.") {
				var str = "result = baseElem" + runOn.substr(1);
				try { eval(str); } catch(e) {}
			}
			if (runOn.substr(0,7) == "updown(") {
				items = runOn.substring(7,runOn.length-1).split(",");
				if (items.length == 2) {
					var parent = baseElem.filter(items[0]); // try ourselves first
					if (parent.length == 0) 
						parent = baseElem.parents(items[0]);
					result = parent.find(items[1]);
				}
			}
			if (runOn.substr(0,5) == "down(") {
				jexp = runOn.substring(5,runOn.length-1);
				result = baseElem.find(jexp);
			}
			if (result.length == 0 && old_elem.length > 0)
			{
				baseElem.each(function() {
					if (this.getAttribute("id") == runOn)
						result = $([this]);
				});
			}
			try {
			  if (result.length == 0 && jexp) result = ajaxart.jrootElem(baseElem).find(jexp);
			  if (result.length == 0 && jexp) result = jQuery('body').find(jexp);
			} catch(e) {}
			if (result.length == 0)
				ajaxart.log("cannot locate " + jexp,"location");
		}

		var out = [];
		for(var i=0;i<result.length;i++) out.push(result[i]);

		params = ajaxart.clone_context(params);
		ajaxart.setVariable(params,"ControlElement",out);
			
		return params;
	},
	databind: function(bindto,data,params,script,origData)
	{
		ajaxart.each(bindto,function(item) {
			if ( ! ajaxart.ishtml(item) ) return;
			var context = {};
		  	context.data = data;
		  	context.params = params;
		  	context.script = script;
		  	context.origData = origData;
		  	/*
		  	if (ajaxart.isChrome) {	// Fix grabage collection of chrome - that cleans the databinding
		  		if (typeof(ajaxart.databoundeditems) == "undefined")
		  			ajaxart.databoundeditems = [];
		  		ajaxart.databoundeditems.push(item);
		  	}
	*/
		  	if (typeof(item["ajaxart"]) == "undefined")
		  		item["ajaxart"] = context;
		  	else
		  	{
		  		if (script != null)
		  		  item["ajaxart"].script = script;
		  		if (origData != null)
		  		  item["ajaxart"].origData = origData;
		  	}
		});
	}
});

// tests
aa_testFinished = {};
aa_tests_timeout = 0;

aa_extend(ajaxart,{
	stoptests: false,
	testResults: { summaryId : '' , failuresId: '' , successCounter: 0 , failureCounter: 0},
	debugData: [],
	runtests: function(summaryId,failuresId,onlyForPlugin)
	{
		ajaxart.testsStartTime = new Date().getTime();
		ajaxart.testResults.summaryId = summaryId;
		ajaxart.testResults.failuresId = failuresId;
		var runmore = ajaxart.urlparam('more') == "true";
		var allUsages = [];
		// run gallery items
		if (window._GalleryItems) {
		  var gitems = aa_xpath(_GalleryItems,'*');
		  for(var i=0;i<gitems.length;i++) 
			  ajaxart.concat(allUsages,bart_galleryitem_tousages(gitems[i]));
		}
		for (plugin in ajaxart.usages)
		{
			if (onlyForPlugin != null && onlyForPlugin != plugin) continue;
			for (usage in ajaxart.usages[plugin]) {
				var isTest = ajaxart.usages[plugin][usage].getAttribute("IsTest") != "false";
				if (runmore) isTest = ajaxart.usages[plugin][usage].getAttribute("IsTest") == "more";
				if (isTest)
					allUsages.push(ajaxart.usages[plugin][usage]);
			}
		}
		jQuery('#tests_count').text('Running ' + allUsages.length + ' tests');
	    ajaxart.runTestLoop(allUsages,0);
	},
	getTestName: function(prof)
	{
		var testName = '';
		if (aa_hasAttribute(prof,"Of") ) testName = prof.getAttribute("Of");
		if (aa_hasAttribute(prof,"Name") ) {
			if (testName.length > 0 ) testName += ' - ';
			testName += prof.getAttribute("Name");
		}
		return testName;
	},
	handleUsageResult: function(result,usagesArray,index,prof) 
	{
	  var testName = "";
	  if(index+1<usagesArray.length)
	  {
		var prof = usagesArray[index+1];
		if (aa_hasAttribute(prof,"Of") ) testName = prof.getAttribute("Of");
		if (aa_hasAttribute(prof,"Name") ) {
			if (testName.length > 0 ) testName += ' - ';
			testName += prof.getAttribute("Name");
		}
	  }
	  var text = "<div style='color:green;font-weight:bold'>so far " + ajaxart.testResults.successCounter + " tests succeeded. working on " + testName + "</div>";
	  document.getElementById('ajaxart_summary').innerHTML = text;
		
	  var prof = usagesArray[index];

	  if (result.length == 0) {
	    ajaxart.testResults.successCounter++;
	    if ( prof.getAttribute('AssignedTo') ) {
	    	var testName = "";
	    	if (aa_hasAttribute(prof,"Of") ) testName = prof.getAttribute("Of"); 
	    	jQuery("#"+ajaxart.testResults.failuresId).append("<div style='color:darkorange'>Test " + testName + " succeeds but assigned to " + prof.getAttribute('AssignedTo') + '</div>');
	    }
	  }
	  else  
	  {
		var testName = "";
		var href = "";
		var hrefBasic = "http://localhost/ajaxart/showsamples.html#?";
		if (aa_hasAttribute(prof,"Of") ) { testName = prof.getAttribute("Of"); href = hrefBasic + "Of=" + testName + ";"; }
		if (aa_hasAttribute(prof,"Name")) {
			if (testName.length > 0 ) testName += ' - ';
			testName += prof.getAttribute("Name");
			href = hrefBasic + "Name=" + prof.getAttribute("Name") + ";";
		}
		if (aa_hasAttribute(prof,'Of') && prof.getAttribute('Of').indexOf('gallery_') == 0) {
			var gitem = prof.getAttribute('Of').split('gallery_')[1].split('.')[0];
			var ct = jQuery(prof).parents('jbart_project').length>0 ? 'jbart_project' : 'bart_sample';
			href = 'http://localhost/ajaxart/gstudio.html?widget='+gitem+'#?gautotests=true';
		}
		ajaxart.testResults.failureCounter++;
		var assigned = "";
		if (aa_hasAttribute(prof,"AssignedTo") && prof.getAttribute('AssignedTo') != "")
			assigned = " (" + prof.getAttribute('AssignedTo') + ")";
		var failCssClass = (assigned != "") ? 'failing_test_assigned' : 'failing_test_unassigned';
	    jQuery("#"+ajaxart.testResults.failuresId).append("<a target='_blank' class='failing_test "+failCssClass+"' href='" + href + "'>Failed " + testName + assigned + "</a><br/>");
	  }
	  aa_closePopup();
	  
	  if (ajaxart.lastTestTime) {
		 var now = new Date().getTime();
		 var diff = now - ajaxart.lastTestTime;
		 var cls = (diff > 600) ? 'timing_red' : 'timing_ok'; 
		 jQuery('#tests_timing').append('<div>Running time of test ' + (index+1) + ' ('+ajaxart.getTestName(prof)+') is <span class="'+cls+'">' + diff + '<span></div>');
	  }

	  setTimeout( function() { ajaxart.runTestLoop(usagesArray,index+1) }, 1 );
	},
	runTestLoop: function(usagesArray,index,varsContext)
	{
		ajaxart.lastTestTime = new Date().getTime();
		
		if (usagesArray.length == 0) return;
		if (ajaxart.stoptests || index == usagesArray.length) // the end
		{
			var text="";
			if (ajaxart.stoptests)
				text ="<div>tests stopped</div>";
			else if (ajaxart.testResults.failureCounter == 0)
				text = "<div style='color:green;font-weight:bold'>all tests succeeded (" + ajaxart.testResults.successCounter + " tests)</div>";
			else
				text = "<div style='color:red;font-weight:bold'>" + ajaxart.testResults.failureCounter + " tests failed</div>";
			
			jQuery("#"+ajaxart.testResults.summaryId).html(text);	
			var elapsed = (new Date().getTime() - ajaxart.testsStartTime) / 1000;
			var now = '<div style="font-size:12px; margin-top:10px">Tests finished at ' + new Date().getHours() + ":" + new Date().getMinutes() + '</div>';
			jQuery("#ajaxart_tests_time").html("time (seconds): " + Math.round(elapsed) + now);
			return;
		}

		var prof = usagesArray[index];
//		if (prof.getAttribute('onlyme') != 'true') return ajaxart.runTestLoop(usagesArray,index+1,varsContext);
		var canRunNow = true;
		
		var params = ajaxart.newContext();
		if (typeof(varsContext) != "undefined") params = varsContext;
		var dataIsUsage = ( prof.getAttribute("t") == 'bart_usage.JBartUsage');
		
		if (canRunNow)
		{
			if (prof.getAttribute("t") == "ui_async.ControlUsage" ) {
				canRunNow = false;
				if (aa_tests_timeout != 0) clearTimeout(aa_tests_timeout);
				
				aa_tests_timeout = setTimeout(function() {	// fallback. if no answer in 4 seconds we go on 
					if (aa_testFinished[index]) return;
					aa_testFinished[index] = true;
					aa_tests_timeout = 0;
					ajaxart.handleUsageResult([],usagesArray,index,usagesArray[index]);
				},4000);
				
				ajaxart_RunAsync([prof],prof,params,function(result) {
					if (aa_testFinished[index]) return;
					aa_testFinished[index] = true;
					ajaxart.handleUsageResult(result,usagesArray,index,usagesArray[index]);
				});
			} 
			if (prof.getAttribute("t") == "async.JBartWidgetUsage") {
				canRunNow = false;

				var promiseHolder = {};
				var syncResult = ajaxart.run([prof],prof,'',aa_ctx(params,{_AsyncPromiseHolder: [promiseHolder]}));

				$.when(promiseHolder.promise).then(function(result) {
					result = result || syncResult;
					
					if (aa_testFinished[index]) return;
					aa_testFinished[index] = true;
					ajaxart.handleUsageResult(result,usagesArray,index,usagesArray[index]);					
				});

				if (!aa_testFinished[index]) { // fallback. if no answer in 4 seconds we go on 
					aa_tests_timeout = setTimeout(function() {	
						if (aa_testFinished[index]) return;
						aa_testFinished[index] = true;
						aa_tests_timeout = 0;
						ajaxart.handleUsageResult([],usagesArray,index,usagesArray[index]);
					},4000);
				}

			}
			if (prof.getAttribute("t") == "bart_usage.BartDataUsage") dataIsUsage = true;
		}

		if (!canRunNow) return;
	    var result = ajaxart.run(dataIsUsage ? [prof] : [],prof,'',params);
	    ajaxart.handleUsageResult(result,usagesArray,index,prof);
	}
});


// touch
ajaxart.isTouchDevice = function() { return ajaxart.isTouch; }
function aa_determine_device(userAgent) {
	var navigator = window.navigator || { userAgent : ""};
	userAgent = userAgent || navigator.userAgent.toLowerCase();
	ajaxart.isChrome = /chrome/.test(userAgent);
	ajaxart.isIE = /msie/.test(userAgent) || /trident/.test(userAgent);
	ajaxart.isIE7 = /msie 7/.test(userAgent);
	ajaxart.isIE8 = /msie 8/.test(userAgent);
	ajaxart.isIE78 = /msie 7/.test(userAgent) || /msie 8/.test(userAgent);
	ajaxart.isIE9 = /MSIE 9/.test(navigator.appVersion || '');
	ajaxart.isSafari = /safari/.test(userAgent);
	ajaxart.isFireFox = /firefox/.test(userAgent);
	ajaxart.isWebkit = /webkit/.test(userAgent);
	ajaxart.isOpera = /opera/.test(userAgent);
	ajaxart.isiPhone = /cpu iphone/.test(userAgent);
	ajaxart.isIDevice = (/iphone|ipad/gi).test(navigator.appVersion);
	ajaxart.isMobile = (/iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase()));
	ajaxart.isAndroid = /android/.test(userAgent);
	ajaxart.deviceCssClass = "";
	if (ajaxart.isChrome) ajaxart.deviceCssClass += " chrome";
	if (ajaxart.isIE) ajaxart.deviceCssClass += " ie";
	if (ajaxart.isIE7) ajaxart.deviceCssClass += " ie7";
	if (ajaxart.isIE8) ajaxart.deviceCssClass += " ie8";
	if (ajaxart.isSafari) ajaxart.deviceCssClass += " safari";
	if (ajaxart.isFireFox) ajaxart.deviceCssClass += " firefox";
	if (ajaxart.isiPhone) ajaxart.deviceCssClass += " iphone";
	if (ajaxart.isIDevice) ajaxart.deviceCssClass += " idevice";
    try {
       document.createEvent("TouchEvent");
       ajaxart.isTouch = true;
       ajaxart.deviceCssClass += " aa_touch_device";
    } catch (e) {
    	ajaxart.isTouch = false;
    }
}


// gc utils
function aa_run_component(id,input,context,params)
{
		input = input || [];
		context = context || ajaxart.newContext();
	  var xtmlElem = ajaxart.componentsXtmlCache[id];

	  if (xtmlElem == null)
	  {
  	    try 
	    {
	  	  var middlePos = id.indexOf('.');
		  var ns = id.substring(0,middlePos);
		  var compName = id.substr(middlePos+1);
	
		  if (ajaxart.components[ns] == null) { ajaxart.log("cannot find component " + id,"error");return []; }
		  var global = ajaxart.components[ns][compName];
		  if (!global)
			  { ajaxart.log("cannot find component " + id,"error"); return []; }

		  if (global.getAttribute('execution') == 'native') {
			  xtmlElem = ajaxart.componentsXtmlCache[id] = { execution: 'native' }
			  xtmlElem.profile = aa_parsexml('<xtml t=""/>');
			  xtmlElem.gc = ajaxart.gcs[ns][compName]; 
		  }
		  else 
			  xtmlElem = ajaxart.componentsXtmlCache[id] = ajaxart.childElem(global,"xtml");
	    }
   	    catch(e) { return []; }
	  }
	  if (xtmlElem == null) return [];
	  var newContext = {};
	  newContext.vars = context.vars;
	  newContext.componentContext = context.componentContext;

	  if (xtmlElem.execution == 'native') {
	  	var profile = aa_parsexml('<xtml t=""/>');
	  	profile.setAttribute('t',id);
		  for (var j in params) {
		  	newContext.vars['_PARAM_' + j] = params[j];
		  	profile.setAttribute(j,"%$_PARAM_" + j + "%");
		  }
		  return xtmlElem.gc(profile,input,newContext);
	  }	
	  
	  newContext.params = [];
	  // look for default values to get params
	  var defaultProfs = aa_xpath(xtmlElem.parentNode,'Param/Default/..').concat(aa_xpath(xtmlElem.parentNode,'Param/@Default/..'));
	  for(var i=0;i<defaultProfs.length;i++) {
		  var val = ajaxart.run(input,defaultProfs[i],'Default',context);
		  var name = defaultProfs[i].getAttribute('name');
		  if (name != null && name != "")
			  newContext.params[name] = val;
	  }
	  for (var j in params) newContext.params[j] = params[j];
	  return ajaxart.run(input,xtmlElem,'',newContext);
}

ajaxart.runComponent = function(component,data,context) {
	context = context || ajaxart.newContext();
	data = data || [];
	var profile = aa_parsexml('<xtml t="' + component + '" />');
	return ajaxart.run(data,profile,'',context);
}
ajaxart.concat = function(source,toadd) {
	if (toadd == null) return;
	for(var i=0;i<toadd.length;i++)
		source.push(toadd[i]);
}
function ajaxart_addScriptMethod(structItem,structField,profile,field,context,paramVars) 
{
	var fieldscript = (field == "") ? profile : ajaxart.fieldscript(profile,field,true);
	
	structItem[structField] = { 
			script: fieldscript , context: context, objectForMethod: [structItem], 
			compiled: ajaxart.compile(fieldscript,'',context,paramVars) 
	};
}
function ajaxart_addScriptParam_js(structItem,structField,jsFunc,context)
{
	structItem[structField] = {	context: context , compiled: jsFunc };
}
function aa_addMethod_js(structItem,structField,jsFunc,context)
{
	structItem[structField] = {	context: context , compiled: jsFunc, objectForMethod: [structItem] };
}
function aa_ctx(context,vars)
{
  var out = ajaxart.clone_context(context);
  for (var i in vars) out.vars[i] = vars[i];
  return out;
}
function aa_merge_ctx(context,contextVars,moreVars)
{
  var result = { params: context.params , vars: contextVars.vars , componentContext: context.componentContext , _This: contextVars._This};
  if (moreVars)
	  result = aa_ctx(result,moreVars);
  return result;
}

function aa_toint(data)
{
	if (data.length == 0) return 0;
	var txt = aa_totext(data);
	if (txt == '') return 0;
	return parseInt(txt);
}
function ajaxart_toint_array(data)
{
	if (data.length == 0) return 0;
	if (data[0] == '') return 0;
	return parseInt(data[0]);
}
function ajaxart_run_commas(data,script,field,context)
{
  var text = aa_text(data,script,field,context);
  if (text == "") return [];
  return text.split(',');
}
function ajaxart_run_tocommas(data,script,field,context)
{
	var list = ajaxart.run(data,script,field,context);
	var out = ",";
	for(var i=0;i<list.length;i++) {
		out += aa_totext([list[i]]) + ',';
	}
	return out;
}
function ajaxart_arr_indexof(arr,item)
{
  for(var i=0;i<arr.length;i++)
	  if (arr[i] == item) return i;
  return -1;
}
function ajaxart_writabledata()
{
  return aa_xpath(aa_parsexml('<tmp val="" />'),'@val');	
}
function ajaxart_clone_array(array)
{
  var out = [];
  for(var i=0;i<array.length;i++)
	  out.push(array[i]);
  return out;
}

function aa_text2bool(text)
{
    if (text == "" || text == "false") return false;
    if (text == "true") return true;

    if (! isNaN(text)) return true; // a number is true (can allow Condition="%=Count...%")
    
    if (text.indexOf('==') > -1) {
    	var pos = text.indexOf('==');
    	var first = aa_trimQuote(text.substring(0,pos)), second = aa_trimQuote(text.substring(pos+2));
    	return (first == second);
    }
    if (text.indexOf('!=') > -1) {
    	var pos = text.indexOf('!=');
    	var first = aa_trimQuote(text.substring(0,pos)), second = aa_trimQuote(text.substring(pos+2));
    	return (first != second);
    }
    if (text.indexOf('=') > -1) {
    	var pos = text.indexOf('=');
    	var first = text.substring(0,pos), second = text.substring(pos+1);
    	return (first == second);
    }
	var boolean_result = false;
	var text_to_eval = "if (" + text + ") boolean_result=true;";
	try { eval(text_to_eval); }
	catch(e) { 
		ajaxart.log("Failed to evaluate boolean expression: " + text,"warning"); return false;
	}
    return boolean_result ? true : false;
}
function aa_string2id(txt)
{
	if (!ajaxart.hebchars) ajaxart.hebchars = ajaxart.types.text_HebrewText.getAttribute('HebChars'); // cannot put hebrew in the js 
	var heb = ajaxart.hebchars;
	var eng = 'abgdaozhtiklmnsapzkrstnfhz';
	
	var newid = "";
	for(var i=0;i<txt.length;i++) {
		var pos = heb.indexOf(txt.charAt(i));
		if (pos == -1) newid += txt.charAt(i);
		else newid += eng.charAt(pos);
	}
	txt = newid;
	
	txt = txt.replace(/[^0-9a-zA-Z]/g,'-').replace(/(^[0-9]+)/g,'-$1');
	return txt;
}
function aa_trimQuote(text)
{
  text = text.replace(/^\s*/, "").replace(/\s*$/, "");	// first trim spaces
  if (text.length > 0 && text.charAt(0) == "'" && text.charAt(text.length-1) == "'")
	  return text.substring(1,text.length-1);
  return text;
}

function aa_trim(text) {
  if(typeof String.prototype.trim !== 'function') {
  	String.prototype.trim = function() {
    	return this.replace(/^\s+|\s+$/g, ''); 
  	}
  }
  return text.trim();
}

function aa_run(data,profile,field,context) {
	return ajaxart.run(data,profile,field,context);
}
function aa_text_with_percent(data,script,field,params)
{
	var val = script.getAttribute(field);
	if (val) return val;
	return aa_text(data,script,field,params);
}
ajaxart.runScriptParam = function(data,scriptParam,context)
{
	if (scriptParam == null) return [];
	if (typeof(scriptParam) == "function") return scriptParam(data,context); 
	if (scriptParam.compiled == "same") return data;
	if (scriptParam.context == null) debugger;

	var newContext = { params: scriptParam.context.params 
			, vars: context.vars
			, componentContext: scriptParam.context.componentContext} // TODO: avoid this if paramVars == ""
	
    if (scriptParam.objectForMethod)
  	  newContext._This = scriptParam.objectForMethod[0];
	
	if (scriptParam.compiled != null) 
	  return scriptParam.compiled(data,newContext);
    else
      return ajaxart.run(data,scriptParam.script,"",newContext);
}

function aa_new_JsonByRef(parent,prop) {
	if (!window.aa_JsonByRef) aa_init_JsonByRef();
	return new aa_JsonByRef(parent,prop);
}
function aa_init_JsonByRef() {
	aa_JsonByRef = function(parent,prop) { this.parent = parent; this.prop = prop}
	aa_JsonByRef.prototype.GetValue = function() { return this.parent[this.prop] }
	aa_JsonByRef.prototype.WriteValue = function(val) { return this.parent[this.prop] = val }
	aa_JsonByRef.prototype.ParentNode = function() { return this.parent }
}

function aa_load_inplace_gc(comp,ns) {
	if (typeof(aa_xpath) == 'undefined') return;
	
  if (comp.getAttribute('execution') != 'native') return;    
  if (comp.nodeType != 1) return;
	var script = aa_cdata_value( aa_xpath(comp,'Code')[0] );
	if (!script) return;

	var func = null;
	try {
		  eval('func = ' + script);
	} catch(e) {
		ajaxart.logException(e,'could not compile js function for gc ' + comp.getAttribute('id') + ': ' + script);
	}
	if (func) {
		var gc = {};
		gc[comp.getAttribute('id')] = func;
		aa_gcs(ns, gc);
	}
}

function aa_split(text,separator,ignoreEmptyValues) {
	var arr = text.split(separator);
	var out = [];
	for(var i=0;i<arr.length;i++)
		if (arr[i] || !ignoreEmptyValues) out.push(arr[i]);
	return out;
}

function aa_var_first(context,varname) {
	var val = ajaxart.getVariable(context,varname);
	return val ? val[0] : null;
}

function aa_extendJQuery() {
	jQuery.fn.firstOfClass = function(className) {
		var classNameWithSpaces = ' ' + className + ' ';
		var out = this[0] && recursiveIteration(this[0]);
		return out ? jQuery(out) : jQuery([]);

		function recursiveIteration(elem) {
			if (elem.nodeType != 1) return null;
			var elemClasses = elem.className;
			if (elemClasses === className) return elem;
			if (elemClasses.indexOf(className) >-1 && (' '+elemClasses+' ').indexOf(classNameWithSpaces) > -1) return elem;

			for(var child=elem.firstChild;child;child=child.nextSibling) {
				var result = recursiveIteration(child);
				if (result) return result;
			}
			return null;
		}
	}
}
aa_extendJQuery();


function bart_galleryitem_tousages(gitem)
{
  var runmore = ajaxart.urlparam('more') == "true";
  
  var out = [];
  // old gallery tests
  var tests = aa_xpath(gitem,'AutoTests/Test');
  for (var i=0;i<tests.length;i++)
  {
	//  continue;
	  var isTest = tests[i].getAttribute('run_in_all_tests') == 'true';
	  if (runmore) isTest = tests[i].getAttribute('run_in_more_tests') == 'true';
	  if (!isTest) continue;
	  
	  var t="ui.ControlUsage";
	  if (tests[i].getAttribute('isasync')=="true") t="ui_async.ControlUsage";
	  
	  var usage = '<Usage t="'+t+'" Of="gallery_' + gitem.getAttribute('id') + '.' + tests[i].getAttribute('name') + '">';
	  usage += '<Control t="bart_usage.GalleryItemToUsageControl"><GalleryItem t="xml.Xml">' + ajaxart.xml2text(gitem) + '</GalleryItem>';
	  usage += '<Test t="xml.Xml">' + ajaxart.xml2text(tests[i]) + "</Test>";
	  usage += '</Control>';
	  
	  var params = aa_xpath(tests[i],'*');
	  for(var j=0;j<params.length;j++)
		  usage += ajaxart.xml2text(params[j]);
	  
	  usage += "</Usage>";
	  out.push(aa_parsexml(usage));
  }
  // new gallery tests
  tests = aa_xpath(gitem,'Tests/Test');
  for (var i=0;i<tests.length;i++)
  {
	  var test = tests[i];
	  var isTest = test.getAttribute('RunInAllTests') == 'true';
	  if (runmore) isTest = test.getAttribute('RunInAllTests') == 'true';
	  if (!isTest) continue;
	  test.setAttribute('Of','gallery_' + gitem.getAttribute('id') + '.' + test.getAttribute('Name'));
	  if (test.getAttribute('t') == 'bart_usage.JBartUsage' || test.getAttribute('t') == 'bart_usage.JBartStudioUsage')
		  var child = aa_parsexml('<Var name="_WidgetXml" value="%../..%" />','','',false,test);
	  else if (test.getAttribute('DoesNotChangeWidgetData') == 'true')
		  var child = aa_parsexml('<Var name="_TestDB" value="%../../bart_dev/db%" />','','',false,test);
	  else if (test.getAttribute('t') == 'async.JBartWidgetUsage')
		  var child = aa_parsexml('<Var name="_WidgetXml" t="data.Duplicate" Data="%../..%" />','','',false,test);
		else
		  var child = aa_parsexml('<Var name="_TestDB" t="data.Duplicate" Data="%../../bart_dev/db%" />','','',false,test);
	  
	  test.appendChild(child);
	  out.push(test);
  }
  return out;
}

function aa_guid() {
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    	var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
    	return v.toString(16);
	});
}

function aa_isArray(obj) {
	return Object.prototype.toString.call(obj) === '[object Array]';
}

function aa_xmlescape(text) {
	if (typeof text === 'string')
		return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/[\x00-\x1F]/g, function(x) { return '&#x' + x.charCodeAt(0).toString(16) + ';' } );
	if (aa_isArray(text) && text.length > 0) return aa_xmlescape(text[0]);
	return '';
}

function aa_parsexml(contents, filename, errorMsgOut, onlyWarning,baseXml) {
{
	if ( contents && contents.nodeType ) {
		if (contents.nodeType == 9) // document
			return contents.firstChild;
		return contents;
	}
	filename = filename || '';
  if ( typeof contents != "string" ) return contents;
  var parsing_error_level = onlyWarning ? 'warning' : 'error';
	if (!contents) return null;
 	var doc;
 	try {
 	// fix parsing bug that &#xd;-->\r and not \n
 		contents = contents.replace(/&#xa;&#xd;/g, "&#xa;").replace(/&#xd;&#xa;/g, "&#xa;").replace(/&#10;&#13;/g, "&#xa;").replace(/&#13;&#10;/g, "&#xa;");
		if (contents.indexOf('<') > 0)
			contents = contents.substring(contents.indexOf('<'));
		// contents = contents.replace(/&amp;/g, "&#26;");  // fix unescape bug 

		if (window.jBartNodeJS) return jBartNodeJS.parsexml(contents,baseXml);

		var isIE =  /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);
		if (window.ActiveXObject && isIE)
		{
			doc = new ActiveXObject("MSXML2.DOMDocument");
			var loaded = doc.loadXML(contents);
			if (!loaded) {
				var message = doc.parseError.reason + doc.parseError.srcText;
				if (errorMsgOut)
					errorMsgOut.push(message);
				log('Error parsing xml file ' + filename + ' : ' + message + ",xml:"+aa_xmlescape(contents.substring(0)+"..."),parsing_error_level);
	    	return null;
		  }	
		} 
		else if (document.implementation && document.implementation.createDocument)
		{
			    var domParser = new DOMParser();
			    doc = domParser.parseFromString(contents,"text/xml");
			    var errorMsg = null;
			    
			    var parseerrors = doc.getElementsByTagName("parsererror");//chrome & safari
			    if (parseerrors.length > 0) {
			    	errorMsg = "Error parsing xml";	//for empty error;
                	try {
                		errorMsg = parseerrors[0].childNodes.item(1).innerHTML;
                	} catch(e) { errorMsg = "Error parsing xml"; }
                }
			    if (doc.documentElement.nodeName == 'parsererror' ) {	// firefox
			    	errorMsg = doc.documentElement.childNodes.item(0).nodeValue;
			    	if (errorMsg.indexOf("Location") > 0)
			    		errorMsg = errorMsg.substring(0,errorMsg.indexOf("Location")) + errorMsg.substring(errorMsg.lastIndexOf("\n"));
			    }
                if (errorMsg != null) {
					log('Error parsing xml file ' + filename + ' : ' + errorMsg + ",xml:"+aa_xmlescape(contents.substring(0)+"..."),parsing_error_level);
					if (errorMsgOut != null)
						errorMsgOut.push(errorMsg);
			    	return null;
			    }
		}
	}
    catch(e) {
       	log('Error parsing xml file: ' + e + aa_xmlescape(contents.substring(0,50)+"..."),parsing_error_level);
       	return null;
    }
    var out = doc.firstChild;
    while(out.nodeType != 1 && out.nextSibling) out = out.nextSibling;

    out = aa_importNode(out, baseXml);
    
    return out;

    function log(msg) {
    	if (ajaxart.log) 
    		ajaxart.log(msg);
    }
}
}


function aa_importNode(node, target)
{
	if (target == null) return node;
	if (target.ownerDocument != node.ownerDocument && target.ownerDocument.importNode != undefined) {
	  try {
	  	return target.ownerDocument.importNode(node,true);
	  } catch(e) {
	  	return node;
	  }
	}
	return node;
}

function aa_hasParam(xtml,param) {
	return (aa_hasAttribute(xtml,param) || aa_xpath(xtml,param)[0] != null);
}

function aa_map(array,func) {
  if (!array) return [];
  var res = [];
  for(var i in array) {
    var item = func(array[i],i);
    if (aa_isArray(item))
      res = res.concat(item); // to check is faster than: for(var i=0;i<item.length;i++) res.push(item[i]);
    else if (item != null)
      res.push(item);
  }
  return res;
}

function aa_each(arr,func)
{
	for(var i=0;i<arr.length;i++)
		func(arr[i],i);
}



aa_gcs("chart2", {
	Chart: function (profile,data,context)
	{
		var field = { };
		field.Id = aa_text(data,profile,'ID',context);
		field.ID = [field.Id];
		field.Title = aa_multilang_text(data,profile,'Title',context);
		var ctx = aa_ctx(context,{_Field: [field]} );
		field.Fields = ajaxart.runsubprofiles(data,profile,'Field',ctx);
		
		field.Control = function(fieldData,ctx) {
			var items = ajaxart.run(data,profile,'ChartItems',aa_merge_ctx(context,ctx));
			var chartObject = aa_createChartObject(items,field.Fields,context);
			chartObject.Title = aa_multilang_text(data,profile,'ChartTitle',context);
			aa_bind(chartObject,'drilldownClick',function(selected) {
				aa_run(selected,profile,'OnDrilldownClick',context);
			});
			field.Chart = aa_first(data,profile,'Chart',ctx);
			if (field.Chart && field.Chart.IsTriplet) {
				chartObject.jElem = jQuery(field.Chart.Html);
				chartObject.control = chartObject.jElem[0];
				
				chartObject.jElem.addClass(aa_attach_global_css(field.Chart.Css,null,'chart'));
				aa_apply_style_js(chartObject,field.Chart,ctx);
			}
			jBart.trigger(field,'initChartObject',chartObject);  // allow non triplets to make effect
			return [chartObject.control];
		};
		
		ajaxart.runsubprofiles(data,profile,'FieldAspect',ctx);
		return [field];
	}
});

function aa_createChartObject(items,fields,context)
{
	var chartObject = {
		Items: items,
		Fields: fields,
		Context: context,
		control: jQuery('<div/>')[0],
		DataMatrix: function(includeHeaders) {
			var out = [];
			if (includeHeaders) {
				var headers = [];
				for(var j=0;j<this.Fields.length;j++) {
					var title = this.Fields[j].Title;
					headers.push(title);
				}
				out.push(headers);
			}
			for(var i=0;i<this.Items.length;i++) {
				var item = this.Items[i];
				var row = [];
				for(var j=0;j<this.Fields.length;j++) {
					var field = this.Fields[j];
					var fieldData = field.FieldData ? field.FieldData([item],context) : item;
					var textValue = aa_totext(fieldData);
					if (field.IsNumber || field.FieldType == 'number') {
						try {
						  textValue = parseFloat(textValue);
						} catch(e) { textValue = 0; }
					}
					row.push(textValue);
				}
				out.push(row);
			}
			return out;
		}
	};
	return chartObject;
}






aa_gcs("control", {
	Button: function(profile, data, context) {
		aa_init_class('Button',{
			action: function(e,extra_vars) {
				if (window.aa_incapture || this.disabled) return;

				var ctx = aa_ctx(this.context, {
					ControlElement: [this.el],
					_DomEvent: [e]
				});
				if (extra_vars)
					ctx = aa_ctx(ctx,extra_vars);
				var out = ajaxart.run(this.data, this.profile, 'Action', ctx);
				if (e && e.stopPropagation) e.stopPropagation();
				if (e) e.cancelBubble = true;
				return out;
			},
			onActionEnd: function(callback) {
				this._isAsync = true;
				jBart.bind(this, 'actionEnd', callback);
			}
		});	

		var field = {
			Id: aa_text(data, profile, 'ID', context),
			Title: aa_multilang_text(data, profile, 'Title', context),
			Image: aa_first(data, profile, 'Image', context),
			Style: aa_first(data, profile, 'Style', context)
		};
		field.ID = [field.Id];

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context, ctx);
			var text = aa_multilang_text(field_data, profile, 'ButtonText', ctx2) || field.Title;
			if (field.Image && field.Image.Url) field.Image.StaticUrl = aa_totext(field.Image.Url(field_data, ctx2));

			var image = aa_create_static_image_object(field.Image);
			var disabled = aa_bool(field_data, profile, 'Disabled', ctx2);

			var buttonApiObject = new ajaxart.classes.Button({
				text: text,
				tooltip: aa_multilang_text(field_data, profile, 'Tooltip', ctx2),
				image: image,
				disabled: disabled,
				data: field_data,
				profile: profile,
				field: field,
				field_data: field_data,
				context: ctx2
			});

			var out = aa_renderStyleObject(field.Style, buttonApiObject, ctx2, true);
			if (disabled) jQuery(out).addClass('disabled');
			return [out];
		};
		ajaxart.runsubprofiles(data, profile, 'FieldAspect', aa_ctx(context, {
			_Field: [field]
		}));
		return [field];
	}
});

function aa_button(button,settings) {
	settings = aa_defaults(settings,{
		buttonElement: button.el,
    textElement: button.$el.firstOfClass('hypelink_text')[0] || button.el,
    imageElement: button.$el.firstOfClass('hypelink_img')[0],
    keepImageElement: false
	});

	aa_bind(button,'waiting',function() {
		if (button.field.TextForWaiting) $(settings.textElement).html(button.field.TextForWaiting);
		if (settings.onStartWaiting) settings.onStartWaiting();
	});

	aa_bind(button,'endWaiting',function() {
		if (button.field.TextForWaiting) $(settings.textElement).html(button.text);
		if (settings.onEndWaiting) settings.onEndWaiting();
	});

	var jButton = $(settings.buttonElement);
	button.el.jbButtonElement = settings.buttonElement;

	if (settings.allowHtmlInButtonText)
		$(settings.textElement).html(button.text);
	else 
  	$(settings.textElement).text(button.text);
  
  jButton.attr('title',button.tooltip);
  
  if ($(settings.imageElement)[0])
		aa_setImage($(settings.imageElement),button.image,{ removeIfNoImage: !settings.keepImageElement });

  if (jButton.disabled) jButton.addClass('disabled');

  jButton.click(function(e) { 
  	aa_buttonRunAction(button,e);
  });	

}

function aa_buttonRunAction(button,e) {
  	if (button.disabled) return;
  	var jButton = button.$el;
  	
  	aa_trigger(button,'beforeAction');
  	var result = button.action(e); 

  	if (result && result[0] && result[0].state && result[0].state() == 'pending' ) {
			jButton.addClass('disabled waiting');
			aa_trigger(button,'waiting',{});
			$.when(result[0]).then(function() {
				jButton.removeClass('disabled waiting');
				aa_trigger(button,'endWaiting',{});
				aa_trigger(button,'afterAction');
			},function() {
				jButton.removeClass('disabled waiting');
				aa_trigger(button,'endWaiting',{});
				aa_trigger(button,'afterAction');
			});
		} else {
				aa_trigger(button,'afterAction');			
		}
}





aa_gcs("control", {
	ShowFieldControl: function(profile, data, context) {
		var item = ajaxart.run(data,profile,'Item',context);
		var field = aa_first(data,profile,'Field',context);
		if (!field) return;
		
		var wrapper = document.createElement('div');
		aa_fieldControl({ Field: field, Item: item, Wrapper: wrapper, Context: context });
		return [wrapper];
	},
	Label: function(profile, data, context) // gc of control.Label
	{
		var field = {
			Id: aa_text(data, profile, 'ID', context),
			Title: aa_multilang_text(data, profile, 'Title', context),
			Style: aa_first(data, profile, 'Style', context),
			TitleAsText: !profile.getAttribute('Text') && !aa_xpath(profile, 'Text')[0]
		};
		field.ID = [field.Id];

		var ctx2 = aa_ctx(context, { _Field: [field] });

		field.Label = function(field_data,ctx) {
			var text = field.TitleAsText ? field.Title : aa_multilang_text(field_data, profile, 'Text', aa_merge_ctx(ctx2, ctx));
//			text = text.replace(/\n/g, "<br/>");
			return [text];
		};
		field.Control = function(field_data, ctx) {
			var text = this.Label(field_data,ctx)[0];

			return [aa_renderStyleObject(field.Style, {
				text: text,
				data: field_data[0]
			}, ctx)];
		};
		ajaxart.runsubprofiles(data, profile, 'FieldAspect', ctx2);
		return [field];
	},
	Layout: function(profile, data, context) {
		aa_init_class('Layout',{
			getControlsCount: function(controlTemplate) {
				return this.fields.length;
			},
			getControl: function(index,wrapper) {
				aa_fieldControl({
					Field: this.fields[index],
					Wrapper: wrapper,
					Item: this.field_data,
					Context: this.context
				});		
			}
		});

		var layout_field = {
			Id: aa_text(data, profile, 'ID', context),
			Title: aa_multilang_text(data, profile, 'Title', context),
			Style: aa_first(data, profile, 'Layout', context),
			SectionStyle: aa_first(data, profile, 'SectionStyle', context)
		};

		layout_field.Control = function(field_data, ctx) {
			var baseCtx = aa_ctx(ctx, {});
			var ctx2 = aa_merge_ctx(context, baseCtx);
			var fields = ajaxart.runsubprofiles(field_data, profile, 'Field', ctx2);
			var newFields = [];
			for (var i = 0; i < fields.length; i++) { // we do not need the constant hidden fields
				if (!fields[i].RenderHiddenCell) {
					if (fields[i].CalculatedOnly) fields[i].Calculate(field_data, ctx2);
					if (fields[i].IsHidden) continue;
					if (fields[i].IsCellHidden && fields[i].IsCellHidden(field_data, ctx2)) continue;
				}

				newFields.push(fields[i]);
			}
			fields = newFields;
			aa_trigger(layout_field, 'innerFields', {
				Context: ctx2,
				FieldData: field_data,
				Fields: fields
			});

			var layout = new ajaxart.classes.Layout({
				fields: fields,context: ctx2,field_data: field_data, field: layout_field
			});
			var out = aa_renderStyleObject(layout_field.Style,layout,ctx2,true);
			if (layout_field.SectionStyle) {
				return [aa_wrapWithSection(out, layout_field, layout_field.SectionStyle, field_data, ctx2)];
			}
			return [out];
		};

		ajaxart.runsubprofiles(data, profile, 'FieldAspect', aa_ctx(context, {
			_Field: [layout_field]
		}));
		return [layout_field];
	},
	IFrame: function(profile, data, context) {
		var field = aa_create_base_field(data, profile, context);
		var style = aa_first(data, profile, 'Style', context);

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context,ctx);
			var iframe = { url: aa_text(field_data,profile,'Url',context) };
			return [aa_renderStyleObject2(style,iframe,field_data,field,ctx2,{})];
		};
		return [field];
	},	
	Hyperlink: function(profile, data, context) {
		var field = aa_create_base_field(data, profile, context);
		var style = aa_first(data, profile, 'Style', context);

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context,ctx);
			var link = { 
				title: aa_fieldTitle(field,field_data,ctx2),
				link: aa_text(field_data,profile,'Link',context),  
				tooltip: aa_text(field_data,profile,'Tooltip',context),
				target: aa_text(field_data,profile,'Target',context)
			};
			return [aa_renderStyleObject2(style,link,field_data,field,ctx2,{})];
		};
		return [field];
	},
	CustomControl: function(profile, data, context) {
		var field = aa_create_base_field(data, profile, context);

		field.Control = function(field_data, ctx) {
			var style = aa_first(field_data, profile, 'Control', context);;
			return [aa_renderStyleObject(style, {
				Field: field,
				Data: field_data,
				Context: context,
				context: context
			}, context)];
		};
		return [field];
	},
	AudioPlayer: function(profile, data, context)
	{
		var field = {
			Id: aa_text(data, profile, 'ID', context),
			Title: aa_multilang_text(data, profile, 'Title', context),
			Style: aa_first(data, profile, 'Style', context)
		};
		field.ID = [field.Id];

		var ctx2 = aa_ctx(context, { _Field: [field] });

		field.Control = function(field_data, ctx) {
			var audioUrl = aa_text(field_data,profile,'AudioUrl',context);

			return [aa_renderStyleObject(field.Style, {
				audioUrl: audioUrl,
				data: field_data[0]
			}, ctx)];
		};
		ajaxart.runsubprofiles(data, profile, 'FieldAspect', ctx2);
		return [field];
	}
});

function aa_horizontalVerticalLayout(layout,settings) {
	settings = aa_defaults(settings,{
		isVertical: layout.params.IsVertical == 'true',
		horizSpacing: layout.params.HorizSpacing
	});

  if (settings.isVertical) {
  	layout.$el.addClass('aa_vertical');
  	aa_layout(layout);
  } else
   aa_horizontalBoxLayout(layout,{ spacing: settings.horizSpacing });	
}
function aa_horizontalBoxLayout(layout,settings) {
	settings = aa_defaults(settings,{
		spacing: '0',
		fullWidth: false
	});
	settings.spacing = settings.spacing.split('px')[0];
	var isIE_above10 = ajaxart.isIE && !ajaxart.isIE9 && !ajaxart.isIE78;
	var css3 = ajaxart.isWebkit || ajaxart.isFirefox || isIE_above10;

	if (css3) {
		var cssForTop = '',cssForField = '';

		if (ajaxart.isWebkit || ajaxart.isFirefox)
			cssForTop = '#this { display: -webkit-box; -webkit-box-orient: horizontal; } ';	// we replace webkit with moz in attach_global_css
		if (ajaxart.isIE)
			cssForTop = '#this { display: -ms-flexbox; -ms-box-orient: horizontal; } ';	

		if (settings.fullWidth) {
			cssForField = '#this { -webkit-box-flex: 1; -ms-flex:1; } ';
			cssForTop += '#this { width:100%;} ';
		}
		if (settings.spacing) {
			cssForField += "#this:not(:last-child) { margin-right: " + settings.spacing + "px; } ";
			cssForField += ".right2left #this:not(:last-child) { margin-left: " + settings.spacing + "px; margin-right:0; } ";
		}

		layout.$el.addClass(aa_attach_global_css(cssForTop));
		var cssClassForField = aa_attach_global_css(cssForField);
		layout.$el.firstOfClass('field')[0].jbRefresh = function() {
			$(this).addClass(cssClassForField);
		};
		layout.$el.firstOfClass('field')[0].jbRefresh();
	} else {
		// add table/tr/td
		var table = $('<table cellpadding="0" cellspacing="0" ><tr><td class="field" style="vertical-align:top" /></tr></table>');
		aa_empty(layout.el);
		layout.el.appendChild(table[0]);

		layout.$el.firstOfClass('field').addClass(aa_attach_global_css("#this:not(:last-child) { padding-right: " + settings.spacing + "px; } .right2left #this:not(:last-child) { padding-left: " + settings.spacing + "px; padding-right:0; } "));
		if (settings.fullWidth)
			table.addClass(aa_attach_global_css("#this { width:100%; }"));
	}

  aa_layout(layout,settings);	
}

function aa_layout(layout,settings) {
	settings = settings || {};
	settings.controlElement = settings.controlElement || layout.$el.find('.field');

	var controlEl = $(settings.controlElement)[0];

	if (layout.addFields && layout.Fields) {
     layout.addFields(controlEl,function(field) { 
        field.setControl(); // backward compatability
     });		
	} else {
		var count = layout.getControlsCount();
		for(var i=0;i<count;i++) {
			var j = settings.flipControlOrder ? count-1-i : i;
			var $wrapper = $(controlEl).clone();
			$wrapper[0].jbRefresh = $(controlEl)[0].jbRefresh;
			controlEl.parentNode.insertBefore($wrapper[0], controlEl);
			layout.getControl(j,$wrapper[0]);
		}
		$(controlEl).remove();
	}
}

function aa_create_base_field(data, profile, context) {
	var field = {
		Id: aa_text(data, profile, 'ID', context),
		Title: aa_multilang_text(data, profile, 'Title', context),
		Image: aa_first(data, profile, 'Image', context),
		Style: aa_first(data, profile, 'Style', context)
	};
	field.ID = [field.Id];
	ajaxart.runsubprofiles(data, profile, 'FieldAspect', aa_ctx(context, {
		_Field: [field]
	}));
	return field;
}

function aa_textLabel(labelObj) {
	var text = labelObj.text.replace(/\n/g, "<br/>");
	labelObj.$el.html(text);
}


aa_gcs("control", {
	ExpandableSection: function(profile, data, context) {
		var field = aa_create_base_field(data, profile, context);

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context,ctx);
			field.Fields = ajaxart.runsubprofiles(data,profile,'Field',ctx2);
			var expandableSection = {
				title: aa_text(field_data,profile,'SectionTitle',context) || aa_fieldTitle(field ,field_data, context,true),
				renderContent: function(parentDiv) {
					var fields = ajaxart.runsubprofiles(field_data, profile, 'Field', ctx2);
					var newFields = [];
					for (var i = 0; i < fields.length; i++) { // we do not need the constant hidden fields
						if (!fields[i].RenderHiddenCell) {
							if (fields[i].CalculatedOnly) fields[i].Calculate(field_data, ctx2);
							if (fields[i].IsHidden) continue;
							if (fields[i].IsCellHidden && fields[i].IsCellHidden(field_data, ctx2)) continue;
						}

						newFields.push(fields[i]);
					}
					fields = newFields;
					aa_trigger(field, 'innerFields', { Context: ctx2, FieldData: field_data, Fields: fields });

					for(var i=0;i<fields.length;i++) {
						var wrapper = $('<div/>').appendTo(parentDiv)[0];
						aa_fieldControl({	Field: fields[i],	Wrapper: wrapper,	Item: field_data,	Context: this.context	});
					}
				}
			};

			return [aa_renderStyleObject2(field.Style,expandableSection,field_data,field,ctx)];
		};
		return [field];
	}
});

aa_gcs("fld_aspect", {
	ExpandableSectionProperties: function(profile, data, context) {
		var field = context.vars._Field[0];
		aa_bind(field,'initApiObject',function(args) {
			args.apiObject.RefreshOnExpand = aa_bool(data,profile,'RefreshOnExpand',context);
		});
	}
});

function aa_expandableSection(expandableSection,settings) {
	settings = aa_defaults(settings,{
		sectionTitleElement: expandableSection.$el.firstOfClass('section_title'),
		sectionTextElement: expandableSection.$el.firstOfClass('section_title_text'),
		sectionToggleElement: expandableSection.$el.firstOfClass('section_title_toggle'),
		sectionBodyElement: expandableSection.$el.firstOfClass('section_body')
	});
	var expandedClass = 'aa_section_exapnded';
	
	var titleElem = $(settings.sectionTitleElement)[0];
	if (expandableSection.renderSectionTitle) {
		aa_empty(titleElem);
		expandableSection.renderSectionTitle(titleElem);
	} else {
		$(settings.sectionTextElement).text( expandableSection.title );
	}

	$(titleElem).click(function() {
		expandableSection.$el.toggleClass(expandedClass);
		refresh();
	});

	if (expandableSection.expandedByDefault) {
		expandableSection.$el.addClass(expandedClass);
		refresh();
	}

	function refresh() {
		var bodyElem = $(settings.sectionBodyElement)[0];
		if (expandableSection.$el.hasClass(expandedClass)) {
			if (!bodyElem.jbRendered || expandableSection.RefreshOnExpand) {
				aa_empty(bodyElem);
				expandableSection.renderContent(bodyElem);
			}
			$(bodyElem).show();
		} else {
			$(bodyElem).hide();
		}
	}
}


aa_gcs("control", {
	ImageGallery: function(profile, data, context) {
		var field = aa_create_base_field(data, profile, context);
		field.Control = function(field_data, ctx) {
			var images = ajaxart.run(field_data, profile, 'Images', context);
			var ctx2 = aa_merge_ctx(context, ctx);
			return [aa_renderStyleObject(field.Style, {
				images: images
			}, ctx2, true)];
		};
		return [field];
	}
});

aa_gcs("imagegallery", {
	ImageGallery: function(profile, data, context) {
		aa_init_class_image();

		var field = aa_create_base_field(data, profile, context);
		field.Style = aa_first(data,profile,'Style',context);

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context, ctx);
			var images = ajaxart.run(field_data, profile, 'Images', ctx2);
			var imageObjects = [];
			for(var i=0;i<images.length;i++) {
				if (!images[i].image) continue;
				images[i].image.title = images[i].title;
				imageObjects.push(images[i].image);
			}

			var imageGallery = {
				images: imageObjects
			};
			return [aa_renderStyleObject2(field.Style,imageGallery,field_data,field,ctx2)];
		};
		return [field];
	}
});

aa_gcs("imagegallery_style", {
	SlideShow: function(profile, data, context) {
		var imageStyle = aa_first(data,profile,'ImageStyle',context);
		var buttonStyle = aa_first(data,profile,'Buttons',context);
		var transitionStyle = aa_first(data,profile,'Transition',context);
		var frameWidth = aa_int(data,profile,'FrameWidth',context);
		var frameHeight = aa_int(data,profile,'FrameHeight',context);
		var adjustSize = aa_first(data,profile,'AdjustImageSize',context);

		return [{
			render: function(imageGallery) {
				var out = $('<div />').width(frameWidth).height(frameHeight)[0];
				var field_data = imageGallery.field_data,field = imageGallery.field, context = imageGallery.context;

				var $poster = $('<div class="poster"/>').appendTo(out);

				for(var i=0;i<imageGallery.images.length;i++) {
					aa_extend(imageGallery.images[i],{
						width: frameWidth,
						height: frameHeight,
						adjustSize: adjustSize	
					});
				}

				if (imageGallery.images.length == 0) return out;

				var slideshow = {
					imageGallery: imageGallery,
					el: out,
					$el: $(out),
					$poster: $poster,
					frameWidth: frameWidth,
					frameHeight: frameHeight,
					index: 0,
					showNextImage: function(loop) {
						if (this.index == imageGallery.images.length-1) {
							if (loop) this.showImageByIndex(0);
							return;
						}
						this.showImageByIndex(this.index+1);
					},
					showPrevImage: function() {
						if (index == 0) return;
						this.showImageByIndex(this.index-1);
					},
					showImageByIndex: function(index,no_transition) {
						var prevIndex = this.index;
						this.index = index;

						if (no_transition || !transitionStyle) {
							showImage(imageGallery.images[index],$poster[0]);
							return;
						}
						var $incoming = $('<div/>').addClass('incoming');
						var $outgoing = $('<div/>').addClass('outgoing');
						
						showImage(imageGallery.images[index],$incoming[0]);
						showImage(imageGallery.images[prevIndex],$outgoing[0]);

						var transitionObject = {
							slideshow: this,
							$incoming: $incoming,
							$outgoing: $outgoing
						};
						aa_hide($poster[0]);
						aa_renderStyleObject2(transitionStyle,transitionObject,field_data,field,context,{ funcName: 'animate' });
					},
					endAnimation: function() {
						showImage(imageGallery.images[this.index],$poster[0]);
						this.$el.find('.incoming').remove();
						this.$el.find('.outgoing').remove();
						aa_show($poster[0]);
					}
				};
				aa_renderStyleObject2(buttonStyle,{ slideshow: slideshow },field_data,field,context,{ funcName: 'add' });
				slideshow.showImageByIndex(0,true);

				return out;

				function showImage(image,el) {
					aa_empty(el);
					el.appendChild( aa_renderStyleObject2(imageStyle,{image: image},field_data,field,context) );
				}
			}
		}];
	}
});

function aa_image_transition_slide(transition,settings) {
	var slideshow = transition.slideshow;
	var $incoming = transition.$incoming, $outgoing = transition.$outgoing;

	settings = aa_defaults(settings);
	$incoming.on('webkitTransitionEnd', onEnd);

	slideshow.$el.css('position','relative').css('overflow','hidden');

	$incoming.add($outgoing).css({
		position: 'absolute',
		top:0,
		left:0
	});
	$incoming.css('left',slideshow.frameWidth+'px');
	slideshow.$el.append($outgoing).append($incoming);
	$incoming.add($outgoing).css('-webkit-transition',settings.timing + ' ' + settings.duration);

	setTimeout(function() {
		$incoming.css('left','0');
		$outgoing.css('left','-'+slideshow.frameWidth+'px');
	},0);

	function onEnd() {
		slideshow.endAnimation();
	}
}

function aa_image_transition_fade(transition,settings) {
	var slideshow = transition.slideshow;
	var $incoming = transition.$incoming, $outgoing = transition.$outgoing;

	settings = aa_defaults(settings,{});
	$incoming.on('webkitTransitionEnd', onEnd);

	slideshow.$el.css('position','relative').css('overflow','hidden');

	$incoming.add($outgoing).css({
		position: 'absolute',
		top:0,
		left:0
	});
	$incoming.css('opacity','0');
	slideshow.$el.append($outgoing).append($incoming);
	$incoming.add($outgoing).css('-webkit-transition',settings.timing + ' ' + settings.duration);

	setTimeout(function() {
		$incoming.css('opacity','1');
		$outgoing.css('opacity','0');
	},0);

	function onEnd() {
		slideshow.endAnimation();
	}

}

function aa_image_transition_toss(transition,settings) {
	var slideshow = transition.slideshow;
	var $incoming = transition.$incoming, $outgoing = transition.$outgoing;

	settings = aa_defaults(settings,{});
	$incoming.on('webkitTransitionEnd', onEnd);

	slideshow.$el.css('position','relative');

	$incoming.add($outgoing).css({
		position: 'absolute',
		top:0,
		left:0
	});
	transform = 'rotate(-30deg) scale(1.3) translate(-20px,-250px)';

	$incoming.css('-webkit-transform',transform).css('opacity','0');
	slideshow.$el.append($outgoing).append($incoming);
	$incoming.add($outgoing).css('-webkit-transition',settings.timing + ' ' + settings.duration);

	setTimeout(function() {
		$incoming.css('-webkit-transform','rotate(0) scale(1) translate(0,0)').css('opacity',1);
		$outgoing.css('opacity','0');
	},0);

	function onEnd() {
		slideshow.endAnimation();
	}

}

function aa_slideshow_buttons(slideshowButtons) {
	var slideshow = slideshowButtons.slideshow;

	slideshow.$el.click(function() {
		slideshow.showNextImage(true);
	}).css('cursor','pointer');
}

// https://docs.google.com/a/artwaresoft.com/document/d/1o6Uv_k3rlnm-Wp_Z7-oRVaAbfAYHcbecHzr39_0gNbU/edit#heading=h.n6saixge6b2n


aa_gcs("control", {
	PropertySheet: function(profile, data, context) {
		aa_init_class_PropertySheet();

		var field = aa_create_base_field(data, profile, context);

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context, ctx);

      var fields = ajaxart.runsubprofiles(field_data,profile,'Field',ctx2);

			aa_trigger(field,'innerFields',{ Fields: fields});

      var visibleFields = [];
      for(var i=0;i<fields.length;i++) {
				if (!fields[i].RenderHiddenCell) {
	        if (fields[i].IsFieldHidden && fields[i].IsFieldHidden(field_data,ctx) ) continue;
	        if (fields[i].IsCellHidden && fields[i].IsCellHidden(field_data,ctx) ) continue;
	        if (fields[i].IsHidden) continue; 
	      }
        visibleFields.push(fields[i]);
      }

			var propertySheetObject = new ajaxart.classes.PropertySheet({
				fields: visibleFields,
				profile: profile,
				field: field,
				field_data: field_data,
				context: ctx2
			});

			return [aa_renderStyleObject(field.Style, propertySheetObject, ctx2, true)];
		};
		return [field];
	}
});

function aa_propertySheet(propertySheet,settings) {
	// descriptionLocation can be: 'after content' or 'after field name' or ''
	settings = aa_defaults(settings, {
		propertyElement: propertySheet.$el.firstOfClass('aa_property'),
		propertySettings: function(propertyElement) {
			return {
				titleElement: $(propertyElement).firstOfClass('aa_property_title'),
				contentElement: $(propertyElement).firstOfClass('aa_property_content')
			};
		},
		descriptionLocation: 'after content',
		addColonToTitle: true
	});

	var count = propertySheet.getFieldCount();

	for(var i=0;i<count;i++) {
		var fieldTitle = propertySheet.getFieldTitle(i);
		if (fieldTitle && settings.addColonToTitle) fieldTitle += ':';

		var property = $(settings.propertyElement).clone().insertBefore(settings.propertyElement);
		var propertySettings = settings.propertySettings(property);
		if (propertySheet.isFieldHidingTitle(i)) {
			property.addClass('aa_hiding_title');
		} else {
			$(propertySettings.titleElement).html(fieldTitle);
		};		
		propertySheet.getField(i,$(propertySettings.contentElement)[0]);
		var description = propertySheet.getFieldDescription(i);
		if (description && settings.descriptionLocation == 'after content') 
			$('<div class="aa_property_description" />').html(description).appendTo($(propertySettings.contentElement));
		if (description && settings.descriptionLocation == 'after field name') {
			$('<div class="aa_property_description" />').appendTo($(propertySettings.titleElement));
			$(propertySettings.titleElement).attr('title',description);
		}

		if (propertySheet.isFieldMandatory(i))
			property.addClass('aa_mandatory');
	}
	$(settings.propertyElement).remove();
}

function aa_init_class_PropertySheet() {
	
	if (ajaxart.classes.PropertySheet) return;

	ajaxart.classes.PropertySheet = function(settings) {
		aa_extend(this, settings);
	};
	ajaxart.classes.PropertySheet.prototype.getFieldCount = function(controlTemplate) {
		return this.fields.length;
	};
	ajaxart.classes.PropertySheet.prototype.isFieldMandatory = function(index) {
		return this.fields[index].Mandatory;
	};
	ajaxart.classes.PropertySheet.prototype.isFieldHidingTitle = function(index) {
		return this.fields[index].HideTitle || this.fields[index].HidePropertyTitle;
	};
	ajaxart.classes.PropertySheet.prototype.getFieldTitle = function(index) {
		var field = this.fields[index];
		if (field.DynamicTitle) {
			return aa_fieldTitle(field,this.field_data,this.context);
		} 
		return field.Title;
	};
	ajaxart.classes.PropertySheet.prototype.getFieldDescription = function(index) {
		return this.fields[index].Description;
	};
	ajaxart.classes.PropertySheet.prototype.getField = function(index,wrapper) {
		aa_fieldControl({
			Field: this.fields[index],
			Wrapper: wrapper,
			Item: this.field_data,
			Context: this.context
		});		
	};
}



aa_gcs("searchbox",{
	SearchBox: function(profile,data,context) {
		aa_init_class_Searchbox();

		var field = aa_create_base_field(data, profile, context);
		var itemDisplayPage = aa_first(data,profile,'ItemDisplayPage',context);

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context, ctx);

			var items = ajaxart.run(field_data,profile,'Items',ctx2);
			var itemObjects = [];
			for(var i=0;i<items.length;i++) {
				var img = aa_first([items[i]],profile,'ItemImage',ctx2);
				if (img) img.StaticUrl = aa_totext(img.Url([items[i]], ctx2));

				itemObjects.push({
					item: [items[i]],
					text: aa_text([items[i]],profile,'ItemText',ctx2),
					extraText: aa_text([items[i]],profile,'ItemExtraText',ctx2),
					image: aa_create_static_image_object(img)
				});
			}

			var searchboxObject = new ajaxart.classes.Searchbox({
				profile: profile,
				field: field,
				field_data: field_data,
				context: ctx2,
				items: itemObjects,
				descriptionForEmptyText: aa_fieldTitle(field,aa_getItemData(ctx), ctx2,true),
				itemDisplayPage: itemDisplayPage
			});

			return [aa_renderStyleObject(field.Style, searchboxObject, ctx2, true)];
		};
		return [field];		
	}
});

function aa_searchbox(searchbox,settings) {
	settings = settings || {};
	settings.inputElement = settings.inputElement || searchbox.$el.firstOfClass('aa_searchbox_input');
	settings.popupElement = settings.popupElement || searchbox.$el.firstOfClass('aa_searchbox_popup');
	settings.popupItemElement = settings.popupItemElement || searchbox.$el.firstOfClass('aa_searchbox_item');	
	settings.popupItemSettings = settings.popupItemSettings || function(itemElement) {
		return {
			itemTextElement: $(itemElement).firstOfClass('aa_searchbox_item_text'),
			itemImageElement: $(itemElement).firstOfClass('aa_searchbox_item_image'),
			itemExtraTextElement: $(itemElement).firstOfClass('aa_searchbox_item_extra_text')
		};
	};
	settings.maxItemsToShow = settings.maxItemsToShow || 20;
	settings.popupShowAllElement = settings.popupShowAllElement || searchbox.$el.firstOfClass('aa_searchbox_show_all');	

	settings.search = settings.search || aa_searchbox_search;	// for Compress: aa_searchbox_search() 

	var $input = $(settings.inputElement);
	var $popupItemParent = $(settings.popupItemElement).parent();
	var $popupItemTemplate = $(settings.popupItemElement).remove();

	$input.attr('placeholder',searchbox.descriptionForEmptyText||'');
	initPopups();
	var items = searchbox.items;

	$input.click(function() {
		if (!ajaxart.isattached(searchbox.selectorPopup.frameElement))
			openPopup();
	});
	$input.keydown(function(e) {
		if (e.keyCode == 13) {
			var selected = $popupItemParent.find('>.selected')[0];
			if (selected) {
				selectItem(selected);
				return;
			}
		}
		if (e.keyCode == 40) { // arrow down
			var selected = $popupItemParent.find('>.selected')[0];
			if (selected && selected.nextSibling) {
				$(selected).removeClass('selected');
				$(selected.nextSibling).addClass('selected');
				makeItemVisible(selected);
				return;
			}
		}
		if (e.keyCode == 38) { // arrow up
			var selected = $popupItemParent.find('>.selected')[0];
			if (selected && selected.previousSibling) {
				$(selected).removeClass('selected');
				$(selected.previousSibling).addClass('selected');
				makeItemVisible(selected);
				return;
			}
		}
		openPopup();
	});

	function initPopups() {
		searchbox.selectorPopup = aa_createLightPopup({
			el: $(settings.popupElement)[0],
			launchingElement: $input[0],
			location: aa_popupNearLauncherLocation({minWidthAsLauncherElement: true}),
			features: [

			],
			apiObject: searchbox,
			type: 'searchbox',
			popupSettings: {
				closeWhenClickingOutside: 'except launching element'
			}
		});

		if (aa_isStudioRefreshAndPopupIsOpen('searchbox',searchbox)) {
			setTimeout(openPopup,100);
		}			
		$(settings.popupShowAllElement).text(searchbox.TextForShowAll || 'Show All');
	}	

	function openPopup() {		
		refreshPopupOptions();
	}
	function refreshPopupOptions(showAll) {
		settings.search($input.val(),items);

		while ($popupItemParent[0].firstChild)
			aa_remove($popupItemParent[0].firstChild,true);

		var added = 0;
		for(var i=0;i<items.length;i++) {
			if (!items[i].passed) continue;
			var $item = $popupItemTemplate.clone().appendTo($popupItemParent);
			$item[0].jbItem = items[i];
			if (! searchbox.injectItemControl($item[0],items[i],$input.val()) ) {
				var innerSettings = settings.popupItemSettings($item[0]);
				$(innerSettings.itemTextElement).text(items[i].text);
				highlightText($(innerSettings.itemTextElement),$input.val());

				$(innerSettings.itemExtraTextElement).text(items[i].extraText);
				highlightText($(innerSettings.itemExtraTextElement),$input.val());

				aa_setImage($(innerSettings.itemImageElement)[0],items[i].image);
			}

			if (added == 0) $item.addClass('selected');
			if (++added >= settings.maxItemsToShow && !showAll) {
				addShowAll();
				break;
			}
		}
		$popupItemParent.children().click(function() {
			if (this == $(settings.popupShowAllElement)[0]) return;
			selectItem(this);
		});
		$popupItemParent.children().mouseover(function() {
			if (this == $(settings.popupShowAllElement)[0]) return;
			if ( $(this).hasClass('selected') ) return;
			$popupItemParent.children().removeClass('selected');
			$(this).addClass('selected');
		});

		searchbox.selectorPopup.show();
	}

	function selectItem(itemElement) {
		searchbox.selectorPopup.close();
		searchbox.onSelect(itemElement.jbItem.item);
		$input.val('');
	}

	function addShowAll() {
		$(settings.popupShowAllElement).appendTo($popupItemParent);
		$(settings.popupShowAllElement).click(function() {
			var lastItem = this.previousSibling && this.previousSibling.jbItem;
			refreshPopupOptions(true);

			var children = $popupItemParent.children();
			for(var i=0;i<children.length;i++)
				if (children[i].jbItem == lastItem) {
					if (children[i].tabIndex == -1) children[i].tabIndex = 0;
					children[i].focus();
					children[i].tabIndex = -1;
				}
		});
	}

	function highlightText($elem,searchtext) {
		$elem.html( ajaxart_field_highlight_text($elem.text(),searchtext,'.aa_highlight') );
	}
}

function aa_init_class_Searchbox() {
	
	if (ajaxart.classes.Searchbox) return;

	ajaxart.classes.Searchbox = function(settings) {
		aa_extend(this, settings);
	};
	ajaxart.classes.Searchbox.prototype.onSelect = function(item) {
		ajaxart.run(item,this.profile,'OnSelect',this.context);
	};
	ajaxart.classes.Searchbox.prototype.getItemControl = function(item) {
		ajaxart.run(item,this.profile,'OnSelect',this.context);
	};
	ajaxart.classes.Searchbox.prototype.injectItemControl = function(parentDiv,item) {
		if (!this.itemDisplayPage) return false;
		$(parentDiv).children().remove();
		aa_fieldControl({ Field: this.itemDisplayPage, FieldData: item.item, Wrapper: parentDiv, Context: this.context });
		return true;
	}
}

function aa_searchbox_search(searchtext,items) {
	searchtext = searchtext.toLowerCase();
	for(var i=0;i<items.length;i++) {
		var item = items[i];
		if (!searchtext) {
			item.passed=true;
			continue;
		}
		var text = item.extraText ? item.text + '  ' + item.extraText : item.text;
		
		if (!item.searchCache) item.searchCache = (text).toLowerCase();

		if (item.searchCache.indexOf(searchtext) > -1) {
			item.passed=true;
			continue;
		}
		item.passed = false;
	}
}

// TODO in searchbox:
// 2. Add (+) icon
// 4. better looking scrollbar
// 5. show all
// 6. search algorithm generic (with tests) - also sort results



aa_gcs("control", {
	TabControl: function(profile, data, context) // gc of control.TabControl
	{
		var field = aa_create_base_field(data, profile, context);

		aa_init_class_TabControl();

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context,ctx);
			field.Fields = ajaxart.runsubprofiles(data,profile,'Field',ctx2);
			var tabControl = new ajaxart.classes.TabControl({
				fields: field.Fields,
				data: field_data, profile: profile, context: ctx2, field: field, field_data: field_data,
				disableFurtherNextTabs: field.DisableFurtherNextTabs,
				checkValidationsWhenMovingForward: field.CheckValidationsWhenMovingForward,
				transition: field.TabTransition,
				tabContentsWidth: field.TabContentsWidth,
				tabContentsHeight: field.TabContentsHeight
			});

			var out = aa_renderStyleObject(field.Style,tabControl,ctx2,true);
			$(out).addClass('aa_tabcontrol');
			return [out];
		};
		return [field];
	}
});

aa_gcs("fld_aspect", {
	TabControlProperties: function(profile, data, context)
	{
		var field = context.vars._Field[0];

		field.KeepSelectedTab = aa_first(data,profile,'KeepSelectedTab',context);
		field.RefreshTabsOnSelect = aa_bool(data,profile,'RefreshTabsOnSelect',context);
		field.TabTransition = aa_first(data,profile,'Transition',context);
		field.TabContentsWidth = aa_int(data,profile,'TabContentsWidth',context);
		field.TabContentsHeight = aa_int(data,profile,'TabContentsHeight',context);

		field.DoOnTabChange = function(prevtab,newtab,fromUser) {
			ajaxart.run(data,profile,'DoOnTabChange',aa_ctx(context,{ PrevTab: [prevtab], NewTab: [newtab], OriginatedByUser: aa_frombool(fromUser) }));
		};
		aa_bind(field,'TabControlSelect',function(props) {
			ajaxart.run(data,profile,'DoOnTabChange',aa_ctx(context,{ NewTab: [props.TabField], PrevTab: [props.PrevTabField], OriginatedByUser: aa_frombool(props.fromUser) }));			
		});
		field.KeepHiddenTabInTheDOM = aa_bool(data,profile,'KeepHiddenTabInTheDOM',context);
	},
	ControlInTab: function(profile, data, context) {
		context.vars._Field[0].ControlInTab = function(data1,ctx) {
			ctx = aa_merge_ctx(context,ctx);
			var page = aa_first(data1,profile,'Page',ctx);
			if (page) {
				var out = $('<div/>')[0];
				aa_fieldControl({Wrapper: out, Field: page, Item: data1, Context: ctx });
				return [out];
			}
		};
	},
	TabControlAsWizard: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.DisableFurtherNextTabs = aa_bool(data,profile,'DisableFurtherNextTabs',context);
		field.CheckValidationsWhenMovingForward = aa_bool(data,profile,'CheckValidationsWhenMovingForward',context);
	}
});

aa_gcs("tabcontrol",{
	RefreshTabControlTitles: function(profile, data, context) {
		var field_id = aa_text(data,profile,'TabControl',context);
		var tabControl = aad_find_field(field_id)[0];
		if (tabControl && tabControl.jbApiObject)
			tabControl.jbApiObject.refreshTitles();
	}
});

function aa_init_class_TabControl() {
	aa_init_class('TabControl',{
		_ctor: function() {
			var field_data = this.field_data,context = this.context;

			this.tabs = [];
			for(var i=0;i<this.fields.length;i++) {
				var tabField = this.fields[i];
				if (tabField.IsHidden) continue;
				if (tabField.IsFieldHidden && tabField.IsFieldHidden(field_data,context)) continue;
				if (tabField.IsCellHidden && tabField.IsCellHidden(field_data,context)) continue;
					
				var tabInfo = {
					id: tabField.Id,
					text: aa_fieldTitle(tabField ,field_data, context,true),
					image: aa_init_image_object(tabField.TabImage,field_data,context),
					tabField: tabField,
					buildControl: function() {
				    var tab_data = ajaxart_field_calc_field_data(this.tabField,field_data,context);
				    var control = $('<div/>')[0];
				    aa_fieldControl({Field: this.tabField, FieldData: tab_data, Item: field_data, Wrapper: control, Context: context});
				    return control;
					},
					refreshControlOnSelect: this.field.RefreshTabsOnSelect
				};
				if (tabField.ControlInTab) {
					tabInfo.controlInTab = function() {
						return this.tabField.ControlInTab(field_data,context)[0];
					};
				}
				this.tabs.push(tabInfo);
			}
			this.firstSelectedTabIndex = this.field.KeepSelectedTab ? this.field.KeepSelectedTab.get(this.field.Id) : 0;
		},
		selectTab: function(moveTo,tabID) {
			this.el.jbChangeTab(moveTo,tabID);
		},
		onSelectTab: function(selectedTab,previousTab,fromUser) {
			try {
				if (this.field.KeepSelectedTab) { 
					this.field.KeepSelectedTab.set(this.field.Id,selectedTab.index);
				}
			} catch(e) { 
				ajaxart.logException('keep selected tab',e);
			}
			aa_trigger(this.field,'TabControlSelect',{ TabField: selectedTab.tabField, PrevTabField: previousTab && previousTab.tabField, fromUser: fromUser });
		},
		refreshTitles: function() {
			for(var i=0;i<this.tabs.length;i++) {
				var tabField = this.fields[i];
				this.tabs[i].text = aa_fieldTitle(tabField ,this.field_data, this.context,true);
			}
			aa_trigger(this,'refreshTitles');
		}
	});	
}

function aa_tabcontrol(tabcontrol, settings) {
	settings = settings || {};
	settings.tabElement = settings.tabElement || tabcontrol.$el.find('.aatabs_tab');
	settings.tabContents = settings.tabContents || tabcontrol.$el.find('.aatabs_contents');
	settings.tabSettings = settings.tabSettings || function(tab,$tab) {
		return {
			tabTextElement: $tab.find('.aatabs_tab_text'),
			tabImageElement: $tab.find('.aatabs_tab_image'),
			tabIndexElement: $tab.find('.aatabs_tab_index')			
		};
	};
	var tabContents = $(settings.tabContents);
	var tabTemplate = $(settings.tabElement);

	var tabs = tabcontrol.tabs;

	for(var i=0;i<tabs.length;i++) {
		var tabInfo = tabs[i];
		tabInfo.index = i;
		var $tab = tabTemplate.clone().insertBefore(tabTemplate);

		var tabSettings = settings.tabSettings($tab[0],$tab);
		$(tabSettings.tabTextElement).text( tabInfo.text );
		aa_setImage($(tabSettings.tabImageElement),tabInfo.image,true);
		$(tabSettings.tabIndexElement).text(i+1);
		var controlInTab = tabInfo.controlInTab && tabInfo.controlInTab();
		if (controlInTab)
			$(controlInTab).insertAfter(tabSettings.tabTextElement).addClass('aa_tabs_control_in_tab');

		aa_extend($tab[0],{
			jbTabInfo: tabInfo,
			jbTabControl: tabcontrol
		});
		tabInfo.$tabElement = $tab;

		$tab.click(function() {
			if ($(this).hasClass('disabled')) return;
			selectTab(this.jbTabInfo,true);
		});
	}
	tabTemplate.remove();

	var firstSelected = tabcontrol.firstSelectedTabIndex || 0;
	if (!tabs[firstSelected]) firstSelected = 0;

	if (tabs[firstSelected]) {
		selectTab(tabs[firstSelected]);
	}

	setTabContentsSize();

	function selectTab(tabInfo,fromUser) {
		if (!tabInfo) return;
		var currentTabInfo = tabcontrol.el.jbCurrentTabInfo;
		if (currentTabInfo == tabInfo) return;

		if (currentTabInfo && tabcontrol.checkValidationsWhenMovingForward) 
			if ( tabInfo.index > currentTabInfo.index && !aa_checkValidations(currentTabInfo.control) )
				return;

		if (!tabInfo.control || tabInfo.refreshControlOnSelect) {
			aa_remove(tabInfo.control,true);
			tabInfo.control = $(tabInfo.buildControl())[0];
		}

		if (tabcontrol.transition && currentTabInfo) {
			prevTabInfo = currentTabInfo;
			aa_replace_transition({
	            transition: tabcontrol.transition,
	            elOriginal: currentTabInfo.control, 
	            elNew: tabInfo.control,
				removeOriginal: function() { 
					removePrevTab(prevTabInfo);
	            },
	            onTransitionEnd: function() {
					aa_element_attached(tabcontrol.el);	            	
	            }
	        },tabcontrol.context);
		} else {
			if (currentTabInfo) {
				removePrevTab(currentTabInfo);
			}
			aa_empty(tabContents[0],true);
			tabContents[0].appendChild(tabInfo.control);				
		}
		tabcontrol.el.jbCurrentTabInfo = tabInfo;
		tabInfo.$tabElement.addClass('aa_selected_tab');
		tabInfo.$tabElement.parent().children().removeClass('aa_next_to_selected_tab');
		tabInfo.$tabElement.next().addClass('aa_next_to_selected_tab');
		
		if ($(tabInfo.control).hasClass('jbHidden')) {
			$(tabInfo.control).removeClass('jbHidden');
			tabInfo.control.style.display = 'block';
		}
		aa_element_attached(tabcontrol.el);

		if (tabcontrol.onSelectTab) tabcontrol.onSelectTab(tabInfo,currentTabInfo,fromUser);

		refreshEnabledTabs(tabInfo);
	}

	function removePrevTab(tabInfo) {
		if (tabcontrol.keepHiddenTabInTheDOM) {
			tabInfo.control.style.display = 'none';
			$(tabInfo.control).addClass('jbHidden');
		} else {
			aa_remove(tabInfo.control,false);
//			tabInfo.control = null;
		}
		tabInfo.$tabElement.removeClass('aa_selected_tab');
		aa_element_detached(tabInfo.control);		
	}

	function refreshEnabledTabs(currentTabInfo) {
		if (tabcontrol.disableFurtherNextTabs) {
			for(var i=0;i<tabcontrol.tabs.length;i++) {
				if (i <= currentTabInfo.index+1)
					tabcontrol.tabs[i].$tabElement.removeClass('disabled');
				else 
					tabcontrol.tabs[i].$tabElement.addClass('disabled');
			}
		}
	}

	function setTabContentsSize() {
		if (tabcontrol.tabContentsWidth) $(tabContents).width(tabcontrol.tabContentsWidth);
		if (tabcontrol.tabContentsHeight) $(tabContents).height(tabcontrol.tabContentsHeight);
	}

	// jbChangeTab is needed for the ChangeTab operation
	tabcontrol.el.jbChangeTab = function(moveto,tabid) {
			if (moveto == "refresh current tab") selectTab(tabcontrol.el.jbCurrentTabInfo);
			var newTab = null;
			if (moveto == 'first tab' && tabs.length) {
				newTab = tabs[0];
			}
			else if (moveto == 'specific tab') {
				for(var i=0;i<tabs.length;i++) {
					if (tabs[i].id == tabid) {
						newTab = tabs[i];
						break;
					}
				}
			}
			if (moveto == "next tab" || moveto == "previous tab") {
				if (!tabcontrol.el.jbCurrentTabInfo) return;
				var newIndex = tabcontrol.el.jbCurrentTabInfo.index + (moveto == "next tab" ? 1 : -1);
				if (tabs[newIndex]) newTab = tabs[newIndex];
			}
			if (newTab && newTab != tabcontrol.el.jbCurrentTabInfo) selectTab(newTab);
	};

	aa_addOnDetach(tabcontrol.el,function() {
		for(var i=0;i<tabs.length;i++) {
			if (tabs[i].control && tabs[i].$tabElement && !tabs[i].$tabElement.hasClass('aa_selected_tab'))
				aa_empty(tabs[i].control,true);
		}		
	});
}

function aa_tabcontrolAsAccordion(tabcontrol, settings) {
	settings.tabElement = settings.tabElement || tabcontrol.$el.find('.aatabs_tab');
	settings.tabContents = settings.tabContents || tabcontrol.$el.find('.aatabs_contents');
	settings.collapseAnimationTime = settings.collapseAnimationTime || 200;
	settings.expandAnimationTime = settings.expandAnimationTime || 200;

	settings.tabSettings = settings.tabSettings || function(tab,$tab) {
		return {
			tabTextElement: $tab.find('.aatabs_tab_text'),
			tabImageElement: $tab.find('.aatabs_tab_image'),
			tabToggleElement: $tab.find('.aatabs_tab_toggle'),			
			tabCaptionElement: $tab.find('.aatabs_tab_caption'),			
			tabContentsElement: $tab.find('.aatabs_tab_contents')
		};
	};
	var tabTemplate = $(settings.tabElement);

	var tabs = tabcontrol.tabs;
	for(var i=0;i<tabs.length;i++) {
		var tabInfo = tabs[i];
		tabInfo.index = i;
		var $tab = tabTemplate.clone().insertBefore(tabTemplate);

		var tabSettings = settings.tabSettings($tab[0],$tab);
		tabInfo.tabSettings = tabSettings;

		$(tabSettings.tabTextElement).text( tabInfo.text );
		aa_setImage($(tabSettings.tabImageElement),tabInfo.image,true);
		var controlInTab = tabInfo.controlInTab && tabInfo.controlInTab();
		if (controlInTab)
			$(controlInTab).insertAfter(tabSettings.tabTextElement).addClass('aa_tabs_control_in_tab');
		
		aa_extend($tab[0],{
			jbTabInfo: tabInfo,
			jbTabControl: tabcontrol
		});
		tabInfo.$tabElement = $tab;
		$(tabSettings.tabCaptionElement)[0].jbTabInfo = tabInfo;

		$(tabSettings.tabCaptionElement).click(function() {
			toggleTab(this.jbTabInfo);
		});

		if (settings.autoExpand == 'all') expandTab(tabInfo,true);
	}
	tabTemplate.remove();

	var firstSelected = tabcontrol.firstSelectedTabIndex || 0;

	if (tabs[firstSelected] && settings.autoExpand != 'none' && settings.autoExpand != 'all') {
		toggleTab(tabs[firstSelected],true);
	}

	aa_bind(tabcontrol,'refreshTitles',function() {
		for(var i=0;i<tabs.length;i++) {
			var tabInfo = tabs[i];
			var $tab = tabInfo.$tabElement;
			var tabSettings = settings.tabSettings($tab[0],$tab);

			$(tabSettings.tabTextElement).text( tabInfo.text );
			aa_setImage($(tabSettings.tabImageElement),tabInfo.image,true);
		}
	});

	function toggleTab(tabInfo,firstTime) {
		if (!tabInfo) return;
		if (tabInfo.$tabElement.hasClass('expanded')) {
			collapseTab(tabInfo);
			tabcontrol.el.jbCurrentTabInfo = null;
			return;
		}
		var currentTabInfo = tabcontrol.el.jbCurrentTabInfo;
		if (currentTabInfo == tabInfo) return;
		if (currentTabInfo) collapseTab(currentTabInfo);
		expandTab(tabInfo,firstTime);
	}
	function collapseTab(tabInfo) {
		var tabElement = $(tabInfo.tabSettings.tabContentsElement)[0];
		var tabContentsElement = $(tabInfo.tabSettings.tabContentsElement)[0];
		if (settings.doCollapse) {
		 settings.doCollapse( tabInfo.$tabElement );
		} else {
			if (window.aa_intest) 
				$(tabContentsElement).hide();
			else 
				$(tabContentsElement).animate({ height: 'hide'},settings.collapseAnimationTime);
		}
		tabInfo.$tabElement.removeClass('expanded');
	}
	function expandTab(tabInfo,firstTime) {
		if (!tabInfo.control || tabInfo.refreshControlOnSelect) {
			aa_remove(tabInfo.control,true);
			tabInfo.control = $(tabInfo.buildControl())[0];
		}

		var tabElement = $(tabInfo.tabSettings.tabContentsElement)[0];
		if (tabInfo.control.parentNode != tabElement) {
			aa_empty(tabElement,true);
			tabElement.appendChild(tabInfo.control);
			aa_element_attached(tabInfo.control);
		}

		tabInfo.$tabElement.addClass('expanded');
		if (window.aa_intest || firstTime) 
			$(tabElement).show();
		else
			$(tabElement).animate({ height: 'show'},settings.collapseAnimationTime);
		tabcontrol.el.jbCurrentTabInfo = tabInfo;

		if (tabcontrol.onSelectTab) tabcontrol.onSelectTab(tabInfo);	
	}
	// jbChangeTab is needed for the ChangeTab operation
	tabcontrol.el.jbChangeTab = function(moveto,tabid) {
			if (moveto == 'specific tab') {
				for(var i=0;i<tabs.length;i++) {
					if (tabs[i].id == tabid)
						return toggleTab( tabs[i] );
				}
			}
			if (moveto == "refresh current tab") toggleTab(tabcontrol.el.jbCurrentTabInfo);
			if (moveto == "next tab" || moveto == "previous tab") {
				if (!tabcontrol.el.jbCurrentTabInfo) return;
				var newIndex = tabcontrol.el.jbCurrentTabInfo.index + (moveto == "next tab" ? 1 : -1);
				if (tabs[newIndex]) toggleTab(tabs[newIndex]);
			}			
	};
}





aa_gcs("data",	{
	  Switch: function (profile,data,context)
	  {
		  return aa_switch(profile,data,context);
	  },
	  StringifyJson: function (profile,data,context) {
		  var obj = aa_first(data,profile,'Object',context) || {};
		  var xtmlSource = obj.XtmlSource;
		  var dtsupport = obj.dt_support;
		  delete obj.XtmlSource;
		  delete obj.dt_support;
		  if (aa_bool(data,profile,'PrettyPrint',context))
		  	var result = JSON.stringify(obj,null, '  ');
		  else
		  	var result = JSON.stringify(obj);

		  if (xtmlSource) obj.XtmlSource = xtmlSource;
		  if (dtsupport) obj.dt_support = dtsupport;
		  return [result];
	  },
		RemoveNullProperties: function (profile,data,context) {
		  var orig = aa_first(data,profile,'Object',context) || {};
		  var out = {};
		  for (i in orig)
		 	if (orig.hasOwnProperty(i) && orig[i] != null) out[i] = orig[i];
		  return [out]
	  },
	  DataWithPreAction: function (profile,data,context) {
	  	aa_run(data,profile,'Action',context);
	  	return aa_run(data,profile,'Query',context);
	  },
	  ParseJson: function (profile,data,context) {
	  	var result= JSON.parse(aa_text(data,profile,'JSON',context));
	    if (aa_isArray(result)) return result;
	  	return [result || '{}'];
	  },
	  Subset: function (profile,data,context)
	  {
	    var from = aa_int(data,profile,'From',context)-1;
	    var count = aa_int(data,profile,'Count',context);
	    if (isNaN(count)) count = data.length;
	    return data.slice(from,from+count);
	  },
	  SubsetWithMore: function (profile,data,context)
	  {
	    var from = aa_int(data,profile,'From',context)-1;
	    var count = aa_int(data,profile,'Count',context);
	    if (isNaN(count)) count = data.length;
	    var out = data.slice(from,from+count);
	    if (out.length < data.length) {
		    out.push(aa_first(data,profile,'ItemForMore',context));
	    }
	    return out;
	  },
	  JustInTimeCalculation: function (profile,data,context)
	  {
		  var out = { isObject:true, Content:null };
		  out.GetContent = function(data1,ctx) {
			  if (out.Content == null) {
				  out.Content = ajaxart.run(data1 || data,profile,'Content',aa_merge_ctx(context,ctx));
			  }
			  return out.Content;
		  }
		  out.CleanContent = function() {
		  	out.Content = null;
		  }
		  return [out];
	  },
	  JavaScript: function (profile,data,context)
	  {
			var ret = aa_run_js_code(aa_text(data,profile,'Code',context),data,context);
			if (!ret) return [];
			if (typeof(ret) == 'string') return [ret];
			if (typeof(ret) == 'number') return [""+ret];
			if (typeof(ret) == 'boolean') {
				if (ret) 
					return ["true"];
				else
					return [];
			}
			if (aa_isArray(ret)) return ret;
			return [ret];
	  },
	  AddSeparator: function (profile,data,context)
	  {
	    var addBefore = aa_first(data,profile,'AddBefore',context);
	    var addAfter = aa_first(data,profile,'AddAfter',context);
	    
			var out = [];
			if (addBefore) out.push(addBefore);

	  	ajaxart.each(data,function(item,i) {
	  	    var Separator = aa_first(data,profile,'Separator',context);
	  			out.push(item);
	  			if (i+1 < data.length && Separator != null)
	  		  	out.push(Separator);
	  	});
	  	if (addAfter) out.push(addAfter);
	  	return out;  	
	  },
	  NewValueWithItemIndex: function (profile,data,context)
	  {
	  	return aa_map(data,function(item,index) {
	  		return aa_first([item],profile,'Value',aa_ctx(context,{ Index: [index] }));
	  	});
	  },
	  Count: function (profile,data,context)
	  {
		  var items = ajaxart.run(data,profile,'Items',context);
			return [items.length];
	  },
	  FirstSucceeding: function (profile,data,context)
	  {
	    var itemProfiles = ajaxart.subprofiles(profile,'Item');

	    for(var i=0;i<itemProfiles.length;i++)
	    {
				var subresult = ajaxart.run(data,itemProfiles[i],"",context);
				if (subresult.length > 0) return subresult;
			}
			return [];
	  },
	  IfThenElse: function (profile,data,context)
	  { 
		return aa_ifThenElse(profile,data,context);
	  },
	  ItemByID: function (profile,data,context)
	  {
		  var list = ajaxart.run(data,profile,'List',context);
		  var id = aa_text(data,profile,'ID',context);
		  
		  for(var i=0;i<list.length;i++)
			  if (list[i].ID == id) return [ list[i] ];
		  
		  return [];
	  },
	  ItemsByIDs: function (profile,data,context)
	  {
		  var list = ajaxart.run(data,profile,'List',context);
		  var ids = "," + aa_text(data,profile,'IDs',context) + ",";
		  if (ids == ",*,") return list;
		  
		  var out = [];
		  
		  for(var i=0;i<list.length;i++) 
			  if (list[i].Id != "" && ids.indexOf(list[i].Id) != -1) out.push(list[i]);
		  
		  return out;
	  },
	  List: function (profile,data,context)
	  {
	    var items = ajaxart.subprofiles(profile,'Item');
	  	var out = [];
	  	
	  	for(var i=0;i<items.length;i++) {
	  	  var next = ajaxart.run(data,items[i],"",context);
	  	  ajaxart.concat(out,next);
	  	};
	  	
	  	var aggs = ajaxart.subprofiles(profile,'Aggregator');
		  for(var i=0;i<aggs.length;i++)
				out = ajaxart.run(out,aggs[i],'',context); 

	  	return out;  	
	  },
	  Pipeline: function (profile,data,context)
	  {
			if (data.length > 1) data = [ data[0] ];
			var itemProfiles = ajaxart.subprofiles(profile,'Item');
			var nextData = data;

			for(var i=0;i<itemProfiles.length;i++) {
				var itemProfile = itemProfiles[i];
				var arr = [];
				if (nextData.length === 0 && i != 0) {
					nextData = [];
					break;
				}

				if (data.length <= 1 && i === 0)
					arr = ajaxart.run(nextData,itemProfile,"",context);
				else 
				{
					var compiledFunc = ajaxart.compile(itemProfile,'',context);

					if (compiledFunc == "same") continue;
					
					if (compiledFunc == null)
						for(var j=0;j<nextData.length;j++) 
							ajaxart.concat(arr,ajaxart.run([ nextData[j] ],itemProfile,"",context) );
					else
						for(var j=0;j<nextData.length;j++) 
							ajaxart.concat(arr,compiledFunc([nextData[j]],context) );
				}
				
				nextData = arr;
			}

			// now aggregators
		  var aggProfiles = ajaxart.subprofiles(profile,'Aggregator');
			  
		  for(var i=0;i<aggProfiles.length;i++) {
				nextData = ajaxart.run(nextData,aggProfiles[i],'',context); 
			}

			return nextData;
		},
		RunActionAndKeepInput: function (profile,data,context)
	  {
		  ajaxart.run(data,profile,'Action',context);
		  return data;
	  },
	  Same: function (profile,data,context)
	  {
	  	return data;
	  },
	  CleanNS: function (profile,data,context)
	  {
		  if (data[0] && typeof(data[0]) == 'object' && ! data[0].nodeType ) // json or csv
				return jbart_data(data[0],'single');

		  return jbart_data(ajaxart.totext_array(data),'single');
	  },
 	  IndexOfValueInCSV: function(profile, data, context) {
			var values = aa_text(data,profile,'Values',context);
			var value = aa_text(data,profile,'Value',context);
			var vals = values.split(',');
			var result = [];
			for(var i=0;i<vals.length;i++) 
				if (vals[i] == value) result.push('' + (i+1));
			return result;
		},
	  CSVValueByIndex: function(profile, data, context) {
			var values = aa_first(data,profile,'Values',context);
			var index = aa_int(data,profile,'Index',context);
			if (!values) return [];

			if (values.nodeType == 2) // att
				return [new aa_CSVValByRef(values,index-1)];
			return [aa_text(data,profile,'Values',context).split(',')[index-1]];
	  },
		CSVValuesByCode: function(profile, data, context) {
			var out = {};
			var codes = jQuery.trim(aa_text(data,profile,'Codes',context));
			var values = aa_first(data,profile,'Values',context);
			if (!values) return [];
			if (values.nodeType != 2) // att
				values = aa_text(data,profile,'Values',context).split(',');

			var codes_ar = codes.split(',');
			if (values.nodeType == 2) {
				for(var i=0;i<codes_ar.length;i++)
					out[codes_ar[i]] = new aa_CSVValByRef(values,i);
			} else {
				for(var i=0;i<codes_ar.length;i++)
					out[codes_ar[i]] = values[i];
			}
			return [out];
		},
		ObjectToCSV: function(profile, data, context) {
			var out = [];
			var atts = jQuery.trim(aa_text(data,profile,'Atts',context)).split(',');
			var obj = aa_first(data,profile,'Object',context);
			for(var i=0;i<atts.length;i++)
				out.push(ajaxart.totext_item(obj[atts[i]]));
			return [out.join(',')];
		},
		MatrixByColumns: function(profile, data, context) {
			var items = ajaxart.run(data,profile,'Items',context);
			var no_of_cols = aa_int(data,profile,'NoOfColumns',context);
			if (items.length ==0) return [];

			var result = [],row=[items[0]];
			for (var i=1;i<items.length;i++) {
				if (i % no_of_cols == 0) {
					result.push(row);
					row = [];
				}
				row.push(items[i]);
			}
			result.push(row);
			return result;
		},
		SwapRowsAndColumns: function(profile, data, context) {
			var result = [];
			var items = ajaxart.run(data,profile,'Items',context);
			var no_of_cols = aa_int(data,profile,'NoOfColumns',context);
			var new_no_of_cols = Math.floor(items.length/no_of_cols);
			for (var i=0;i<items.length;i++) {
				var col=i % no_of_cols,row=Math.floor(i/no_of_cols);
				var rev_index = col*new_no_of_cols+row;
				//console.log(row,col,rev_index);
				result[rev_index] = items[i]; // reverse col and Columns
			}
			return result;
		},
  Zip: function (profile,data,context)
  {
	var lists = [];
  	var itemProfiles = ajaxart.subprofiles(profile,'List');
  	for(var i=0; i<itemProfiles.length; i++)
  		lists.push({list:ajaxart.run(data,itemProfiles[i],"",context) });
	  
	var i=0;
	var result = [];
	if (lists.length == 0) return result;
	var result_length = 0;
	for(var j=0; j<lists.length; j++)
		result_length = Math.max(result_length,lists[j].list.length);
	
	for(var i=0;i<result_length;i++)
	{
	  var item = { isObject: true};
	  for(var j=0; j<lists.length; j++)
		  item['' + j] = (i < lists[j].list.length) ? lists[j].list[i] : '';
	  result.push(item);
	}
	return result;
  },
  Csv: function (profile,data,context)
  {
	  var content = aa_text(data,profile,'Content',context);
	  var fieldNames = aa_text(data,profile,'FieldNames',context).split(',');
	  var lines = content.split('\n');
	  var result = [];
	  var first_line = 0;
	  if (fieldNames == '') 
	  {
		  fieldNames = lines[0].split(',');
		  first_line = 1;
	  }
	  for(var i=first_line;i<lines.length;i++)
	  {
		  if (lines[i] == '') continue;
		  var fields = lines[i].split(',');
		  var obj = { isObject: true, __index: i};
		  for (var j=0;j<fieldNames.length;j++)
			  obj[fieldNames[j]] = fields[j];
		  result.push(obj);
	  }
	  return result;
  },
  Reduce: function (profile,data,context)
  {
    var result = ajaxart.run(data,profile,'InitialValue',context);
    var items = ajaxart.run(data,profile,'Items',context);

    for(var i=0;i<items.length;i++)
    	result = ajaxart.run(result,profile,'Formula',aa_ctx(context,{ Item : [items[i]] } ) );
  	
  	return [result];  	
  },
  Math: function (profile,data,context)
  {
	  var exp = aa_text(data,profile,'Expression',context);
	  var fix = aa_bool(data,profile,'FixFloatingPointResult',context);
	  try
	  {
		  eval('var val = ' + exp);
	  	  if (fix) 
	  		  val = ((val*10000).toFixed(5)/10000);
		  return [ '' + val ];
	  }
	  catch(e)
	  {
		  return [];
	  }
  },
  Percent: function (profile,data,context) {
	  var result = [];
	  var exp = aa_text(data,profile,'Part',context) + '/' + aa_text(data,profile,'Whole',context);
	  try {
		  eval( 'var val = "" + 100*' + exp);
		  result.push(val);
	  }
	  catch(e) { 
		  ajaxart.log("Can not calc percent expression: " + exp,'Error');
	  }
	  return result;
  },
  Cookie: function(profile, data, context) {
    var name = aa_text(data,profile,'CookieName',context);
    return [{
      name: name,
      WriteValue: function(newval) {
        aa_writeCookie(name,aa_totext(newval));
      },
      GetValue: function() {
        return aa_valueFromCookie(name);
      }
    }];
  },
	SessionStorage: function(profile, data, context) {
    var key = aa_text(data,profile,'Key',context);
    if (aa_bool(data,profile,'ValueAsText',context) ) {
			var val = sessionStorage[key];
      return val ? [''+val] : [];
    }
    return [{
      key: key,
      WriteValue: function(newval) {
        sessionStorage[key] = aa_totext(newval);
			},
      GetValue: function() {
				var val = sessionStorage[key];
        return val ? [val] : [];
      }
    }];
  },
	LocalStorage: function(profile, data, context) {
    var key = aa_text(data,profile,'Key',context);
    if (aa_bool(data,profile,'ValueAsText',context) ) {
			var val = localStorage[key];
      return val ? [''+val] : [];
    }
    return [{
      key: key,
      WriteValue: function(newval) {
        localStorage[key] = aa_totext([newval]);
			},
      GetValue: function() {
				var val = localStorage[key];
        return val ? [val] : [];
      }
    }];
  },
  Parents: function(profile, data, context)
  {
	var max_depth = aa_int(data,profile,'MaxIterations',context);
	var item = data[0],out = [];
	if (aa_bool(data,profile,'IncludeItself',context)) out.push(item);
	
	while (item && max_depth >0) {
	  max_depth--;
	  if (aa_bool([item],profile,'StopWhen',context))
		  return out;
	  item = aa_first([item],profile,'ParentRelation',context);
	  if (item)
		  out.push(item);
	}
	return out;
  },
  RandomPick: function (profile,data,context)
  {
	  if (data.length <= 1) return data;
	  
	  var rnd = Math.random();
	  var num = Math.floor( rnd * data.length );
	  return [ data[num] ];
  },
  RandomNumber: function (profile,data,context)
  {
	  var from = aa_int(data,profile,'From',context);
	  var to = aa_int(data,profile,'To',context);
	  var rnd = Math.random();
	  var num = Math.floor( rnd * (to-from+1) ) + from;
	  return [ num ];
  },
  RandomShuffle: function (profile,data,context)
  {
	  if (data.length <= 1) return data;

	  var o = [];
	  for(var i=0;i<data.length;i++) o[i] = data[i];
	  
	  for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
	  
	  return o;
	  
  },
  Last: function (profile,data,context)
  {
	  if (data.length == 0) return [];
	  return [ data[data.length-1] ];
  },
  Slice: function (profile,data,context)
  {
    var from = aa_int(data,profile,'From',context);
    var to = aa_int(data,profile,'To',context);
    if (to == null && from == null) return data;
    if (to == null) return data.slice(from);
    if (from == null) return data.slice(to);
    
		return data.slice(from,to);
  },
  Min: function (profile,data,context)
  {
  	var items = ajaxart.run(data,profile,'ToCompare',context);
  	var numbers = $.map($.map(items,ajaxart.totext_item),parseFloat);
	
    var result = 0;
    for(var i=1;i<numbers.length;i++)
    	if (numbers[i] < numbers[result]) result = i;
	  return [data[result]];
  },
  Max: function (profile,data,context)
  {
  	var items = ajaxart.run(data,profile,'ToCompare',context);
  	var numbers = $.map($.map(items,ajaxart.totext_item),parseFloat);
	
    var result = 0;
    for(var i=1;i<numbers.length;i++)
    	if (numbers[i] > numbers[result]) result = i;
	  return [data[result]];
  },
  Average: function (profile,data,context)
  {
  	var digits = aa_int(data,profile,'Digits',context);
    var count=0,sum=0;
    if (data.length == 0) return [0];
    for(var i=0;i<data.length;i++) {
    	count++;
    	sum += Number(ajaxart.totext_item(data[i]));
    }
    if (isNaN(sum)) return [];
    var base = Math.pow(10,digits);
    var num = Math.round(base * sum / count) / base;
		return [num];
  },
  Sum: function (profile,data,context)
  {
    var sum=0;
    for(var i=0;i<data.length;i++)
    	sum += Number(ajaxart.totext_item(data[i]));
    
    if (isNaN(sum)) return [];
	return [sum];
  },
  InPreviewMode: function (profile,data,context)
  {
	if (typeof(ajaxart) != "undefined" && ajaxart.inPreviewMode) return ["true"];
	return [];
  },
  RecursiveScan: function (profile,data,context)
  {
	  var onlyLeaves = aa_bool(data,profile,"OnlyLeaves",context);
	  var maxItems = aa_text(data,profile,"MaxItemsToAvoidInfinitiveLoop",context);
	  var scanOrder = aa_text(data,profile,"ScanOrder",context);
	  
	  var result = [];
	  var nodes = data;
	  var current_node_index = 0;
	  var total = 0;
	  
	  while (nodes.length > current_node_index) {
	  	var current_node;
	  	if (scanOrder == "Depth first search")
	  		current_node = nodes.pop();
	  	else {
	  		current_node = nodes[current_node_index];
	  		current_node_index++;
	  	}
		  var nextLevel = ajaxart.run([current_node],profile,'ChildNodes',context);
		  if (scanOrder == "Depth first search")
		  	nextLevel = nextLevel.reverse();
		  ajaxart.concat(nodes,nextLevel);
		  if (!onlyLeaves || nextLevel.length ==0)
		  	result.push(current_node);
		  if (total++ > maxItems) {
		  	ajaxart.log("RecursiveScan - exceeded max items, might be infinitive loop, max items:" + total,"error");
		  	break;
		  }
	  }
	  return result;
  },
  UniqueNumber: function (profile,data,context)
  {
	  var prefix = aa_text(data,profile,'Prefix',context);
	  var suffix = aa_text(data,profile,'Suffix',context);
	  var num = prefix + (ajaxart.unique_number++) + suffix;
	  
	  return [num];
  },
  Demote: function (profile,data,context)
  {
	  var demote = "," + aa_text(data,profile,'Items',context) + ",";
	  var i=0;
	  var out = [], last = [];
	  for(var i=0;i<data.length;i++) {
		  var itemText = aa_text([data[i]],profile,'ItemText',context);
		  if (demote.indexOf(","+itemText+",") == -1) out.push(data[i]); else last.push(data[i]);
	  }
	  for(var i=0;i<last.length;i++) out.push(last[i]);
	  return out;
  },
  Single: function (profile,data,context)
  {
	  var items = ajaxart.run(data,profile,"Items",context);
	  return [items];
  },
  Url: function (profile,data,context)
  {
	  var str = "" + window.location.href;
	  return [str];
  },
  IsInSelectedItems: function (profile,data,context)
  {
		var list = "," + ajaxart.totext_item(ajaxart.getVariable(context,'SelectedItems')[0]) + ",";
		var txt = "," + ajaxart.totext_item(data[0]) + ",";
		if (list.indexOf(txt) != -1)
			return ["true"];
		return [];
  },
  IsCodeInSelectedItems: function (profile,data,context)
  {
		var list = "," + ajaxart.totext_item(ajaxart.getVariable(context,'SelectedItems')[0]) + ",";
		var txt = "," + aa_text(data,profile,'Code',context) + ",";
		if (list.indexOf(txt) != -1)
			return ["true"];
		return [];
  },
  ValueFromCookie: function (profile,data,context)
  {
	var name = aa_text(data,profile,'Cookie',context);
	var asXml = aa_bool(data,profile,'AsXml',context);
	var result = aa_valueFromCookie(name);
	if (result == null) return [];
	if (asXml)
	  if (result == "") return [];
	  else return [aa_parsexml(result,"cookie " + name)];
	return [result];
  },
  Object: function (profile,data,context)
  {
	  var out = { isObject: true };
	  var elem = profile.firstChild;
	  while (elem != null)
	  {
		  if (elem.nodeType == 1) 
		  {
			  var tag = aa_tag(elem);
			  var name = elem.getAttribute('name');
			  if (name == null || name == "") { elem = elem.nextSibling;  continue; }
			  
			  if (tag == 'Property') {
				  out[name] = ajaxart.run(data,elem,'',context);
			  } else if (tag == 'LightMethod') {
				  out[name] = { script: elem , context: context, compiled: ajaxart.compile(elem,'',context,elem.getAttribute("paramVars")) };
			  } else if (tag == 'Method') {
				  out[name] = { script: elem , context: context, objectForMethod: [out], compiled: ajaxart.compile(elem,'',context,elem.getAttribute("paramVars")) };
			  }
		  }
	    elem = elem.nextSibling;
	  }
			
	  return [out];
  },
  MakeUnique: function (profile,data,context)
  {
  	var item_names = {};
  	var out = [];
  	for(var i=0;i<data.length;i++) {
  	 var item = data[i];
      var id = "_" + aa_text([item],profile,'Identifier',context);
      var used = true;
      if (!item_names[id]) {
      	item_names[id] = true;
      	out.push(item);
      }
  	}
  	return out;
  },
  CreateDateRangesFromNow: function (profile,data,context) {
  	var count = aa_int(data,profile,'Count',context);
  	var resolution = aa_text(data,profile,'Resolution',context);

  	var out = [];
  	var now = new Date();
  	var tomorrowMidnight = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime() + 1000*60*60*24;

  	var diff = 0;
  	if (resolution == 'days') diff = 1000*60*60*24;
  	if (resolution == 'weeks') diff = 1000*60*60*24*7;

  	if (resolution == 'days' || resolution == 'weeks') {
  		var lastValue = tomorrowMidnight;
  		if (resolution == 'weeks') {
  			lastValue += (6 - new Date().getDay()) * 1000*60*60*24;
  		}
	  	for(var i=0;i<count;i++) {
	  		out.push({ From: lastValue - diff, To: lastValue-1 });
	  		lastValue -= diff;
	  	}
	  }
	  if (resolution == 'months') {
	  	var year = now.getFullYear();
	  	var month = now.getMonth();

	  	for(var i=0;i<count;i++) {
	  		var month2 = month+1,year2 = year;
	  		if (month2>12) { month2=1; year2++; }
	  		out.push({ From: new Date(year,month,1).getTime(), To: new Date(year2,month2,1).getTime()-1 });
	  		
	  		month--;
	  		if (month==0) { year--;month=12;}
	  	}
	  }

  	return out;
  },
  GroupBy: function (profile,data,context)
  {
  	var groups = [];
  	var group_ids = {};
  	var items = ajaxart.run(data,profile,"Items",context);
  	for(var i=0;i<items.length;i++) {
  		var item = items[i];
      var id = "_" + aa_text([item],profile,'GroupBy',context);
      if (group_ids[id] == null) {
    	group_ids[id] = groups.length;
    	groups.push({ ID:id.substring(1), Items:[item]});
      } else
    	  groups[ group_ids[id] ].Items.push(item);
  	}
  	var out = [];
  	for(var i=0;i<groups.length;i++) 
  		out.push ( aa_first([groups[i]] ,profile, 'Group', context) );
  	
  	return out;
  },
  ExpandWithRelated: function (profile,data,context)
  {
	var max_depth = aa_int(data,profile,'MaxDepth',context);
	var log_relations_to = ajaxart.run(data,profile,'LogRelationsTo',context);
	var log = '';
	var has_log = log_relations_to.length>0;
  	var group = {}, new_items = [];
  	ajaxart.each(data,function(item) {
  		var id = aa_text([item],profile,'Identifier',context);
  		group[id] = { id: id, Item: item, RefCount: 0};
  		new_items.push(id);
  	});
  	
  	function expand(items)
  	{
  		var new_items = [];
  		for(var j=0;j<items.length;j++)
  		{
  			var item = items[j];
  			var related = ajaxart.run([group[item].Item],profile,'Relation',context);
  			for(var i=0;i<related.length;i++)
  			{
  				var related_id = aa_text([related[i]],profile,'Identifier',context);
  				if (!group[related_id]) {
  					group[related_id] = { id: related_id, Item: related[i], RefCount: 0};
  					new_items.push(related_id);
  				}
				if (has_log) log += '<rel from="' + item + '" to="' + related_id + '"/>\n';
  			}
  		}
  		return new_items;
  	};
  	for(var count = 0;new_items.length > 0 && count < max_depth;count++) {
  		new_items = expand(new_items);
  	}
  	if (count >= max_depth) 
  		ajaxart.log("expand error. more than " + max_depth + " levels deep");
  	
  	var out=[];
	for(item in group)
	 	if (group.hasOwnProperty(item))
			out.push(group[item]);
	ajaxart.writevalue(log_relations_to,[ajaxart.totext_array(log_relations_to) + log]);
  	return out;
  },
  CountUnique: function(profile,data,context)
  {
	  var out = 0;
	  var uniques = {};
	  for(var i=0; i<data.length; i++)
	  {
		  var key = '' + data[i];
		  if (uniques[key]) continue;
		  uniques[key] = true;
		  out++;
	  }
	  return [out];
  },
  MakeUniqueAndCount: function (profile,data,context)
  {
  	var item_count = {};
  	var out = [];
  	ajaxart.each(data,function(item) {
      var id = ajaxart.totext_item(item);
      var used = true;
      if (item_count[id] == null)
    	  item_count[id] = 0;
      item_count[id]++;
  	});
  	for (x in item_count)
  	{
	  if (!item_count.hasOwnProperty(x)) continue;
  	  var it = { };
  	  it.text = x;
  	  it.count = item_count[x];
  	  out.push(it);
  	}
  	out.sort(function(a, b) { return a.count - b.count; });
  	return out;
  },
  Struct: function (profile,data,context)
  {
	  return ajaxart.make_array(data,function(item) {
		  var itemProfs = ajaxart.subprofiles(profile,'Item');
		  var out = { isObject: true };
		  ajaxart.each(itemProfs,function(itemProf) {
			  var name = aa_text(data,itemProf,'Name',context);
			  var val = ajaxart.run(data,itemProf,'Value',context);
			  out[name] = val;
		  });
		  return out;
	  },true);
  },
  Aggregate: function (profile,data,context)
  {
   	  var aggProfiles = ajaxart.subprofiles(profile,'Aggregator');
	  
   	  var nextData = data;
   	  ajaxart.each(aggProfiles,function(aggProfile) {
   		  nextData = ajaxart.run(nextData,aggProfile,'',context); 
   	  });
	  return nextData;
  },
  RuntimeObjectType: function (profile,data,context)
  {
	  if (data.length == 0) return ["empty"];
	  if (ajaxart.ishtml_array(data)) return ["html"];
	  if (ajaxart.isxml_array(data)) return ["xml"];
	  if (ajaxart.isObject(data)) return ["struct"];
	  if (data[0].params != null && data[0].vars != null)
		  return ["context"];
	  if (typeof(data[0]) == "function") return ["function"];
	  return ["text"];
  },
  HtmlToCleanText: function (profile,data,context)
  {
	var str = aa_totext(data);
	
	while (str.indexOf('<') > -1) {
		var pos1 = str.indexOf('<');
		var pos2 = str.indexOf('>',pos1);
		if (pos2 > pos1) str = str.substring(0,pos1) + str.substring(pos2+1);
		else return [str];
	}
	return [str];
  },
  ReverseOrder: function (profile,data,context)
  {
  	var out = [];
    ajaxart.each(data,function(item) {
    	out.push(item);
  	});
    out.reverse();
    return out;
  },
  HashPassword: function (profile,data,context)
  {
	  var pwd = ajaxart.totext(data);
	  return [ ajaxart_hashPassword(pwd) ];
  },
  DuplicateNTimes: function (profile,data,context)
  {
  	var times = aa_int(data,profile,'Times',"",context);
  	if (data.length == 0) return [];
  	var out = [];
  	for (var i=0; i<times; i++)
  		out.push( ajaxart.xml.clone( data ) );
  	return out;
  },
  Subtract: function (profile,data,context)
  {
    var list = ajaxart.run(data,profile,'List',context);
    var sub = ajaxart.run(data,profile,'Subtract',context);
    
    var out = [];
    for(var i=0; i<list.length; i++)
    {
    	var item = list[i];
    	var add = true;
    	for(var j=0; j<sub.length; j++)
    	{
    		var subitem = sub[j];
    		if (aa_itemsEqual(item,subitem))
    		{
    			add = false;
    			break;
    		}
    	}
    	if (add) out.push(item);
    }
    return out;
  },
  Sort: function (profile,data,context)
  {
  	var type = aa_text(data,profile,'Type',context);
  	var order = aa_text(data,profile,'Order',context);
  	var sortPath = aa_text(data,profile,'SortByPath',context);
  	var sortAtSource = aa_bool(data,profile,'SortAtSource',context);
  	var hasSortPath = (sortPath != "");
  	
  	var sort_function = function (item1,item2)
  	{
  		if (item1.sortby < item2.sortby) return -1;
  		if (item2.sortby < item1.sortby) return 1;
  		return 0;
  	};
  	var items = [];
  	for(var i=0;i<data.length;i++) {
  		var value="";
  		if (hasSortPath)
  			value = ajaxart.totext( aa_xpath(data[i],sortPath) );
  		else
  			value = aa_text([data[i]],profile,'SortBy',context);
  		
  		if (type == "number") value = Number(value);
  		if (type == "date") value = aadate_date2int(value);
  		items.push( { data : data[i], sortby : value } );
  	};
  	items.sort(sort_function);
  	if (order == 'Descending')
  		items = items.reverse();
  	var out = [];
  	ajaxart.each(items,function(item) {
  		out.push(item.data);
  	});
  	if (sortAtSource)
  	{
  		// check for same xml parent
  		var parent = null;
  		for (var i=0;i < items.length; i++)
  		{
  			var new_parent = items[i].data.parentNode;
  			if (new_parent != parent && i != 0) return out;
  			parent = new_parent;
  			if (parent == null || parent == undefined) return out;
  		}
  		
  		// remove and add as sorted
  		for (var i=0;i < items.length; i++)
  			parent.removeChild(items[i].data);
  		for (var i=0;i < items.length; i++)
  			parent.appendChild(items[i].data);
  	}	
  	return out;
  },
  VariableValue: function (profile,data,context)
  {
  	var variable = aa_text(data,profile,'Variable',context);
  	return ajaxart.getVariable(context,variable);
  },
  RoundCents: function (profile,data,context)
  {
	  var str = "" + Math.round(data[0] * 100);
	  return [str.substring(0, str.length - 2) + "." + str.substring(str.length - 2, str.length)];
  },

  CreateIfDoesNotExist: function (profile,data,context)
  {
	  var result = ajaxart.run(data,profile,'Query',context);
	  if (result.length > 0) return result;
	  ajaxart.run(data,profile,'Create',context);
	  var result = ajaxart.run(data,profile,'Query',context);
	  if (result.length == 0) ajaxart.log('CreateIfDoesNotExist - Create does not make query ');
	  return result;
  },
  ReplaceItemByIndex: function(profile, data, context) {
	  var index = aa_int(data,profile,'Index',context);
	  var newItem = aa_first(data,profile,'NewItem',context);
	  if (index < 1 || index > data.length || newItem == null) return data;
	  var out = [];
	  for(var i=0;i<data.length;i++)
		  if (i == index-1) out.push(newItem); else out.push(data[i]);
	  
	  return out;
  },
  IsInCommaSeparatedList: function (profile,data,context)
  {
  	var sep = aa_text(data,profile,'Separator',context);
  	var items = aa_text(data,profile,'Item',context).split(sep);
  	var list = ',' + aa_text(data,profile,'List',context) + ',';
  	for(var i=0;i<items.length;i++)
  		if (list.indexOf(','+items[i]+',') != -1) return ["true"];
  	return [];
  },
  CreateNumbers: function (profile,data,context)
  {
    var from = aa_int(data,profile,'From',context);
    var to = aa_int(data,profile,'To',context);
    
    if (to < from) return [];
    var out = [];
    for(var i=from;i<=to;i++) out.push(i);
    
    return out;
  },
  ByIndexFromList: function(profile, data, context) 
  {
    var items = ajaxart.run(data,profile,'List',context);
    var index = aa_int(data,profile,'Index',context);
    var base = aa_text(data,profile,'Base',context);
    if (base == "0-Based Index" && index < items.length)
    	return [items[index]];
    if (base == "1-Based Index" && index-1 < items.length)
    	return [items[index-1]];
    return [];
  },
  BuildCategories : function(profile, data, context) {
		var categories = ajaxart.run(data,profile,'Categories',context);
		var sep = aa_text(data,profile,'Separator',context);
		
		var result = [];
		for (var i=0;i<categories.length;i++)
		{
			var category = categories[i];
			var items = category.split(sep);
			var inner_result = result;
			for(var j=0;j<items.length;j++)
			{
				var item = items[j];
				if (inner_result[item] == null)
					inner_result[item] = [];
				inner_result = inner_result[item];
			}
		}
		return result;
	},
	  NextLevelCategory : function(profile, data, context) {
		var categories = ajaxart.run(data,profile,'Categories',context);
		var parent = aa_text(data,profile,'Parent',context);
		var sep = aa_text(data,profile,'Separator',context);
		
		var inner_category = categories;
		var items = parent.split(sep);
		for(var j=0;j<items.length;j++)
		{
			var item = items[j];
			if (item.length > 0)
				inner_category = inner_category[item];
		}

		var result = [];
		if (parent.length == 0)
		{
			for (var i in inner_category)
				if (inner_category.hasOwnProperty(i))
					if (i != null && i != undefined)
						result.push(i);
		}
		else
		{
			for (var i in inner_category)
				if (inner_category.hasOwnProperty(i))
					result.push(parent + sep + i);
		}

		return result;
	},
   RunNativeHelperTest: function (profile,data,context)
   {
	  var txt = ajaxart.totext(ajaxart.runNativeHelper(data,profile,'FullName',context));
	  return ["name: " + txt];
   },
  Duplicate: function (profile,data,context)
  {
	  if (data.length == 0) return [];
	  var item = data[0];
	  if (typeof(item) == 'string' || typeof(item) == 'number' )
		  return [ "" + item ];
	  if (ajaxart.isxml_item(item) && item.nodeType == 1)// xml element
		  return [aa_parsexml(ajaxart.xml2text(item))];
		  //return [ ajaxart.xml.clone(data) ];
	  if (ajaxart.isxml_item(item) && item.nodeType == 2)// xml attribute : duplicate to string
		  return [ ajaxart.xml.clone(data) ];
	  // handle struct ...
	  return data;
  },
  StructEntryNames: function (profile,data,context)
  {
	  if (!ajaxart.isObject(data)) return [];
	  var out = [];
	  for (i in data[0])
		  if (data[0].hasOwnProperty(i) && i != 'isObject' && i != 'XtmlSource')
			  out.push(i);
	  return out;
  },
  BrowserTitle: function (profile,data,context) {
  	return [document.title];
  },
  MeasureCalculationTime: function (profile,data,context)
  {
		var before = new Date().getTime();
		var out = ajaxart.run(data,profile,'Calculation',context);
		var time_passes = new Date().getTime() - before;
		var obj = aa_first(data,profile,'PutTimeInObject',context);
		var property = aa_text(data,profile,'PutTimeInProperty',context);
		if (obj != null && property != "")
			obj[property] = [time_passes];
		return out;
  }
});

aa_gcs("js", {
  JavaScript: function (profile,data,context)
  {
		var scriptNode = ajaxart.childElem(profile,'Javascript');
		if (!scriptNode) return [];
		var code = aa_cdata_value(scriptNode) || ajaxart.xml.innerTextStr(scriptNode);
		var ret = aa_run_js_code(code,data,context);
		if (!ret) return [];
		if (typeof(ret) == 'string') return [ret];
		if (typeof(ret) == 'number') return [""+ret];
		if (typeof(ret) == 'boolean')
			return ret ? ['true'] : []
		if (aa_isArray(ret)) return ret;
		return [ret];
  }
});

aa_gcs("data_items", {
	LoadFullItem: function (profile,data,context)
	{
		var item = aa_first(data,profile,'Item',context);
		if (!item) return;
		var dataitems = aa_first(data,profile,'DataItems',context);
		if (dataitems && dataitems.LoadFullItem) 
			dataitems.LoadFullItem([item],context)
		else 
		{
		  var info = aa_getXmlInfo(item,context);
		  if ( info && info.LoadFullItem ) info.LoadFullItem([item],context);
		}
	},
	DoSave: function (profile,data,context)
	{
		var data_items = aa_first(data,profile,'DataItems',context);
		var fields = ajaxart.run(data,profile,'Fields',context);
		ajaxart_dataitems_save(data_items,fields,context,function(){
			ajaxart.run(data,profile,'OnSuccess',context);
		});
		
		return [];
	},
	Filter: function (profile,data,context)
	{
		var data_items = ajaxart_dataitem_getItems(context);
		var originalItems = data_items.Items;
		var items = [];
		for(var i=0;i<originalItems.length;i++)
		{
			var item = originalItems[i];
			if (aa_bool([item],profile,'Filter',context))
				items.push(item);
		}
		data_items.Items = items;

		return [];
	},
	Aspects: function (profile,data,context)
	{
		ajaxart.runsubprofiles(data,profile,'Aspect',context);
		return [];
	},
	Writable: function (profile,data,context)
	{
		var obj = ajaxart_dataitem_getItems(context);
		ajaxart_addScriptMethod(obj,'SubsetForNewItem',profile,'SubsetForNewItem',context);
		ajaxart_addScriptMethod(obj,'DeleteItem',profile,'DeleteItem',context);
		ajaxart_addScriptMethod(obj,'CanAcceptExternal',profile,'CanAcceptExternal',context);
		
		// TODO: let Shai look at it and hear his opinion
		var myFunc = function(obj) { return function(data1,context1) {
			ajaxart_async_Mark(context1);
			ajaxart_RunAsync(data1,ajaxart.fieldscript(profile,'DeleteItem'),context1,function (data2,context2) {
				var newValue = [];
				if (obj.Value != null && data1.length > 0 && data1[0].nodeType == 1) {
				  var id = data1[0].getAttribute('id');
				  for(var i=0;i<obj.Value.length;i++) {
					  if (obj.Value[i].getAttribute == null || obj.Value[i].getAttribute('id') != id)
					    newValue.push( obj.Value[i] );
				  }
				  
				  obj.Value = newValue;
				}
				ajaxart_async_CallBack(data2,context2);
			}); 
			return [];
		} };
		ajaxart_addScriptParam_js(obj,'DeleteItem',myFunc(obj),context);
		
		if (ajaxart.fieldscript(profile,'NewValueFromDetached') != null)
			aa_addLightMethod(obj,'NewValueFromDetached',profile,'NewValueFromDetached',context);
		
		return [];
	},
	NextLevel: function (profile,data,context)
	{
		var obj = ajaxart_dataitem_getItems(context);
		ajaxart_addScriptMethod(obj,'NextLevel',profile,'NextLevel',context);
		return [];
	},
	RecursiveNextLevel: function (profile,data,context)
	{
		var obj = ajaxart_dataitem_getItems(context);
		var nextlevel = function(data1,ctx)
		{
			var items = ajaxart.run(data1,profile,'NextLevel',context);
			if (items.length > 0)
			  aa_addControlMethod_js(items[0],'NextLevel',nextlevel,context);
			return items;
		}
		aa_addControlMethod_js(obj,'NextLevel',nextlevel,context)
	},
	OverrideItems: function (profile,data,context)
	{
		var out = ajaxart.run(data,profile,'Items',context);
		var newContext = aa_ctx(context,{_Items: out} );
		ajaxart.runsubprofiles(data,profile,'Aspect',newContext);

		return out;
	},
	Permission: function (profile,data,context)
	{
		var obj = ajaxart_dataitem_getItems(context);
		var perm = aa_text(data,profile,'Permission',context);
		if (perm == "read only") obj.ReadOnly = ["true"];
	}
});

ajaxart_dataitem_getItems = function(context) {
	  var field = context.vars['_Items'];
	  if (field == null || field.length == 0) return null;
	  return field[0];
	}

function ajaxart_hashPassword(pwd)
{
  if (pwd == "") return "";
  var num = 0;
  for(var i=0;i<pwd.length;i++)
    num += ( pwd.charCodeAt(i) * i*i );
	  
  return "" + num;
}
function eval_math_formula(formula,digits)
{
	  try
	  {
		  eval('var val = ' + formula);
		  if (typeof(val) != 'number')
			  return Number.NaN;
		  var num = val;
		  if (digits)
		  {
			  var base = Math.pow(10,digits);
			  num = Math.round(base * val) / base;
		  }
		  return num;
	  }
	  catch(e)
	  {
		  return Number.NaN;
	  }
}
function aa_xmlitem_byid(items,id)
{
	for (var i=0;i<items.length;i++)
		if (items[i].getAttribute('id') == id)
			return items[i];
	return null;
}

function aa_aggregate_Sum(cells)
{
	var sum = 0;
	var not_numbers = false;
	for(var i=0;i<cells.length;i++)
	{
		var val = parseInt(ajaxart.totext_item(cells[i]));
		if (! isNaN(val))
			sum += val;
		else
			not_numbers = true;
	}
	return not_numbers ? '' : '' + sum;
}
function aa_aggregate_Average(cells)
{
	var sum = aa_aggregate_Sum(cells);
	if (sum == '') return '';
	return '' + Math.floor(sum * 100/cells.length) / 100;
}
function aa_aggregate_Count(cells)
{
	return '' + cells.length;
}
function aa_aggregate_Concat(cells)
{
	return jQuery(cells).map(function() { return ajaxart.totext_item(this) } ).get().join(", ");
}

function aa_csv_toggle(list,item)
{
	if (list.indexOf(',' + item +',') == -1)
		return list + item + ',';
	return list.replace(',' + item +',',',');
}

function aa_CSVValByRef(att,index) { aa_init_CSVValByRef(); this.att = att; this.arr = att.nodeValue.split(','); this.index = index}
function aa_init_CSVValByRef() {
	if (aa_CSVValByRef.prototype.GetValue) return;
	aa_CSVValByRef.prototype.GetValue = function() { return this.arr[this.index]; }
	aa_CSVValByRef.prototype.WriteValue = function(val) { 
		this.arr[this.index] = val;
		this.att.nodeValue = this.arr.join(',');
	}
	aa_CSVValByRef.prototype.ParentNode = function() { return this.att }
}

ajaxart.unique_number = 1;

function aa_switch(profile,data,context)
{
	var value = aa_text(data,profile,"Value",context);
	var cases = ajaxart.subprofiles(profile,'Case');
	for (var i=0; i<cases.length; i++) {
		var pass = (value != "") && (value == aa_text(data,cases[i],'If',context));
		if (!pass)
			pass = aa_bool(data,cases[i],'IfCondition',context);
		if (pass)
			return ajaxart.run(data,cases[i],'Then',context);
	}
	return ajaxart.run(data,profile,'Default',context);
}

function aa_ifThenElse(profile,data,context)
{
	if (aa_bool(data,profile,'If',context))
		return ajaxart.run(data,profile,'Then',context);
	else
		return ajaxart.run(data,profile,'Else',context);
}

function aa_valueFromCookie(name) {
	if (name == "") return null;
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for(var i=0;i < ca.length;i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(nameEQ) == 0) return decodeURIComponent(c.substring(nameEQ.length,c.length));
	}
	return null;	
}

function aa_writeCookie(cookie,value) {
		var val = encodeURIComponent( value );
		cookie = encodeURIComponent(cookie);
		if (cookie == "") return;
		
	 	 var date = new Date();
		 date.setMonth(date.getMonth()+1);
			  
		 if (cookie != "") 
		   document.cookie = cookie+"="+val+";"+" expires="+date.toUTCString();	
}
function aa_cleanCookies(prefix) {
	var ca = decodeURIComponent(document.cookie).split(';');
	for(var i=0;i < ca.length;i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(prefix) == 0) aa_writeCookie(c.split('=')[0],'');
	}
}

function aa_csv_splitLine(line) {
	return line.split(','); // TODO: handle escaping
}
function aa_csv_constructLine(arr) {
	return arr.join(','); // TODO: handle escaping
}

function aa_arrayUnique(arr,idFunc) {
	idFunc = idFunc || function(a) { return a;}
	var added = {},out=[];
	arr.forEach(function(a) {
		var k = ''+idFunc(a);
		if (!added[k]) out.push(a);
		added[k] = true;
	})
	return out;
}


ajaxart.gcs.object =
{
  IsObject: function (profile,data,context)
  {
		if (data.length == 0) return [];
		return ajaxart.isObject(data[0]) ? ["true"] : [];
  },
  Object: function (profile,data,context)
  {
	  var out = { };
	  var elem = profile.firstChild;
	  while (elem != null)
	  {
		  if (elem.nodeType == 1) 
		  {
			  var tag = elem.tagName;
			  var name = elem.getAttribute('name');
			  if (name == null || name == "") { elem = elem.nextSibling;  continue; }
			  
			  if (tag == 'Property') {
				  out[name] = ajaxart.run(data,elem,'',context);
			  } else if (tag == 'SingleProperty') {
				  out[name] = aa_first(data,elem,'',context);
			  } else if (tag == 'TextProperty') {
				  out[name] = aa_text(data,elem,'',context);
			  } else if (tag == 'IntegerProperty') {
				  out[name] = aa_int(data,elem,'',context);
			  } else if (tag == 'BooleanProperty') {
				  out[name] = aa_bool(data,elem,'',context);
			  } else if (tag == 'Method') {
				  aa_addMethod(out,name,elem,'',context);
			  }
		  }
	    elem = elem.nextSibling;
	  }
		var atts = profile.attributes;			// adding attributes as properties
		for (var i=0; i < atts.length; i++) {
			var att_name = atts.item(i).nodeName;
			if (att_name != "t" && att_name != "value" && att_name != 'Data' && att_name != "name" && att_name != "Trace")
				out[att_name] = ajaxart.totext_array(ajaxart.dynamicText(data,atts.item(i).nodeValue,context));
		}
			
	  return [out];
  },
  ExtendObject: function (profile,data,context)
  {
	  var overrides = ajaxart.gcs.object.Object(profile,data,context)[0];
	  var out = aa_first(data,profile,'Object',context);
	  if (out == null) return [];
	  for(var i in overrides)
		if (overrides.hasOwnProperty(i))
		  out[i] = overrides[i];
	  
	  var addToProperty = aa_xpath(profile,'AddToProperty');
	  for(var i=0;i<addToProperty.length;i++) {
		  var name = addToProperty[i].getAttribute('name');
		  out[name] = out[name] || [];
		  ajaxart.concat(out[name],ajaxart.run(data,addToProperty[i],'',context));
	  }
	  
	  return [out];
  },
  ObjectFromParams: function (profile,data,context)
  {
	  var out = { isObject: true };

	  for(var i in context.params) {
	 	if (!context.params.hasOwnProperty(i)) continue;
		  var name = i;
		  var val = context.params[i];
		  if (val.isParamScript == true) {
			  out[name] = val;
			  out[name].context = context.componentContext;
		  }
		  else
		    out[name] = val;
	  }
	  
	  var elem = profile.firstChild;
	  while (elem != null)
	  {
		  if (elem.nodeType == 1) 
		  {
			  var tag = elem.tagName;
			  var name = elem.getAttribute('name');
			  if (name == null || name == "") { elem = elem.nextSibling;  continue; }
			  
			  if (tag == 'Property') {
				  out[name] = ajaxart.run(data,elem,'',context);
			  } else if (tag == 'Method') {
				  out[name] = { script: elem , context: context, objectForMethod: [out], compiled: ajaxart.compile(elem,'',context,elem.getAttribute("paramVars")) };
			  }
		  }
	    elem = elem.nextSibling;
	  }

	  return [out];
  },
  Clone: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  if (obj == null) return [];
	  var out = {}
	  for(var i in obj) 
		if (obj.hasOwnProperty(i))
	  		out[i] = obj[i];
	  return [out];
  },
  HasMethod: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var method = aa_text(data,profile,'Method',context);
	  if (obj != null && obj[method] != null) return ["true"];
	  return [];
  },
  FastRunMethod: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var method = aa_text(data,profile,'Method',context);
	  if (obj == null || method == "" || typeof(obj[method]) != 'function') return [];
	  return obj[method](data,context);
  },
  RunMethod: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var method = aa_text(data,profile,'Method',context);
	  var input = data;
	  if (profile.getAttribute("Input") != null || aa_xpath(profile,'Input').length > 0)
        input = ajaxart.run(data,profile,'Input',context);
	  
	  if (obj == null) return [];
	  var scriptParam = obj[method];
	  if (scriptParam == null) return [];
	  var newContext = context;

	  var params = aa_xpath(profile,'Param');
	  if (params.length > 0) newContext = ajaxart.clone_context(context);
	  for(var i=0;i<params.length;i++)
		  newContext.vars[params[i].getAttribute('name')] = ajaxart.run(data,params[i],'',newContext); 

	  if (typeof(scriptParam) == "function") return scriptParam.call(obj,input,newContext);
	  return ajaxart.runScriptParam(input,scriptParam,newContext);
  },
  SetProperty: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var prop = aa_text(data,profile,'Property',context);
	  if (obj == null || prop == "") return [];
	  if (aa_bool(data,profile,'IsSingleProperty',context))
		obj[prop] = aa_first(data,profile,'Value',context);
	  else
	    obj[prop] = ajaxart.run(data,profile,'Value',context);
	  
	  return ["true"];
  },
  ClearProperty: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var prop = aa_text(data,profile,'Property',context);
	  if (obj && prop) delete obj[prop];
  },
  SetTextProperty: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var prop = aa_text(data,profile,'Property',context);
	  if (obj == null || prop == "") return [];
	  obj[prop] = aa_text(data,profile,'Value',context);
  },
  SetNumericProperty: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var prop = aa_text(data,profile,'Property',context);
	  if (obj == null || prop == "") return [];
	  obj[prop] = aa_int(data,profile,'Value',context);
  },
  SetBooleanProperty: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var prop = aa_text(data,profile,'Property',context);
	  if (obj == null || prop == "") return [];
	  obj[prop] = aa_bool(data,profile,'Value',context);
	  
	  return ["true"];
  },
  SetMethod: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var method = aa_text(data,profile,'Method',context);
	  if (obj == null || method == "") return [];

	  var cmpl = ajaxart.compile(profile,'Xtml',context,'');
	  if (cmpl == "same") { 
		  obj[method] = function(data1) { return data1;} 
	  }
	  else if (cmpl != null) {
		  var methodFunc = function(obj,cmpl) { return function(data1,ctx) {
			  var newContext = aa_merge_ctx(context,ctx);
			  newContext._This = obj;
			  return cmpl(data1,newContext);
		  }}
		  obj[method] = methodFunc(obj,cmpl);
	  }
	  else {
		  var methodFunc = function(obj) { return function(data1,ctx) {
			  var newContext = aa_merge_ctx(context,ctx);
			  newContext._This = obj;
			  return ajaxart.run(data1,profile,'Xtml',newContext);
		  }}
		  obj[method] = methodFunc(obj);
	  }
	  
	  return ["true"];
  }, 
  AddToProperty: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  var prop = aa_text(data,profile,'Property',context);
	  var value = ajaxart.run(data,profile,'Value',context);
	  if (obj == null || prop == "") return [];
	  if (obj[prop] == null) obj[prop] = [];
	  ajaxart.concat(obj[prop],value);
	  
	  return ["true"];
  }
}


function aa_addLightMethod(object,method,profile,field,context,paramVars)
{
	var fieldscript = (field == "") ? profile : ajaxart.fieldscript(profile,field,true);
	
    object[method] = { 
      script: fieldscript , context: context, 
      compiled: ajaxart.compile(fieldscript,'',context,paramVars) 
    };
}
function aa_setMethod(object,method,profile,field,context)
{
	var compiled = ajaxart.compile(profile,field,context);
	var init = function(compiled) {
		object[method] = function(data1,ctx) {
			var newContext = aa_merge_ctx(context,ctx);
			newContext._This = object;
			if (compiled == "same") return data1; 
			else if (compiled) 
			  return compiled(data1,newContext);
			else
			  return ajaxart.run(data1,profile,field,newContext);
		}
	}
	init(compiled);
}
function aa_addMethod(object,method,profile,field,context,moreVars)
{
	var compiled = ajaxart.compile(profile,field,context);
	if (compiled == "same") { object[method] = function(data1) { return data1; }; return;}
	var init = function(compiled) {
		object[method] = function(data1,ctx) {
			var newContext = aa_merge_ctx(context,ctx,moreVars);
			newContext._This = object;
			if (compiled) 
			  return compiled(data1,newContext);
			else
			  return ajaxart.run(data1,profile,field,newContext);
		}
	}
	init(compiled);
//	var fieldscript = (field == "") ? profile : ajaxart.fieldscript(profile,field,true);
//	
//    object[method] = { 
//      script: fieldscript , context: context, objectForMethod: [object],
//      compiled: ajaxart.compile(fieldscript,'',context,paramVars) 
//    };
}

function aa_addMethod_js(object,method,jsFunc,context)
{
	object[method] = {	context: context , compiled: jsFunc, objectForMethod: [object] };
}

function aa_runMethod(data,object,method,context)
{
	if (!object || !method ) return [];
	var scriptParam = object[method];
	if (scriptParam == null) return [];
	if (typeof(scriptParam) == "function") return scriptParam.call(object,data,context);
	if (scriptParam.compiled == "same") return data;

	var newContext = { params: scriptParam.context.params 
			, vars: context.vars
			, componentContext: scriptParam.context.componentContext} // TODO: avoid this if paramVars == ""
	
	newContext._This = object;
	
	if (scriptParam.compiled) 
	  return scriptParam.compiled(data,newContext);
  else
    return ajaxart.run(data,scriptParam.script,"",newContext);
	
	return [];
}



aa_gcs("fld_type", {
	Date: function (profile,data,context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data,profile,'Style',context);
		field.FieldType = 'date';
		field.DateStorageFormat = aa_text(data,profile,'StorageFormat',context);
		field.DateDisplayFormat = aa_text(data,profile,'DisplayFormat',context);
		field.DateConverter = aa_first(data,profile,'DateConverter',context);

		field.Control = function(field_data,ctx) {
			ctx = aa_merge_ctx(context,ctx);
			var date = {
				value: aa_totext(field_data)
			};			
			date.valueInMillis = field.DateConverter.ToMillis(date.value,field.DateStorageFormat);
			date.displayText = field.DateConverter.FromMillis(date.valueInMillis,field.DateDisplayFormat);

			return [aa_renderStyleObject2(field.Style,date,field_data,field,ctx)];
		};

		field.SortType = {
	    compileValue: function(value) {
	        return field.DateConverter.ToMillis(aa_totext(value),field.DateStorageFormat);
	    },
	    sort: function(a,b) { return a.value-b.value; }
    };
	}
});

aa_gcs("date", {
		JBartDateConverter: function (profile,data,context) {
			return [{
				ToMillis: function(value,format) {
					if (format == '@') return parseInt(value);
					return aa_moment(value, format).toDate().getTime();
				},
				FromMillis: function(value,format) {
					if (!value) return '';
					if (format == '@') return value;
					return aa_moment(parseInt(value)).format(format);
				}				
			}];
		},
		Now: function (profile,data,context)
		{
			var format = aa_text(data,profile,'Format',context);
			var date = new Date();
			
			var timeZone = aa_text(data,profile,'TimeZone',context); 
			if (timeZone.indexOf('GMT') != -1)
			{
				try
				{
					var offset = parseInt(timeZone.substring(3)); // + date.getTimezoneOffset();
					date = new Date(date.getTime() +  offset * 60000);
				}
				catch(e) {}
			}
			if (format == "std")
			{
				var str = "" + ajaxart.pad2digits(date.getDate()) + '/' + ajaxart.pad2digits(date.getMonth()+1) + '/' + date.getFullYear();
				// str += " " + ajaxart.pad2digits(date.getHours()) + ":" + ajaxart.pad2digits(date.getMinutes());
				return [ str ];
			}
			if (format == "with time")
			{
				var str = "" + ajaxart.pad2digits(date.getDate()) + '/' + ajaxart.pad2digits(date.getMonth()+1) + '/' + date.getFullYear();
				str += " " + ajaxart.pad2digits(date.getHours()) + ":" + ajaxart.pad2digits(date.getMinutes());
				return [ str ];
			}
			if (format == "with time and seconds")
			{
				var str = "" + ajaxart.pad2digits(date.getDate()) + '/' + ajaxart.pad2digits(date.getMonth()+1) + '/' + date.getFullYear();
				str += " " + ajaxart.pad2digits(date.getHours()) + ":" + ajaxart.pad2digits(date.getMinutes()) + ":" + ajaxart.pad2digits(date.getSeconds());
				return [ str ];
			}
				         
			return ["" + date.getTime()];
		},
		GreaterThan: function (profile,data,context)
		{
			var date1 = aa_text(data,profile,'Date',context);
			var date2 = aa_text(data,profile,'GreaterThan',context);
			
			return aa_frombool(aadate_date2int(date1) > aadate_date2int(date2)); 
		}
});

function aa_dateLabel(dateObj) {
	dateObj.$el.text(dateObj.displayText);
}
ajaxart.pad2digits = function(num)
{
  if (num < 10) return "0" + num;
  return "" + num;
};

function str2Int(str)
{
	if (str == null) return 0;
	str = str.replace(/^0*/,'');
	var result = parseInt(str);
	if (isNaN(result))
		return 0;
	return result;
}
function aadate_currentYear()
{
		var d = new Date();
		var year = d.getYear();
		if (year < 1000)
			year += 1900;
		return year;
}
function aadate_currentMonth()
{
		return (new Date().getMonth())+1;
}

function aadate_date2int(date,endOfPeriod)
{
	if (date == null || date == '' || date == 'any') return endOfPeriod ? 10000000000 : 0;
	var result = new Date();
	result.setMinutes(0,0,0);
	if (date == 'today')
		resolution = 'day';

	var datePlusTime = date.split(" ");
	var date_part = datePlusTime[0];
	var parts = date_part.split("/");
	var resolution = '';
	if (parts.length == 1 && str2Int(parts[0]) < 32 && str2Int(parts[0]) > 0) // day only
	{
		result.setDate(str2Int(parts[0]));
		resolution = 'day';
	}
	else if (parts.length == 1 && str2Int(parts[0]) > 32) // year only
	{
		result.setFullYear(str2Int(parts[0]),endOfPeriod ? 11 : 0, endOfPeriod ? 31 : 1);
		resolution = 'year';
	}
	else if (parts.length == 2 && str2Int(parts[1]) < 13) // day and month
	{
		result.setFullYear(aadate_currentYear(),str2Int(parts[1]) -1, str2Int(parts[0]));
		resolution = 'day';
	}
	else if (parts.length == 2 && str2Int(parts[1]) > 1900) // month and year
	{
		result.setFullYear(str2Int(parts[1]),str2Int(parts[0]) -1, 1);
		if (endOfPeriod)
			result.setTime( result.setFullYear(str2Int(parts[1]),str2Int(parts[0]), 1)-1);
		resolution = 'month';
	}
	else if (parts.length == 3) // day month year
	{
		result.setFullYear(str2Int(parts[2]),str2Int(parts[1]) -1, str2Int(parts[0]));
		resolution = 'day';
	}
	result.setHours(0,0,0,0);
	if (datePlusTime.length > 1)
	{
		var times = datePlusTime[1].split(":");
		if (datePlusTime.length > 2 && datePlusTime[2] == 'PM')
			times[0] = '' + (str2Int(times[0]) + 12);
		result.setHours(str2Int(times[0]),str2Int(times[1]),str2Int(times[2]),0);
		resolution = 'minute';
	}
	var result = result.getTime();
	if (endOfPeriod && resolution == 'day')
		result += 86400000 -1;
	return result;
}
function aadate_stdDate2DateObj(date)
{
	var datePlusTime = date.split(" ");
	var date_part = datePlusTime[0];
	var parts = date_part.split("/");
	if (parts.length > 2 && parts[2].length == "2") parts[2] = "20" + parts[2];   // handle 1/1/05 -> 1/1/2005  
	if (datePlusTime.length == 0) return null;
	if (datePlusTime.length == 1)
		var d = new Date(str2Int(parts[2]), str2Int(parts[1],10)-1, str2Int(parts[0],10),0,0,0,0);
	else {
		var times = datePlusTime[1].split(":");
		if (times.length == 3) 
			var d = new Date(str2Int(parts[2]), str2Int(parts[1],10)-1, str2Int(parts[0],10), str2Int(times[0],10), str2Int(times[1],10),str2Int(times[2],10));
		else 
			var d = new Date(str2Int(parts[2]), str2Int(parts[1],10)-1, str2Int(parts[0],10), str2Int(times[0],10), str2Int(times[1],10));
	}
	
	return d;
}
function aadate_dateObj2StdDate(date)
{
	var year = date.getYear();
	if (year < 1000)
		year += 1900;
	var out = date.getDate()+"/"+ (date.getMonth()+1) +"/" + year;
	if (date.getHours() > 0 || date.getMinutes() > 0)
	  out += " " + ajaxart.pad2digits(date.getHours()) + ":" + ajaxart.pad2digits(date.getMinutes());
	return out;
}

function aadate_addToDate(date,amount_to_add,interval)
{
   var multipleBy = 86400000;  // day is default
   if (interval == 'hour') multipleBy = 3600000;
   if (interval == 'minute') multipleBy = 60000;
   if (interval == 'second') multipleBy = 1000;
	
	var d = aadate_stdDate2DateObj(date);
	d.setTime(d.getTime() + (amount_to_add * multipleBy));
	return aadate_dateObj2StdDate(d);
}



aa_gcs("field_feature", {
	HandleEvent: function(profile, data, context) {
		var eventAction = {
			run: function(data1, ctx) {
				var ctx2 = aa_merge_ctx(context, ctx);
				if (ctx2.vars.EventAction) delete ctx2.vars.EventAction;
				ajaxart.run(data1, profile, 'Action', ctx2);
			}
		};
		ajaxart.run(data, profile, 'Event', aa_ctx(context, {
			EventAction: [eventAction]
		}));
	},
	Update: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'OnUpdate', function(field, field_data, input, e, extra) {
			var ctx1 = (input && input.ajaxart) ? aa_merge_ctx(context, input.ajaxart.params) : context;
			var parent_elem = jQuery(input).parents('.aa_item')[0];
			var item = parent_elem && parent_elem.ItemData;
			var newContext = aa_ctx(ctx1, {
				_Field: [field],
				_FieldData: field_data,
				_Input: [input],
				ControlElement: [input],
				_Item: item || []
			});
			if (extra) newContext = aa_ctx(newContext, extra);

			context.vars.EventAction[0].run(field_data, newContext);
		});
	},
	Click: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'ModifyControl', function(cell, field_data, cell_presentation, ctx, item) {
			cell.onclick = function(e) {
				if (window.aa_incapture) return;
				context.vars.EventAction[0].run(field_data, aa_ctx(ctx, {
					ControlElement: [cell.firstChild || cell],
					_DomEvent: [e]
				}));
			};
		}, 'MouseClick');
	},
	Blur: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'OnBlur', function(field, field_data, input, e, extra) {
			var newContext = aa_ctx(context, {
				_Field: [field],
				_FieldData: field_data,
				_Input: [input],
				ControlElement: [input]
			});
			context.vars.EventAction[0].run(field_data, newContext);
		});
	},
	KeyDown: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'OnKeydown', function(field, field_data, input, e, extra) {
			var newContext = aa_ctx(context, {
				_Field: [field],
				_FieldData: field_data,
				_Input: [input],
				ControlElement: [input]
			});
			if (extra && extra.KeyCode) newContext.vars.KeyCode = extra.KeyCode;
			if (extra && extra.CtrlKey) newContext.vars.CtrlKey = extra.CtrlKey;
			context.vars.EventAction[0].run(field_data, newContext);
		});
	},
	KeyUp: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'OnKeyup', function(field, field_data, input, e, extra) {
			var newContext = aa_ctx(context, {
				_Field: [field],
				_FieldData: field_data,
				_Input: [input],
				ControlElement: [input]
			});
			if (extra && extra.KeyCode) newContext.vars.KeyCode = extra.KeyCode;
			if (extra && extra.CtrlKey) newContext.vars.CtrlKey = extra.CtrlKey;
			context.vars.EventAction[0].run(field_data, newContext);
		});
	},
	EnterPressed: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'OnKeyup', function(field, field_data, input, e, extra) {
			if (aa_totext(extra.KeyCode) != 13 || aa_tobool(extra.CtrlKey)) return;
			var newContext = aa_ctx(context, {
				_Field: [field],
				_FieldData: field_data,
				_Input: [input],
				ControlElement: [input]
			});
			if (extra && extra.KeyCode) newContext.vars.KeyCode = extra.KeyCode;
			context.vars.EventAction[0].run(field_data, newContext);
		});
	},
	CtrlEnterPressed: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'OnKeyup', function(field, field_data, input, e, extra) {
			if (aa_totext(extra.KeyCode) != 13 || !aa_tobool(extra.CtrlKey)) return;
			var newContext = aa_ctx(context, {
				_Field: [field],
				_FieldData: field_data,
				_Input: [input],
				ControlElement: [input]
			});
			if (extra && extra.KeyCode) newContext.vars.KeyCode = extra.KeyCode;
			context.vars.EventAction[0].run(field_data, newContext);
		});
	},
	ControlAttached: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'ModifyControl', function(cell, field_data, cell_presentation, ctx, item) {
			aa_addOnAttachMultiple(cell, function() {
				context.vars.EventAction[0].run(field_data, aa_ctx(ctx,{ ControlElement: [cell.firstChild || cell] }));
			});
		}, 1000);
	},
	BeforeRenderingControl: function(profile, data, context) {
		aa_bind(context.vars._Field[0], 'ModifyInstanceContext', function(args) {
			context.vars.EventAction[0].run(args.FieldData, aa_merge_ctx(context, args.Context));
		});
	},
	AfterRenderingControl: function(profile, data, context) {
		aa_bind(context.vars._Field[0], 'ModifyControl', function(args) {
			context.vars.EventAction[0].run(args.FieldData, aa_merge_ctx(context, args.Context, { ControlElement: [args.Wrapper.firstChild || args.Wrapper]} ));
		});
	},
	Load: function(profile, data, context) {
		context.vars.EventAction[0].run(data, context);
	},
	Focus: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'OnFocus', function(field, field_data, input, e, extra) {
			var newContext = aa_ctx(context, {
				_Input: [input],
				ControlElement: [input]
			});
			context.vars.EventAction[0].run(field_data, newContext);
		});
	},
	MouseOver: function(profile, data, context) {
		aa_field_handler(context.vars._Field[0], 'ModifyControl', function(cell, field_data, cell_presentation, ctx, item) {
			cell.onmouseover = function() {
				if (!cell.isInside) {
					context.vars.EventAction[0].run(field_data, aa_ctx(ctx, {
						ControlElement: [cell]
					}));
				}
				cell.isInside = true;
			};
			cell.onmouseout = function() {
				cell.isInside = false;
			};
		}, 'MouseOver');
	}

});
function aa_clear_jb_classes(elem)
{
    var classes = elem.className.split(' ');
    for(var i=0;i<classes.length;i++)
   	 if (classes[i].indexOf('jb') == 0) 
   		 jQuery(elem).removeClass(classes[i]);
}


function aa_find_field_controls(settings) 
{
/**
 * Finds field instances in the DOM
 *
 * You can look for the dom instances of a field giving its id and search scope
 * @param settings of javascript object with the following properties:
 *   - fieldID
 *   - scope (can be 'screen','parent','siblings'), default is 'screen' 
 *   - result (can be 'content','wrapper'), default is 'content'
 *   - context
 * @return an array of dom elements
 * @example var myButtonElement = aa_find_field_controls({ fieldId: 'my_button', context: context })[0];
 * 
 * @category General
 */
 	settings.result = settings.result || 'content';
	settings.scope = settings.scope || 'screen';
	
	var top = aa_intest ? aa_intest_topControl : document;
	var ctrls = jQuery(top).find(".fld_" + settings.fieldID);

	var cls = "fld_" + settings.fieldID;
	var ctrls = (settings.scope == 'parent') ? jQuery(top).parents('.'+cls).get() : jQuery(top).find('.'+cls).get();
	if (jQuery(top).hasClass(cls)) ctrls.push(top);
	
	if (settings.result == 'content') return ctrls;
	if (settings.result == 'wrapper') {
		var out = [];
		for(var i=0;i<ctrls.length;i++) {
			var wrapper = ctrls[i].parentNode || ctrls[i];
			out.push(wrapper);
		}
		return out;
	}
}
function aa_refresh_cell(cell,context,transition,moreVars,recreateField)
{
   var td = $(cell).hasClass('aa_cell_element') ? cell : jQuery(cell).parents('.aa_cell_element')[0];
   if (!td) return;

   aa_show(td);
   
   var newContext = td.jbContext || (td.jbApiObject && td.jbApiObject.context);
   if (moreVars) newContext = aa_ctx(newContext,moreVars);

   if (td.Refresh) return td.Refresh();
   var field = td.Field;
   if (!field) return;
   if (recreateField) {
      var xtmlSource = field.XtmlSource[0];
      newContext = xtmlSource.context;
      if (moreVars) newContext = aa_ctx(newContext,moreVars);
      field = aa_first(xtmlSource.input,xtmlSource.script,'',newContext);
   } else if (field.Refresh) field.Refresh([],newContext);

   transition = transition || field.TransitionForRefresh;
   var field_data = td.FieldData;
   var item_data = td.ItemData;
   var parent = jQuery(td).parents('.aa_container')[0];
   var cntr = parent ? parent.Cntr : {}; 
   var scrollPos = {x: window.scrollX, y: window.scrollY};
//   newContext = aa_ctx(context,{_Field: [field], FieldTitle: [field.Title], _Item: item_data, _Cntr: [cntr] });
   field_data = ajaxart_field_calc_field_data(field,item_data,newContext);
   
   if (transition && td.childNodes.length == 1) {
     var oldElem = td.firstChild;
     while (td.firstChild) aa_remove(td.firstChild,true);
     jBart.trigger(td,'cleanWrapper',{});
     if (td.jbRefresh) td.jbRefresh();
     ajaxart_field_createCellControl(item_data,cntr,td,td.CellPresentation,field,field_data,newContext);
     var newElem = td.firstChild;
     td.insertBefore(oldElem,td.firstChild);
     transition.replace(oldElem,newElem,context);
   }
   else {
     aa_empty(td,true);
     aa_clear_jb_classes(td);
     aa_clear_events(td);
     jBart.trigger(td,'cleanWrapper',{});
     if (td.jbRefresh) td.jbRefresh();
     
 	 if (field.AsSection && !field.HideTitle) {
 		var section = jQuery(td).parents('.aa_section')[0];
 		if (!section || !section.parentNode) return;
 		td = section.parentNode;
 		aa_empty(td,true);
	    aa_clear_jb_classes(td);
		td.appendChild(aa_buildSectionControl(cntr,field,field_data,item_data,newContext));
	 } else {
	 	 if (td.jbFrom_aa_fieldControl) {
	 	 	aa_fieldControl({Field: field, Wrapper: td, Item: item_data, FieldData:field_data, Context: newContext });
	 	 } else {
		 	ajaxart_field_createCellControl(item_data,cntr,td,td.CellPresentation,field,field_data,newContext);
		 }
	 }
   }
   aa_element_attached(td);
   window.scrollTo(scrollPos.x,scrollPos.y);
}

function aa_find_field_input(wrapper)
{
  if (!wrapper) return null;
	if (wrapper.tagName.toLowerCase() == 'input') return wrapper;
	return jQuery(wrapper).find('input')[0] || jQuery(wrapper).find('.field_control')[0];
}

// settings contains: Field, Item, Wrapper, FieldData (optional), Context
function aa_fieldControl(settings,runAfterAsyncAction) {
    try {
    var field = settings.Field;
    var wrapper = settings.Wrapper;
    wrapper.jbFrom_aa_fieldControl = true;

    var ctx = aa_ctx(settings.Context, { _Field: [field], Item: settings.Item, Wrapper: [wrapper] });

    if (field.AsyncActionRunner && !runAfterAsyncAction) {
    	return field.AsyncActionRunner(settings);
    }

    var field_data = settings.FieldData;
    if (!field_data) field_data = field.FieldData ? field.FieldData(settings.Item, ctx) : settings.Item;

    for (i in ajaxart.xtmls_to_trace) {  // Tracing field data
        if (ajaxart.xtmls_to_trace.hasOwnProperty(i) && field.XtmlSource[0].script == ajaxart.xtmls_to_trace[i].xtml) {
            ajaxart.xtmls_to_trace[i].fieldData = ajaxart.xtmls_to_trace[i].fieldData || [];
            ajaxart.xtmls_to_trace[i].fieldData = ajaxart.xtmls_to_trace[i].fieldData.concat(field_data);
        }
    }
    
    aa_trigger(field,'ModifyInstanceContext',{ Context: ctx, FieldData: field_data});

    aa_extend(wrapper, {
    	Field: field, FieldData: field_data, 
    	ItemData: settings.Item, jbContext: settings.Context
    })
    jQuery(wrapper).addClass('aa_cell_element');
    var contentCtrl;
    try {
        contentCtrl = field.Control && field.Control(field_data, ctx)[0];
    } catch(e) {
        ajaxart.logException(e);
        contentCtrl = document.createElement("DIV");
    }
    if (contentCtrl) { 
      wrapper.appendChild(contentCtrl);
   	  wrapper.jbControl = contentCtrl;
   	  
      jQuery(contentCtrl).addClass('field_control fld_'+field.Id);
      contentCtrl.jbCell = wrapper;
      contentCtrl.Field = field;
    	
	  jBart.trigger(field,'ModifyControl',{ Wrapper: wrapper, FieldData: field_data, Context: ctx, Item: settings.Item });
      if (field.ModifyControl) { 
	    	for (var i = 0; i < field.ModifyControl.length; i++)
	    		field.ModifyControl[i](wrapper, field_data, 'control', ctx, settings.Item);
	  }
    }

    jBart.trigger(field,'ModifyCell',{ Wrapper: wrapper, FieldData: field_data, Context: ctx, Item: settings.Item });
    if (field.ModifyCell) { 
    	for (var i = 0; i < field.ModifyCell.length; i++)
    		field.ModifyCell[i](wrapper, field_data, 'control', ctx, settings.Item);
    }
    
    if (contentCtrl) aa_element_attached(contentCtrl);

    if (settings.DoAfterShow) settings.DoAfterShow(settings);
    } catch(e) {
        ajaxart.logException('error rendering field ' + (settings.Field && settings.Field.Id),e);
    }   
}

aa_gcs("fld_type",{
	Picklist: function (profile,data,context)
	{
		var field = context.vars._Field[0];

		field.RefreshOptions = function(data1,ctx) {
			field.Options = ajaxart.run(data1,profile,'Options',aa_ctx(context,ctx));
		}
		field.Style = aa_first(data,profile,'Style',context);
		field.AllowEmptyValue = aa_bool(data,profile,'AllowEmptyValue',context);
		field.AllowValueNotInOptions = aa_bool(data,profile,'AllowValueNotInOptions',context);
		
		field.Control = function(field_data,ctx) {
			if (field.DelayOptionCalculation) {
				field.Options = [];
				field.Options.delayedCalculation = true;
			} else {
				if (!field.Options) { field.RefreshOptions(data,context); }
			}
			var picklist = {};
			aa_initPicklistObject(picklist,field,field_data,ctx);
			
			var out = jQuery(aa_renderStyleObject(field.Style,picklist,ctx,true)).addClass('aa_picklist').get();
			
			if (!picklist.getValue() && !field.AllowEmptyValue) {
				var code = field.Options && field.Options[0] && field.Options[0].code;
				if (code) {
					ajaxart.writevalue(field_data,code);					
					out = jQuery(aa_renderStyleObject(field.Style,picklist,ctx,true)).addClass('aa_picklist').get();
				}
			}

			return out;		
		};
	}
});

aa_gcs("editable_picklist",{
	OptionsTable: function (profile,data,context)
	{
		return ajaxart.runsubprofiles(data,profile,'Option',context);
	},
	Option: function (profile,data,context)
	{
		return [{
		  code: aa_text(data,profile,'Code',context),
		  text: aa_multilang_text(data,profile,'DisplayName',context),
		  image: aa_text(data,profile,'Image',context)
		}];
	},
	OptionsByCommas: function (profile,data,context)
	{
		var options = aa_text(data,profile,'Options',context).split(',');
		var out = [];
		for(var i=0;i<options.length;i++) {
			var code = ajaxart_multilang_text(options[i],context);
			if (!code) continue;
			out.push({ code: code, text: code });
		}
		return out;
	},
	DynamicOptions: function (profile,data,context)
	{
		var options = ajaxart.run(data,profile,'Options',context);
		var out = [];
		for(var i=0;i<options.length;i++) {
			var option = [ options[i] ];
			out.push({
				code: aa_text(option,profile,'OptionCode',context),
				text: aa_text(option,profile,'OptionDisplayName',context),
				image: aa_text(option,profile,'OptionImage',context) || null,
				base: options[i],
				disabled: aa_bool(option,profile,'IsDisabled',context)
			});
		}
		return out;
	},
	AutoFilterOptions: function (profile,data,context) {
		var options = [];
		var uniqueOptions = {};

		var cntr = context.vars.ItemListCntr[0];
		var filterField = context.vars._Field[0];

		var items = cntr.AllItems || cntr.Items;
		for (var i = 0; i < items.length; i++) {
			var value = aa_totext ( filterField.FilterData( [items[i]] , context ) );
			if (value && !uniqueOptions[value])
				options.push({ code: value, text: value });
			uniqueOptions[value] = true;
		}
		return options;
	},
	SelectedOptionInPopup: function (profile,data,context)
	{
		var picklist = context.vars.ApiObject[0];
		var code = picklist.getValue();
		var items = data;
		for(var i=0;i<items.length;i++)
			if (items[i].code == code) 
				return [items[i]];
	},
	PicklistSelect: function (profile,data,context)
	{
		var option = aa_first(data,profile,'Option',context);
		if (!option) return;
		var picklist = context.vars.ApiObject[0];
		
		var code = option.code;
		picklist.setValue(code,{Option: [option.base]});
		if (picklist.wrapperForStyleByField.jbPopup) picklist.wrapperForStyleByField.jbPopup.close();
		if (picklist.Refresh) picklist.Refresh();

		aa_refresh_cell(picklist.wrapperForStyleByField,context);	// because the picklist is implemented by StyleByField 
	},
	AddValueNotInOptionsToList: function (profile,data,context)
	{
		var cntr = context.vars.ItemListCntr[0];
		var items = cntr.AllItems || cntr.Items;
		// last option is the one not in options
		var optionNotInOptions = items[items.length-1];
		if (!optionNotInOptions || !optionNotInOptions.isValueNotInOptions) {
			optionNotInOptions = { isValueNotInOptions: true }; 
			items.push(optionNotInOptions);
		}
		optionNotInOptions.text = optionNotInOptions.code = aa_text(data,profile,'OptionText',context);
		cntr.RefreshDataColumns();
	}
});

aa_gcs("fld_aspect",{
	PicklistDisplayNameInPicklistBox: function (profile,data,context) {
		var field = context.vars._Field[0];
		field.DisplayNameInPicklistBox = function(data1,ctx) {
			return ajaxart.run(data1,profile,'IdToDisplayName',aa_merge_ctx(context, ctx));
		}
	},
	PicklistProperties: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.HideSearchBox = aa_bool(data,profile,'HideSearchBox',context);
		field.AutoRecalcOptions = aa_bool(data,profile,'AutoRecalcOptions',context);
		field.DelayOptionCalculation = aa_bool(data,profile,'DelayOptionCalculation',context);
		field.CustomPopupContents = aa_first(data,profile,'PopupContents',context);
		field.TextForNoResults = aa_text(data,profile,'TextForNoResults',context);
		field.TextForShowAll = aa_text(data,profile,'TextForShowAll',context);
		field.MaxItemsToShow = aa_int(data,profile,'MaxItemsToShow',context);
		field.TextForEmptyValueInPopup = aa_text(data,profile,'TextForEmptyValueInPopup',context);
		field.TextForEmptyValueInRadio = aa_text(data,profile,'TextForEmptyValueInRadio',context);
		field.SelectOnHover = aa_text(data,profile,'SelectOnHover',context);

		field.OnOpenPopup = function(field_data,ctx) {
			if (field.AutoRecalcOptions || field.Options.delayedCalculation) {
				field.RefreshOptions(field_data,ctx);
				field.Options.delayedCalculation = false;
			}
		};
	},
	HideUnselectedPicklistOptions: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		aa_bind(field,'ModifyControl',function(settings) {
			aa_addOnAttach(settings.Wrapper,function() {
				showhide_fields(settings.Wrapper,settings.FieldData)
			});
		});
		jBart.bind(field,'update', function(settings) {
			showhide_fields(settings.wrapper,settings.FieldData);
		});

		function showhide_fields(wrapper,field_data)
		{
			var selected = ',' + aa_totext(field_data) + ',';
			for(var i=0;i<field.Options.length;i++) {
				var option = ',' + field.Options[i].code +',';
				var show = selected.indexOf(option) != -1;
				showhide_field(wrapper,aa_string2id(field.Options[i].code),show);
			}
		}
		function showhide_field(srcElement,fieldID,show)
		{
			var parent = srcElement.parentNode;
			if (!parent || parent.tagName == 'body') return;
			var ctrls = $(parent).find('.fld_'+fieldID);
			if (show)
				$(ctrls).show();
			else
				$(ctrls).hide();
			if (ctrls.length == 0)
				showhide_field(parent,fieldID,show);
		}
	}
});

aa_gcs("itemlist_filter", {
    Occurrences: function (profile, data, context)
    {
        var field = context.vars._Field[0]; 
        field.OccurrencesStyle = aa_first(data,profile,'Style',context);
        var filteredOccurrences = aa_bool(data,profile,'ShowFilteredOccurrences',context);
        var filterId = field.Id;
	     	var sort = aa_bool(data,profile,'SortByOccurrences',context);

     		field.SortPicklistOptions = function(options,ctx,picklist) {
     			var cntr = ctx.vars.ItemListCntr[0];
     			aa_calculateFilterOccurrences(cntr,filterId,filteredOccurrences);

     			picklist.useFilteredOcc = filteredOccurrences && cntr.FilteredOccurrences[filterId];
     			if (picklist.useFilteredOcc) {
     				// there must be a filter other than our own
     				picklist.useFilteredOcc = false;
     				for(var i in cntr.FilterData || {})
     					if (i != filterId && cntr.FilterData[i]) picklist.useFilteredOcc = true;
     			}

     			for(var i=0;i<options.length;i++) {
     				var code = options[i].code
     				options[i].occ = cntr.Occurrences[filterId][code] || 0;
     				if (picklist.useFilteredOcc) {
     					options[i].filteredOcc = cntr.FilteredOccurrences[filterId][code] || 0;
     				}

     				if (!code && field.AllowEmptyValue) options[i].occ = '300000';
     			}
     			if (sort) {
     				if (picklist.useFilteredOcc) {
            	options.sort(function(a,b) { return b.filteredOcc - a.filteredOcc; });     				
     				} else {
            	options.sort(function(a,b) { return b.occ - a.occ; });     				
            }
     			}

					return options;
     		};

				aa_bind(field,'picklistRenderOption',function(args) {
            var cntr = args.context.vars.ItemListCntr[0];
            var code = args.option.code;
            if (code == '' && field.AllowEmptyValue) return;

            var count = args.option.occ;
            var filteredCount = args.option.filteredOcc;
            
            aa_renderStyleObject2(field.OccurrencesStyle,{ 
                count: count,
                filteredOccurrences: args.picklist.useFilteredOcc,
                filteredCount: filteredCount,
                optionTextEl: args.optionTextEl
            },data,field,args.context,{ funcName: 'add' });
     		},'Occurrences');
    }
});

function aa_picklist_optionByCode(options,code) {
	if (!options) return;
	for(var i=0;i<options.length;i++) {
		if (options[i].code == code) return options[i];
	}
	return null;
}

function aa_initPicklistObject(picklist,field,field_data,context)
{
	if (!field_data || !field_data.length) ajaxart.log("No field data for picklist");

	aa_extend(picklist,{
		apiObjectType: 'picklist',
		Field: field, FieldData: field_data, data: field_data[0],Context: context,context: context,
		field: field, field_data: field_data,
		type: 'picklist',
		getValue: function() {
			return aa_totext(field_data);
		},
		getImage: function() {
			var code = aa_totext(field_data,context);
			var option = aa_picklist_optionByCode(picklist.Field.Options,code);
			return option && option.image;
		},
		setValue: function(newValue,extra,settings) {
			settings = settings || {};
			var oldValue = this.getValue();
			if (oldValue == newValue && !settings.forceUpdate) return;
			ajaxart.writevalue( field_data, newValue );
			var content = this.control; // TODO: fix this
			aa_invoke_field_handlers(field.OnUpdate,content,null,field,field_data,{ OldValue: [oldValue] });
			jBart.trigger(field,'update',{ FieldData: field_data, wrapper: content ? content.parentNode : null, extra: extra });
		},
		totext: function() {
			var code = aa_totext(field_data,context);
			if (this.field.DisplayNameInPicklistBox)
				return aa_totext(this.field.DisplayNameInPicklistBox(field_data,context));

			var option = aa_picklist_optionByCode(picklist.Field.Options,code);
			return option ? option.text : code;
		},
		Refresh: function() {}
	});
}

function aa_picklist_radio_buttons(picklist,settings)
{
  settings = aa_defaults(settings,{
    OptionElement: picklist.$el.find('.aa_option')[0],
    OptionInnerElements: function(optionEl) {
      return {
        RadioElement: jQuery(optionEl).find('.aa_option_radio')[0],
        TextElement: jQuery(optionEl).find('.aa_option_text')[0]        
      }
    }    
  });
  
	aa_global_vars().uniqueRadioCounter = aa_global_vars().uniqueRadioCounter || 0;
	var radioGroup = 'aaradio' + ++aa_global_vars().uniqueRadioCounter;
	var currentValue = picklist.getValue();
	
	var optionTemplate = settings.OptionElement;
	var templateParent = optionTemplate.parentNode;
	
	var options = picklist.Field.Options;

	if (picklist.Field.AllowEmptyValue && settings.addRadioButtonForEmptyValue)
		options = [{ code: '', text: picklist.field.TextForEmptyValueInRadio || 'none' }].concat(options);

	for(var i=0;i<options.length;i++) {
		var option = options[i];
		var optionElem = optionTemplate.cloneNode(true);
		var optionSettings = settings.OptionInnerElements(optionElem);
		optionElem.jbOption = option;
		if (optionSettings.TextElement) { 
			optionSettings.TextElement.innerHTML = option.text; 
			optionSettings.TextElement.jbRadio = optionSettings.RadioElement; 
			optionSettings.TextElement.jbOption = option;
			if (i == options.length-1) $(optionElem).addClass('aa_last');

			if (option.disabled) {
				$(optionElem).addClass('disabled');
			} else {
				optionSettings.TextElement.onclick = function() {
					$(this.jbRadio).click();
				};
			}
		}
		if (optionSettings.RadioElement) {
			optionSettings.RadioElement.setAttribute('name',radioGroup);
			optionSettings.RadioElement.jbOption = option;
			optionSettings.RadioElement.onclick = function(){
				if ($(this).closest('.aa_disabled')[0]) return;
        $(this).parents('.aa_option').siblings().removeClass('selected');
        $(this).parents('.aa_option').addClass('selected');
				picklist.setValue(this.jbOption.code);
			};
		}
			
    if (currentValue == option.code) {
    	optionSettings.RadioElement.setAttribute('checked','checked');
     	$(optionSettings.RadioElement).parents('.aa_option').addClass('selected');
    }        
		
		$(optionTemplate).before(optionElem);
	}	
	templateParent.removeChild(optionTemplate);
}


function aa_picklist_open_options(picklist,settings)
{
	settings = aa_defaults(settings,{
		OptionElement: picklist.$el.firstOfClass('aa_option'),
		OptionInnerElements: function(optionElem) {
			return {
				TextElement: $(optionElem).firstOfClass('aa_option_text'),
				ImageElement: $(optionElem).firstOfClass('aa_option_image')
			};
		}
	});

	var currentValue = picklist.getValue();
	
	var optionTemplate = $(settings.OptionElement)[0];
	var templateParent = optionTemplate.parentNode;
	
	var options = picklist.Field.Options;
	for(var i=0;i<options.length;i++) {
		var option = options[i];
		var optionElem = optionTemplate.cloneNode(true);
		var optionSettings = settings.OptionInnerElements(optionElem);
		optionElem.jbOption = option;
		$(optionSettings.TextElement).text(option.text);

		aa_setImage($(optionSettings.ImageElement)[0],option.image,false);
		
		$(optionElem).click(function(){
			setSelected(this,true);
		});
		
		if (currentValue == option.code) setSelected(optionElem);
		
		$(optionTemplate).before(optionElem);
		if (i == options.length-1) $(optionElem).addClass('last');
		if (option.disabled) $(optionElem).addClass('disabled');
	}	
	templateParent.removeChild(optionTemplate);

	function setSelected(optionElem,alsoUpdate) {
		if (optionElem.jbOption.disabled) return;

		if (alsoUpdate) {
			picklist.setValue(optionElem.jbOption.code);
		}
		$(optionElem).siblings().removeClass('selected');
		$(optionElem).addClass('selected');
	}
}


function aa_picklist_native_combo(picklist,settings)	// used by native combo style
{
	settings.OnOptionElem = settings.OnOptionElem || function() {};
	settings.Element = settings.Element || picklist.control;
	
	var element = settings.Element;
	var currentOption = picklist.getValue();
	
	var field = picklist.Field;
	var options = field.Options;
	if (field.AllowEmptyValue)
		jQuery('<option/>').appendTo(element);
	for(var i=0;i<options.length;i++) {
		var option = options[i];
		var optionElem = jQuery('<option/>')[0];
		optionElem.value = option.code;
		optionElem.innerHTML = option.text;
		if (option.disabled) optionElem.setAttribute('disabled','disabled');

		settings.OnOptionElem(optionElem,option);
		element.appendChild(optionElem);
	}
	element.value = currentOption;
	
	element.onchange = function() {
		var field_data = picklist.FieldData;
		var newValue;
		var index = element.selectedIndex;
		if (field.AllowEmptyValue)	// first option is the empty value
			index--;
		if (index == -1) 
			newValue = "";	// empty value
		else 
			newValue = options[index].code;
		picklist.setValue(newValue);
	};
}

function aa_picklist(picklist,settings) {
	settings = settings || {};
	settings.baseElement = settings.baseElement || picklist.$el.firstOfClass('aa_picklist_div');
	settings.textElement = settings.textElement || picklist.$el.firstOfClass('aa_picklist_text');
	settings.imageElement = settings.imageElement || picklist.$el.firstOfClass('aa_picklist_image');
	settings.popupElement = settings.popupElement || picklist.$el.firstOfClass('aa_picklist_popup');
	settings.popupInputElement = settings.popupInputElement || picklist.$el.firstOfClass('aa_picklist_popup_input');	
	settings.popupNoResultsElement = settings.popupNoResultsElement || picklist.$el.firstOfClass('aa_picklist_no_results');	
	settings.popupShowAllElement = settings.popupShowAllElement || picklist.$el.firstOfClass('aa_picklist_show_all');	
	settings.popupItemElement = settings.popupItemElement || picklist.$el.firstOfClass('aa_picklist_item');	
	settings.imageWidth = settings.imageWidth || 16;
	settings.imageHeight = settings.imageHeight || 16;
	settings.longTextLength = settings.longTextLength || 20;

	settings.popupItemSettings = settings.popupItemSettings || function(itemElement) {
		return {
			itemTextElement: $(itemElement).firstOfClass('aa_picklist_item_text'),
			itemImageElement: $(itemElement).firstOfClass('aa_picklist_item_image')
		};
	};
	settings.maxItemsToShow = picklist.field.MaxItemsToShow || 50;

	settings.search = settings.search || aa_searchbox_search; // for Compress: aa_searchbox_search()

	var $base = $(settings.baseElement);
	var $popupItemParent = $(settings.popupItemElement).parent();
	var $popupItemTemplate = $(settings.popupItemElement).remove();
	var $input = null;
	var disableSelectionOnHover = false;

	initPopup();

	$base.click(function() {
		if (!ajaxart.isattached(picklist.selectorPopup.el))
			openPopup();
		else
			picklist.selectorPopup.close();
	});
	refreshPicklistBase();

	function refreshPicklistBase() {
		var imageObject = aa_create_static_image_object(picklist.getImage());
		if (imageObject && imageObject.url) {
			imageObject.keepImageProportions = imageObject.fillImage = imageObject.centerImage =  true;
			imageObject.height = settings.imageHeight;
			imageObject.width = settings.imageWidth;
		}

		aa_setImage($(settings.imageElement)[0],imageObject,false);
		var txt = picklist.totext();
		$(settings.textElement).html(txt);
		if (txt.length > settings.longTextLength) 
			$(settings.textElement).addClass('picklist-long-text');
		else
			$(settings.textElement).removeClass('picklist-long-text');

		if (!picklist.totext() && picklist.field.DescriptionForEmptyText) {
			$(settings.textElement).addClass('placeholder');
			$(settings.textElement).html(picklist.field.DescriptionForEmptyText);
		} else {
			$(settings.textElement).removeClass('placeholder');
		}
	}
	// tab and keyboard support
	$(settings.baseElement).attr('tabindex',0);
	$(settings.baseElement).keydown( function(e) { 
		if (picklist.selectorPopup && !picklist.selectorPopup.isOpen || !picklist.selectorPopup.isOpen()) {	// popup is closed
			if (e.keyCode == 13 || e.keyCode == 32 || e.keyCode == 40) {	// enter, space or arrow down opens the popup
				openPopup(); 
				return aa_stop_prop(e);
			}
		} else if (picklist.field.HideSearchBox) {	// popup is open and no searchbox, we pass the keys events to the searchbox
			handleInputEvents(e.keyCode);
			return aa_stop_prop(e);
		}
	});

	function initPopup() {
		picklist.selectorPopup = aa_createLightPopup({
			el: $(settings.popupElement)[0],
			launchingElement: $base[0],
			location:  aa_popupNearLauncherLocation({ minWidthOfLaunchingElement: true }),
			features: [
				aa_popup_feature_closeOnEsc(),
				aa_popup_feature_autoFocus()
			],
			apiObject: picklist,
			type: 'picklist',
			popupSettings: {
				closeWhenClickingOutside: 'except launching element',
				reusablePopup: true
			}
		});

		if (picklist.field.SelectOnHover) {
			aa_bind(picklist.selectorPopup,'close',function(args) {
				if (args.closeType != 'OK' && picklist.selectorPopup.valueWhenOpened != picklist.getValue())
					picklist.setValue(picklist.selectorPopup.valueWhenOpened);
			});
		}
		if (aa_isStudioRefreshAndPopupIsOpen('picklist',picklist)) {
			setTimeout(openPopup,100);
		}
		if (picklist.field.HideSearchBox) $(picklist.selectorPopup.el).addClass('aa_hide_searchbox');
		$(settings.popupNoResultsElement).text(picklist.field.TextForNoResults || 'No results match your search');
		$(settings.popupShowAllElement).text(picklist.field.TextForShowAll || 'Show All');
		aa_bind(picklist.selectorPopup, 'close', function() {	// after closing, bring the focus back to the base
			$(settings.baseElement).focus();
			setTimeout( function() { 	
				if (!document.activeElement || document.activeElement == $("body")[0]) 	// if the popup was closed by clicking non focusable area, we catch it and refocus
					$(settings.baseElement).focus();
			},1);
		});
	}	

	function openPopup() {
		if (picklist.field.OnOpenPopup) {
			picklist.field.OnOpenPopup(picklist.field_data,picklist.context);
		}
		if (picklist.field.CustomPopupContents) {
			showPicklistCustomContents();
		} else {
			bindPopupInputEvents();
			refreshPopupOptions();
		}
		picklist.selectorPopup.valueWhenOpened = picklist.getValue();
		picklist.selectorPopup.show();
		aa_trigger(picklist,'popupShow',picklist.selectorPopup);
	}

	function showPicklistCustomContents() {
		var obj = {
			SelectAndClose: function(data1) {
				var code = aa_totext(data1);
				picklist.selectorPopup.close('OK');
				picklist.setValue(code);
				refreshPicklistBase();
			}
		};
		aa_empty(picklist.selectorPopup.el.firstChild);
		aa_fieldControl({ 
			Field: picklist.field.CustomPopupContents, 
			Wrapper: picklist.selectorPopup.el.firstChild,
			FieldData: [],
			Context: aa_ctx(picklist.context,{ _Picklist: [obj]})
		});
	}
	function handleInputEvents(keyCode) {
		$input = $(settings.popupInputElement);
		$input[0].jbValueForKeyDown = $input.val();
		if (keyCode == 13) { // enter
			var selected = $popupItemParent.find('>.selected')[0];
			if (selected) {
				selectItem(selected);
				return;
			}
		}
		if (keyCode == 27) { // escape
			picklist.selectorPopup.close();
		}
		if (keyCode == 40) { // arrow down
			var selected = $popupItemParent.find('>.selected')[0];
			if (selected && selected.nextSibling) {
				$(selected).removeClass('selected');
				$(selected.nextSibling).addClass('selected');
				makeItemVisible(selected.nextSibling,'down');
				return;
			}
		}
		if (keyCode == 38) { // arrow up
			var selected = $popupItemParent.find('>.selected')[0];
			if (selected && selected.previousSibling) {
				$(selected).removeClass('selected');
				$(selected.previousSibling).addClass('selected');
				makeItemVisible(selected.previousSibling,'up');
				return;
			}
		}
	}
	function bindPopupInputEvents() {
		$input = $(settings.popupInputElement);
		$input.val('');
		if ($input[0].EventsBounded) return;
		$input[0].EventsBounded = true;	// avoid multiple bindind
		$input.keydown(function(e) {
			handleInputEvents(e.keyCode)
		});
		$input.keyup(function(e) {
			if (this.jbValueForKeyDown == $(this).val()) return;
			refreshPopupOptions();
		});
	}

	function refreshPopupOptions(showAll) {
		while ($popupItemParent[0].firstChild)
			aa_remove($popupItemParent[0].firstChild,true);

		var items = picklist.Field.Options;
		if (picklist.Field.AllowEmptyValue && picklist.getValue() && !settings.dontShowEmptyValueItem) {
			items = [{ code: '', text: picklist.field.TextForEmptyValueInPopup || '' }].concat(items);
		}
		settings.search($input.val(),items);

		var added = 0;
		if (picklist.field.AllowValueNotInOptions && $input.val()) {
			items = items.concat([{ code: $input.val(), text: $input.val(), passed: true }]);
		}

		if (picklist.field && picklist.field.SortPicklistOptions) 
			items = picklist.field.SortPicklistOptions(items,picklist.context,picklist);

		for(var i=0;i<items.length;i++) {
			if (!items[i].passed) continue;
			var $item = $popupItemTemplate.clone().appendTo($popupItemParent);
			$item[0].jbItem = items[i];
			if (items[i].disabled) $item.addClass('disabled');

			var innerSettings = settings.popupItemSettings($item[0]);
			$(innerSettings.itemTextElement).text(items[i].text);
			highlightText($(innerSettings.itemTextElement),$input.val());

			aa_trigger(picklist.field,'picklistRenderOption',{ optionTextEl: $(innerSettings.itemTextElement)[0], context: picklist.context, option: items[i], picklist: picklist });

			var imageObject = aa_create_static_image_object(items[i].image);
			if (imageObject && imageObject.url) {
				imageObject.keepImageProportions = imageObject.fillImage = imageObject.centerImage =  true;
				imageObject.height = settings.imageHeight;
				imageObject.width = settings.imageWidth;				
			}
			aa_setImage($(innerSettings.itemImageElement)[0],imageObject);

			try {
				if (settings.onRenderOption) settings.onRenderOption($item[0],items[i]);
			} catch(e) {
				ajaxart.logException('error calling onRenderOption',e);
			}

			if (added === 0) $item.addClass('selected');
			if (++added >= settings.maxItemsToShow && !showAll) {
				addShowAll();
				break;
			}
		}
		$popupItemParent.children().click(function() {
			if (this == $(settings.popupShowAllElement)[0]) return;

			selectItem(this);
		});
		$popupItemParent.children().mouseover(function() {
				if (this == $(settings.popupShowAllElement)[0] || disableSelectionOnHover) return;

				if ( $(this).hasClass('selected') ) return;
				$popupItemParent.children().removeClass('selected');
				$(this).addClass('selected');

				if (picklist.field.SelectOnHover)
					picklist.setValue(this.jbItem.code);
		});
		if (!added && items.length > 0) {
			$(settings.popupNoResultsElement).appendTo($popupItemParent);
		}
		if (settings.rtl) setTimeout(popupRTLKeepRightPosition,1);
	}

	function popupRTLKeepRightPosition() {
		var popupEl = picklist.selectorPopup.$el[0];
		var popupRight = aa_absLeft(popupEl,true) + popupEl.offsetWidth;
		var baseRight = aa_absLeft($base[0],true) + $base.outerWidth();

		var currentLeft = Number(popupEl.style.left.split('px')[0]);
		popupEl.style.left = (currentLeft - (popupRight-baseRight) ) + 'px';
	}
	function selectItem(itemElement) {
		if (itemElement.jbItem.disabled) return;
		var code = itemElement.jbItem.code;

		picklist.selectorPopup.close('OK');
		picklist.setValue(code);
		refreshPicklistBase();
	}

	function addShowAll() {
		$(settings.popupShowAllElement).appendTo($popupItemParent);
		$(settings.popupShowAllElement).click(function() {
			var lastItem = this.previousSibling && this.previousSibling.jbItem;
			refreshPopupOptions(true);

			var children = $popupItemParent.children();
			for(var i=0;i<children.length;i++)
				if (children[i].jbItem == lastItem) {
					if (children[i].tabIndex == -1) children[i].tabIndex = 0;
					children[i].focus();
					children[i].tabIndex = -1;
				}
		});
	}

	function highlightText($elem,searchtext) {
		$elem.html( ajaxart_field_highlight_text($elem.text(),searchtext,'.aa_highlight') );
	}

	function makeItemVisible(element,direction) {
		if (!element) return;

		var frame = picklist.selectorPopup.frameElement;
		var top = aa_relTop(element,frame);
		var bottom = top + $(element).outerHeight();
		var scrollY = $(frame).scrollTop();
		var frameHeight = $(frame).height();

		disableSelectionOnHover = true;

		if (direction == 'down') {
			if (bottom > scrollY + frameHeight ) {
				$(frame).scrollTop(bottom-frameHeight);  
			}
		}
		if (direction == 'up') {
			if (top < scrollY) {
				$(frame).scrollTop(top);
			}
		}

		setTimeout(function() {			// to prevent the selection to go to the mouse
			disableSelectionOnHover = false;
		},100);
	}

}





aa_gcs("slider", {
	Unit: function (profile,data,context)
	{
		var unit = {
			symbol: aa_text(data,profile,'Symbol',context),
			min: parseFloat(aa_text(data,profile,'Min',context)),
			max: parseFloat(aa_text(data,profile,'Max',context)),
			initialPixelsPerUnit: parseFloat(aa_text(data,profile,'InitialPixelsPerUnit',context)),
			step: aa_float(data,profile,'Step',context),
			sliderText: function(value,field) {
				if (value == '' && field.AllowEmptyValue) 
					return field.TextForEmptyValue;
				return aa_text([value],profile,'SliderText',aa_ctx(context,{Symbol:[this.symbol]}));
			},
			valueToSave: function(numericVal,field) {
				if (numericVal === '' && field.AllowEmptyValue) 
					return '';
				return aa_text([numericVal],profile,'DataFormat',aa_ctx(context,{Symbol:[this.symbol]}));
			},
			numericPart: function(val,field) { 
				var parts = (''+val).match(/([^0-9\.\-]*)([0-9\.\-]+)([^0-9\.\-]*)/);
				var value = parts && parts[2];
				value = value || (field.AllowEmptyValue ? '' : '0');
				var v = parseFloat(value);
				if (!isNaN(v)) 
					value = '' + this.fixValue(v);
				return value;
			},
			fixValue: function(val) {
				var unit = this;
				if (!isNaN(unit.min)) val = Math.max(val,unit.min);
				if (!isNaN(unit.max)) val = Math.min(val,unit.max);
				val = Math.round(val/unit.step)*unit.step; 
				val = parseFloat(val.toFixed(3)+''.replace(/0+$/,''));
				return val;
			}
		}
		return [unit];
	},
	Slider: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.SliderStyle = aa_first(data,profile,'Style',context);
		field.AllowEmptyValue = aa_bool(data,profile,'AllowEmptyValue',context);
		field.TextForEmptyValue = aa_bool(data,profile,'TextForEmptyValue',context);
		aa_field_handler(field,'ModifyControl',function() {},'resizer'); // disable the resizer
		var units = ajaxart.run(data,profile,'Units',context);
		var unit = units[0];
		if (!unit) {
			var min = aa_text(data,profile,'Min',context);
			var xtml = aa_parsexml('<xtml t="slider.Unit" Min="' + min + '" />');
			unit = aa_first(data,xtml,'',context);
		}
		
		field.Control = function(field_data,ctx) {
			var field = this;
			var style = field.SliderStyle;
			var jSlider = jQuery(style.Html);
			var numericValue = unit.numericPart(ajaxart.totext_array(field_data),field);
			
			var slider = aa_api_object(jSlider,{
				initSizes: function() {
					var sliderWidth = parseInt(slider.width.split('px')[0] || '0' );
					slider.scaleWidth = jQuery(slider.jbScaleElem).width() || sliderWidth;
					slider.fromPixel = aa_absLeft(slider.jbScaleElem);
					slider.toPixel = slider.fromPixel + slider.scaleWidth;
					slider.center = Math.round(slider.fromPixel+ slider.scaleWidth/2);
					if (!isNaN(unit.min)) slider.from = unit.min;
					if (!isNaN(unit.max)) slider.to = unit.max;
					if (!isNaN(unit.initialPixelsPerUnit)) slider.ratio = slider.ratio || unit.initialPixelsPerUnit;
					if (!slider.ratio && slider.from != null && slider.to != null)
						slider.ratio = slider.scaleWidth/(slider.to - slider.from);
					if (!slider.ratio)
						slider.ratio = 1/unit.step;
					if (slider.from != null && slider.to != null)
						slider.range = slider.to - slider.from;
					else 
						slider.range = slider.scaleWidth / slider.ratio; 
	
					if (slider.from != null)
						slider.offset = slider.from * slider.ratio;
					slider.thumbWidth = Math.round(jQuery(slider.jbThumbElem).outerWidth()/2);
				},
				setValue: function(val,state) {
					numericValue = unit.numericPart(val,field);
					var value_to_save = unit.valueToSave(numericValue,field);

					if ( aa_totext(field_data) == value_to_save) return slider; // no change - so do not save & fire events
					ajaxart.writevalue(field_data,[value_to_save]);
					if (field.RefreshOn == 'every click' || state != 'slide')
						aa_invoke_field_handlers(field.OnUpdate,slider,{},field,field_data);

					return slider;
				},
				width: aa_text(data,profile,'Width',context),
				adjustScale: function() {
					var val = parseFloat(numericValue);
					var distanceFromSide = Math.min(val - slider.from, slider.to - val) * slider.ratio;
					if (distanceFromSide > 10) return slider; // far from sides, no need to adjust
					if (isNaN(val)) val = unit.fixValue(0);
					// put in the middle
					if (isNaN(unit.min))
						slider.from = (val - slider.range/2).toFixed(2);
					if (isNaN(unit.max))
						slider.to = (val + slider.range/2).toFixed(2);
					if (unit.min == 0 && isNaN(unit.max))
						slider.to = Math.max(slider.to,val+slider.range);
					slider.offset = slider.from * slider.ratio;
					slider.range = slider.to - slider.from;
					slider.ratio = slider.scaleWidth/slider.range;
					return slider;
				},
				pixelToUnits: function(x) { 
					return (x+slider.offset)/slider.ratio;
				},
				setThumbPosition: function() {
					var val = parseFloat(numericValue);
					if (isNaN(val)) val = unit.fixValue(0);
					if (!slider.ratio) return;
					if (val < slider.from || val > slider.to)
						return;
				  if (numericValue == '') 
				   	jSlider.addClass('empty_value') 
				  else 
				  	jSlider.removeClass('empty_value'); 
					var xPixels = Math.round(val * slider.ratio - slider.offset);
					xPixels = Math.max(xPixels,0);
					xPixels = Math.min(xPixels,slider.scaleWidth);
		      jQuery(slider.jbThumbElem).css('left', xPixels- slider.thumbWidth);
		      jQuery(slider.jbTextElem).html(unit.sliderText(numericValue,field));
				},
		        keyDown: function(e) {
		    		e = e || event;
		    		var str = String.fromCharCode(e.keyCode);
		    		if (e.keyCode == 189) str = "-";
		    		if (str.match(/[\-0-9]/)) {
		    			aa_first([slider],profile,'PopupEditor',aa_ctx(context,{Value:[str],Slider:[slider],ControlElement: [slider.jbThumbElem]}));
		    			return true;
		    		}
		    		if (e.keyCode == 46 && field.AllowEmptyValue) { // delete
		    			slider.setValue(field,'');
		    			slider.adjustScale(true);
		    		}
		    		if (str == '0') slider.setValue('0');
		    		//jBart.trigger(slider.jbThumbElem,'keydown',{code:e.keyCode, str: str});
		    		var val = parseFloat(numericValue);
		    		if (isNaN(val)) val = 0;
		    		if (e.keyCode == 37 || e.keyCode == 39) { // right/left
		    			if (e.keyCode == 39)
		    				val += unit.step * (e.shiftKey ? 10 : 1);
		    			else
		    				val -= unit.step * (e.shiftKey ? 10 : 1);
			            slider.setValue(val);
			            aa_stop_prop(e);
		    		}
		    		slider.setThumbPosition();
		    		return true;
		    	}
			});
			jQuery(slider).addClass(aa_attach_global_css(style.Css));
			aa_defineElemProperties(slider,'init'); 
			
			slider.init = function(scale,thumb,text) {
				var slider = this;
				slider.jbScaleElem = this.getInnerElement(scale);
				slider.jbTextElem = this.getInnerElement(text);
				jQuery(slider.jbTextElem).mousedown(function(){
					aa_first(data,profile,'PopupEditor',aa_ctx(context,{Value:[numericValue],Slider:[slider],ControlElement: [slider.jbThumbElem]}));
					return false;
				});
				slider.jbThumbElem = this.getInnerElement(thumb);
				slider.jbThumbElem.tabIndex = 1;
				jQuery(slider.jbScaleElem).css('width',aa_text(data,profile,'Width',context));
				jQuery(slider.jbThumbElem).bind('mousedown',dragBegin);
				jQuery(slider.jbThumbElem).bind('keydown',slider.keyDown);
			
				aa_addOnAttach(slider,function () {
					slider.initSizes();
					slider.adjustScale();
					slider.setThumbPosition();
				});

				function dragBegin(e) {            
		        	if (aa_incapture) return true;
		        	slider.initSizes(); 
		        	slider.adjustScale(); 
		        	slider.setThumbPosition();
		        	
		        	slider.jbStartDragTime = new Date().getTime();
		        	slider.jbSuspectClick = true;
		            document.onmousemove = function(e) { drag(e) }
		            document.onmouseup   = function(e) { slider.dragEnd(e) }
		            jQuery(slider.jbThumbElem).focus();
		            drag(e);
		            return false;
		        }
		        function drag(e) {
		        	if (slider.jbSuspectClick) {
		        		if (new Date().getTime() - slider.jbStartDragTime < 100) return;
		        		slider.jbSuspectClick = false;
		        	}
					slider.fromPixel = aa_absLeft(slider.jbScaleElem);
		            var pos = aa_mousePos(e);
		            pos.x = Math.max(pos.x,slider.fromPixel);
		            pos.x = Math.min(pos.x,slider.toPixel);
		            var xPixels = pos.x - slider.fromPixel;
		            slider.setValue(slider.pixelToUnits(xPixels)).setThumbPosition();
		         }
		         slider.dragEnd = function(e) {
		            document.onmouseup = null;
		            document.onmousemove = null;
		        	if (!slider.jbSuspectClick) {
		        		slider.setValue(numericValue);
		        		slider.adjustScale().setThumbPosition();
		        	}
		        	slider.jbSuspectClick = false;
		            jQuery(slider.jbThumbElem).focus();
		         }
			}
			aa_apply_style_js(slider,field.SliderStyle);
			return jSlider.get();
		}
	}	
});


function aa_jbart_slider(editableNumber, settings) {
	var unit = editableNumber.format;
	unit.field = editableNumber.field; 
	if (!unit) {
		ajaxart.log('slider - no units defined for slider');
		return;
	}

	var numericValue = '' + (editableNumber.value && unit.parse(''+editableNumber.value));
	var slider = editableNumber.slider = {
		scaleElem: settings.scaleElement,
		textElem: settings.textElement,
		thumbElem: settings.thumbElement,
		inputElem: settings.inputElement,
	    init: function() {
			var slider = this;
			slider.thumbElem.tabIndex = 1;
			jQuery(slider.scaleElem).css('width',slider.width);
			if (!(editableNumber.field.IsDisabled && editableNumber.field.IsDisabled())) {
				jQuery(slider.thumbElem).bind('mousedown',dragBegin);
				jQuery(slider.thumbElem).bind('keydown',slider.keyDown);
				jQuery(slider.inputElem).bind('keydown',slider.inputKeyDown).bind('blur',slider.setInputValue).hide();
				jQuery(slider.textElem).bind('mousedown',function(){
					jQuery(slider.inputElem).show().focus();return false;
				});
			} else {
			  var disableText = (editableNumber.field.DisableText && editableNumber.field.DisableText()) || '';
			  jQuery(slider.thumbElem).attr('title',disableText).addClass('aa_disabled');
			  jQuery(slider.textElem).attr('title',disableText).addClass('aa_disabled');
			  jQuery(slider.scaleElem).attr('title',disableText).addClass('aa_disabled');
			  jQuery(slider.inputElem).hide();
			  ajaxart_disableSelection(slider.scaleElem);
			}
		
			aa_addOnAttach(settings.$el[0],function () {
				slider.initSizes();
				slider.adjustScale();
				slider.setThumbPosition();
			});

			function dragBegin(e) {            
	        	if (aa_incapture) return true;
	        	slider.initSizes(); 
	        	slider.adjustScale(); 
	        	slider.setThumbPosition();
	        	
	        	slider.startDragTime = new Date().getTime();
	        	slider.suspectClick = true;
	            document.onmousemove = function(e) { drag(e) }
	            document.onmouseup   = function(e) { slider.dragEnd(e) }
	            jQuery(slider.thumbElem).focus();
	            drag(e);
	            return false;
	        }
	        function drag(e) {
	        	if (slider.suspectClick) {
	        		if (new Date().getTime() - slider.startDragTime < 100) return;
	        		slider.suspectClick = false;
	        	}
				slider.fromPixel = aa_absLeft(slider.scaleElem);
	            var pos = aa_mousePos(e);
	            pos.x = Math.max(pos.x,slider.fromPixel);
	            pos.x = Math.min(pos.x,slider.toPixel);
	            var xPixels = pos.x - slider.fromPixel;
	            slider.setValue(slider.pixelToUnits(xPixels)).setThumbPosition();
	         }
	         slider.dragEnd = function(e) {
	            document.onmouseup = null;
	            document.onmousemove = null;
	        	if (!slider.suspectClick) {
	        		slider.setValue(numericValue);
	        		slider.adjustScale().setThumbPosition();
	        	}
	        	slider.suspectClick = false;
	            jQuery(slider.thumbElem).focus();
	         }
        },
		initSizes: function() {
			slider.scaleWidth = jQuery(slider.scaleElem).width();
			slider.fromPixel = aa_absLeft(slider.scaleElem);
			slider.toPixel = slider.fromPixel + slider.scaleWidth;
			slider.center = Math.round(slider.fromPixel+ slider.scaleWidth/2);
			if (!isNaN(unit.min)) slider.from = unit.min;
			if (!isNaN(unit.max)) slider.to = unit.max;
			if (!isNaN(unit.initialPixelsPerUnit)) slider.ratio = slider.ratio || unit.initialPixelsPerUnit;
			if (!slider.ratio && !isNaN(slider.from) && !isNaN(slider.to))
				slider.ratio = slider.scaleWidth/(slider.to - slider.from);
			if (!slider.ratio)
				slider.ratio = 1/unit.step;
			if (!isNaN(slider.from) && !isNaN(slider.to))
				slider.range = slider.to - slider.from;
			else 
				slider.range = slider.scaleWidth / slider.ratio; 

			if (slider.from != null)
				slider.offset = slider.from * slider.ratio;
			slider.thumbWidth = Math.round(jQuery(slider.thumbElem).outerWidth()/2);
		},
		setValue: function(val,state) {
			var fix1 = applyRangeAndResolution(unit,val);
			numericValue = isNaN(fix1) ? '' : '' + fix1;
			var value_to_save = unit.getDataString(fix1);
			editableNumber.setValue(value_to_save);

			return slider;
		},
		adjustScale: function() {
			var val = parseFloat(numericValue);
			var distanceFromSide = Math.min(val - slider.from, slider.to - val) * slider.ratio;
			if (distanceFromSide > 10) return slider; // far from sides, no need to adjust
			if (isNaN(val)) val = applyRangeAndResolution(unit,0) || 0;
			// put in the middle
			if (isNaN(unit.min))
				slider.from = applyRangeAndResolution(unit,val - slider.range/2);
			if (isNaN(unit.max))
				slider.to = applyRangeAndResolution(unit,val + slider.range/2);
			if (unit.min == 0 && isNaN(unit.max))
				slider.to = Math.max(slider.to,val+slider.range);
			slider.offset = slider.from * slider.ratio;
			if (!isNaN(slider.from) && !isNaN(slider.to))
				slider.range = slider.to - slider.from;
			if (!isNaN(slider.range))
				slider.ratio = slider.scaleWidth/slider.range;
			return slider;
		},
		pixelToUnits: function(x) { 
			return (x+slider.offset)/slider.ratio;
		},
		setThumbPosition: function() {
			var val = parseFloat(numericValue);
			if (isNaN(val)) val = applyRangeAndResolution(unit,0) || 0;
			if (!slider.ratio) return;
			if (val < slider.from || val > slider.to)
				return;
	    if (numericValue == '') 
	    	settings.$el.addClass('empty_value'); 
    	else 
		   	settings.$el.removeClass('empty_value'); 
			var xPixels = Math.round(val * slider.ratio - slider.offset);
			xPixels = Math.max(xPixels,0);
			xPixels = Math.min(xPixels,slider.scaleWidth);
      jQuery(slider.thumbElem).css('left', xPixels- slider.thumbWidth);
      jQuery(slider.textElem).text(unit.getDisplayString(parseFloat(numericValue)));
		},
    keyDown: function(e) {
    		e = e || event;
    		var str = String.fromCharCode(e.keyCode);
    		if (e.keyCode == 189) str = "-";
    		if (str.match(/[\-0-9]/)) {
    			jQuery(slider.inputElem).show().focus();
    			return true;
    		}
    		if (e.keyCode == 46) { // delete
    			slider.setValue('');
    			slider.adjustScale(true).setThumbPosition();
    		}
    		if (str == '0') slider.setValue('0');
    		//jBart.trigger(slider.jbThumbElem,'keydown',{code:e.keyCode, str: str});
    		var val = parseFloat(numericValue);
    		if (isNaN(val)) val = 0;
    		if (e.keyCode == 37 || e.keyCode == 39) { // right/left
    			if (e.keyCode == 39)
    				val += unit.step * (e.shiftKey ? 10 : 1);
    			else
    				val -= unit.step * (e.shiftKey ? 10 : 1);
	            slider.setValue(val);
	            aa_stop_prop(e);
    		}
    		slider.setThumbPosition();
    		return true;
    	},
    	setInputValue: function() {
        	slider.setValue(slider.inputElem.value);
        	slider.adjustScale();
   			slider.setThumbPosition();
   			jQuery(slider.inputElem).hide();
    	},
    	inputKeyDown: function(e) {
    		e = e || event;
    		if (e.keyCode == 13) // enter
	        	slider.setInputValue();
    		return true;
    	}

	}
	slider.init();

	function applyRangeAndResolution(unit,val) {
		if (isNaN(val) || val === '') return NaN;
		if (!isNaN(unit.min)) val = Math.max(val,unit.min);
		if (!isNaN(unit.max)) val = Math.min(val,unit.max);
		val = Math.round(val/unit.step)*unit.step; 
		val = parseFloat(val.toFixed(3)+''.replace(/0+$/,''));
		return val;		
	}
}





aa_gcs("img", {
	Image: function(profile,data,context) {
		aa_init_class_image();

		var origWidthRef = ajaxart.run(data,profile,'OriginalWidth',context);
		var origHeightRef = ajaxart.run(data,profile,'OriginalHeight',context);

		var ctx2 = aa_ctx(context,{ ImageOriginalWidth: origWidthRef, ImageOriginalHeight: origHeightRef });
		var frameWidth = aa_first(data,profile,'FrameWidth',ctx2);
		var frameHeight = aa_first(data,profile,'FrameHeight',ctx2);

		var image = new ajaxart.classes.Image({
			url: aa_text(data,profile,'Url',context),
			originalWidth: parseInt(aa_totext(origWidthRef)),
			originalHeight: parseInt(aa_totext(origHeightRef)),
			originalWidthRef: origWidthRef,
			originalHeightRef: origHeightRef,
			width: frameWidth ? frameWidth.val : 0,
			height: frameHeight ? frameHeight.val : 0,
			adjustSize: aa_first(data,profile,'AdjustSize',context),
			needsRefreshOnResize: (frameWidth && frameWidth.refreshOnResize) || (frameHeight && frameHeight.refreshOnResize),
			refresh: function() {
				var frameWidth = aa_first(data,profile,'FrameWidth',ctx2);
				var frameHeight = aa_first(data,profile,'FrameHeight',ctx2);

				this.width = frameWidth ? frameWidth.val : 0;
				this.height = frameHeight ? frameHeight.val : 0;

				aa_trigger(this,'refresh');
			}
		});

		return [image];
	},
	ImageInSprite: function(profile,data,context) {
		aa_init_class_sprite_image();

		var image = new ajaxart.classes.SpriteImage({
			url: aa_text(data,profile,'Url',context),
			width: aa_int(data,profile,'Width',context),
			height: aa_int(data,profile,'Height',context),
			positionInSprite: aa_text(data,profile,'PositionInSprite',context),
			positionForHover: aa_text(data,profile,'PositionForHover',context),
			positionForClick: aa_text(data,profile,'PositionForClick',context)			
		});

		return [image];
	},
	Center: function(profile,data,context) {
		aa_init_class('CenterImage',{
			fix: function(image,div,innerDiv,settings) {
				var backgroundWidth = image.width,backgroundHeight = image.height;
				if (image.width / image.height > image.originalWidth / image.originalHeight) {
					backgroundWidth = parseInt(backgroundHeight * image.originalWidth / image.originalHeight);
					var marginType = this.isRTL ? 'margin-right' : 'margin-left';
					$(innerDiv).css(marginType,Math.abs(parseInt((image.width - backgroundWidth)/2)) + 'px');
				} else {
					backgroundHeight = parseInt(backgroundWidth * image.originalHeight / image.originalWidth);
					$(innerDiv).css('margin-top',Math.abs(parseInt((image.height - backgroundHeight)/2)) + 'px');
				}
				$(innerDiv).width(backgroundWidth).height(backgroundHeight);
			}
		});
		return [new ajaxart.classes.CenterImage({ isRTL: aa_bool(data,profile,'RightToLeft',context)})];
	},
	Fill: function(profile,data,context) {
		aa_init_class('FillImage',{
			fix: function(image,div,innerDiv,settings) {
				var backgroundWidth = image.width,backgroundHeight = image.height;
				if (image.width / image.height > image.originalWidth / image.originalHeight) {
					backgroundHeight = parseInt(backgroundWidth * image.originalHeight / image.originalWidth);
					$(innerDiv).css('margin-top','-'+Math.abs(parseInt((image.height - backgroundHeight)/2)) + 'px');
				} else {
					backgroundWidth = parseInt(backgroundHeight * image.originalWidth / image.originalHeight);
					$(innerDiv).css('margin-left','-'+Math.abs(parseInt((image.width - backgroundWidth)/2)) + 'px');
				}
				$(innerDiv).width(backgroundWidth).height(backgroundHeight);
			}
		});
		return [new ajaxart.classes.FillImage()];
	},
	CustomFill: function(profile,data,context) {
		return [{
			fix: function(image,div,innerDiv,settings) {
				var backgroundWidth = image.width,backgroundHeight = image.height;
				if (image.width / image.height > image.originalWidth / image.originalHeight) {
					backgroundHeight = parseInt(backgroundWidth * image.originalHeight / image.originalWidth);
				} else {
					backgroundWidth = parseInt(backgroundHeight * image.originalWidth / image.originalHeight);
				}
				$(innerDiv).width(backgroundWidth).height(backgroundHeight);
				$(innerDiv).css('margin-top','-'+aa_text(data,profile,'MarginTop',context) + 'px');
				$(innerDiv).css('margin-left','-'+aa_text(data,profile,'MarginLeft',context) + 'px');
			}
		}];
	},
	Stretch: function(profile,data,context) {
		aa_init_class('StretchImage',{
			fix: function(image,div,innerDiv,settings) {
				var backgroundWidth = image.width,backgroundHeight = image.height;
				$(innerDiv).width(backgroundWidth).height(backgroundHeight);
			}
		});
		return [new ajaxart.classes.StretchImage()];
	},
	FixedWidth: function(profile,data,context) {
		return [{ val: aa_int(data,profile,'Width',context)}];
	},
	FixedHeight: function(profile,data,context) {
		return [{ val: aa_int(data,profile,'Height',context)}];
	},
	ContainerWidth: function(profile,data,context) {
		var visualCntr = aa_findVisualContainer(null,context);
	  var num = visualCntr.width;

		var perc = aa_int(data,profile,'Percentage',context);
		num = parseInt(num * (perc / 100));		
	  num -= aa_int(data,profile,'Margin',context);
	  
	  return [{ val: num, refreshOnResize: true }];
	},
	DeviceHeight: function(profile,data,context) {
	  var num = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);
	  
	  if ($('.jbart_screen_simulator')[0])
	  	num = $('.jbart_screen_simulator').height();
		else if (context.vars._PagePreview) {
			num = context.vars._PagePreview[0].Height;
		}
		var perc = aa_int(data,profile,'Percentage',context);
		num = parseInt(num * (perc / 100));
	  num -= aa_int(data,profile,'Margin',context);
	  
	  return [{ val: num, refreshOnResize: true }];
	},
	CalculateImageSize: function(profile,data,context) {
		var url = aa_text(data,profile,'Url',context);
		var deferred = $.Deferred();
		aa_calc_image_size(url,function(width,height) {
			deferred.resolve([{ Width: [width], Height: [height]}]);
		});
		return aa_asyncDataPromiseResult(deferred.promise());
	}
});

aa_gcs("img_type", {
	Image: function(profile,data,context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);
		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context,ctx);
			var image = aa_first(field_data, profile, 'Image', ctx2);
			if (!image || !image.url)
				image = aa_first(field_data, profile, 'DefaultImage', ctx2);

			return [aa_renderStyleObject(field.Style, {
				field: field, field_data: field_data, context: ctx2,
				image: image
			}, ctx2, true)];
		};
	},
	EditableImage: function(profile,data,context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);

		aa_init_class_image();
		aa_init_class_EditableImage2();

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context, ctx);

			var origWidthRef = aa_run(field_data,profile,'FieldDataForImageWidth',context);
			var origHeightRef = aa_run(field_data,profile,'FieldDataForImageHeight',context);

			var frameWidth = aa_first(data,profile,'PreviewWidth',context);
			var frameHeight = aa_first(data,profile,'PreviewHeight',context);

			var imageObject = new ajaxart.classes.Image({
				url: aa_totext(field_data),
				originalWidth: parseInt(aa_totext(origWidthRef)),
				originalHeight: parseInt(aa_totext(origHeightRef)),
				originalWidthRef: origWidthRef,
				originalHeightRef: origHeightRef,
				width: frameWidth ? frameWidth.val : 0,
				height: frameHeight ? frameHeight.val : 0,
				adjustSize: aa_first(data,profile,'AdjustSizeForPreview',context)
			});

			var editableImage = new ajaxart.classes.EditableImage2({
				field: field, field_data: field_data, context: context,
				image: imageObject,
				value: imageObject.url,
				emptyImageUrl: aa_first(data,profile,'EmptyImageURL',context),
				placeholder: field.DescriptionForEmptyText || ''
			});
			return [aa_renderStyleObject(field.Style, editableImage, ctx2, true)];
		};
	}
});

function aa_init_class_image() {
	if (ajaxart.classes && ajaxart.classes.Image) return;

	aa_init_class('Image',{
		_ctor: function() {
			this.css3Image = true;
		},
		render: function(settings) {
			var image = this;
			var el = settings.el;
			$(el).addClass('aa_image_outer');

			aa_empty(el,true);

			if (!this.originalWidth || !this.originalHeight) {
				aa_calc_image_size(image.url,function(width,height) {
					if (!width) return; // an invalid url
					image.originalWidth = width;
					image.originalHeight = height;
					image.render(settings);
				});
				// if (this.width) $(el).width(this.width);
				// if (this.height) $(el).height(this.height);
				return;
			}

			var innerImg = $('<img class="aa_image"/>').appendTo(el).attr('src',this.url);
			if (!innerImg[0].width) {
				innerImg.addClass('loading_image');
				innerImg.load(function() {
					innerImg.removeClass('loading_image');
				});
			}


			if (!this.width && !this.height) {
				this.width = this.originalWidth;
				this.height = this.originalHeight;
			}
			if (this.width && !this.height) {
				this.height = Math.ceil( this.originalHeight * this.width / this.originalWidth );
			}
			if (this.height && !this.width) {
				this.width = Math.ceil( this.originalWidth * this.height / this.originalHeight );
			}

			$(el).css({ overflow: 'hidden' , 'margin-left': 0, 'margin-top': 0 }).width(this.width).height(this.height);

			if (!this.adjustSize) {
				innerImg.width(this.width).height(this.height);
			} else {
				this.adjustSize.fix(image,el,innerImg[0],settings);
			}

			if (this.url.indexOf('//static.wix.com/media/') > -1) {
				// images hosted at wix
				var newUrl = aa_wix_image_url(this.url,{ width: this.width, height: this.height });
			}
		}
	});
}

function aa_init_class_sprite_image() {
	if (ajaxart.classes && ajaxart.classes.SpriteImage) return;

	aa_init_class('SpriteImage',{
		_ctor: function() {
			this.css3Image = true;
		},
		render: function(settings) {
			var image = this;
			var el = settings.el;
			aa_empty(el,true);
			var $innerDiv = $('<div />').css('display','inline-block').appendTo(el);

			$innerDiv.css('width',this.width+'px').css('height',this.height+'px');
			var position = '-' + this.positionInSprite.replace(/,/,'px -') + 'px';
			$innerDiv.css('background','url('+this.url+') no-repeat ' + position);

			var css = '';
			if (this.positionForHover) {
				var hoverPosition = '-' + this.positionForHover.replace(/,/,'px -') + 'px';
				css += '#this:hover { background-position: ' + hoverPosition + ';} ';
			}
			if (this.positionForClick) {
				var activePosition = '-' + this.positionForClick.replace(/,/,'px -') + 'px';
				css += '#this:active { background-position: ' + activePosition + ';} ';
			}

			$innerDiv.addClass(aa_attach_global_css(css));
		}
	});
}

function aa_image(image, settings) {
	if (!settings && !settings.el) return;
	if (!image && settings.hideForEmpty) aa_hide(settings.el);
	if (!image) return;
	if (image.url) image.url = image.url.replace(/_jbartImages_/g,aa_base_images());
	if (image && image.render) image.render(settings);

	if (image.needsRefreshOnResize) {
		aa_addActionOnWindowResize(settings.el,function() {
			image.refresh();
			aa_image(image,settings);
		},'refresh image');
	}
}

function aa_calc_image_size(url,callback) {
	if (!url) return callback();

	var img = $('<img/>')[0];
	var doneCalled = false;

	img.onload = function() {
		if (!doneCalled)
			callback(img.width,img.height); 
	};

	img.onerror = function() {
		doneCalled=true;
		callback(); 
	};

	img.setAttribute('src',url);			
	if (img.width) { doneCalled = true; callback(img.width,img.height); } // already loaded
}


function aa_init_class_EditableImage2() {
	if (ajaxart.classes && ajaxart.classes.EditableImage2) return;

	aa_init_class('EditableImage2', {
		setValue: function(url) {
			this.setImageValue(url);
		},
		setImageValue: function(url, width, height,isErrorInImage) {
			var that = this;
			if (this.image.originalWidthRef[0]) {
				if (!width && !isErrorInImage) { // we need to calculate the image size and then call setImage
					aa_calc_image_size(url,function(width,height) {
						that.setImageValue(url, width, height, !width);
					});
					return; // wait fot the onload
				}
				ajaxart.writevalue(this.image.originalWidthRef, [width]);
				ajaxart.writevalue(this.image.originalHeightRef, [height]);
				this.image.originalWidth = width;
				this.image.originalHeight = height;
			}
			this.value = this.image.url = url;
			ajaxart.writevalue(this.field_data, [url]);
			aa_invoke_field_handlers(this.field.OnUpdate, this.el, null, this.field, this.field_data, {});
			aa_trigger(this.field, 'update', {
				FieldData: this.field_data,
				wrapper: this.el.parentNode
			});
			aa_trigger(this, 'change');
			if (this.refresh) this.refresh();
		}
	});
}

function aa_init_class_EditableImage() {
		aa_init_class('EditableImage', {
			setValue: function(url) {
				this.setImageValue(url);
			},
			setImageValue: function(url, width, height,errorInImage) {
				if (aa_totext(this.field_data) == url) return;
				if (this.imageWidthData[0]) {
					if (!width && !errorInImage) { // we need to calculate the image size and then call setImage
						var that = this;
						aa_calc_image_size(url,function(width,height) {
							that.setImageValue(url, width, height, !width);
						});
						return; // wait fot the onload
					}
					ajaxart.writevalue(this.imageWidthData, [width]);
					ajaxart.writevalue(this.imageHeightData, [height]);
					this.imageWidth = width;
					this.imageHeight = height;
				}
				this.value = this.image.url = url;
				ajaxart.writevalue(this.field_data, [url]);
				aa_invoke_field_handlers(this.field.OnUpdate, this.el, null, this.field, this.field_data, {});
				aa_trigger(this.field, 'update', {
					FieldData: this.field_data,
					wrapper: this.el.parentNode
				});
				aa_trigger(this, 'change');
			},
			CalcImageSize: function(data1) {
				if (! this.imageWidthData[0]) return;
				var url= aa_totext(this.field_data);
				var that = this;

				aa_calc_image_size(url,function(width,height) {
					ajaxart.writevalue(that.imageWidthData, [width]);
					ajaxart.writevalue(that.imageHeightData, [height]);
					that.imageWidth = width;
					that.imageHeight = height;
				});
			}			
		});	
}

function aa_editableImage_default(editableImage,settings) {
	settings = settings || {};
	aa_editableImageBase(editableImage,settings);

	editableImage.$el.click(function() {
		var url = window.prompt(settings.message,editableImage.image.url);
		editableImage.setValue(url);
	});		
}

function aa_editableImageBase(editableImage,settings) {
	settings = aa_defaults(settings,{
		message: editableImage.params.Question || 'Please enter image url:',
		imageWrapper: editableImage.el,
		inputElement: editableImage.$el.find("input")[0]
	});
	var $imageWrapper = $(settings.imageWrapper);

	$imageWrapper.width(editableImage.image.width).height(editableImage.image.height);

	editableImage.refresh = function() {
		$imageWrapper.toggleClass('aa_empty_image',editableImage.image.url == '');
		editableImage.$el.toggleClass('aa_empty_image',editableImage.image.url == '');
		if (editableImage.image.url) {
			aa_empty($imageWrapper[0],true);
			aa_image(editableImage.image,{el: settings.imageWrapper});
		}	else if (editableImage.emptyImageUrl) {
			var imageObj = aa_defaults({ url: editableImage.emptyImageUrl }, editableImage.image);
			aa_image(imageObj, {el: settings.imageWrapper});
		}	else
			aa_empty($imageWrapper[0],true);
	}

  	editableImage.refresh();
    if (settings.inputElement) {
		var $input = $(settings.inputElement);
		$input.css('width', editableImage.params.TextBoxWidth );
		$input.attr("placeholder",editableImage.placeholder);
		$input.val(editableImage.image.url);
		$input.on('input', function() {
			var inputValue = $input.val();
			if ($input.val() != editableImage.image.url) {
				editableImage.setValue($input.val());
			}
		});
	}
	var mask = editableImage.$el.find(".aa_drop_sink_mask");
	if (mask.length)
		mask[0].jbDropImage = function (e) {
			var files = e.dataTransfer.files;
			for(var i=0;i<files.length;i++) {
				editableImage.$el.addClass('uploading');
				$.when(editableImage.doUpload({file: files[i]})).then(function(image_url) { 
					editableImage.setValue(image_url);
					editableImage.$el.removeClass('uploading');
					if ($input) $input[0].value = image_url;
				}, function(er) { editableImage.$el.removeClass('uploading'); } );
				return; // one file is enough at this stage ...
			}

			var items = e.dataTransfer.items;
			if (items) {	// Chrome
				for(var i=0;i<items.length;i++)
					if (items[i].type == "text/html" )
						items[i].getAsString(useDroppedHtml);
			}
			else {	// Firefox
				useDroppedHtml(e.dataTransfer.getData('text/html'));
			}
			function useDroppedHtml(html){ 
	          var image_url = html.match(/src="([^"]*)/);
	          if (image_url && image_url[1]) {
	          	editableImage.setValue(image_url[1]);
	            if ($input) $input[0].value = image_url[1];
	          }
			}
		}
	aa_init_dropImage();
}

function aa_init_dropImage() {
	if (window.aa_dropImageInitialized) return;
	window.aa_dropImageInitialized = true;

 	function dragover(e) {
        e.stopPropagation();
        e.preventDefault();	
        var box = $(e.target).parents('*').andSelf().filter('.image_drop_area');
        if (box.length > 0) {
        	$(".aa_drop_sink_mask").hide();	// hide other drop masks
            box.addClass('hover');
            var mask = box.find('.aa_drop_sink_mask');
            var borderWidth = parseInt(mask.css('border-width')) || 0;
            mask.width(box.width()-borderWidth*2);
            mask.height(box.height()-borderWidth*2);
            box.css('position','relative');
            mask.show();
        }
	}

	function dragleave(e) {
        e.stopPropagation ();
        e.preventDefault();
        $(e.target).parents('*').andSelf().filter('.aa_drop_sink_mask').hide();
	}

	function drop(e) {
        e.stopPropagation();
        e.preventDefault();	
        var mask = $(e.target).parents('*').andSelf().filter('.aa_drop_sink_mask');
        if (mask.length > 0) {
            mask[0].jbDropImage && mask[0].jbDropImage(e);
        }
        $('.aa_drop_sink_mask').hide();
	}
	document.addEventListener('drop', drop, false);
	document.addEventListener('dragover', dragover, false);
	document.addEventListener('dragleave', dragleave, false);
}


function aa_editableImageTextAndPreview(editableImage,settings) {
	settings = aa_defaults(settings,{ imageWrapper: editableImage.$el.find("span")[0] });
	aa_editableImageBase(editableImage, settings);
}
function aa_editableImageInPopup(editableImage,settings) {
	var $imageWrapper = editableImage.$el.find(".main_image_wrapper");
	settings = aa_defaults(settings,{ imageWrapper: $imageWrapper[0] });
	aa_editableImageBase(editableImage, settings);
	var popup = aa_createLightPopup({
		el: editableImage.$el.find(".popup")[0],
		launchingElement: $imageWrapper[0],
		location:  aa_popupNearLauncherLocation({ minWidthOfLaunchingElement: true }),
		features: [
			aa_popup_feature_closeOnEsc(),
			aa_popup_feature_autoFocus()
		],
		apiObject: editableImage,
		type: 'image',
		popupSettings: {
			closeWhenClickingOutside: 'except launching element',
			reusablePopup: true
		}
	});
	$imageWrapper.click( function() {
		if (!ajaxart.isattached(popup.el))
			popup.show();
		else
			popup.close();
	} );
}
// allows drag and drop of items
function aa_dragDropItems(settings)
{
	var list = settings.parent;
	var isTable = list.tagName.toLowerCase() == 'tbody';
	var listTopDiv = list;

	var draggedElem = null,spaceElem = null,DAndDOwner = "",SuspectItemDrag = null,OriginalElem = null;
	var onmousemoveOrig=null,listOriginalPosition=null,onkeydownOrig=null;
	
	aa_bind_ui_event(list,'mousedown',suspectDrag);
	aa_bind_ui_event(list,'mouseup',unSuspectDrag);
		
	function inElem(elem,top,left) {
		return (elem.offsetTop < top && elem.offsetLeft < left && 
				elem.offsetTop + elem.offsetHeight > top && 
				elem.offsetLeft + elem.offsetWidth > left); 
	}
	function elemAtPosition(top,left) {
		for(var elem=list.firstChild;elem;elem=elem.nextSibling) {
			if (inElem(elem,top,left) && settings.isItemElement(elem)) 
				return elem;
		}
	}
	function numbersBetween(num,num1,num2) {
		return ((num1 <= num && num <= num2) || (num2 <= num && num <= num1)); 
	}
	function findCandidate(elemAtPos,spaceElem,mousepos) {
		for(var iter=spaceElem;iter;iter=iter.nextSibling) {
			if (iter == elemAtPos) {
				var sameLine = (spaceElem.nextSibling && spaceElem.nextSibling.offsetTop == spaceElem.offsetTop);
				if (!sameLine && draggedElem.jbLastMouse &&  mousepos.y < draggedElem.jbLastMouse.y) return null;
				return spaceElem.nextSibling;
			}
		}
		var sameLine = (spaceElem.previousSibling && spaceElem.previousSibling.offsetTop == spaceElem.offsetTop);
		if (!sameLine && draggedElem.jbLastMouse && mousepos.y > draggedElem.jbLastMouse.y) return null;
		return spaceElem.previousSibling;
	}
	
	function drag(e) {
		var offsetParent = listTopDiv;
		
		var mousepos = aa_mousePos(e,true);
		var mouseTop = mousepos.y - aa_absTop(offsetParent);
		var mouseLeft = mousepos.x - aa_absLeft(offsetParent);
		var posyDelta = aa_absTop(offsetParent);

		if (SuspectItemDrag)
		{
			var distance = Math.abs(mousepos.y - SuspectItemDrag.mousePos.y) + Math.abs(mousepos.x - SuspectItemDrag.mousePos.x);
			if (distance < 5) return aa_stop_prop(e);
			var elemAtMousePos = elemAtPosition(mouseTop,mouseLeft);
			if (! elemAtMousePos)
				unSuspectDrag();
			else
				dragBegin(elemAtMousePos,e);
			SuspectItemDrag = null;
			
			return true;
		}
		if (!draggedElem) return true;
		var elemAtMousePos = elemAtPosition(mouseTop,mouseLeft);

		// move dragged elem
		draggedElem.style.top = (mouseTop - posyDelta - draggedElem.initialMouseOffset.top)  + 'px'; 
		draggedElem.style.left = (mouseLeft - draggedElem.initialMouseOffset.left)  + 'px';
		if (isTable) {
			draggedElem.style.left = '0px';
		}
			
		if (elemAtMousePos == spaceElem) return aa_stop_prop(e);

		if (!elemAtMousePos) return aa_stop_prop(e); // can be fixed so the external elem will be the candidate
		var candidate = findCandidate(elemAtMousePos,spaceElem,mousepos);
		if (!candidate) return aa_stop_prop(e);
		
		$(spaceElem).css('box-shadow','inset 0 0 5px 0 #999');
		if (isTable) {
			if (candidate.nextSibling && isGoingDown(candidate,spaceElem))
			  list.insertBefore(spaceElem,candidate.nextSibling); // going down
			else 
			  list.insertBefore(spaceElem,candidate); // going up
		} else {
			var margin = 3;
			var candidateBeforeSpace = (candidate.nextSibling == spaceElem);

			if (candidateBeforeSpace)
				list.insertBefore(spaceElem,candidate);
			else 
				list.insertBefore(spaceElem,candidate.nextSibling);		
		}
		
		draggedElem.jbLastMouse = mousepos;
		return aa_stop_prop(e);
	}
	function isGoingDown(candidate,spaceElem) {
		for(var iter=candidate;iter;iter=iter.nextSibling)
			if (iter == spaceElem) return false;
		return true;
	}
	function dragEnd(e,cancel) {
	  ajaxart_restoreSelection(document.body);
		jBart.trigger(settings.cntr,'dragEnd');
		list.removeChild(draggedElem);
		if (!cancel)
			jQuery(spaceElem).replaceWith(OriginalElem);
		else
			list.removeChild(spaceElem);
		OriginalElem.style.display = '';
		OriginalElem.display = '';
		

		list.onmousemove = onmousemoveOrig;
		list.style.position = listOriginalPosition;
		document.onkeydown = onkeydownOrig;
		document.onmouseup = null;
		draggedElem = null;
		
		var nextElem = null;
		for(var elem=OriginalElem.nextSibling;elem;elem=elem.nextSibling) {
			if (settings.isItemElement(elem)) {
				nextElem = elem;
				break;
			}
		}
		
		try {
			if (nextElem) 
				settings.moveBefore(OriginalElem,nextElem);
			else 
				settings.moveToEnd(OriginalElem);
		} catch(e) {
			ajaxart.logException(e,'Could not complete drag and drop in the model');
		}
		
	  DAndDOwner = "";
		return aa_stop_prop(e);
	}
	function dragBegin(item_elem,e) {
		jBart.trigger(settings.cntr,'dragBegin');
		ajaxart_disableSelection(list);
		DAndDOwner = "DragAndDropItems";
		var posx = aa_absLeft(item_elem);
		var posy = aa_absTop(item_elem);
		var offsetParent = listTopDiv;
		var posyDelta = aa_absTop(offsetParent);
		
		draggedElem = item_elem.cloneNode(true);
		OriginalElem = item_elem;
		list.appendChild(draggedElem);
		spaceElem = item_elem.cloneNode(true);
		spaceElem.jbItem = item_elem.jbItem;
		list.insertBefore(spaceElem,OriginalElem);
		
		OriginalElem.style.display = 'none';
		OriginalElem.display = 'none';

		jQuery(draggedElem).addClass(settings.draggedCssClass);
		jQuery(spaceElem).addClass(settings.draggedSpaceCssClass);

		if (isTable) {
			var tds = jQuery(draggedElem).find('>td');
			for(var i=0;i<tds.length;i++)
				jQuery(tds[i]).width(jQuery(tds[i]).width());
		}
		
		draggedElem.style.position = 'absolute';
		
		var mousepos = SuspectItemDrag.mousePos;
//		draggedElem.initialMouseOffset = { top: mousepos.y - posy, left: mousepos.x - posx } ;
		draggedElem.initialMouseOffset = { top: mousepos.y - posy - posyDelta, left: mousepos.x - posx } ;
		draggedElem.style.left = posx + 'px';
		draggedElem.style.top = (posy - posyDelta) + 'px';

		document.onmouseup = dragEnd;
		onkeydownOrig = document.onkeydown; 
		document.onkeydown = function(e)
		{
			if (e.keyCode == 27) 
				dragEnd(e,true);
			return true;
		}
		
		ajaxart_disableSelection(document.body);
		return aa_stop_prop(e);
	}

	function suspectDrag(e) {
		if (DAndDOwner != "") return true;
		if (settings.canStartDrag && !settings.canStartDrag(e.clientX,e.clientY)) return;
		
	    listTopDiv = list.tagName.toLowerCase() == 'div' ? list : jQuery(list).closest('div')[0];

		listOriginalPosition = listTopDiv.style.position;
		listTopDiv.style.position = 'relative';
		
		SuspectItemDrag = { mousePos : aa_mousePos(e,true), time: new Date().getTime()};
		onmousemoveOrig = list.onmousemove;
		list.onmousemove = drag;
		return true;
	}

	function unSuspectDrag(e) {
		if (DAndDOwner != "") return true;
		ajaxart_restoreSelection(list);
		if (SuspectItemDrag)
		{
			SuspectItemDrag = null;
			list.onmousemove = onmousemoveOrig;
			listTopDiv.style.position = listOriginalPosition;
		}
		return true;
	}
}
// This file contains utility functions for drag and drop

function aa_dragAndDropTableColumns(table,settings)
{
	settings = aa_extend({
		draggedSpaceCssClass: 'aa1_dragged_space_elem',
		draggedCssClass: 'aa1_dragged_elem',
		onDrop: function() {},
		rtl: false
	},settings);  
	
	var thead = $(table).find('>thead')[0];
	if (!thead || table.jbDragAndDropColsInitialized) return;
	table.jbDragAndDropColsInitialized = true;
	
	aa_registerTableHeaderEvent(thead,'mousedown',suspectDrag,'TableColumnsDragAndDrop','no dominant');
	aa_registerTableHeaderEvent(thead,'mousemove',checkSuspection,'TableColumnsDragAndDrop','suspect');
	aa_registerTableHeaderEvent(thead,'mouseup',unSuspectDrag,'TableColumnsDragAndDrop','suspect');
	aa_registerTableHeaderEvent(thead,'mouseout',unSuspectDrag,'TableColumnsDragAndDrop','suspect');
	aa_registerTableHeaderEvent(thead,'mousemove',_drag,'TableColumnsDragAndDrop','dominant');

	var ltr = !settings.rtl;
	var rtl = !ltr;

	function _drag(e,thead,th) 
	{
		var mousepos = aa_mousePos(e);
		var oElem = thead.draggedElem;
		if (!oElem) return true;
				
		oElem.style.left = (mousepos.x - oElem.mouseX) + 'px'; 

		var spaceLeft = aa_absLeft(thead.spaceElem);
		var nextRight = ltr ? -1 : 5000;
		if ($(thead.spaceElem).next().length > 0)	{
			var next = $(thead.spaceElem).next()[0];
			nextRight = aa_absLeft(next) + ltr * next.offsetWidth;
		}
		var prevLeft = ltr ? -1 : 5000;
		if ($(thead.spaceElem).prev().length > 0)	{
			var prev = $(thead.spaceElem).prev()[0];
			prevLeft = aa_absLeft(prev) + rtl * prev.offsetWidth;
		}

		var draggedRight = aa_absLeft(oElem) + ltr * (oElem.offsetWidth + oElem.deltaMouseX);
		var draggedLeft = aa_absLeft(oElem) + rtl * (oElem.offsetWidth + oElem.deltaMouseX);
		var nearRight = nextRight < draggedRight + 5;
		if (rtl) nearRight = !nearRight;
		var nearLeft = prevLeft > draggedLeft - 5;
		if (rtl) nearLeft = !nearLeft;

		var trs = $(table).find('>tbody>tr').get();
		
		if (nearRight) {
			if (thead.spaceElem.nextSibling.nextSibling) {
				var colIndex = calcColumnIndex(thead.spaceElem);
				
				for(var j=0;j<trs.length;j++)
				{
					var tr = trs[j];
					var tds = $(tr).find('>td');
					$(tds[colIndex]).insertAfter(tds[colIndex+1]);
				}
				$(thead.spaceElem).insertAfter(thead.spaceElem.nextSibling);
				thead.jbDropColumnIndex = colIndex+1;
			}
		}
		if (nearLeft) {
			if (thead.spaceElem.previousSibling) {
				var colIndex = calcColumnIndex(thead.spaceElem);
				
				for(var j=0;j<trs.length;j++)
				{
					var tr = trs[j];
					var tds = $(tr).find('>td');
					tr.insertBefore(tds[colIndex],tds[colIndex-1]);
				}
				$(thead.spaceElem).insertBefore(thead.spaceElem.previousSibling);
				thead.jbDropColumnIndex = colIndex-1;
			}
		}
		return aa_stop_prop(e);
	}
		 
	function _dragEnd(e) {
		$(thead.spaceElem).removeClass(settings.draggedSpaceCssClass);
		thead.draggedParent.removeChild(thead.draggedElem);
		document.onmouseup = thead.origDocMouseup;
		thead.draggedElem = null;
		thead.Suspect = null;
		thead.Owner = null;
		
		if (thead.jbDropColumnIndex != -1)
			settings.onDrop(thead.jbDragColumnIndex,thead.jbDropColumnIndex);
		return aa_stop_prop(e);
	}
	 
	function suspectDrag(e,thead,th) {
		thead.Suspect = { owner: "TableColumnsDragAndDrop", mousePos : aa_mousePos(e) };
		return aa_stop_prop(e);
	}

	function checkSuspection(e,thead,th) {
		var mousepos = aa_mousePos(e);
		if (thead.Suspect) {
			var distance = Math.abs(mousepos.x - thead.Suspect.mousePos.x);
			if (distance < 5) return true;
			thead.Suspect = null;
			dragBegin(e,thead,th);
		}
	}

	function unSuspectDrag(e,thead,th) {
		if (thead.Owner == "TableColumnsDragAndDrop") return true;
		thead.Suspect = null;
		return true;
	}

	function dragBegin(e,thead,th) {
		ajaxart_disableSelection(thead);
		thead.Owner = "TableColumnsDragAndDrop";

		var posx = aa_absLeft(th,false);
		var posy = aa_absTop(th,false);

		for(var iter=th;iter && iter != document.body;iter=iter.parentNode) {
			var iterPos = $(iter).css('position');
			if (iterPos == 'absolute' || iterPos == 'fixed' || iterPos == 'relative') {
				posy -= aa_absTop(iter,false);
				posx -= aa_absLeft(iter,false);
				if (iterPos == 'fixed') { posX -= window.scrollX; posY -= window.scrollY; }
				break;
			}
		}
		var oElem = thead.draggedElem = th.cloneNode(true);
		thead.draggedParent = th.parentNode; 
		thead.draggedParent.appendChild(oElem);

		thead.spaceElem = th; 

		$(oElem).addClass(settings.draggedCssClass);
		$(thead.spaceElem).addClass(settings.draggedSpaceCssClass);

		thead.jbDragColumnIndex = calcColumnIndex(th);
		thead.jbDropColumnIndex = -1;
		
		var mousepos = aa_mousePos(e);
		oElem.mouseX = mousepos.x - posx;
		oElem.deltaMouseX = mousepos.x - aa_absLeft(th,false);

		$(oElem).css('position','absolute').css('top',posy+'px').css('left',posx+'px').css('width',$(th).width()+'px');
		thead.origDocMouseup = document.onmouseup;
		document.onmouseup = _dragEnd;
		if(e.preventDefault) e.preventDefault();
		return aa_stop_prop(e);
	}
	
	function calcColumnIndex(th) {
		var parent = th.parentNode;
		var index = 0;
		for(var iter=parent.firstChild;iter;iter = iter.nextSibling) {
			if (iter == th) return index;
			if (iter.tagName.toLowerCase() == 'th') index++;
		}
	}
}


function aa_registerTableHeaderEvent(thead,eventType,func,ownerId,activation_mode)
{
	if (thead.EventHandler == null)
	{
		aa_defineElemProperties(thead,'handlers,EventHandler');
		thead.handlers = [];
		thead.EventHandler = function(e)
		{
			var elem = $( (typeof(event)== 'undefined')? e.target : (event.tDebug || event.srcElement)  ); 
		    e = e || event; // IE
		    
		    if (elem[0].tagName.toLowerCase() == 'th')
		    	var th = elem;
		    else
		    	var th = elem.parents('th');
		    if (th.length == 0) return true;
		    
		    if (e.type == 'mousedown')
		    	thead.LastMouseDown = { th: th[0] }; 
		    if (e.type == 'mouseout')
		    	thead.LastMouseDown = null;
		    
			for(var i=0;i<thead.handlers.length;i++)
			{
				var handler = thead.handlers[i];
				if (handler.eventType != e.type) continue;
				if (e.button == 2)
				{
					if (handler.activation_mode == 'right mouse')
						handler.func(e,thead,th[0]);
				}
				else
				{
					var activate = 
						(handler.activation_mode == 'no dominant' && thead.Owner == null) ||  
						(handler.activation_mode == 'suspect' && thead.Suspect != null && thead.Owner == null) ||
						(handler.activation_mode == 'dominant' && thead.Owner == handler.ownerId);
					if (activate)
						handler.func(e,thead,th[0]);
				}
			}
		}
		thead.onmousedown = thead.onmouseout =thead.onmouseup = thead.onmousemove = thead.EventHandler;
	}
	thead.handlers.push({eventType : eventType, func: func, ownerId: ownerId, activation_mode : activation_mode } )
}






aa_gcs("itemlist", {
    XmlItems: function (profile, data, context) {
        var parent = aa_first(data,profile,'ParentXml',context);
        if (!parent) { 
        //    ajaxart.log("XmlItems - parent is empty","error"); 
            return []; 
        }
        var tag = aa_text(data,profile,'Tag',context);
        var items = aa_xpath(parent,tag);
        if (aa_paramExists(profile,'Filter')) {
            var newitems = [];
            for(var i=0;i<items.length;i++)
                if ( aa_bool([items[i]],profile,'Filter',context) )
                    newitems.push( items[i] );
            
            items = newitems;
        }
        items.Parent = parent;
        items.Tag = tag;
        items.addItem = function(item,addSettings) {
            if (item.nodeType != 1) 
                return ajaxart.log('trying to add non xml item to XmlItems','error');

            addSettings = addSettings || { location: 'last' };
            var added = false;
            if (addSettings.location == 'afterItem') {
                var index = addSettings.itemIndex;
                if (index == this.length-1) {
                    addSettings.location = 'last'; 
                } else {
                    parent.insertBefore(item,this[index+1]);
                    this.push(this[index]);
                    this[index] = item;
                    added = true;
                }
            }
            if (!added && addSettings.location == 'first' && this.length > 0) {
                parent.insertBefore(item,this[0]);
                this.push(this[0]);
                this[0] = item;

                added = true;
            }
            if (!added) {  // last
                this.push(item);
                parent.appendChild(item);
            }
            aa_triggerXmlChange(item);
        };
        items.MoveBefore = function(item,beforeItem) {
            parent.insertBefore(item,beforeItem);
            aa_triggerXmlChange(parent);
        };
        items.MoveToEnd = function(item) {
            parent.appendChild(item);
            aa_triggerXmlChange(parent);
        };
        items.doDeleteItem = function(item) {
            aa_remove(item);
            aa_triggerXmlChange(parent,{ type: 'delete', deletedElem: item });
        };
        ajaxart.run(data,profile,'AutoFirstItem',aa_ctx(context,{ XmlItems:items }));
        return items;
    }
});
aa_gcs("xmlitems", {
    AutoFirstItem: function(profile, data, context) {
        var items = context.vars.XmlItems;

        var defaultXml = aa_first(data,profile,'DefaultXml',context);
        var itemsCount = aa_int(data,profile,'ItemsCount',context);
        for (i=items.length; i<itemsCount; i++)
            addEptyItem(i);

        function addEptyItem(index) {
            var newItem = aa_createElement(items.Parent,items.Tag);

            if (defaultXml)
                ajaxart.xml.copyElementContents(defaultXml,newItem);

            items.push(newItem);

            var listenerID = aa_bindXmlChange(newItem,function(changeType) {

                if (changeType == 'default value') return;

                var addAfter;
                for (i=index; i<itemsCount; i++)// if one of the items after us was already attached, we should come before
                    if (items[i].parentNode)
                        addAfter = items[i];

                if (addAfter)
                    items.Parent.insertBefore(newItem,addAfter);
                else
                    items.Parent.appendChild(newItem);     // TODO: insert first

                aa_unbindXmlChange(listenerID);

                ajaxart.run(data,profile,'OnAdded',context);

            },context);

            aa_bind(items,'initContainer',function(itemlistCntr) {
                aa_bind(itemlistCntr,'detach',function() {
                    aa_unbindXmlChange(listenerID);
                });
            });
        }
    }
});

aa_gcs("field", {
    ItemList: function (profile, data, context) 
    {
        var field = {
            Title: aa_multilang_text(data, profile, 'Title', context),
            FieldData: function (data) { return data; },
            IsItemList: true
        };
        field.Id = aa_text(data, profile, 'ID', context);
        field.ID = [field.Id];
        field.SectionStyle = aa_first(data,profile,'SectionStyle',context);
        
        var ctx = aa_ctx(context, { _Field: [field] });
        field.View = aa_first(data, profile, 'View', ctx);
        field.Control = function (data1, ctx) {
            var ctx2 = aa_ctx(ctx,{});
            aa_trigger(field,'ModifyInstanceContext',{ Context: ctx2, FieldData: data1 });
            
            var itemlist = aa_create_itemList(field,ctx2,data1);
            itemlist.Fields = ajaxart.runsubprofiles(data, profile, 'Field', aa_merge_ctx(context, ctx2));
            itemlist.VisibleFields = [];
            for(var i=0;i<itemlist.Fields.length;i++) {
                if (itemlist.Fields[i].CalculatedOnly) itemlist.Fields[i].Calculate(data1,ctx2);
                if (itemlist.Fields[i].IsHidden ) continue;
                if (itemlist.Fields[i].IsFieldHidden && itemlist.Fields[i].IsFieldHidden(data1,ctx) ) continue;
                itemlist.VisibleFields.push(itemlist.Fields[i]);
            }
            aa_trigger(field,'innerFields',{ Context: ctx2, FieldData: data1, Fields: itemlist.VisibleFields });

            aa_renderStyleObject2(field.View,itemlist,data1,field,ctx2);
            itemlist.el.jbApiObject = itemlist.el.jbItemList = itemlist;
            aa_trigger(field, 'initItemList', itemlist); // allows aspects to alter the itemlist (e.g. incremental build)

            itemlist.Refresh();
            itemlist.el.jbContext = ctx2;
            
            if (field.SectionStyle) return [ aa_wrapWithSection(itemlist.el,field,field.SectionStyle,data1,ctx2) ];
            return [itemlist.el];
        };
        ajaxart.runsubprofiles(data, profile, 'FieldAspect', ctx);

        return [field];
    },
    DragAndDropItemsHandle: function(profile,data,context) {
        var field = {
          Id: aa_text(data,profile,'ID',context),
          Title: aa_multilang_text(data,profile,'Title',context),
          Style: aa_first(data,profile,'Style',context)
        };
        field.ID = [field.Id];
        field.Control = function(field_data,ctx) {
            if (ctx.vars.ItemList) {
                if (ctx.vars.ItemList && !ctx.vars.ItemList[0].DragAndDropInitiated) {
                    ctx.vars.ItemList[0].DragAndDropInitiated = true;
                    var itemlist = ctx.vars.ItemList[0];
                    var draggedCssClass = aa_attach_global_css( aa_text(data,profile,'CssForDraggedElement',context) , null, 'draggedItem' );
                    var draggedSpaceCssClass = aa_attach_global_css( aa_text(data,profile,'CssForDraggedSpace',context) , null, 'draggedItemSpace' );

                    var items = itemlist.itemlistCntr.Items;
                    if (!items.MoveBefore) {
                        ajaxart.log("DragAndDropItemsHandle : itemlist does not support moving items","error");
                        return [ document.createElement("div") ];
                    }
                    
                    aa_dragDropItems({
                        parent: itemlist.ParentOfItems,
                        isItemElement: function(elem) { return elem.jbItem != null; },
                        moveBefore: function(elem,beforeElem) {
                            items.MoveBefore(elem.jbItem[0],beforeElem.jbItem[0]);
                        },
                        moveToEnd: function(elem) {
                            items.MoveToEnd(elem.jbItem[0]);
                        },
                        draggedSpaceCssClass: draggedSpaceCssClass,
                        draggedCssClass: draggedCssClass,
                        canStartDrag: function(mouseX,mouseY) {
                            var elem = document.elementFromPoint(mouseX, mouseY);
                            if ($(elem).hasClass('fld_' + field.Id))
                                return true;
                            else if ($(elem).parents(".fld_" + field.Id).length && 
                                $(elem).parents(".fld_" + field.Id).parents().is(itemlist.Ctrl))
                                return true;
                            else 
                                return false;
                        }
                    });
                }
            }
            if (ctx.vars.ItemList[0].itemlistCntr.Items.MoveBefore) {   // support D&D
                var ctx2 = aa_merge_ctx(context,ctx);
                return [aa_renderStyleObject(field.Style,{},ctx2,true)];
            } else return [ document.createElement("div")];
        }
        ajaxart.runsubprofiles(data,profile,'FieldAspect',aa_ctx(context,{_Field: [field]}));
        
        return [field];
    }
});
aa_gcs("field_aspect", {
    ItemListContainer: function (profile, data, context) {
        var field = context.vars._Field[0];
        jBart.bind(field,'ModifyInstanceContext',function(args) {
            var items = ajaxart.run(args.FieldData, profile, 'Items', aa_ctx(context,args.Context));
            args.Context.vars.ItemListCntr = [aa_itemlistContainer(items,field.Id,field)];
            
            jBart.trigger(field,'initItemlistCntr',args.Context.vars.ItemListCntr[0]);
        });
        field.hasItemlistContainer = true;
    },
    ItemListSelectionWithKeyboard: function (profile,data,context)
    {
        var field = context.vars._Field[0];
        var enterActivatesClick = aa_bool(data,profile,'EnterActivatesItemClick',context);

        aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
            var input = $(cell).find('input');
            var cntr = ctx.vars.ItemListCntr && ctx.vars.ItemListCntr[0];

            input.keydown(function(e) {
                if (e.keyCode == 40 || e.keyCode == 38) {   // arrow down/up
                    if (cntr.SelectionKeyDown) cntr.SelectionKeyDown(e); // delegate to cntr selection
                    return false;
                } else if (e.keyCode == 13 && cntr.SelectedElement && enterActivatesClick) {
                    var selected = cntr.SelectedElement;
                    $(selected).click();
                }
                
              return true;                  
            });
        },'ItemListSelectionWithKeyboard');
    },    
    CustomizeTableHeader: function (profile, data, context) {
        var field = context.vars._Field[0];
        var cssClass = aa_attach_global_css( aa_text(data,profile,'Css',context) , null, field.Id+'_header' );
        var colspan = aa_int(data,profile,'ColSpan',context);
        
        jBart.bind(field,'ModifyTableHeader',function(args) {
            $(args.th).addClass(cssClass);
            if (colspan) $(args.th).attr('colspan',colspan);
        },'CustomizeTableHeader');
    },
    PopupOfTableHeader: function (profile, data, context) {
        var field = context.vars._Field[0];
        var popupStrategy = aa_first(data,profile,'OpenPopup',context);

        jBart.bind(field,'ModifyTableHeader',function(args) {
          var ctx2 = aa_ctx(context,{ControlElement: [args.th]});

          var popupAdapter = {
            wrapper: args.th,
            $wrapper: $(args.th),
            openPopup: function() {
              ajaxart.runNativeHelper(data,profile,'OpenPopup',ctx2);
            },
            closePopup: function() {
            }
          };
          aa_renderStyleObject(popupStrategy,popupAdapter,ctx2,true,{ funcName: 'attach'});
          aa_apply_style_js(popupAdapter,popupStrategy,ctx2,'attach');
        },'PopupOfTableHeader');
    }
});

aa_gcs("itemlist_aspect", {
    ItemSelection: function (profile, data, context) 
    {
        var selectionClass = aa_attach_global_css( aa_text(data,profile,'Css',context) , null, 'selected' ) + ' aa_selected';
        var mouseSupport = aa_text(data,profile,'MouseSupport',context);
        var alwaysOneSelected = aa_bool(data,profile,'AlwaysOneSelected',context);
        var hasSelectedByDefault = aa_paramExists(profile,'SelectedByDefault');
        jBart.bind(context.vars._Field[0], 'initItemList', function (itemlist) 
        {
            var ItemListCntr = itemlist.itemlistCntr;
            
            ItemListCntr.SetNewSelected = function(selectedElement) {
                var prevSelectedElement = ItemListCntr.SelectedElement; 
                if (prevSelectedElement == selectedElement) return;
                ItemListCntr.SelectedElement = selectedElement;

                var args = { 
                    PrevSelectedElem: prevSelectedElement, 
                    PrevSelectedItem: prevSelectedElement && prevSelectedElement.jbItem,
                    SelectedElem: ItemListCntr.SelectedElement, 
                    SelectedItem: ItemListCntr.SelectedElement && ItemListCntr.SelectedElement.jbItem
                };
                ItemListCntr.trigger('showSelection',args);
                ItemListCntr.trigger('selectionChanged',args);
            }
            ItemListCntr.bind('showSelection',function(selectionArgs) {
                if (selectionArgs.PrevSelectedElem)
                    $(selectionArgs.PrevSelectedElem).removeClass(selectionClass);
                
                $(selectionArgs.SelectedElem).addClass(selectionClass);
            },'ItemSelection');

            ItemListCntr.SelectionKeyDown = function(e) { ItemListCntr.trigger('selectionKeyDown',e); }
            ItemListCntr.bind('selectionKeyDown',function(e) {
                var current = ItemListCntr.SelectedElement;
                var isDown = e.keyCode == 40, isUp = e.keyCode == 38;
                var elements = itemlist.GetElements();
                var index = -1;
                for(var i=0;i<elements.length;i++) {
                    if (elements[i]==current) {
                        index = i;
                        break;
                    }
                }
                var newSelected = elements[0];
                if (isDown && index+1<elements.length) newSelected = elements[index+1];
                if (isUp && index-1>=0) newSelected = elements[index-1];
                
                ItemListCntr.SetNewSelected(newSelected);
            },'ItemSelection');

            if (aa_paramExists(profile,'OnSelect',true)) {
                ItemListCntr.bind('selectionChanged',function(selectionArgs) {
                    var item = selectionArgs.SelectedItem;
                    var ctx = aa_ctx(itemlist.Context,{ ControlElement: selectionArgs.SelectedElem });
                    ajaxart.run(item,profile,'OnSelect',aa_merge_ctx(context,ctx));
                },'ItemSelection');
            }
            
            if (mouseSupport != 'none') {
                itemlist.bind('itemElement',function(element) {
                    var evt = 'mousedown';
                    if (mouseSupport == 'mouse click') evt = 'click';
                    if (mouseSupport == 'mouse hover') evt = 'mouseover';
                    
                    $(element).bind(evt,function() {
                        ItemListCntr.SetNewSelected(element);
                    });
                },'ItemSelection');
            }
            
            function ensureOneSelected() {
                if (ItemListCntr.SelectedElement) return;
                var elements = itemlist.GetElements();
                if (elements[0]) ItemListCntr.SetNewSelected( elements[0] );
            }
            function selectByDefault() {
                var selectedItem = aa_first(ItemListCntr.Items,profile,'SelectedByDefault',context);
                var elements = itemlist.GetElements();
                for(var i=0;i<elements.length;i++) {
                    if (elements[i].jbItem[0] == selectedItem) {
                        ItemListCntr.SetNewSelected( elements[i] );
                        return;
                    }
                }
            }
            
            itemlist.bind('refresh',function() {
                var prevSelection = ItemListCntr.SelectedElement;
                ItemListCntr.SelectedElement = null;
                if (hasSelectedByDefault) selectByDefault();
                if (!ItemListCntr.SelectedElement && alwaysOneSelected) ensureOneSelected();

                if (!ItemListCntr.SelectedElement) {
                    ItemListCntr.SelectedElement = prevSelection;
                    ItemListCntr.SetNewSelected(null);
                }
            });
            itemlist.bind('refreshItemElement',function(args) {
                if (ItemListCntr.SelectedElement == args.PreviousElement) {
                    ItemListCntr.SetNewSelected(args.NewElement);
                }
            });
            
            if (alwaysOneSelected) {
                ItemListCntr.bind('afterItemDeleted',function(args) {
                    if (args.ItemElement == ItemListCntr.SelectedElement) {
                        ItemListCntr.SelectedElement = null;
                        ensureOneSelected();
                    }
                },'ItemSelection');
                ItemListCntr.bind('afterItemAdded',function(args) {
                    if (!ItemListCntr.SelectedElement) ensureOneSelected();
                },'ItemSelection');
            }
            
        },'ItemSelection');
    },
    UpdateOnAddOrDeleteItem: function (profile, data, context) 
    {
        jBart.bind(context.vars._Field[0], 'initItemList', function (itemlist) 
        {
            ItemListCntr = itemlist.itemlistCntr;
            
            aa_bind(ItemListCntr,'itemDeleted',function(args) {
                itemlist.ParentOfItems.removeChild( args.ItemElement );
            },'UpdateOnAddOrDeleteItem');
            aa_bind(ItemListCntr.Items,'itemDeleted',function(args) {
                itemlist.ParentOfItems.removeChild( args.ItemElement );
            },'UpdateOnAddOrDeleteItem');
            
            aa_bind(ItemListCntr,'itemAdded',function(args) {
                itemAdded(itemlist,args);
            },'UpdateOnAddOrDeleteItem');

            aa_bind(ItemListCntr.Items,'itemAdded',function(args) {
                itemAdded(itemlist,args);
            },'UpdateOnAddOrDeleteItem');
            
        },'UpdateOnAddOrDeleteItem');

        function itemAdded(itemlist,args) {
            var elem = itemlist.ElementOfItem(args.Item);
            args.ItemElement = elem;
            itemlist.AppendItemElement(elem,args.addSettings);
            aa_element_attached(elem);
            elem.scrollIntoView();        
        }
    },
    RefreshOnItemsChange: function (profile, data, context)
    {
        var field = context.vars._Field[0];
        aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
            if (!ctx.vars.ItemListCntr) return;
            var ItemListCntr = ctx.vars.ItemListCntr[0];
            ItemListCntr.bind('itemsChanged',function() {
                aa_refresh_cell(cell,ctx);
            },'RefreshOnItemsChange'+field.Id);
            
        },'RefreshOnItemsChange');      
    },
    CssForItem: function (profile, data, context)
    {
        var cssClass = aa_attach_global_css( aa_text(data,profile,'Css',context) , null, 'item' );
        aa_bind(context.vars._Field[0],'initItemList',function(itemlist) {
            itemlist.bind('itemElement',function(element) {
                if (aa_bool(element.jbItem,profile,'ConditionOnItem',context))
                    $(element).addClass(cssClass);
            });
        });     
    },
    CssClassForItem: function (profile, data, context)
    {
        var cssClass = aa_text(data,profile,'CssClass',context);
        aa_bind(context.vars._Field[0],'initItemList',function(itemlist) {
            itemlist.bind('itemElement',function(element) {
                if (aa_bool(element.jbItem,profile,'ConditionOnItem',context))
                    $(element).addClass(cssClass);
            });
        });     
    },
    ItemClick: function (profile, data, context)
    {
        var cssClass = aa_cssClass(data,profile,'Css',context);

        jBart.bind(context.vars._Field[0],'initItemList',function(itemlist) {
            itemlist.bind('itemElement',function(element) {
                $(element).addClass(cssClass);
                $(element).click(function() {
                    var ctx = aa_ctx(context,{ ControlElement: [element], ItemList: [itemlist], ItemListCntr: [itemlist.cntr]});
                    ctx = aa_contextWithEventExtraVars(ctx);
                    ajaxart.run(element.jbItem,profile,'OnClick',ctx);
                });
            },'ItemClick');
        },'ItemClick');     
    },
    RefreshOnSelectionChange: function (profile, data, context)
    {
        aa_field_aspect_RefreshOnSelectionChange(data,profile,context,'ItemListCntr');
    },
    Filter: function(profile,data,context)
    {
        var field = context.vars._Field[0];
        field.FieldData = function(data1,ctx) {
            var out = aa_xpath(data1[0],'@'+field.Id,true);   // TODO: Talk about it with Shai to understand the limitations
            if (field.HasDefaultValue)
                aa_trigger(field, 'FieldData', { Item: data1, FieldData: out, Context: ctx });
            return out;
        };
        field.FilterData = function(data1,ctx) {
            return ajaxart.run(data1,profile,'FieldData',context);
        };
        field.GetFilterObject = function(itemListCntr) {
            return {
                Id: field.Id,
                FieldDataCompiled:ajaxart.compile(profile,'FieldData',context),
                FieldData: function(item) {
                    return this.FieldDataCompiled([item],context);
                },
                FilterType: aa_first(data,profile,'FilterType',context)
            }
        }
        field.InitFilter = function(itemListCntr) {
            aa_initContainerFilters(itemListCntr);
            if (itemListCntr.Filters[field.Id]) return; // already initialized            
            
            var filterObject = this.GetFilterObject(itemListCntr);
            itemListCntr.AddFilter(filterObject);
        };
        aa_field_handler(field,'ModifyControl', function(wrapper,field_data,cell_presentation,ctx,item) {
            if (!ctx.vars.ItemListCntr) return;
            var ItemListCntr = ctx.vars.ItemListCntr[0];
            wrapper.jbItemListCntr = ItemListCntr;
            wrapper.jbQueryXml = ctx.vars._ItemListQueryXml[0];
            field.InitFilter(ItemListCntr);
        },'Filter');
        
        if (aa_bool(data,profile,'ImmediateFilter',context)) {
            aa_field_handler(field,'OnUpdate',function(field,field_data,input,e,extra){
                var cell = input.parentNode;
                if (aa_intest) { runQuery(cell); }
                else {
                    if (cell.jbItemListCntr.filterTimeoutID) clearTimeout(cell.jbItemListCntr.filterTimeoutID);
                    cell.jbItemListCntr.filterTimeoutID = setTimeout(function() { runQuery(cell); },200);
                }
            },'Filter');            
        }
        
        if (context.vars.ItemListCntr) {
            // for dt preview
            var item = context.vars.ItemListCntr[0].Items[0];
            if (item) ajaxart.run([item],profile,'FieldData',context);
        }

        function runQuery(cell) {
            cell.jbItemListCntr.RunQuery(cell.jbQueryXml);
        }
    },
    TableColumnDragAndDrop: function(profile,data,context)
    {
        var field = context.vars._Field[0];
        var draggedCssClass = aa_attach_global_css( aa_text(data,profile,'CssForDraggedElement',context) , null, 'draggedColumn' );
        var draggedSpaceCssClass = aa_attach_global_css( aa_text(data,profile,'CssForDraggedSpace',context) , null, 'draggedColumnSpace' );
        
        jBart.bind(field,'initItemList',function(itemlist) {
            var table = $(itemlist.Ctrl).find('table')[0];
            if (!table && itemlist.Ctrl.tagName.toLowerCase() == 'table') table = itemlist.Ctrl;
            if (!table) return;
            
            var reorderHappened = false;
            
            var permutation = [];
            
            aa_dragAndDropTableColumns(table,{
                draggedSpaceCssClass: draggedSpaceCssClass,
                draggedCssClass: draggedCssClass,
                onDrop: function(dragIndex,dropIndex) {
                    reorderHappened = true; 
                    var maxIndex = Math.max(dragIndex,dropIndex);
                    if (permutation.length < maxIndex) {
                        for(var i=permutation.length;i<=maxIndex;i++)
                            permutation[i] = i;
                    }
                    if (dropIndex > dragIndex) {
                        for(var i=dragIndex;i<dropIndex;i++) 
                            swap(permutation,i,i+1);
                    } else {
                        for(var i=dragIndex;i>dropIndex;i--) 
                            swap(permutation,i-1,i);
                    }
                }
            });
            
            itemlist.bind('itemElement',function(itemElement) {
                if (!reorderHappened) return;
                // we need to reorder the tds by the drag and drop order
                var tds = $(itemElement).find('>td');
                for(var index=0;index<tds.length;index++) {
                    var nextIndex = (index < permutation.length) ? permutation[index] : index;
                    var nextTD = tds[nextIndex];
                    if (nextTD)
                        itemElement.appendChild(nextTD);
                }
            });
        },'TableColumnDragAndDrop');

        function swap(arr,i,j) {
            var x = arr[i];
            arr[i] = arr[j];
            arr[j] = x;            
        }
    },
    DragAndDropItems: function(profile,data,context)
    {
        var field = context.vars._Field[0];
        var draggedCssClass = aa_attach_global_css( aa_text(data,profile,'CssForDraggedElement',context) , null, 'draggedItem' );
        var draggedSpaceCssClass = aa_attach_global_css( aa_text(data,profile,'CssForDraggedSpace',context) , null, 'draggedItemSpace' );

        jBart.bind(field,'initItemList',function(itemlist) {
            var items = itemlist.itemlistCntr.Items;
            if (!items.MoveBefore) return;
            
            aa_dragDropItems({
                parent: itemlist.ParentOfItems,
                isItemElement: function(elem) { return elem.jbItem != null; },
                moveBefore: function(elem,beforeElem) {
                    items.MoveBefore(elem.jbItem[0],beforeElem.jbItem[0]);
                    aa_run(data,profile,'OnDrop',context);
                },
                moveToEnd: function(elem) {
                    items.MoveToEnd(elem.jbItem[0]);
                    aa_run(data,profile,'OnDrop',context);
                },
                draggedSpaceCssClass: draggedSpaceCssClass,
                draggedCssClass: draggedCssClass,
                cntr: itemlist.itemlistCntr
            });
        });     
    },
    LongList: function(profile,data,context)
    {
        var field = context.vars._Field[0];
        var style = aa_first(data,profile,'Style',context);
        var maxTimeToRenderItems = aa_int(data,profile,'MaxTimeToRenderItems',context);
        var maxItems = aa_int(data,profile,'MaxItemsPerPage',context);
        var showMoreText = aa_multilang_text(data,profile,'TextForShowMore',context);
        var autoAddAll = aa_bool(data,profile,'ShowAllItemsOnTimer',context);

        jBart.bind(field,'initItemList',function(itemlist) {
            itemlist.IsLongList = true;
            itemlist.ShowItems = function (fromIndex) {
                if (itemlist.ShowMoreItems) {
                    if (itemlist.ShowMoreItems) itemlist.ShowMoreItems.detach();
                    itemlist.ShowMoreItems = null;
                }
                fromIndex = fromIndex || 0;
                var startTime = new Date().getTime();
                
                var items = this.itemlistCntr.Items;
                // Incremental build is done by an aspect - this code is simple rendering
                for (var i = fromIndex; i < items.length; i++) {
                    var item = [items[i]];
                    var elem = itemlist.ElementOfItem(item,i+1);
                    this.AppendItemElement(elem);
                    
                    var tooLong = false;
                    if (maxTimeToRenderItems && new Date().getTime() - startTime > maxTimeToRenderItems) tooLong = true;
                    if (!tooLong && maxItems && ((fromIndex+i+1) % maxItems) == 0) tooLong = true;
                    if (tooLong && i >= items.length-2) tooLong = false;

                    if (tooLong) {
                        if (autoAddAll) {
                            setTimeout(function() {
                                itemlist.ShowItems(i+1);
                            },200);
                            return; // and do not show ui for 'more items'
                        }

                        itemlist.ShowMoreItems = aa_renderStyleObject(style,{ 
                            nextIndex: i+1,
                            text: showMoreText,
                            itemlist: itemlist,
                            attachShowMore: function(parent) {
                                $(this.control).addClass('jb_show_more');
                                parent.appendChild( this.control );
                            },
                            detach: function() {
                                aa_remove(this.control);
                            },
                            showMore: function() {
                                itemlist.ShowItems(this.nextIndex);
                                aa_element_attached(itemlist.el);
                            }
                        },context);
                        
                        itemlist.ShowMoreItems.attachShowMore(itemlist.ParentOfItems);
                        return;
                    }
                }

            };            
            itemlist.EnsureItemElementExists = function(item) {
                var showMore = $(itemlist.ParentOfItems).find('>.jb_show_more')[0];
                if (!showMore) return;

                var elems = itemlist.GetElements();
                for(var i=0;i<elems.length;i++)
                    if (elems[i].jbItem == item) return elems[i];

                var items = this.cntr.Items;
                for(var i=showMore.jbApiObject.nextIndex;i<items.length;i++) {
                    var elem = this.ElementOfItem([items[i]]);
                    this.AppendItemElement(elem);
                    if (items[i] == item) {
                        itemlist.ParentOfItems.appendChild(showMore);                
                        return elem;
                    }
                }
            }

        });     
    },
    ShowTextWhenNoItems: function(profile,data,context)
    {
        var field = context.vars._Field[0];
        var style = aa_first(data,profile,'Style',context);

        aa_bind(field,'initItemList',function(itemlist) {
            var itemListCntr = itemlist.itemlistCntr;
            var parent = itemlist.ParentOfItems;
            if (!parent) return;

            var no_items_text = aa_multilang_text(data,profile,'Text',context);
            var no_items_after_filter = aa_multilang_text(data,profile,'TextWhenNoItemsMatchFilter',context) || no_items_text;
            var noItemsElement = aa_renderStyleObject(style,{ text: no_items_text, data: no_items_text, itemlist: itemlist },context).el;
            var noItemsFilterElement = aa_renderStyleObject(style,{ text: no_items_after_filter, data: no_items_after_filter, itemlist: itemlist },context).el;
                        
            var refreshFunc = function() { refresh(itemListCntr,parent,noItemsElement,noItemsFilterElement); };
            itemlist.bind('refresh',refreshFunc,'ShowTextWhenNoItems');
            aa_bind(itemListCntr,'afterItemDeleted',refreshFunc,'ShowTextWhenNoItems'+field.Id);
            aa_bind(itemListCntr,'afterItemAdded',refreshFunc,'ShowTextWhenNoItems'+field.Id);
            
        });

        function refresh(itemListCntr,parent,noItemsElement,noItemsFilterElement) {
            if (itemListCntr.Items.length == 0 && itemListCntr.AllItems && itemListCntr.AllItems.length > 0) 
                parent.appendChild(noItemsFilterElement);
            else {
                if (noItemsFilterElement.parentNode == parent) parent.removeChild(noItemsFilterElement);                    
                if (itemListCntr.Items.length == 0) 
                    parent.appendChild(noItemsElement);
                else if (noItemsElement.parentNode == parent)
                    parent.removeChild(noItemsElement);
            }
        }        
    },
    SelectedItemByFilter: function(profile,data,context)
    {
        var items = data;
        for(var i=0;i<items.length;i++)
            if (aa_bool([items[i]],profile,'Filter',context))
                return [items[i]];
    },
    SelectedItemByTextValue: function(profile,data,context)
    {
        var value = aa_text(data,profile,'Value',context);
        for(var i=0;i<data.length;i++)
            if (aa_text([data[i]],profile,'ItemValue',context) == value)
                return [data[i]];
    },
    FilterGroup: function(profile,data,context)
    {
        var field = context.vars._Field[0];
        field.IsFilterGroup = true; 
        var storage = aa_first(data,profile,'StorageForQuery',context);
        var storageID = 'filters_' + (context.vars.ItemListCntr ? context.vars.ItemListCntr[0].Id : '');

        field.FieldData = function() {
            var xmlStr = '';
            if (storage) {
                var value = storage.get(storageID);
                if (value && value.charAt(0) == '<')
                    xmlStr = value;
            }
            return [jBart.parsexml(xmlStr || '<query/>')];
        }
        jBart.bind(field,'ModifyInstanceContext',function(args) {
            args.Context.vars._ItemListQueryXml = args.FieldData; 
        });
        
        jBart.bind(field,'ModifyControl',function(args) {
            var content = args.Wrapper.jbContent || args.Wrapper.firstChild;
            var ctx = content.jbContext;
            var queryXml = ctx.vars._ItemListQueryXml && ctx.vars._ItemListQueryXml[0];
            var cntr = ctx.vars.ItemListCntr && ctx.vars.ItemListCntr[0];
            
            if (queryXml && aa_notEmptyQuery(queryXml) && cntr && cntr.RunQuery) {
                cntr.RunQuery(queryXml);
            }

            if (storage) {
                aa_bind(cntr,'runQuery',function() {
                    storage.set(storageID,ajaxart.xml2text(queryXml));
                });
            }
        });
    }
});

aa_gcs("itemlist_filter", {
    Text: function (profile, data, context) 
    {
        return [{
            FieldDataToColumnData: function(fieldData) {
                return aa_totext(fieldData);
            },
            PrepareQueryData: function(expression) {
                return expression.toLowerCase();
            },
            Match: function(queryData,columnData) {
                if (columnData.toLowerCase().indexOf(queryData) > - 1) return true;
                return false;
            },
            HighlightSelectedText: function(control,highlightClass,queryData) {
                var pattern = queryData;
                
                if (control.innerHTML.toLowerCase().indexOf(pattern) != -1)
                   control.innerHTML = ajaxart_field_highlight_text(control.innerHTML,pattern,highlightClass);
            }
        }];
    },
    TextWords: function (profile, data, context) 
    {
        return [{
            FieldDataToColumnData: function(fieldData) {
                return aa_totext(fieldData);
            },
            PrepareQueryData: function(expression) {
                return aa_text_capitalizeToSeperateWords(expression).toLowerCase();
            },
            Match: function(queryData,columnData) {
                var words = aa_split(queryData,' ',true);
                for (var i=0;i<words.length;i++)
                    if (columnData.toLowerCase().indexOf(words[i]) == - 1) return false;

                return words.length > 0;
            },
            HighlightSelectedText: function(control,highlightClass,queryData) {
                var pattern = queryData;
                
                if (control.innerHTML.toLowerCase().indexOf(pattern) != -1)
                   control.innerHTML = ajaxart_field_highlight_text(control.innerHTML,pattern,highlightClass);
            }
        }];
    },
    ExactMatch: function (profile, data, context) 
    {
        return [{
            FieldDataToColumnData: function(fieldData) {
                return aa_totext(fieldData);
            },
            PrepareQueryData: function(expression) {
                return expression;
            },
            Match: function(queryData,columnData) {
                return (columnData == queryData || (queryData == '{$empty}' && columnData == ''));
            }
        }];
    },
    NumberGTOrEquals: function (profile, data, context) 
    {
        return [{
            FieldDataToColumnData: function(fieldData) {
                return aa_toint(fieldData);
            },
            PrepareQueryData: function(expression) {
                return parseInt(expression);
            },
            Match: function(queryData,columnData) {
                return (columnData >= queryData);
            }
        }];
    },
    ValuesFromItems: function (profile, data, context)
    {
        var field = context.vars._Field[0]; 
        field.RecalculateForEachCell = true; // so ItemListCntr will be available 
        if (!context.vars.ItemListCntr || !field.InitFilter) return;
        var itemListCntr = context.vars.ItemListCntr[0];
        var filterId = field.Id;
        
        var options = [],uniqueNames = {};
        // look in filter values
        field.InitFilter(itemListCntr);
        var dataCol = itemListCntr.DataColumns[filterId];
        for(var i=0;i<dataCol.length;i++) {
            var val = dataCol[i];
            if (uniqueNames[val]) {
                uniqueNames[val]++;
                continue;
            }
            uniqueNames[val] = 1;
            options.push({ code: val });
        }
        
        return [{ Options: options } ];
    }
});

aa_gcs("itemsort", {
    SortItems: function (profile, data, context) 
    {
        var sortDirection = aa_text(data,profile,'SortDirection',context);
        var sortType = aa_first(data,profile,'SortType',context);
        var field = context.vars._Field[0];
        
        aa_register_init_itemlistCntr(field,function(cntr) {
            aa_bind(cntr,'sortItems',function() { doSort(cntr); },'SortItems');
            aa_bind(cntr,'originalItemsChanged',function() {
                cntr.Items = cntr.OriginalItems;
                doSort(cntr);
            });
            
            aa_bind(field,'innerFields',function(args) {
                doSort(cntr);
            },'SortItems_InnerFields');                       

        },'SortItems');

        function doSort(cntr) {
            aa_sort_items(cntr,{
                direction: sortDirection,
                sortType: sortType,
                itemValue: function(item) {
                    return ajaxart.run(item,profile,'ItemValueToSort',context);
                },
                context: context
            });
        }

    },
    Lexical: function (profile, data, context)
    {
        return [{
            compileValue: function(value) {
                return aa_totext(value).toLowerCase();
            },
            sort: function(a,b) {
                if (a.value > b.value) return -1;
                if (a.value == b.value) return 0;
                return 1;
            }
        }];
    },
    Numeric: function (profile, data, context)
    {
        return [{
            compileValue: function(value) {
                return parseInt( aa_totext(value) );
            },
            sort: function(a,b) { return a.value-b.value; }
        }];
    },
    PromoteValues: function (profile, data, context)
    {
        var promoted = aa_split( aa_text(data,profile,'ValuesToPromote',context), ',',true);
        var promotedIndex = {};
        for(var i=0;i<promoted.length;i++)
            promotedIndex[promoted[i]] = i+1;
            
        var maxIndex = promoted.length+1;
        
        return [{
            compileValue: function(value) { return aa_totext(value); },
            sort: function(a,b) {
                var aIndex = promotedIndex[a.value] || maxIndex;
                var bIndex = promotedIndex[b.value] || maxIndex;
                
                return aIndex - bIndex; 
            }
        }];
        
    },
    TableColumnSort: function (profile, data, context)
    {
        var field = context.vars._Field[0];
        var defaultSortType = aa_first(data,profile,'DefaultSortType',context);
        var keepSortState = aa_first(data,profile,'KeepSortState',context);
        var itemlist,thList;
            
        jBart.bind(field,'initItemList',function(_itemlist) {
            itemlist = _itemlist;
            var table = $(itemlist.Ctrl).find('table')[0];

            var sortState = keepSortState && keepSortState.get('') && JSON.parse(keepSortState.get(''));
            var thead = $(table).find('>thead')[0];
            thList = $(thead).find('>tr>th').get();
            aa_registerHeaderEvent(thead,'mouseup',clickHandler,'Sort','no dominant');
            
            if (sortState && sortState.index > -1)
                thClicked(thead,thList[sortState.index]);

            itemlist.itemlistCntr.bind('sortItems',doSort,'TableColumnSort');           
        },'TableColumnSort');

        function clickHandler(e,thead,th) {
            if (!thead.LastMouseDown || thead.LastMouseDown.th != th) return;
            thClicked(thead,th);
        }
        function thClicked(thead,th) {
            if (!th) return;
            if ($(th).hasClass('sort_ascending')) {
                removeCssClasses(thead);
                $(th).addClass('sort_descending');
                changeSort(th,'descending');
            } else if ($(th).hasClass('sort_descending')) {
                removeCssClasses(thead);
                changeSort(null);  // remove the sort
            } else {
                removeCssClasses(thead);
                $(th).addClass('sort_ascending');
                changeSort(th,'ascending');
            }
        }

        function removeCssClasses(thead)    {
            $(thead).find('th').removeClass('sort_ascending').removeClass('sort_descending');
        }

        function changeSort(th,direction) {
            if (th) {
                sortState = { 
                    index:  thList.indexOf(th),
                    direction: direction
                }
            } else 
                sortState = {}; // clear sort
            
            if (keepSortState) keepSortState.set('',JSON.stringify(sortState));
            
            doSort(sortState);
        }
        
        function doSort(sortState) {
            $('body').css('cursor','progress');
            if (!sortState || sortState.index == -1) {
                aa_unsort_items(itemlist.itemlistCntr);
            } else {
                var field = thList[sortState.index] && thList[sortState.index].jbField;
                if (!field) return;
                aa_sort_items(itemlist.itemlistCntr,{
                    direction: sortState.direction,
                    sortType: field.SortType || defaultSortType,
                    itemValue: function(item) {
                      var field_data = field.FieldData ? field.FieldData(item,context) : item;
                      if (field.Label) return field.Label(field_data,context);
                      return field_data;                            
                    }
                });
            }
                
            itemlist.Refresh();
            $('body').css('cursor','auto');
        }

    }
});

aa_gcs("itemlist_item", {
    ItemOfList: function (profile, data, context)
    {
        var elem = aa_first(data,profile,'Item',context);
        if (!elem) return [];
        if (aa_text(data,profile,'Result',context) == 'element') return [elem];
        return elem.jbItem;
    },
    ItemInContext: function (profile, data, context) 
    {
        var elem = context.vars.ControlElement && context.vars.ControlElement[0];
        for(;elem && elem.nodeType == 1;elem = elem.parentNode) {
            if (elem.jbItemElement) return [elem.jbItemElement];
            if ($(elem).hasClass('aa_item')) return [elem];
        }
    },
    ItemLaunchingThePopup: function (profile, data, context) 
    {
        var elem = aa_var_first(context,'PopupLaunchingElement');
        for(;elem && elem.nodeType == 1;elem = elem.parentNode) {
            if (elem.jbItemElement) return [elem.jbItemElement];
            if ($(elem).hasClass('aa_item')) return [elem];
        }
    },
    SelectedItem: function (profile, data, context) 
    {
        var itemListCntr = context.vars.ItemListCntr && context.vars.ItemListCntr[0];
        if (!itemListCntr || !itemListCntr.SelectedElement) return [];
        return [itemListCntr.SelectedElement];
    },
    SpecificItem: function (profile, data, context) {
        var itemList = aa_findItemList(null,context); 
        var item = aa_first(data,profile,'Item',context);
        if (!item || !itemList) return [];
        var elems = itemList.GetElements();
        for(var i=0;i<elems.length;i++) 
            if (elems[i].jbItem[0] == item) return [elems[i]];
        return [];
    },
    LastItem: function (profile, data, context)
    {
        var itemList = context.vars.ItemList && context.vars.ItemList[0];
        return itemList.GetElements().slice(-1);
    }
});

aa_gcs("itemlist_action", {
    DeleteItem: function (profile, data, context) 
    {
        aa_itemlist_deleteItem({
            cntr: aa_var_first(context,'ItemListCntr'),
            itemElement: aa_first(data,profile,'Item',context)
        });
    },
    AddItemToItemList: function (profile, data, context)
    {
        var item = aa_first(data,profile,'Item',context);
        var addObject = aa_itemlist_addItem({
            context: context,
            item: item,
            itemlistID: aa_text(data,profile,'ItemList',context),
            updateAddObject: function(ao) {
                ajaxart.run([ao],profile,'Location',context); // adds addSettings to addObject
            }
        });
        if (addObject) {
          ajaxart.run([item],profile,'DoOnAddedItem',aa_ctx(context,{
              ControlElement: addObject.ItemElement ? [addObject.ItemElement] : []
          }));
        }
    },
    AsLastItem: function (profile, data, context)
    {
        data[0].addSettings = { location: 'last' };
    },
    AsFirstItem: function (profile, data, context)
    {
        data[0].addSettings = { location: 'first' };
    },
    BeforeOrAfterAnItem: function (profile, data, context)
    {
        var id = aa_text(context.vars.Item,profile,'SpecificItemID',context);
        var items = data[0].items;
        var isBefore = (aa_text(data,profile,'Location',context) == 'before');

        for(var i=0;i<items.length;i++) {
            var itemid = aa_text([items[i]],profile,'ItemIdentifier',context);
            if (id == itemid) {
                if (isBefore) {                    
                    if (i == 0) data[0].addSettings = { location: 'first' };
                    else data[0].addSettings = { location: 'afterItem', itemIndex: i-1, item: items[i-1] };
                } else { // after
                    data[0].addSettings = { location: 'afterItem', itemIndex: i, item: items[i] };
                }
                return;
            }
        }
    },
    CloseDetailsReplacingAll: function (profile, data, context)
    {
        if (!context.vars._DetailsReplacingAll) {
            if (!context.vars.ItemList) return;
            var itemlist = context.vars.ItemList[0];
            var topControl = $(itemlist.el).parents('.fld_'+itemlist.cntr.Id)[0].parentNode;
            if (!topControl.jbDetailsReplacingAll) return;
            var detailsReplacingAllObject = topControl.jbDetailsReplacingAll.jbDetailsReplacingAllObject;
        } else {
            var detailsReplacingAllObject = context.vars._DetailsReplacingAll[0];
        }

        var topControl = detailsReplacingAllObject.topControl;
        var itemElement = detailsReplacingAllObject.itemElement;
        var itemlist = detailsReplacingAllObject.itemlist;
        var transition = aa_first(data,profile,'Transition',context);

        if (!transition || window.aa_intest || ajaxart.isIE78) {
            aa_remove(topControl.jbDetailsReplacingAll,true);
            topControl.jbOriginalCtrl.style.display = 'block';
            topControl.jbDetailsReplacingAll = null;
            if (itemElement) {
              itemElement = itemlist.RefreshItemElement(itemElement);
              //aa_scrollToShowElement(itemElement, '');
              itemElement.scrollIntoView();
            }
        } else {
            if (itemElement) itemElement = itemlist.RefreshItemElement(itemElement);
            aa_replace_transition({
              transition: transition,
              elOriginal: topControl.jbDetailsReplacingAll, 
              elNew: topControl.jbOriginalCtrl,
              itemElement: itemElement,
              onBeforeTransitionBegin: function() { $(topControl.jbOriginalCtrl).css({display: 'block'}); },
              onTransitionEnd: function() {
                //aa_scrollToShowElement(itemElement, '');
                if (aa_bool(data,profile,'AutoScrollToMasterItem',context))
                    itemElement.scrollIntoView();
              }
            },context);
        }
        aa_trigger(itemlist,'backFromDetails',{ itemElement: itemElement, context: context });
    },
    NextItemOfDetailsReplacingAll: function (profile, data, context) {
        if (!context.vars._DetailsReplacingAll) return [];
        var detailsReplacingAllObject = context.vars._DetailsReplacingAll[0];
        var item = detailsReplacingAllObject.item[0];
        while(item) {
            item = aa_cntr_getNextItem(detailsReplacingAllObject.cntr,item);
            if (item && aa_bool([item],profile,'FilterForNextItem',context))
                return [item];
        }       
    },
    PrevItemOfDetailsReplacingAll: function (profile, data, context) {
        if (!context.vars._DetailsReplacingAll) return [];
        var detailsReplacingAllObject = context.vars._DetailsReplacingAll[0];
        var item = detailsReplacingAllObject.item[0];
        while(item) {
            item = aa_cntr_getPrevItem(detailsReplacingAllObject.cntr,item);
            if (item && aa_bool([item],profile,'FilterForPrevItem',context))
                return [item];
        }       
    },
    DetailsReplacingAllGotoItem: function (profile, data, context)
    {
        if (!context.vars._DetailsReplacingAll) return;
        var detailsReplacingAllObject = context.vars._DetailsReplacingAll[0];
        var transition = aa_first(data,profile,'Transition',context);

        var newItem = aa_first(data,profile,'Item',context);        
        if (!newItem) return;        
        var newItemElement = aa_find_itemElement(detailsReplacingAllObject.itemlist,newItem);
        if (!newItemElement) return;

        aa_remove(detailsReplacingAllObject.topControl.jbDetailsReplacingAll,true);
        
        aa_openDetailsReplacingAll({
            transition: transition,
            topControl: detailsReplacingAllObject.topControl,
            itemElement: newItemElement,
            itemlist: detailsReplacingAllObject.itemlist,
            detailsPage: detailsReplacingAllObject.detailsPage,
            context: context
        });
    },
    ChangeItemsOfItemlist: function (profile, data, context) {
        var cntr = aa_find_itemlist_container(context,aa_text(data,profile,'ItemListContainer',context));
        if (!cntr) return;

        cntr.Items = ajaxart.run(data,profile,'Items',context);
        if (cntr.RefreshDataColumns) {
            cntr.AllItems = cntr.Items;
            cntr.RefreshDataColumns();    
        }
    },
    OpenDetailsReplacingAll: function (profile, data, context)
    {
        var itemlist;
        var fieldToReplace = aa_text(data,profile,'FieldToReplace',context);
        if (aa_text(data,profile,'ItemList',context)) {             // 1. If specified, use specific itemlist
            var itemlistID =  aa_text(data,profile,'ItemList',context)
            var root = ajaxart.xml.root(context.vars.ControlElement[0]);
            var jItemlistElem = $(root).find('.fld_' + itemlistID);
            if (jItemlistElem && jItemlistElem[0] && jItemlistElem[0].jbItemList)
                itemlist = jItemlistElem[0].jbItemList;
            else {
                ajaxart.log("cannot find itemlist for " + itemlistID, jItemlistElem.length ? "error" : "location");
                return [];
            }
        }
        if (!itemlist)                                             // 2. If in context, use our itemlist
            itemlist = context.vars.ItemList && context.vars.ItemList[0];
        if (!itemlist) {                                           // 3. Use the last item list from container
            var itemlistContainer = context.vars.ItemListCntr && context.vars.ItemListCntr[0];
            itemlist = itemlistContainer.ItemLists.slice(-1)[0];   
        }
        var itemElement = aa_first(data,profile,'Item',aa_ctx(context, {ItemList: [itemlist]} ));
        var itemlist = aa_findItemList(itemElement);
        if (!itemlist) return;
        var itemlistContainer = itemlist.itemlistCntr;
        
        var topControlContent = $(itemElement).parents('.fld_'+itemlistContainer.Id)[0];
        if (fieldToReplace && aad_find_field(fieldToReplace)[0])
            topControlContent = aad_find_field(fieldToReplace)[0];
        if (!topControlContent || !topControlContent.parentNode) return;
        var topControl = topControlContent.parentNode;
        topControl.jbOriginalCtrl = topControlContent;
        
        var detailsField = aa_first(data,profile,'Details',context);
        if (!detailsField) return;
        var replaceTransition = aa_first(data,profile,'Transition',context);

        aa_openDetailsReplacingAll({
            transition: replaceTransition,
            topControl: topControl,
            itemElement: itemElement,
            itemlist: itemlist,
            detailsPage: detailsField,
            context: context
        });
    },
    RefreshItem: function (profile, data, context)
    {
        var itemElement = aa_first(data,profile,'Item',context);
        var itemlist = aa_findItemList(itemElement);
        if (!itemlist) return;
        itemlist.RefreshItemElement( itemElement );
    },
    ClickOnItem: function (profile, data, context)
    {
        var itemElement = aa_first(data,profile,'Item',context);
        if (!itemElement) return;

        var old_in_test = window.aa_intest;
        var old_intest_topControl = window.aa_intest_topControl;

        var noTransition = aa_bool(data,profile,'NoTransitions',context);
        if (noTransition) {
            window.aa_intest = true;
            window.aa_intest_topControl = document;
        }

        aa_setEventExtraVariables( ajaxart.runsubprofiles(data,profile,'ExtraVariable',context) );
        $(itemElement).click();
        aa_removeEventExtraVariables();
        if (noTransition) {
            window.aa_intest = old_in_test;
            window.aa_intest_topControl = old_intest_topControl;
        }
    },
    ToggleDetailsInplace: function (profile, data, context)
    {
        var itemElement = aa_first(data,profile,'Item',context);
        var itemlist = aa_findItemList(itemElement);
        if (!itemlist) return;
        if (itemElement.jbDetailsOpen || ( itemElement.nextSibling && itemElement.nextSibling.jbIsDetailsOpen) ) {
            // close
            if (itemlist.CloseInplace) itemlist.CloseInplace(itemElement);
            itemElement.jbDetailsOpen = false;
            // now refresh the item
            itemlist.RefreshItemElement( itemElement );
        } else {
            // open
            var detailsField = aa_fieldById(aa_text(data,profile,'DetailsField',context),itemlist.Fields);
            var detailsElement = document.createElement('div');
            detailsElement.jbItem = itemElement.jbItem;
            detailsElement.jbItemElement = itemElement;
            
            if (detailsField) {
                aa_fieldControl({ Field: detailsField, Item: itemElement.jbItem, Wrapper: detailsElement, Context: itemlist.Context });
                aa_show(detailsElement); // in case it's hidden
            } else {
            }
            if (itemlist.OpenInplace) itemlist.OpenInplace(itemElement,detailsElement);
            itemElement.jbDetailsOpen = true;
        }
        if (aa_bool(data,profile,'CloseOtherInplaceDetails',context) && itemElement) {
            var elems = $(itemElement).siblings();
            for(var i=0;i<elems.length;i++)
                if (elems[i].jbDetailsOpen) {
                    itemlist.CloseInplace(elems[i]);
                    elems[i].jbDetailsOpen = false;
                }
        }
    }
});

function aa_itemlistContainer(items,id,field) {
    var cntr = {
        Id: id,
        Items: items,
        OriginalItems: items,
        ItemLists: []
    };
    items.cntr = cntr;
    // .bind ,.trigger are here to make the using code look a bit nicer
    cntr.bind = function(evt,callback,id) { aa_bind(cntr,evt,callback,id); }
    cntr.trigger = function(evt,obj) { aa_trigger(cntr,evt,obj); }

    if (ajaxart.xtmls_to_trace && ajaxart.xtmls_to_trace.length && field) {     // Tracing container 
        for (i in ajaxart.xtmls_to_trace) {  
            if (field.XtmlSource[0].script == ajaxart.xtmls_to_trace[i].xtml) 
                ajaxart.xtmls_to_trace[i].itemlistCntr = cntr;
        }
    }

    return cntr;
}

function aa_create_itemList(field,context,inputData) {
    var itemlist = {
        Id: field.Id, id: field.Id,
        Fields: [],
        InputData: inputData
    };
    itemlist.context= itemlist.Context = aa_ctx(context,{ItemList: [itemlist], _Field: [field] });
    itemlist.cntr = itemlist.itemlistCntr = context.vars.ItemListCntr ? context.vars.ItemListCntr[0] : aa_itemlistContainer([],'cntr',field);
    itemlist.cntr.ItemLists.push(itemlist);
    itemlist.classForItem = 'aa_item_' + itemlist.Id;

    itemlist.RenderItem = function (item, elem,itemindex) { // the view should override this method
        itemlist.CreateFieldControls(item,elem,itemindex);
    }
    itemlist.ClearItems = function () {
        aa_empty(this.ParentOfItems, true);
    }
    itemlist.AppendItemElement = function (elem,addSettings) {
        addSettings = addSettings || { location: 'last' };

        if (addSettings.location == 'last') {
            this.ParentOfItems.appendChild(elem);
            return;
        }
        if (addSettings.location == 'first') {
            if (this.ParentOfItems.firstChild) 
                return this.ParentOfItems.insertBefore(elem,this.ParentOfItems.firstChild);
        }
        if (addSettings.location == 'afterItem') {
            for(var iter=this.ParentOfItems.firstChild;iter;iter=iter.nextSibling) {
                if (iter.jbItem[0] == addSettings.item) {
                    this.ParentOfItems.insertBefore(elem, iter.nextSibling);
                    return;
                }
            }
            // not implemented yet
        }

        // default begavior
        this.ParentOfItems.appendChild(elem);
    }
    itemlist.ElementOfItem = function(item,itemindex) {
        var elem = this.ItemTemplate.cloneNode(true);
        $(elem).addClass('aa_item').addClass(this.classForItem);
        elem.jbItem = item;
        this.RenderItem(item, elem,itemindex);
        this.trigger('itemElement',elem);
        this.cntr.trigger('renderItem',elem);
        return elem;
    }
    itemlist.ShowItems = function () {
        itemlist.trigger('beforeItemsShown');
        var items = this.itemlistCntr.Items;
        // Incremental build is done by an aspect - this code is simple rendering
        for (var i = 0; i < items.length; i++) {
            var item = [items[i]];
            var elem = itemlist.ElementOfItem(item,i+1);
            this.AppendItemElement(elem);
        }
        aa_element_attached(this.el);
        itemlist.trigger('afterItemsShown');
    }
    itemlist.Refresh = function () {
        itemlist.trigger('beforeRefresh');
        itemlist.ClearItems();
        itemlist.ShowItems();
        itemlist.trigger('refresh');
    }
    itemlist.SetHtmlTemplate = function (html) {
        this.Ctrl = this.el;
        this.el.jbItemList = itemlist;
        this.ParentOfItems = this.el;
    }
    itemlist.CreateFieldControls = function (item, elem,itemindex) {
        var item = elem.jbItem;
        for (var i = 0; i < this.VisibleFields.length; i++) {
            var field = this.VisibleFields[i];

            var wrapper = $('<div/>')[0];
            itemlist.CreateFieldControl(item, wrapper,field,itemindex);
            elem.appendChild(wrapper);
        }
    }
    itemlist.RefreshItemElement = function(elem) {
        var newElem = this.ElementOfItem(elem.jbItem);
        aa_replaceElement(elem,newElem,true);
        itemlist.trigger('refreshItemElement',{ NewElement: newElem, PreviousElement: elem } );
        return newElem;
    }
    itemlist.CreateFieldControl = function (item, wrapper,field,itemindex) {
        var ctx = aa_ctx(this.Context,{ _Field: [field], _Item: item , _ClassForItem: itemlist.classForItem, _ItemIndex: [itemindex || 0]});
        var fieldData = field.FieldData ? field.FieldData(item, ctx) : item;
        if (field.IsCellHidden && field.IsCellHidden(item,ctx,fieldData)) return;
        aa_fieldControl({ Field: field, Item: item, Wrapper: wrapper, Context: ctx });
    }
    itemlist.GetElements = function() {
        var out=[]; // An aspect can change this logic
        for(var elem=this.ParentOfItems.firstChild;elem;elem=elem.nextSibling)
            if (elem.jbItem) out.push(elem);
        return out;
    }
    // itemlist.bind ,itemlist.trigger are here to make the using code look a bit nicer
    itemlist.bind = function(evt,callback,id) { jBart.bind(itemlist,evt,callback,id); }
    itemlist.trigger = function(evt,obj) { jBart.trigger(itemlist,evt,obj); }
    
    itemlist.itemlistCntr.bind('itemsChanged',function(args) {
        if (!args.uiUpdated) {
            itemlist.Refresh();
            aa_element_attached(itemlist.el);
        }
    });


    if (ajaxart.xtmls_to_trace && ajaxart.xtmls_to_trace.length && field) {     // Tracing container 
        for (i in ajaxart.xtmls_to_trace) {  
            if (field.XtmlSource[0].script == ajaxart.xtmls_to_trace[i].xtml) 
                ajaxart.xtmls_to_trace[i].itemlistCntr = itemlist.cntr;
        }
    }

    return itemlist;
}

function aa_itemlist(itemlist,settings) {
    settings = aa_defaults(settings,{
        templateElem: itemlist.$el.find('.aa_item')
    });
    itemlist.$el.addClass('aa_itemlist');
    itemlist.SetHtmlTemplate('<div><div class="aa_item"/></div>'); // default
    itemlist.ItemTemplate = $(settings.templateElem)[0];
    itemlist.ParentOfItems = itemlist.ItemTemplate.parentNode;
    $(itemlist.ItemTemplate).remove();
}

function aa_horizontal_scroll_itemlist(itemlist,settings) {
    settings.itemTemplate = settings.itemTemplate || itemlist.$el.firstOfClass('aa_item');

    itemlist.ItemTemplate = $(settings.itemTemplate)[0];
    itemlist.ParentOfItems = itemlist.ItemTemplate.parentNode;
    aa_remove(itemlist.ItemTemplate);

    var itemWidth = parseInt(settings.itemWidth.split('px')[0]);
    var itemHeight = parseInt(settings.itemHeight.split('px')[0]);
    var itemsToShow = parseInt(settings.itemsToShow);
    var arrowWidth = parseInt(settings.arrowWidth.split('px')[0]);
    var arrowHeight = parseInt(settings.arrowHeight.split('px')[0]);
    var arrowMargin = parseInt(settings.arrowMargin.split('px')[0]);

    var arrowTop = itemHeight/2 - arrowHeight;
    var arrowLeft = (arrowMargin - arrowWidth)/2;

    var rightMargin = settings.rightMargin || 0;

    itemlist.$el.css('width',itemWidth*itemsToShow + rightMargin + arrowMargin*2).css('height',itemHeight);
    itemlist.$el.find('.body').css('width',itemWidth*itemsToShow+rightMargin).css('height',itemHeight);
    itemlist.$el.find('.left').css('width',arrowMargin);
    itemlist.$el.find('.right').css('width',arrowMargin);
    itemlist.$el.find('.left_arrow').css('width',arrowWidth).css('height',arrowHeight).css('top',arrowTop+'px').css('left',arrowLeft);
    itemlist.$el.find('.right_arrow').css('width',arrowWidth).css('height',arrowHeight).css('top',arrowTop+'px').css('right',arrowLeft);

    itemlist.ItemTemplate.style.width = itemWidth + 'px';
    itemlist.ItemTemplate.style.height = itemHeight + 'px';

    var sliderWidth = itemWidth*itemsToShow;
    var innerBody = itemlist.$el.find('.body_inner');
    var currLeft = 0;

    var leftArrow = itemlist.$el.find('.left_arrow');
    var rightArrow = itemlist.$el.find('.right_arrow');

    leftArrow.click(function() {
        if ($(this).hasClass('disabled')) return;
        if (currLeft > -sliderWidth) return;
        innerBody.animate( { left: '+='+sliderWidth },'slow');
        currLeft += sliderWidth;
        checkDisabled();
    });

    rightArrow.click(function() {
        if ($(this).hasClass('disabled')) return;

        innerBody.animate( { left: '-='+sliderWidth },'slow');
        currLeft -= sliderWidth;
        checkDisabled();
    });

    itemlist.bind('afterItemsShown', function() { setTimeout(checkDisabled,1); }) ;
    aa_bind(itemlist,'refresh',function() { checkDisabled(); },'Horizontal Scroll');

    if (settings.onSelection)
        notifyWithSelectionIndex();

    function checkDisabled() {
        if (currLeft == 0) 
            leftArrow.addClass('disabled');
        else 
            leftArrow.removeClass('disabled');

        var lastItem = innerBody.find('>div:last');
        if (lastItem[0] && lastItem[0].offsetLeft) {
            var lastLeft = lastItem[0].offsetLeft + currLeft;
            if (lastLeft + lastItem.outerWidth(true) <= sliderWidth ) 
                rightArrow.addClass('disabled');
            else 
                rightArrow.removeClass('disabled');
        }
    }

    function notifyWithSelectionIndex() {
        aa_bind(itemlist.itemlistCntr,'selectionChanged',function(args) {
            var elem = args.SelectedElem;
            var isFirst = (elem.offsetLeft == currLeft);
            try {
                if (ajaxart.isattached(elem))
                    settings.onSelection(isFirst);
                else {
                    aa_addOnAttach(elem,function() {
                      settings.onSelection(isFirst);  
                    });
                }
            } catch(ex) {
                ajaxart.logException('error calling horiz list onSelect',ex);
            }
        },'horizontal_scroll_itemlist' + itemlist.Id);
    }
}

function aa_findItemList(element,context) {
    if (context && aa_var_first(context,'ItemList')) return aa_var_first(context,'ItemList');
    if (!element && context) element = aa_var_first(context,'ControlElement');
    if (!element) return null;

    for(var iter = element;iter && iter.nodeType == 1;iter=iter.parentNode) {
        if (iter.jbItemList) return iter.jbItemList;
    }
    return null;
}

function aa_find_itemlist_container(context,fieldID) {
    if (!fieldID) return aa_var_first(context,'ItemListCntr');

    // TODO: find it by fieldID
    return null;
}
function aa_initContainerFilters(itemlistCntr)
{
    if (itemlistCntr.RunQuery) return; // already initialized
    
    aa_bind(itemlistCntr,'originalItemsChanged',function() {
        itemlistCntr.AllItems = itemlistCntr.OriginalItems;
        if (itemlistCntr.lastXmlQuery)
            itemlistCntr.RunQuery(itemlistCntr.lastXmlQuery);
        else {
            itemlistCntr.Items = itemlistCntr.AllItems;
        }
    });

    itemlistCntr.Filters = itemlistCntr.Filters || {};
    itemlistCntr.AllItems = itemlistCntr.Items;
    itemlistCntr.DataColumns = {};
    
    itemlistCntr.RefreshDataColumns = function() {
        itemlistCntr.DataColumns = {};
        for(var i in this.Filters) 
            if (this.Filters.hasOwnProperty(i))
                this.RefreshDataColumn(this.Filters[i]);
    }
    itemlistCntr.RefreshDataColumn = function(filter) {
        var column = this.DataColumns[filter.Id] = [];
        for(var j=0;j<this.AllItems.length;j++) {
            var item = this.AllItems[j];
            var fieldData = filter.FieldData(item);
            column.push( filter.FilterType.FieldDataToColumnData(fieldData) );
        }
    }
    itemlistCntr.AddFilter = function(filter) {
        this.Filters[filter.Id] = filter;        
//        this.RefreshDataColumn(filter);
    }

    itemlistCntr.RunQuery = function(xmlQuery) {
        this.DataColumns = this.DataColumns || {};

        var logQueryTime = false;
        var startTime = logQueryTime ? new Date().getTime() : 0;
        
        this.lastXmlQuery = xmlQuery;
        this.ItemsVersion = this.ItemsVersion ? this.ItemsVersion+1 : 1; // can be used for caches (e.g. filters/group by/occurrences)
        
        this.FilterData = {};
        
        for (var i=0; i<xmlQuery.attributes.length; i++) {
            var id = xmlQuery.attributes.item(i).name;
            if (!xmlQuery.getAttribute(id)) continue; // empty attribute is no filter
            var filter = this.Filters[id]; 
            if (!filter) continue;
            var filterType = filter.FilterType;
            this.FilterData[id] = filterType.PrepareQueryData ? filterType.PrepareQueryData(xmlQuery.getAttribute(id)) : xmlQuery.getAttribute(id);

            if (!this.DataColumns[id]) this.RefreshDataColumn(filter);  // lazy creation of filter
        }
        
        // now we should run the filters and intersect the results
        var cols = {};
        var prevCol = null,lastCol=null;
        for(var filterId in this.FilterData) {
            if (!this.FilterData.hasOwnProperty(filterId)) continue;
            var col = [];
            var filter = this.Filters[filterId];
            var filterType = filter.FilterType;
            var filterData = this.FilterData[filterId];
            var dataColumn= this.DataColumns[filterId];
            for(var j=0;j<dataColumn.length;j++) {
                if (prevCol && !prevCol[j]) {
                    col[j] = false; // no need to check this value. it has not passed previous filters
                } else {
                    col[j] = filterType.Match(filterData,dataColumn[j]);
                }
            }
            lastCol = prevCol = col;
        }
        // here we need to check only lastCol (because it integrated previous columns)
        if (lastCol) {
            var items = [];
            for(var j=0;j<this.AllItems.length;j++) {
                if (lastCol[j]) { // passed the filter
                    items.push( this.AllItems[j] );
                }
            }
            this.Items = items;
        } else {
            this.Items = this.AllItems;
        }
        this.FilteredDataColumn = lastCol;
        
//        this.trigger('sortItems',{});
        this.trigger('itemsChanged',{});
        this.trigger('runQuery',{});
        
        if (logQueryTime) {
            var time = new Date().getTime() - startTime;
            ajaxart.log('RunQuery Time - ' + time,'timing');
        }
    }
    
    itemlistCntr.GetFilterOfSpecificResult = function(item,field_data) {
        for(var i in this.Filters) {
            if (!this.Filters.hasOwnProperty(i)) continue;
            var filter = this.Filters[i];
            if (filter.FieldData) {
                var filterFieldData = filter.FieldData(item);
                if (filterFieldData && filterFieldData[0] && field_data[0] && filterFieldData[0] == field_data[0])
                    return filter;
            }
        }
        return null;
    }
    itemlistCntr.GetFilterQueryData = function(filter) {
        return this.FilterData && this.FilterData[filter.Id];
    }    
}
function aa_calculateFilterOccurrences(itemlistCntr,filterId,filteredOccurrences)
{
    itemlistCntr.DataColumns = itemlistCntr.DataColumns || {};
    itemlistCntr.ItemsVersion = itemlistCntr.ItemsVersion || 1;
    
    itemlistCntr.Occurrences = itemlistCntr.Occurrences || {};
    itemlistCntr.FilteredOccurrences = itemlistCntr.FilteredOccurrences || {}; 
    itemlistCntr.OccurrencesVersions = itemlistCntr.OccurrencesVersions || {};
    if (itemlistCntr.OccurrencesVersions[filterId] == itemlistCntr.ItemsVersion) return; // already calculated
    if (filteredOccurrences && !itemlistCntr.FilteredDataColumn) filteredOccurrences= false;
    
    var occ = {},filteredOcc = {};
    if (!itemlistCntr.DataColumns[filterId]) {
        itemlistCntr.RefreshDataColumn(itemlistCntr.Filters[filterId]);
    }

    var dataCol = itemlistCntr.DataColumns[filterId];
    for(var i=0;i<dataCol.length;i++) {
        var val = dataCol[i];
        occ[val] = occ[val] ? occ[val]+1 : 1; 
        if (filteredOccurrences && itemlistCntr.FilteredDataColumn[i] ) {
            filteredOcc[val] = filteredOcc[val] ? filteredOcc[val]+1 : 1; 
        }
    }
    itemlistCntr.Occurrences[filterId] = occ;
    if (filteredOccurrences) {
        itemlistCntr.FilteredOccurrences[filterId] = filteredOcc; 
    }
    itemlistCntr.OccurrencesVersions[filterId] = itemlistCntr.ItemsVersion;
}

// aa_register_init_itemlistCntr allows a field aspect to init an itemlistCntr (e.g. set default sort or filter)
function aa_register_init_itemlistCntr(field,callback,identifier)
{
    if (field.hasItemlistContainer) {
        // the field itself has ItemListCntr aspect
        jBart.bind(field,'initItemlistCntr',callback,identifier);
    } else {
        // the field in inside the itemlist container
        aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
            if (!ctx.vars.ItemListCntr) return;
            callback(ctx.vars.ItemListCntr[0]);
        },identifier);
    }
}
function aa_unsort_items(itemlistCntr)
{
    if (itemlistCntr.ItemsBeforeSort)
        itemlistCntr.Items = itemlistCntr.ItemsBeforeSort;
}

// settings include: direction, sortType, itemValue (function), context
function aa_sort_items(itemlistCntr,settings)
{
    var context = settings.context;
    var sortType = settings.sortType;
    if (!sortType) return;
    
    itemlistCntr.ItemsVersion = itemlistCntr.ItemsVersion || 1;
    if (itemlistCntr.ItemsBeforeSortVersion != itemlistCntr.ItemsVersion) {
        itemlistCntr.ItemsBeforeSort = itemlistCntr.Items;
        itemlistCntr.ItemsBeforeSortVersion = itemlistCntr.ItemsVersion;
    }
    
    var arr = [];
    
    for(var i=0;i<itemlistCntr.Items.length;i++) {
        var item = [itemlistCntr.Items[i]];
        var val = settings.itemValue(item);
        arr[i] = { index: i, value: sortType.compileValue(val) };
    }
    arr.sort(sortType.sort);
    
    // now create the new array
    var newArr = [];
    for(var i=0;i<arr.length;i++) {
        newArr.push( itemlistCntr.Items[arr[i].index] );
    }

    if (settings.direction == 'ascending') newArr = newArr.reverse();
    itemlistCntr.Items = newArr;

    aa_bind(itemlistCntr,'appendItemElementLocation',function(args) {
        var valForNewItem = sortType.compileValue( settings.itemValue([args.item]) );
        for(var i=0;i<itemlistCntr.Items.length;i++) {
            var val = sortType.compileValue( settings.itemValue([itemlistCntr.Items[i]]) );
            if ((settings.direction == 'ascending' && valForNewItem < val) || (settings.direction == 'descending' && valForNewItem > val)) {
              if (i==0)
                return $.extend(args.addSettings,{location: 'first'});
              else
                return $.extend(args.addSettings,{location: 'afterItem', item: itemlistCntr.Items[i-1] })
            }
        }
        $.extend(args.addSettings,{location: 'last'});
    },'sort');
}

//aa_itemlist_as_table is used in table styles
function aa_itemlist_as_table(itemlist,settings) 
{
      settings = aa_defaults(settings, { showHeaders: true, titleClass: 'title' });
      
      aa_itemlist(itemlist);
      itemlist.ParentOfItems = itemlist.$el.find('tbody')[0]; 
      itemlist.RenderItem = function (item, elem,itemindex) {
        var fields = itemlist.VisibleFields;
        var cellTemplate = $(elem).find('.aa_cell').remove()[0];
        for(var i=0;i<fields.length;i++) {
          var cell = cellTemplate.cloneNode(true);
          itemlist.CreateFieldControl(item,cell,fields[i],itemindex);
          elem.appendChild(cell);
        }
      }
      var headerTemplate = itemlist.$el.find('.aa_header_field')[0];
      if (headerTemplate) {
          var headerParent = headerTemplate.parentNode;
          $(headerTemplate).remove();
          
          if (settings.showHeaders) {
              var fields = itemlist.VisibleFields;
              for(var i=0;i<fields.length;i++) {
                  var headerCell = headerTemplate.cloneNode(true);
                  headerCell.jbField = fields[i]; // needed for sort and group by
                  var title = aa_fieldTitle(fields[i],itemlist.InputData,itemlist.Context);
                  $(headerCell).find('.' + settings.titleClass).html( title );
                  jBart.trigger(fields[i],'ModifyTableHeader',{th: headerCell, itemlist: itemlist});
                  headerParent.appendChild(headerCell);
              }
          }
      }
      
      itemlist.OpenInplace = function(itemElement,inplaceControl) {
        var inplaceTR = $('<tr class="aa_details_inplace"><td/></tr>');
        inplaceTR.find('td').attr('colspan',$(itemElement).find('>td').length).append(inplaceControl);
        inplaceTR.insertAfter(itemElement);
        itemElement.jbDetailsElement = inplaceTR[0];
        inplaceTR[0].jbIsDetailsOpen = true;
      }
      itemlist.CloseInplace = function(itemElement,inplaceControl) {
        itemElement.jbDetailsElement = itemElement.jbDetailsElement || itemElement.nextSibling;
        if (itemElement.jbDetailsElement) {
          jBart.remove(itemElement.jbDetailsElement);
          itemElement.jbDetailsElement = null;
        }
      }
}

function aa_notEmptyQuery(xmlQuery) 
{
    for (var i=0; i<xmlQuery.attributes.length; i++) {
        var name = xmlQuery.attributes.item(i).name;
        if (xmlQuery.getAttribute(name)) return true;
    }
    return false;
}

function aa_deleteItemFromItemList(itemlist,itemElement)
{
    var ItemListCntr = itemlist.itemlistCntr;
    var items = ItemListCntr.Items,item = itemElement.jbItem[0],found=false;
    for(var i=0;i<items.length;i++) {
      if (items[i] == item) {
          items.splice(i,1);
          found = true;
          if (item.nodeType == 1 && item.parentNode) item.parentNode.removeChild( item );  
          if (items.doDeleteItem) items.doDeleteItem(item);
          break;
      }
    }   
    if ( found ) {
        ItemListCntr.trigger('itemDeleted',{ Item: itemElement.jbItem, ItemElement: itemElement });
        ItemListCntr.trigger('afterItemDeleted',{ Item: itemElement.jbItem, ItemElement: itemElement });
        ItemListCntr.trigger('itemsChanged',{});
        //aa_remove(itemElement);
    }
}

function aa_item_data(obj)
{
    if (!obj) return;
    var context = obj.jbContext || obj.context || obj.Context;
    if (context && context.vars.Item)
        return context.vars.Item[0];
}
function aa_find_itemElement(itemlist,item) {
    var elems = itemlist.GetElements();
    for(var i=0;i<elems.length;i++) {
        if (elems[i].jbItem[0]==item) 
            return elems[i];
    }
    return null;
}
function aa_cntr_getPrevItem(cntr,item) {
    var items = cntr.Items,prev=null;
    for(var i=0;i<items.length;i++) {
        if (items[i] == item) return prev;
        prev = items[i];
    }
    return null;
}

function aa_cntr_getNextItem(cntr,item) {
    var items = cntr.Items;
    for(var i=0;i<items.length;i++) {
        if (items[i] == item) 
            return items[i+1];
    }
    return null;
}

function aa_openDetailsReplacingAll(settings) 
{
    var itemElement = settings.itemElement;
    var itemlistContainer = settings.itemlist.itemlistCntr;
    var context = settings.context;
    var topControl = settings.topControl;

    if (topControl.jbDetailsReplacingAll) {
        aa_remove(topControl.jbDetailsReplacingAll,true);
    }
    var detailsElement = document.createElement('div');
    detailsElement.jbItem = itemElement.jbItem;
    detailsElement.jbItemElement = itemElement;
    detailsElement.jbItemlistCntr = itemlistContainer;

    var detailsReplacingAllObject = {
        cntr: itemlistContainer,
        itemlistContainer: itemlistContainer,
        item: itemElement.jbItem,
        PrevItem: aa_cntr_getPrevItem(itemlistContainer,itemElement.jbItem[0]),
        NextItem: aa_cntr_getNextItem(itemlistContainer,itemElement.jbItem[0]),
        context: context,
        topControl: topControl,
        itemlist: settings.itemlist,
        itemElement: itemElement,
        detailsPage: settings.detailsPage
    };
    detailsElement.jbDetailsReplacingAllObject = detailsReplacingAllObject;

    var ctx2 = aa_ctx(context,{ _DetailsReplacingAll: [detailsReplacingAllObject] });

    aa_fieldControl({ Field: settings.detailsPage, Item: itemElement.jbItem, Wrapper: detailsElement, Context: ctx2,
        DoAfterShow: function() {
            detailsElement.style.display = 'block';  // for async usages
        }
    });

    topControl.jbDetailsReplacingAll = detailsElement;

    if (!settings.transition || window.aa_intest || ajaxart.isIE78) {
        topControl.jbOriginalCtrl.style.display = 'none';
        topControl.appendChild(detailsElement);
        aa_element_attached(topControl);
        aa_scrollToShowElement(detailsElement,'up');
    } else {
        aa_replace_transition({
            transition: settings.transition,
            elOriginal: topControl.jbOriginalCtrl, 
            elNew: detailsElement,
            removeOriginal: function() { $(topControl.jbOriginalCtrl).css({display: 'none'}); },
            onTransitionEnd: function() {
                aa_scrollToShowElement(detailsElement,'up');
                aa_trigger(settings.itemlist,'showDetailsTransitionEnd',{ Item: itemElement.jbItem, itemElement: itemElement, context: settings.context });
            }
          },context);
    }

    aa_trigger(settings.itemlist,'showDetails',{ Item: itemElement.jbItem, itemElement: itemElement, context: settings.context });
}

function aa_text_as_item(showMoreObject) {
    showMoreObject.$el.html( showMoreObject.text );
    showMoreObject.$el.click(function() { 
        showMoreObject.showMore() 
    });
    // Table fix
    var parent = showMoreObject.itemlist.ParentOfItems;
    if (!parent) return;
    var isTable = parent.tagName.toLowerCase() == 'tbody';
    if (isTable) {
        var cols = showMoreObject.itemlist.VisibleFields.length;
        var wrapper = $('<tr class="aa_noitems"><td colspan="' + cols + '" class="td_nocontent"/></tr>')[0];
        $(wrapper).find('>td').append( showMoreObject.$el );
        showMoreObject.$el.addClass("in_table");
        showMoreObject.control = showMoreObject.el = $(wrapper)[0];
        showMoreObject.$el = $(showMoreObject.el);
    }
}

function aa_itemlistcntr_findItemElement(cntr,item) {
    var itemlists = cntr.ItemLists || [];
    for(var i=0;i<itemlists.length;i++) {
        var itemlist = itemlists[i];
        var elems = itemlist.GetElements();
        for(var j=0;j<elems.length;j++)
            if (elems[j].jbItem[0] == item)
                return elems[j];
    }
}

function aa_itemlist_deleteItem(settings) {
    var itemElement = settings.itemElement;
    var cntr = settings.cntr;
    if (!itemElement && settings.item && cntr) {
        itemElement = aa_itemlistcntr_findItemElement(cntr,settings.item);
    }
    if (!cntr || !itemElement || !itemElement.jbItem || !itemElement.jbItem[0]) return;

    var items = cntr.Items,item = itemElement.jbItem[0],found=false;
    for(var i=0;i<items.length;i++) {
      if (items[i] == item) {
          items.splice(i,1);
          found = true;
          if (items.doDeleteItem) 
            items.doDeleteItem(item);
          else if (item.nodeType == 1 && item.parentNode) {
            var parent = item.parentNode;
            if (parent) {
                parent.removeChild(item);
                aa_triggerXmlChange(parent,{ type: 'delete', deletedElem: item });
            }
          }              
          break;
      }
    }   
    if (found) {
        aa_trigger(cntr,'itemDeleted',{ Item: itemElement.jbItem, ItemElement: itemElement });
        aa_trigger(cntr,'afterItemDeleted',{ Item: itemElement.jbItem, ItemElement: itemElement });
        aa_trigger(cntr,'itemsChanged',{ uiUpdated: true });
    }
}

function aa_itemlist_addItem(settings) {
  var item = settings.item, context = settings.context;
  var itemlistID = settings.itemlistID;
  var cntr = settings.cntr || aa_var_first(context,'ItemListCntr');
  if (itemlistID) {
    var control = aa_find_field_controls({ fieldID: itemlistID, context: context })[0];
    if (!control || !control.jbContext) return;
    cntr = control.jbContext.vars.ItemListCntr[0];
    if (!cntr) return;
  }
  var items = cntr.OriginalItems;        
  var addObject = { Item: [item], items: items, addSettings: { location: 'last' } };
  if (settings.updateAddObject) settings.updateAddObject(addObject);
  aa_trigger(cntr,'appendItemElementLocation', { item: settings.item, addSettings: addObject.addSettings});

  if (items.addItem) items.addItem(item,addObject.addSettings);
  if (cntr.Items != cntr.OriginalItems)
    aa_trigger(cntr,'originalItemsChanged');

  cntr.trigger('itemAdded',addObject);
  cntr.trigger('afterItemAdded',addObject);
  cntr.trigger('itemsChanged',{ uiUpdated: true });

  return addObject;
}

function aa_field_aspect_RefreshOnSelectionChange(data,profile,context,cntrVarName) {
    var field = context.vars._Field[0];
    var animation = aa_first(data,profile,'Animation',context);
    var hideWhenNoSelection = aa_bool(data,profile,'HideWhenNoSelection',context);

    if (aa_bool(data,profile,'SelectedItemAsData',context)) {
        field.FieldData = function(data1,ctx) {
            return ctx.vars.SelectedItem || [];
        }
    }

    aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
        var cntr = aa_var_first(ctx,cntrVarName);
        if (!cntr) return;
        
        function refresh(firstTime) {
            var selElement = cntr.SelectedElement ? [cntr.SelectedElement] : [];
            var selItem = cntr.SelectedElement ? cntr.SelectedElement.jbItem : [];
            
            var ctx2 = aa_ctx(field.XtmlSource[0].context,{ SelectedElement: selElement, SelectedItem: selItem, cntrVarName: [cntr] });
            var newField = aa_first(field.XtmlSource[0].input,field.XtmlSource[0].script,'',ctx2);
            cell.Field = newField; 
            var transition = firstTime ? null : animation;
            aa_refresh_cell(cell,ctx2,transition,{
                SelectedElement: selElement, SelectedItem: selItem
            });
            
            if (hideWhenNoSelection && !selElement && cell.firstChild) $(cell.firstChild).css('display','none');
        }
        
        aa_bind(cntr,'selectionChanged',function() {
            refresh();
        },'SelectionContext_'+field.Id);
        
        if (cntr.SelectedElement) {
            if (!context.vars.SelectedElement || context.vars.SelectedElement[0] != cntr.SelectedElement ) 
                refresh(true);
        } else {
            if (hideWhenNoSelection && cell.firstChild) $(cell.firstChild).css('display','none');
        }        
    },'RefreshOnSelectionChange');
}


aa_gcs("itemlist_aspect", {
    GroupItems: function(profile,data,context)
    {
		// Groups are added between item elements, so the html keeps its structure
	
    	var field = context.vars._Field[0];
    	var style = aa_first(data,profile,'Style',context);
    	
    	jBart.bind(field,'initItemList',function(itemlist) {
    		var itemListCntr = itemlist.itemlistCntr;
        	jBart.bind(itemListCntr,'afterItemDeleted',function() { itemlist.Refresh(); },'GroupItems'+field.Id);
        	jBart.bind(itemListCntr,'afterItemAdded',function() { itemlist.Refresh(); },'GroupItems'+field.Id);
        	itemlist.GroupSorter = aa_first(data,profile,'SortGroups',context);
        	
    		itemlist.RefreshGroups = function() {
    	        var items = this.itemlistCntr.Items;
    			itemlist.Groups = {};
    			itemlist.SortedGroups = [];
    			
    			for(var i=0;i<items.length;i++) {
    				var item = [items[i]];
    				var groupName = aa_text(item,profile,'GroupOfItem',context);
    				if (!itemlist.Groups[groupName]) {
    					var group = { Name: groupName, Items: [] };
    					group.DisplayName = aa_text(ajaxart.run(item,profile,'GroupOfItem',context),profile,'GroupDisplayName',context);
    					itemlist.SortedGroups.push(group);
    					itemlist.Groups[groupName] = group;
    				}
    				itemlist.Groups[groupName].Items.push(items[i]);
    			}
    			
    			itemlist.SortGroups();
    		}
    		itemlist.SortGroups = function() {
    			if (!itemlist.GroupSorter) return;
    			
    			var arr = [];
    			for(var i=0;i<itemlist.SortedGroups.length;i++) {
    				var group = itemlist.SortedGroups[i];
    				arr[i] = { index: i, value: itemlist.GroupSorter.compileValue([group.Name]) };
    			}
    			arr.sort(itemlist.GroupSorter.sort);
    			
    			var newArr = [];
    			for(var i=0;i<arr.length;i++) {
    				newArr.push( itemlist.SortedGroups[arr[i].index] );
    			}
    			
    			itemlist.SortedGroups = newArr;
    		}
    	    itemlist.ShowItems = function () {
    	        var items = this.itemlistCntr.Items;
    	        // Incremental build is done by an aspect - this code is simple rendering
    	        for (var i = 0; i < items.length; i++) {
    	            var item = [items[i]];
    	            var elem = itemlist.ElementOfItem(item);
    	            this.AppendItemElement(elem);
    	        }
    	    }
    		
    	    itemlist.ShowItems = function () {
    	    	itemlist.RefreshGroups();
    	        var groups = this.SortedGroups;
    	        
    	        // Incremental build is done by an aspect - this code is simple rendering
    	        for (var i = 0;i<groups.length;i++) {
    	        	var group = groups[i];
    	        	var elemsOfGroup = [];
    	        	for(var j=0;j<group.Items.length;j++) {
    	        		var item = [ group.Items[j] ];
    	        		var elem = itemlist.ElementOfItem(item);
    	        		elemsOfGroup.push(elem);
                        if (j == 0)
                            $(elem).addClass('aa_first_in_group');
                        if (j == group.Items.length-1)
                            $(elem).addClass('aa_last_in_group');
    	        	}
    	        	var groupElem = aa_renderStyleObject(style,{ 
    	        		text: group.DisplayName, group: group,
    	        		Items: group.Items,
    	        		ItemElements: elemsOfGroup
    	        	},context);
    	        	
    	        	this.ParentOfItems.appendChild(groupElem); 
    	        	
    	        	for(var j=0;j<elemsOfGroup.length;j++)
    	        		this.AppendItemElement(elemsOfGroup[j]);
    	        }
    	    }
    	});    	
    }
});


// tree html structure:
// --------------------
// <div class="aa_tree_node">   
//   <div class="aa_tree_node_line">
//     <div class="aa_tree_node_expandbox" />
//     <div class="aa_tree_node_text" />
//   </div>
//   <div class="aa_tree_node_subnodes">
//     <div class="aa_tree_node leaf" />
//		 ...
//   </div>
// </div>
// <div class="aa_tree_node collapsed">

function aa_dragDropTreeItems(settings) 
{
	var rootElem = settings.rootElem;

	var draggedElem = null;
	var DAndDOwner = "";
	var SuspectItemDrag = null;
	var isFixedPosition = false;
	var SpaceElem = null;
	var OriginalElem;

	rootElem.onmousedown = treeSuspectDrag;
	rootElem.onmouseup = treeUnSuspectDrag;

	function treeSuspectDrag(e) {
		var $elem = $((typeof(event)== 'undefined') ? e.target : event.srcElement);
		if ($elem.hasClass('aa_tree_node_expandbox')) return true;
		if (DAndDOwner) return true;
		SuspectItemDrag = { elem: $elem, mousePos : aa_mousePos(e)};
		rootElem.jonmousemoveOrig = rootElem.onmousemove;
		rootElem.jonmouseupOrig = rootElem.onmouseup;
		rootElem.jonmousedownOrig = rootElem.onmousedown;
		rootElem.onmousemove = treeDrag;
		return false;
	}

	function treeFixNodeLine(node)
	{
		// var elem = $(list).parents('.aa_tree_node')[0];
		
		// if ($(list).children('.aa_item').length > 0 && $(elem).children('.hitarea').length == 0 )
		// {
		// 	$(elem).addClass('non_leaf');
		// 	elem.collapsed = false;
			
		// 	var hitarea = document.createElement('div');
		// 	hitarea.className = "hitarea collapsable " + cntr.hitAreaCssClass;
		// 	elem.insertBefore(hitarea,elem.firstChild);
		// }
		// if (originalList && $(originalList).children('.aa_item').length == 0)
		// 	$(originalList).parent().children('.hitarea').remove();
	}

	function treeAddPlaceHolders(parent,at_elem,last_element)
	{
		var place_holder = document.createElement('div');
		place_holder.className = 'aa_move_place_holder';

		if (last_element)
			parent.appendChild(place_holder);
		else
			$(place_holder).insertBefore(at_elem);

		place_holder.dragEnd = function(original)
		{
			var item_data = draggedElem.ItemData;
			var parentElem = $(this).parents('.aa_tree_node')[0];
			if (last_element) {
				settings.moveAtEnd(item_data,parentElem.ItemData);
			} else {
				settings.moveBefore(item_data,at_elem.ItemData);
			}
			$(this).replaceWith(original);
			original.style.display = '';
			original.display = '';
			
			treeFixNodeLine(parentElem);
		};
	}


	function treeDragBegin(e,simulate) {
		isFixedPosition = aa_hasPositionFixedParent(rootElem);
		var elem = SuspectItemDrag.elem;
		var item_elem = elem;
		if (!elem.hasClass("aa_tree_node"))
			item_elem = elem.parents('.aa_tree_node').slice(0,1);

		if (!item_elem[0]) return aa_stop_prop(e);
		var posx = aa_absLeft(item_elem[0],false) - aa_absLeft(rootElem,false);
		var posy = aa_absTop(item_elem[0],false) - aa_absTop(rootElem,false);
		// do not drag root item, if there is one root
		var isRoot = !item_elem.parent().hasClass('aa_tree_node');
		if (isRoot && item_elem.parent().children().length == 1)
			return aa_stop_prop(e);

		DAndDOwner = "TreeDragAndDrop";
		ajaxart_disableSelection(document.body);
		
		var oElem = draggedElem = item_elem[0].cloneNode(true);
		SpaceElem = item_elem[0].cloneNode(true);
		OriginalElem = item_elem[0];
		draggedElem.ItemData = SpaceElem.ItemData = item_elem[0].ItemData;
	    
	  OriginalElem.style.display = 'none';
	  OriginalElem.display = 'none';

		$(draggedElem).addClass('aa_dragged_elem');
		$(SpaceElem).addClass('aa_dragged_space_elem');
		ajaxart_disableSelection(SpaceElem);
		ajaxart_disableSelection(draggedElem);

	  rootElem.appendChild(draggedElem);
	  rootElem.jbPrevPosition = rootElem.style.position;
	  rootElem.style.position = 'relative';	// locating relative to tree top to solve scrolling issues
		
		var all_parents = $.merge( [rootElem] , $(rootElem).find('.aa_tree_node_subnodes') );
		for(var i=0;i<all_parents.length;i++)
		{
			var $parent = $(all_parents[i]);
			var children = $parent.find('>.aa_tree_node');
			for (var j=0;j<children.length;j++) {
				var $node = $(children[j]);
				if ($node.hasClass('aa_dragged_elem') || $node.parents('.aa_dragged_elem').length > 0) continue;
				treeAddPlaceHolders($parent[0],$node[0],false);				
			}
			treeAddPlaceHolders($parent[0],null,true);
		}
		
		// link place holders
		var holders = $(rootElem).find('.aa_move_place_holder');
		for(var i=0;i<holders.length;i++)
		{
			holders[i].jbPreHolder = i > 0 ? holders[i-1] : null;
			holders[i].jbNextHolder = i < holders.length-1 ? holders[i+1] : null;
		}
		var mousepos = SuspectItemDrag.mousePos;		
		
		draggedElem.style.position = 'absolute';
		draggedElem.style.left = posx + 'px';
		draggedElem.style.top = posy + 'px';

		if (!simulate) 
		{
			document.onmouseup = treeDragEnd;
			rootElem.jb_onkeydownOrig = document.onkeydown; 
			document.onkeydown = function(e){
				if (e.keyCode == 27) treeDragEnd(e,true);	// esc
				return true;
			};
		}
		
		return aa_stop_prop(e);
	};

	function treeDrag(e) {
		var mousepos = aa_mousePos(e);
		if (SuspectItemDrag) {
			var distance = Math.abs(mousepos.y - SuspectItemDrag.mousePos.y);
			if (distance < 5) return aa_stop_prop(e);
			var elem = SuspectItemDrag.elem;
			if (! elem.hasClass('aa_tree_node'))
				elem = elem.parents('.aa_tree_node').slice(0,1);

				treeDragBegin(e);
				SuspectItemDrag = null;
			}
	
			if (!draggedElem) return true;
			var actualY = mousepos.y;
			if (isFixedPosition) actualY -= window.pageYOffset;
			
			// keep drag in container boundaries			
			var nearest = { distance: 1000 };
			if (!SpaceElem.jbPositioned) // first time only. look for nearest place holder
			{
				// look for place holder near
				var holders = $(rootElem).find('.aa_move_place_holder').filter(function() {return $(this).parents(':hidden').length == 0} );
				for(var i=0;i<holders.length;i++) {
					var distance = Math.abs(aa_absTop(holders[i]) - actualY);
					if (nearest.distance > distance) nearest = { distance: distance, holder: holders[i]};
				}
				if (nearest.holder) {
					nearest.holder.appendChild(SpaceElem);
					SpaceElem.jbPositioned = true;
				}
				else {
					ajaxart.log('Can not find nearest place holder');
					treeDragEnd({},true);
					return;
				}
			}

			var holder = SpaceElem.parentNode;
			if (!holder) return;
			// calc next up & down
			var pre_holder = holder.PreHolder;
			while ($(pre_holder).parents(':hidden').length > 0)
				pre_holder = pre_holder.PreHolder;
			var next_holder = holder.NextHolder;
			while ($(next_holder).parents(':hidden').length > 0)
				next_holder = next_holder.NextHolder;

			// go up or down or stay in place
			var draggedElemTop = aa_absTop(draggedElem,false); 
			var draggedElemBottom = aa_absTop(draggedElem,false) + $(draggedElem).height();
			
			if (pre_holder && aa_absTop(pre_holder,false) > draggedElemTop )
				pre_holder.appendChild(SpaceElem);
			if (next_holder && aa_absTop(next_holder,false) < draggedElemBottom )
				next_holder.appendChild(SpaceElem);
			
			draggedElem.style.top = actualY - aa_absTop(top,false) + 'px';
			var left = aa_absLeft(SpaceElem,false);
			if ( aa_is_rtl(top_cntr.Ctrl) )
				left = left + $(SpaceElem).width() - $(draggedElem).width();  
			draggedElem.style.left = left - aa_absLeft(top,false) + 'px';
			return aa_stop_prop(e);
		};
			 
		function treeDragEnd(e, cancel) {
			if (cancel) {
	  		OriginalElem.show();
	  	} else {
				if (SpaceElem.parentNode)
					SpaceElem.parentNode.dragEnd(top_cntr.OriginalElem);
				top_cntr.OriginalElem = null;
			}

			top.onmousemove = top_cntr.onmousemoveOrig;
			top.onmousedown = top_cntr.onmousedownOrig;
			top.onmouseup = top_cntr.onmouseupOrig;
			top.style.position = top.jbPrevPosition;

			document.onmouseup = null;
			document.onkeydown = null;
			draggedElem = null;

			$(document).find('.aa_move_place_holder').remove();
			$(document).find('.aa_dragged_elem').remove();

			ajaxart_restoreSelection(document.body);
			DAndDOwner = "";
			return aa_stop_prop(e);
		};

		function treeUnSuspectDrag(e) {
			if (DAndDOwner != "") return true;
			if (SuspectItemDrag) {
				SuspectItemDrag = null;
				top.onmousemove = top_cntr.onmousemoveOrig;
				top.onmouseup = top_cntr.onmouseupOrig;
			}
			return true;
		}

}



// white-space: nowrap;
// http://wwwendt.de/tech/dynatree/doc/samples.html

aa_gcs("itemtree_aspect", {
  ItemTreeContainer: function(profile, data, context) {
    var field = context.vars._Field[0];
    aa_bind(field,'ModifyInstanceContext',function(args) {
        var items = aa_run(args.FieldData, profile, 'Items', aa_merge_ctx(context,args.Context));
        args.Context.vars.ItemTreeCntr = [aa_itemtreeContainer(items,field.Id,field)];
        
        aa_trigger(field,'initItemtreeCntr',args.Context.vars.ItemTreeCntr[0]);
    });
    field.hasItemtreeContainer = true;
  },
  RefreshOnTreeSelectionChange: function(profile, data, context) {
    aa_field_aspect_RefreshOnSelectionChange(data,profile,context,'ItemTreeCntr');    
  },
  TreeProperties: function(profile, data, context) {
    aa_bind(context.vars._Field[0],'initApiObject',function(args) {
      args.apiObject.lazy = aa_bool(data,profile,'LazyCreation',context);
      if (aa_hasParam(profile,'ControlForItem')) {
        args.apiObject.controlForItem = function(item,wrapper) {
          aa_fieldControl({
            Field: aa_first([item],profile,'ControlForItem',context),
            Item: [item],
            Wrapper: wrapper,
            Context: context
          });
        }
      }
    })
  },
  TreeLongList: function(profile, data, context) {
    aa_bind(context.vars._Field[0],'initApiObject',function(args) {
      args.apiObject.MaxItemsPerPage = aa_int(data,profile,'MaxItemsPerPage',context);
      var style = aa_first(data,profile,'Style',context);
      var text = aa_first(data,profile,'TextForShowMore',context);
      args.apiObject.longListMaxItems = aa_int(data,profile,'MaxItemsPerPage',context);
      args.apiObject.longListShowMoreButton = function() {
        return aa_renderStyleObject(style, { text: text }, context);
      };
    });
  }
});

aa_gcs("itemtree", {
  TreeItems: function(profile, data, context) {
    var items = ajaxart.run(data, profile, 'Items', context);
    items.SubItems = function(item) {
      return subitemsFunc(item, items);
    };
    return items;

    function subitemsFunc(item, list) {
      // make sure the item is in the list
      var found = false;
      for (var i = 0; i < list.length; i++) {
        if (list[i] == item) {
          found = true;
          break;
        }
      }

      if (!found) return null;

      var subitems = ajaxart.run([item], profile, 'SubItems', context);
      subitems.SubItems = function(item) {
        return subitemsFunc(item, this);
      };
      return subitems;
    }
  },
  Tree: function(profile, data, context) {
    var field = aa_create_base_field(data, profile, context);
    aa_init_class_Tree();
    if (aa_xpath(profile,'Items').length > 0) // defines its own items (acts as a container)
      ajaxart.runNativeHelper(data,profile,'ContainerAspect',aa_ctx(context,{ _Field: [field] }));

    field.Control = function(field_data, ctx) {
      var ctx2 = aa_merge_ctx(context,ctx);
      jBart.trigger(field,'ModifyInstanceContext',{ Context: ctx2, FieldData: field_data });

      var cntr = aa_var_first(ctx2,'ItemTreeCntr');
      if (!cntr) return $('<div/>').get();
      var items = cntr.Items;

      var treeObject = new ajaxart.classes.Tree({
        items: items,
        _fieldData: field_data,
        _profile: profile,
        context: ctx2,
        cntr: cntr,
        lazy: true,
        itemSelection: aa_bool(data,profile,'ItemSelection',context)
      });
      var out = aa_renderStyleObject2(field.Style, treeObject, field_data,field,ctx2);
      return [out];
    };

    return [field];
  }
});

aa_gcs("itemtree_event", {
  BeforeTreeSelectAsync: function(profile, data, context) {
    var field = context.vars._Field[0];
    field.BeforeTreeSelectAsync = function(item,ctx,treeSelectObject) {
      var ctx2 = aa_merge_ctx(context,ctx,{_TreeSelect: [treeSelectObject]});
      context.vars.EventAction[0].run(item,ctx2);
    };
  }
});


function aa_init_class_Tree() {
  if (ajaxart.classes.Tree) return;

  ajaxart.classes.Tree = function(settings) {
    aa_extend(this, settings);
  };
  ajaxart.classes.Tree.prototype.itemText = function(item) {
    return aa_text([item], this._profile, 'ItemText', this.context);
  };
  ajaxart.classes.Tree.prototype.itemImage = function(item) {
    return aa_first([item], this._profile, 'ItemImage', this.context);
  };
}

function aa_item_tree(tree, settings) {
  settings = aa_defaults(settings, {
    nodeElement: tree.$el.firstOfClass('aa_tree_node')[0],
    nodeSettings: function(node) {
      return {
        toggleElement: node.$el.find('.aa_tree_node_expandbox'),
        imageElement: node.$el.find('.aa_tree_node_image'),
        textElement: node.$el.find('.aa_tree_node_text'),
        subnodesElement: node.$el.find('.aa_tree_node_subnodes'),
        subnodeElement: node.$el.find('.aa_tree_node')
      };
    }
  });

  var allItems = [];
  var baseNodeTemplate = settings.nodeElement;
  renderNodes(tree.items, settings.nodeElement,0);
  if (tree.itemSelection)
    supportSelected();

  function renderNodes(subitems, nodeTemplate, depth) {
    var nodeParent = $(nodeTemplate).parent()[0] || nodeTemplate.nodeParent;
    nodeTemplate.nodeParent = nodeParent;	// Keep node parent for next render
    $(nodeTemplate).remove();

    nodeTemplate.jbIsRendered = false;
    nodeTemplate.jbRender = function() {
      nodeTemplate.jbIsRendered = true;

      for (var i = 0; i < subitems.length; i++) {
        var item = subitems[i];
        if (isItemInTree(item)) continue;
        var nodeElement = $(baseNodeTemplate).clone().appendTo(nodeParent);
        nodeElement[0].jbItem = [item];

        renderNode({
          item: item,
          items: subitems,
          el: nodeElement[0],
          $el: nodeElement
        },depth);
      }
    }

    if (depth<2 || !tree.lazy)
      nodeTemplate.jbRender();
    else
      if (depth > 1) 
        $(nodeParent).closest('.aa_tree_node').addClass('collapsed');
  }

  function renderNode(node,depth) {
    var nodeSettings = settings.nodeSettings(node);
    var nodeText = tree.itemText(node.item);
    var nodeImage = tree.itemImage(node.item);
    if (nodeImage && nodeImage.Url) {
      nodeImage.StaticUrl = aa_totext(nodeImage.Url([node.item], tree.context));
      nodeImage = aa_create_static_image_object(nodeImage);
    }

    if (tree.controlForItem) {
      tree.controlForItem(node.item,$(nodeSettings.textElement)[0]);
    } else {
      $(nodeSettings.textElement).text(nodeText);
    }
    aa_setImage(nodeSettings.imageElement, nodeImage, {
      removeIfNoImage: true
    });

    var subitems = (node.items.SubItems && node.items.SubItems(node.item)) || [];
    if (!subitems.length) {
      node.$el.addClass('leaf');
      $(nodeSettings.subnodesElement).hide();
      node.$el.firstOfClass('aa_tree_node_subnodes').remove();
    } else {
      if (tree.longListMaxItems && subitems.length > tree.longListMaxItems) {
        var nodeParent = $(nodeSettings.subnodeElement).parent();
        renderNodesWithLongList(0);
        function renderNodesWithLongList(renderedSoFar) {
          var items = subitems.slice(renderedSoFar,renderedSoFar + tree.longListMaxItems);
          renderNodes(items, nodeSettings.subnodeElement,depth+1);
          if (subitems.length > renderedSoFar + tree.longListMaxItems) {
            var showMoreButton = tree.longListShowMoreButton();
            $(showMoreButton).click( function() { 
                $(this).hide();
                renderNodesWithLongList(renderedSoFar + tree.longListMaxItems);
              });
            nodeParent.append(showMoreButton);
          }
        }
      } else
        renderNodes(subitems, nodeSettings.subnodeElement,depth+1);
      $(nodeSettings.toggleElement).click(function() {
        node.$el.toggleClass('collapsed');
        if (!nodeSettings.subnodeElement.jbIsRendered)
          nodeSettings.subnodeElement.jbRender();
      });
    }
  }

  function supportSelected() {
    aa_bind(tree, 'selectionChanged', function(args) {
      tree.cntr.SelectedElement = args.el;
      aa_trigger(tree.cntr,'selectionChanged');
    });

    var firstEl = tree.$el.firstOfClass('aa_tree_node_line')[0];
    setSelectedElement(firstEl);

    tree.$el.click(function(event) {
      var line = $(event.target).has('.aa_tree_node_line').length ? $(event.target) : $(event.target).closest('.aa_tree_node_line');
      if (line[0] && tree.field.BeforeTreeSelectAsync && !line.hasClass('selected')) {
        var selectObject = {
          Cancel: function() {},
          Approve: function() {
            setSelectedElement(line[0]);
          }
        }
        tree.field.BeforeTreeSelectAsync(line[0].parentNode.jbItem || [],tree.context,selectObject);
        return;
      }
      setSelectedElement(line[0]);
    });

    tree.$el.keydown(function(event) {
      if (event.keyCode == 40) { moveSelectionDown(); aa_stop_prop(event); }
      if (event.keyCode == 38) { moveSelectionUp(); aa_stop_prop(event); }
      if (event.keyCode == 37) { collapseSelected(); aa_stop_prop(event); }
      if (event.keyCode == 39) { expandSelected(); aa_stop_prop(event); }
    });

    if (tree.el.tabIndex == -1) tree.el.tabIndex = 0;
    tree.$el.focus();
  }

  function setSelectedElement(newSelected) {    
    if ($(newSelected).hasClass('selected')) return;
    tree.$el.find('.selected').removeClass('selected');
    if (!newSelected) return;
    $(newSelected).addClass('selected');

    aa_trigger(tree, 'selectionChanged', {
      el: newSelected.parentNode
    });
  }

  function moveSelectionDown() {
    var selected = tree.$el.find('.selected');
    var node = selected.closest('.aa_tree_node');
    var nextNode = (!node.hasClass('collapsed') && node.find('.aa_tree_node_subnodes .aa_tree_node')[0]);
    if (!nextNode) {
      var iter = node[0];
      // try the next sibling, or the next sibling of the parent
      while (iter && !nextNode) {
        nextNode = iter.nextSibling;
        iter=$(iter.parentNode).closest('.aa_tree_node')[0];
      }      
    }
    if (!nextNode) {
      nextNode = tree.$el.firstOfClass('aa_tree_node')[0];
    }
    var newSelected = $(nextNode).find('.aa_tree_node_line')[0];

    setSelectedElement(newSelected);
  }

  function moveSelectionUp() {
    var selected = tree.$el.find('.selected');
    var node = selected.closest('.aa_tree_node');
    var prevNode = node[0].previousSibling;

    while(prevNode) {
      if ($(prevNode).hasClass('collapsed') || $(prevNode).hasClass('leaf')) break;
      var subnodes = $(prevNode).find('.aa_tree_node_subnodes>.aa_tree_node');
      prevNode = subnodes[subnodes.length-1];
    }

    if (!prevNode) {
      prevNode = node.parent().closest('.aa_tree_node')[0];
    }

    if (prevNode) {
      var newSelected = $(prevNode).find('.aa_tree_node_line')[0];
      setSelectedElement(newSelected);
    }
  }

  function collapseSelected() {
    var selected = tree.$el.find('.selected');
    var node = selected.closest('.aa_tree_node');
    node.addClass('collapsed');
  }

  function expandSelected() {
    var selected = tree.$el.find('.selected');
    var node = selected.closest('.aa_tree_node');
    node.removeClass('collapsed');
  }

  function isItemInTree(anitem) {
    for(var i=0;i<allItems.length;i++)
      if (allItems[i] == anitem) return true;

    allItems.push(anitem);
    return false;
  }

}

function aa_itemtreeContainer(items,id,field) {
  var cntr = {
    Id: id,
    Items: items,
    Field: field,
    ItemTrees: []
  };
  items.cntr = cntr;
  return cntr;
}




aa_gcs("xmltree",{
	XmlElementTreeItem: function(profile,data,context) {
    var field = aa_create_base_field(data, profile, context);

    field.Control = function(field_data, ctx) {
      var ctx2 = aa_merge_ctx(context,ctx);

      var treeNode = { 
      	xml: field_data[0], 
      	clickable: aa_hasParam(profile,'OnClick'),
      	nodeClick: function(xml,htmlElem) {
      		aa_run([xml],profile,'OnClick',aa_ctx(ctx2,{ControlElement: [htmlElem]}));
      	}
      };
      var out = aa_renderStyleObject2(field.Style, treeNode, field_data,field,ctx2);
      return [out];
    };
    return [field];
	}
});

function aa_xml_tree_node(treeNode,settings) {
	var xml = treeNode.xml;
//	if (xml.nodeType != 1) return;

	var $line = treeNode.$el;
	var $tag = treeNode.$el.firstOfClass('aa_xml_tag');
	$tag.text(xml.tagName);

	for (var i=0; i<xml.attributes.length; i++) {
		var name = xml.attributes.item(i).name;
		var $attr = $('<div class="aa_xml_attribute" />').appendTo($line);
		var $attrName = $('<div class="aa_xml_attribute_name" />').text(name+'=').appendTo($attr);
		var $attrValue = $('<div class="aa_xml_attribute_value" />').text(xml.getAttribute(name)).attr('title',xml.getAttribute(name)).appendTo($attr);

		if (treeNode.clickable) {
			$attr[0].jbXml = aa_xpath(xml,'@'+name)[0];
			$attr.click(function() {
				treeNode.nodeClick(this.jbXml,treeNode.el);
			});
		}
	}

	if (treeNode.clickable) {
		treeNode.$el.addClass('clickable');
		$tag.click(function() {
			treeNode.nodeClick(treeNode.xml,treeNode.el);
		});
	}
}

aa_gcs("action", {
AddToCommas: function (profile,data,context)
{
	var to = aa_first(data,profile,'To',context);
	var value = ajaxart.run(data,profile,'Value',context);
	var valueText = ajaxart.totext_array(value);
	
	var curr = ajaxart.totext(to);
	if (curr != "") curr = curr + ",";
	curr = curr + valueText;
	
	ajaxart.writevalue([to],[curr]);
	
	return ["true"];
},
Switch: function (profile,data,context)
{
	  return aa_switch(profile,data,context);
},
IfThenElse : function (profile,data,params)
{
	  return aa_ifThenElse(profile,data,params);
},
RunDelayedAction: function (profile,data,context) {
	aa_run_delayed_action(
		aa_text(data,profile,'ID',context),
		function() { aa_run(data,profile,'Action',context); },
		aa_int(data,profile,'Milliseconds',context),
		true
	);
},
WriteToLog : function (profile,data,context)
{
	var message = aa_text(data,profile,'Message',context);
	var title = aa_text(data,profile,'Title',context);
	var level = aa_text(data,profile,'Level',context);
	var title_prefix = "";
	if (title != "")
		title_prefix = title + ":"; 
	ajaxart.log(title_prefix + message,level);
	return data;
},
DelayedRun: function (profile,data,context)
{
	var delay = aa_int(data,profile,'DelayInMilli',context);
	var id = aa_text(data,profile,'UniqueActionID',context);

	if ( id == "" ) // just run it delayed
	    setTimeout(function() { ajaxart.run(data,profile,'Action',context); },delay);
	else
	{
		if (ajaxart.runDelayed == null) ajaxart.runDelayed = [];
		// look for the id in the table
		var newRecord = { id: id , handle: null }
		var getTimerFunc = function(record)
		{
			return function() {
				record.handle = 0;
				ajaxart.run(data,profile,'Action',context);
			}
		}

		for(var i=0;i<ajaxart.runDelayed.length;i++)
		{
			var record = ajaxart.runDelayed[i];
			if (record.id == id) {
				if (record.handle != 0)
				  clearTimeout(record.handle);
				ajaxart.runDelayed[i] = newRecord;
				newRecord.handle = setTimeout(getTimerFunc(newRecord),delay);
				return ["true"];
			}
		}
		ajaxart.runDelayed.push(newRecord);
		newRecord.handle = setTimeout(getTimerFunc(newRecord),delay);
	}
    return ["true"];
},
	WriteToCookie: function (profile,data,context)
	{
		var cookie = aa_text(data,profile,'Cookie',context);
		var val = aa_text(data,profile,'Value',context);
		
		aa_writeCookie(cookie,val);
		return ["true"];
	},
	ActionReturningResult: function (profile,data,context)
	{
		ajaxart.run(data,profile,'Action',context);
		return ajaxart.run(data,profile,'Result',context);
	},
	ReRunOnInterval:function (profile,data,context)
	{
		var id = aa_text(data,profile,'ID',context);
		var interval = aa_int(data,profile,'IntervalInMSec',context);
		ajaxart.timers = ajaxart.timers || {};
		function activate() {
			if (ajaxart.timers[id])
				window.clearTimeout(ajaxart.timers[id]);
			ajaxart.timers[id] = setTimeout(function() { 
				if (!aa_bool(data,profile,'ContinueCondition',context))
					return;
				ajaxart.run(data,profile,'Action',context);
				activate();
			}, interval)
		}
		activate();
	},
	RunOnNextTimer: function (profile,data,context)
	{
		var runNow = aa_bool(data,profile,'RunNow',context);
		var wait = aa_int(data,profile,'WaitInMSec',context);
		if (wait == 0)
			wait = 1;
		var func = function() { 
			ajaxart.run(data,profile,'Action',context) 
		};
		if (runNow)
			func();
		else
			setTimeout(func,wait);
		
		return ["true"];
	},
	LoadCssFiles: function(profile, data, context)
	{
		if (typeof(aa_loaded_css_files) == "undefined") aa_loaded_css_files = ",";

		var filesStr = aa_text(data,profile,'CssFiles',context).replace(/_jbartLib_/g,aa_base_lib());
		var files = aa_split(filesStr,',',true);

		for(var i=0;i<files.length;i++) {
				if (aa_loaded_css_files.indexOf(","+files[i]+",") > -1) continue;
		    var fileref=document.createElement("link");
		    fileref.setAttribute("rel", "stylesheet");
		    fileref.setAttribute("type", "text/css");
		    fileref.setAttribute("href", files[i]);
		    document.getElementsByTagName("head")[0].appendChild(fileref);
		    aa_loaded_css_files += files[i]+",";
		}
	},
	PreloadImages: function(profile, data, context)
	{
		var images = ajaxart.run(data,profile,'Images',context);
		for(var i=0;i<images.length;i++) {
			var url = aa_totext([images[i]]);
			if (url) {
				var img=new Image();
				img.src=url;
			}
		}
	},
	WriteNodeJSResult: function(profile, data, context) {
		var result = aa_text(data,profile,'Result',context);
		if (window.jBartNodeJS) 
			jBartNodeJS.writeResult(result);
		// else
		// 	aa_alert(result);
	}
});




aa_gcs("appfeature", {
	Responsive: function(profile, data, context) { 
		var cssClasses = '';
		var ctx2 = context;

		return [{
			Load: function(data1,ctx) {
				ctx2 = aa_merge_ctx(context,ctx);
				calculateCssClasses();

				if (ajaxart.jbart_studio) {
					aa_bind(context.vars._AppContext[0],'showPageInStudio',function(args) {
						studioRefresh(args);
					});
				} else 
					$(aa_body()).addClass(cssClasses);
			}
		}];

		function calculateCssClasses() {
			cssClasses = '';
			if (ajaxart.jbart_studio) {
				var width = aa_toint( ajaxart.runNativeHelper(data,profile,'WidthForStudio',ctx2) );
			} else
				var width = $(aa_body()).width();

			if (width >= 800 && width <= 1024) cssClasses += ' width_1024';
			if (width <= 600) cssClasses += ' width_mobile_phone';

			if (ajaxart.isIE78) cssClasses += ' nocss3';
		}

		function studioRefresh(args) {
			calculateCssClasses();

			var classes = (args.Wrapper.classNames || '').split(' ');
			for(var i=0;i<classes.length;i++)
				if (classes[i].indexOf('width_') == 0)
					$(args.Wrapper).removeClass(cssClasses);		

			$(args.Wrapper).addClass(cssClasses);
		}
	},
	ConfirmationOnCloseBrowserPage: function(profile, data, context) { 
		if (ajaxart.jbart_studio) {
			return;
		}
		window.onbeforeunload = function() {
			if (window.jbIgnoreWindowUnload) return;
			if (aa_bool([],profile,'ConditionForConfirmation',context)) 
				return aa_text(data,profile,'ConfirmationText',context);
		}
	},
	CssForHtmlHead: function(profile, data, context) { 
		var headCss = aa_text(data,profile,'Css',context);
		if (!headCss) return;

		jBart.headStyles = jBart.headStyles || {};
		if (jBart.headStyles[headCss]) return;
		jBart.headStyles[headCss] = true;

		var styleElem = $("<style></style>")[0];
		styleElem.innerHTML = headCss;
		var head = document.getElementsByTagName("head")[0];
		head.appendChild(styleElem);		
	},
	RunAction: function(profile, data, context) { 
		return [{
			Load: function(data1,ctx) {
				ajaxart.run(data1,profile,'Action',aa_ctx(context,ctx));
			}
		}];
	}
});





aa_gcs("fld", {
	Field: function(profile, data, context) {
		var field = {
			Id: aa_text(data, profile, 'ID', context),
			Title: aa_multilang_text(data, profile, 'Title', context),
			FieldData: function(data1, ctx) {
				var out = ajaxart.run(data1, profile, 'FieldData', aa_ctx(context, ctx));
				if (this.ForceCData && out[0] && out[0].nodeType == 1) {
					var currentValue = aa_totext(out);
					for (var iter = out[0].firstChild; iter; iter = iter.nextSibling) {
						if (iter.nodeType == 4) return out; // we already have cdata. nothing to change
					}

					while (out[0].firstChild) out[0].removeChild(out[0].firstChild); // empty
					out[0].appendChild(out[0].ownerDocument.createCDATASection(currentValue)); // add cdata
				}

				if (field.HasDefaultValue)
					aa_trigger(field, 'FieldData', { Item: data1,	FieldData: out,	Context: ctx });

				return out;
			},
			Control: function() {
				return [document.createElement('div')];
			}
		};
		field.ID = [field.Id]; // backward compatibility

		var ctx2 = aa_ctx(context, {
			_Field: [field]
		});
		ajaxart.run(data, profile, 'FieldType', ctx2);
		ajaxart.runsubprofiles(data, profile, 'FieldAspect', ctx2);

		return [field];
	},
	CalculatedField: function(profile, data, context) {
		var hidden = !aa_bool(data, profile, 'Visible', context);

		var field = {
			Id: aa_text(data, profile, 'ID', context),
			Title: aa_multilang_text(data, profile, 'Title', context),
			FieldData: function(data1, ctx) {
				return ajaxart.run(data1, profile, 'FieldData', aa_ctx(context, ctx));
			},
			WorkOn: aa_text(data, profile, 'WorkOn', context),
			Calculate: function(parentData, ctx) {
				if (this.WorkOn == 'items in itemlist') {
					var itemlistCntr = ctx.vars.ItemListCntr && ctx.vars.ItemListCntr[0];
					var items = itemlistCntr && itemlistCntr.Items;
					if (items) {
						for (var i = 0; i < items.length; i++) {
							var item = [items[i]];
							var to = this.FieldData(item, ctx);
							var value = ajaxart.run(item, profile, 'Value', aa_ctx(context, ctx));
							ajaxart.writevalue(to, value);
						}
					}
				} else {
					// single data
					var to = this.FieldData(parentData, ctx);
					var value = ajaxart.run(parentData, profile, 'Value', aa_ctx(context, ctx));
					ajaxart.writevalue(to, value);
				}
			},
			Control: function(field_data, ctx) {
				var text = aa_totext(field_data);
				return $('<div/>').text(text).attr('title', text).get();
			},
			CalculatedOnly: true,
			IsFieldHidden: function() {
				return hidden;
			},
			IsHidden: hidden
		};
		field.ID = [field.Id]; // backward compatability

		var ctx2 = aa_ctx(context, {
			_Field: [field]
		});
		ajaxart.runsubprofiles(data, profile, 'FieldAspect', ctx2);

		return [field];
	}
});

aa_gcs("fld_type", {
	Text: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);

		field.Control = function(field_data, ctx) {
			var text = aa_totext(field_data);
			if (field.Text) text = aa_totext(field.Text(field_data,ctx));
			var out = aa_renderStyleObject(field.Style, {
				text: text,
				data: field_data[0]
			}, ctx);
			$(out).addClass('aa_field_text');
			return [out];
		};
	},
	EditableText: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);
		field.HandleDescriptionForEmptyText = function(desctiptionForEmptyText) {
			field.DescriptionForEmptyText = desctiptionForEmptyText;
		};

		aa_init_class_EditableText();

		field.Control = function(field_data, ctx) {
			var placeholder = field.DescriptionForEmptyText || '';

			var textApiObject = new ajaxart.classes.EditableText({
				placeholder: placeholder,
				field: field,
				data: field_data,
				profile: profile,
				context: ctx,
				field_data: field_data
			});
			textApiObject.value = textApiObject.totext();
			return [aa_renderStyleObject(field.Style, textApiObject, ctx, true)];
		}
	},
	EditableColor: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);
		field.HandleDescriptionForEmptyText = function(desctiptionForEmptyText) {
			field.DescriptionForEmptyText = desctiptionForEmptyText;
		}
		aa_init_class_EditableText();

		field.Control = function(field_data, ctx) {
			var placeholder = field.DescriptionForEmptyText || '';

			var textApiObject = new ajaxart.classes.EditableText({
				placeholder: placeholder,
				field: field,
				data: field_data,
				profile: profile,
				context: ctx
			});
			textApiObject.value = textApiObject.totext();
			return [aa_renderStyleObject(field.Style, textApiObject, ctx, true)];
		};
	},
	EditableDate: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);
		field.HandleDescriptionForEmptyText = function(desctiptionForEmptyText) {
			field.DescriptionForEmptyText = desctiptionForEmptyText;
		};
		aa_init_class_EditableText();

		field.Control = function(field_data, ctx) {
			ctx = aa_merge_ctx(context,ctx);
			var placeholder = field.DescriptionForEmptyText || '';

			var apiObject = new ajaxart.classes.EditableText({
				placeholder: placeholder,
				field: field,
				data: field_data,
				profile: profile,
				context: ctx,
				storageFormat: aa_text(data,profile,'StorageFormat',ctx),
				displayFormat: aa_text(data,profile,'DisplayFormat',ctx),
				minDate: aa_text(data,profile,'Min',ctx),
				maxDate: aa_text(data,profile,'Max',ctx)
			});
			textApiObject.value = textApiObject.totext();
			return [aa_renderStyleObject2(field.Style, apiObject, field_data,field,ctx)];
		};
	},
	Image: function(profile, data, context) // GC of fld_type.Image
	{
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);
		field.Control = function(field_data, ctx) {
			var image = aa_first(field_data, profile, 'Image', context);
			if (image && image.Url) {
				image.StaticUrl = aa_totext(image.Url(field_data, context));
			}
			image.StaticUrl = image.StaticUrl || aa_text(data, profile, 'DefaultImage', context);

			var image2 = aa_create_static_image_object(image);

			var out = aa_renderStyleObject(field.Style, {
				Field: field,
				image: image2,
				data: field_data[0]
			}, ctx, true);
			return [out];
		}
	},
	EditableImage: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);

		aa_init_class_EditableImage();
		
		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context, ctx);
			var image = aa_first(field_data, profile, 'Image', ctx2);
			if (image && image.Url) image.StaticUrl = aa_totext(image.Url(field_data, ctx2));

			var staticImage = aa_create_static_image_object(image);

			var imageWidth = aa_first(field_data, profile, 'OriginalWidth', ctx2);
			var imageHeight = aa_first(field_data, profile, 'OriginalHeight', ctx2);
			var imageWidthInt = parseInt(aa_totext([imageWidth]));
			var imageHeightInt = parseInt(aa_totext([imageWidth]));

			var editableImage = new ajaxart.classes.EditableImage({
				field: field,
				image: staticImage,
				field_data: field_data,
				Field: field,
				data: field_data[0],
				value: staticImage.url,
				placeholder: field.DescriptionForEmptyText || '',
				imageWidthData: imageWidth ? [imageWidth] : [],
				imageHeightData: imageHeight ? [imageHeight] : [],
				imageWidth: imageWidthInt,
				imageHeight: imageHeightInt
			});
			return [aa_renderStyleObject(field.Style, editableImage, ctx2, true)];
		};
	},
	Boolean: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);

		if (aa_bool(data, profile, 'HidePropertySheetTitle', context)) field.HidePropertyTitle = field.HideTitle = true;

		field.Control = function(field_data, ctx) {
			ctx = aa_merge_ctx(context, ctx);
			var boolObj = {
				textForTrue: aa_multilang_text(data, profile, 'TextForTrue', context),
				textForFalse: aa_multilang_text(data, profile, 'TextForFalse', context),
				isTrue: aa_totext(field_data) == aa_text(data, profile, 'CodeForTrue', context)
			};

			return [aa_renderStyleObject2(field.Style,boolObj,field_data,field,ctx,{})];
		}
	},
	EditableBoolean: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);

		if (aa_bool(data, profile, 'HidePropertySheetTitle', context)) field.HidePropertyTitle = field.HideTitle = true;

		field.Control = function(field_data, ctx) {
			var picklist = {};
			aa_initPicklistObject(picklist, field, field_data, ctx);
			var image = aa_first(field_data, profile, 'Image', context);
			if (image && image.Url) image.StaticUrl = aa_totext(image.Url(field_data, context));

			return [aa_renderStyleObject(field.Style, {
				Field: field,
				field: field,
				textForTrue: aa_multilang_text(data, profile, 'TextForTrue', context),
				textForFalse: aa_multilang_text(data, profile, 'TextForFalse', context),
				codeForTrue: aa_text(data, profile, 'CodeForTrue', context),
				codeForFalse: aa_text(data, profile, 'CodeForFalse', context),
				getTextValue: function() {
					var text = aa_totext(field_data);
					return this.isChecked() ? this.textForTrue : this.textForFalse;
				},
				image: image,
				data: field_data[0],
				field_data: field_data,
				isChecked: function() {
					var text = aa_totext(field_data);
					return text == this.codeForTrue;
				},
				setValue: function(newval) {
					var newcode = newval ? this.codeForTrue : this.codeForFalse;

					ajaxart.writevalue(field_data, newcode);
					var content = this.control;
					aa_invoke_field_handlers(field.OnUpdate, content, null, field, field_data, {});
					jBart.trigger(field, 'update', {
						FieldData: field_data,
						wrapper: content.parentNode
					});
				}
			}, ctx, true)];
		}

	},
	Lookup: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.Options = ajaxart.run(data, profile, 'Options', context);
		field.Style = aa_first(data, profile, 'Style', context);
		field.Control = function(field_data, ctx) {
			var code = aa_totext(field_data);
			var option = aa_picklist_optionByCode(field.Options, code) || {
				code: code,
				text: code
			};

			return [aa_renderStyleObject(field.Style, {
				Field: field,
				image: option.image || '',
				data: field_data[0],
				text: option.text || '',
				isEmpty: option != null
			}, context)];
		};
	}
});

function aa_native_checkbox(checkbox, settings) {
	if (settings.TextElement) {
		settings.TextElement.innerHTML = checkbox.Field.Title;
		settings.TextElement.onclick = function() {
			if (window.aa_incapture) return;
			settings.InputElement.checked = !settings.InputElement.checked;
			checkbox.setValue(settings.InputElement.checked);
			refresh();
		}
	}
	settings.InputElement.onchange = function() {
		checkbox.setValue(settings.InputElement.checked);
		refresh();
	};
	refresh();

	function refresh() {
		settings.InputElement.checked = checkbox.isChecked();
	}

	aa_bind(checkbox, 'refreshUI', refresh);
}

function aa_div_checkbox(checkbox, settings) {
	settings = aa_defaults(settings,{
		textElement: checkbox.$el.firstOfClass('aa_checkbox_text'),
		clickableElement: checkbox.$el
	});
	$(settings.textElement).html( checkbox.Field.Title );
	$(settings.clickableElement).click(function() {
		$(settings.divCheckboxElement).toggleClass('checked');
		checkbox.setValue(checkbox.isChecked() ? false : true);
		refresh();
	});
	refresh();

	function refresh() {
		if (checkbox.isChecked()) 
			$(settings.clickableElement).addClass('checked');
		else
			$(settings.clickableElement).removeClass('checked');
	}

	aa_bind(checkbox, 'refreshUI', refresh);
}

function aa_native_boolean_radios(checkbox, settings) {
	settings = aa_defaults(settings, {
		TrueInputElement: checkbox.$el.find('.radio_true>input'),
		TrueTextElement: checkbox.$el.find('>.radio_true>div')[0],
		FalseInputElement: checkbox.$el.find('>.radio_false>input')[0],
		FalseTextElement: checkbox.$el.find('>.radio_false>div')[0]
	});

	aa_global_vars().uniqueRadioCounter = aa_global_vars().uniqueRadioCounter || 0;
	var radioGroup = 'aaradio' + ++aa_global_vars().uniqueRadioCounter;
	$(settings.TrueInputElement).attr("name", radioGroup);
	$(settings.FalseInputElement).attr("name", radioGroup);

	$(settings.TrueTextElement).text(checkbox.textForTrue).click(function() {
		$(settings.TrueInputElement).click();
	});

	$(settings.FalseTextElement).text(checkbox.textForFalse).click(function() {
		$(settings.FalseInputElement).click();
	});

	$(settings.TrueInputElement).click(function() {
		checkbox.setValue(true);
	});
	$(settings.FalseInputElement).click(function() {
		checkbox.setValue(false);
	});
	if (settings.PutFalseValueBeforeTrue) checkbox.$el.find('>.radio_true').before(checkbox.$el.find('>.radio_false'));

	var radioToCheck = checkbox.isChecked() ? settings.TrueInputElement : settings.FalseInputElement;
	$(radioToCheck).attr('checked', 'checked');

	function radioClicked() {
		var val = $(settings.TrueInputElement)[0].checked ? true : false;

	}
}

function aa_init_class_EditableText() {
	aa_init_class('EditableText', {
		_ctor: function() {
			this.InputValueMask = this.field && this.field.InputValueMask;
		},
		totext: function() {
			if (this.field.TextDataToInputValue)
				return aa_totext(this.field.TextDataToInputValue(this.data,this.context));

			return aa_totext(this.data);
		},
		setValue: function(newvalue, settings) {
			settings = settings || {};
			if (this.totext() == newvalue && !settings.forceUpdate) return;
			if (this.field.TextInputValueToData)
				newvalue = aa_totext(this.field.TextInputValueToData([newvalue],this.context));

			ajaxart.writevalue(this.data, [newvalue]);
			var field = this.field;
			aa_invoke_field_handlers(field.OnUpdate, this.el, null, field, this.data, {});
		},
		initInputElement: function(textbox, input) {
			var field = this.field,
				field_data = this.data,
				context = this.context,
				that = this;
			input.jbApiObject = textbox;

			$(input).focus(function(e) {
				e = e || event;
				// select all on next timer
				ajaxart.controlOfFocus = this;
				aa_invoke_field_handlers(field.OnFocus, input, e, field, field_data);
				for (var parent = input.parentNode; parent; parent = parent.parentNode) if (parent.onfocus) parent.onfocus(e); // for HoverOnPopup 
				return true;
			}).blur(function(e) {
				e = e || event;
				for (var parent = input.parentNode; parent; parent = parent.parentNode) if (parent.onblur) parent.onblur(e); // for HoverOnPopup 
//				ajaxart_field_RefreshDependentFields(field, input, context);
				aa_invoke_field_handlers(field.OnBlur, input, e, field, field_data);
				if (field.Validations) aa_handleValidations(field, input, field_data, context, "on blur");
				return true;
			}).keydown(function(e) {
				e = e || event;

				if (field.KeyPressValidator && e.keyCode != 8) // backspace is fine 
				{
					var ch = String.fromCharCode(e.keyCode);
					if (!field.KeyPressValidator.test(ch)) return aa_stop_prop(e);
				}
				aa_invoke_field_handlers(field.OnKeydown, this, e, field, field_data);

				if (window.aa_intest && e.CharByChar) input.value += String.fromCharCode(e.keyCode);

				return true;
			}).mousedown(function(e) {
				e = e || event;
				aa_invoke_field_handlers(field.OnMouseDown, this, e, field, field_data);
				return true;
			}).mouseup(function(e) {
				e = e || event;
				aa_invoke_field_handlers(field.OnMouseUp, this, e, field, field_data);
				return true;
			});
			input.Blur = function() {
				$(this).blur();
			}
			input.Refresh = function() {
				if (input.RefreshDescriptionForEmptyText) input.RefreshDescriptionForEmptyText();
				if (input.jbApiObject) aa_trigger(input.jbApiObject, 'refresh');
			}
			input.setAttribute('value', textbox.value); /* for automatic tests on all browsers */
		},
		onkeyup: function(e, input) {
			var field = this.field;
			var keyCode = e.keyCode;
			if (keyCode == undefined && !aa_intest && !aa_inuiaction) return; // a mouse click !!!
			aa_invoke_field_handlers(field.OnKeyup, input, e, field, this.data, {
				KeyCode: ['' + keyCode],
				CtrlKey: aa_frombool(e.ctrlKey)
			});
			var codes = [9, 13, 16, 17, 18, 27, 63277, 63276]; // controls and navigation are masked
			for (var i = 0; i < codes.length; i++)
			if (keyCode == codes[i]) return true;

			if (field.KeyPressValidator && keyCode != 8) // backspace is masked 
			{
				var ch = String.fromCharCode(keyCode);
				if (!field.KeyPressValidator.test(ch)) return aa_stop_prop(e);
			}
		}
	});
}

function aa_init_class_EditableNumber() {
	if (!ajaxart.classes.EditableNumber) {
		aa_init_class('EditableNumber', {});
		if (!ajaxart.classes.EditableText) aa_init_class_EditableText();
		ajaxart.classes.EditableNumber.prototype = new ajaxart.classes.EditableText; // inheritance
	}
}

function aa_jbart_clickable_text(textbox, settings) {
	var input = $(settings.InputElement), text = $(settings.TextElement);

	text.click(function() {
		textbox.el.jbIsInput = true;
		refresh();
	});
    input.keyup(function(ev) {
      if (ev.keyCode == 13)  return updateInputAndRefresh(); 
    });
	input.blur(updateInputAndRefresh);
	
	refresh();
  
	function refresh() {
		if (!textbox.el.jbIsInput) {
			input.hide();
			text.show().text(textbox.value || textbox.placeholder);
		} else {
			if (input[0].jbOnBeforeShow) input[0].jbOnBeforeShow();
			text.hide();
			input.show().val(textbox.value).focus();
		}
	}
	function updateInputAndRefresh() {
		if (textbox.value != input.val()) {
			textbox.value = input.val();
			textbox.setValue(input.val());
		}
		textbox.el.jbIsInput = false;
		refresh();
    }
}

function aa_jbart_textbox(textbox, settings) {
	settings = aa_defaults(settings,{
		inputElement: textbox.el,
		autoRTLForHebrewContent: false
	});

	/* 	
	Initializes a textbox (input/textarea) to support change events etc. 
	A textarea can also be passed as inputElement.
*/
	var userAgent = navigator.userAgent.toLowerCase();
	var placeholderNativeSupport = (/chrome/.test(userAgent) || /firefox/.test(userAgent) || /safari/.test(userAgent));
	placeholderNativeSupport = false; // always disable it
	var isIE7orIE8 = /msie 7/.test(userAgent) || /msie 8/.test(userAgent);
	var updateOn = textbox.field.UpdateOn || 'EveryClick';

	var input = $(settings.inputElement)[0];
	var inputValueMask = textbox.InputValueMask || settings.InputValueMask;	

	if (textbox.initInputElement) textbox.initInputElement(textbox, input); /* Allows custom initialization of the input element (e.g. adding placeholders) */

	function getInputValue() {
		var val = input.value;
		if (textbox.placeholder && $(input).hasClass('placeholder')) return '';
		if (inputValueMask) {
			var newval = inputValueMask(val);
			if (newval != val) {
				input.value = newval;
				val = newval;
			}
		}
		var args = { val: val };
		aa_trigger(textbox.field,'inputMask',args);

		if (args.val != val) {
			input.value = args.val;
			val = args.val;
		}
		
		return val;
	}

	function valueChanged() {
		var inputValue = getInputValue();
		if (textbox.value != inputValue) {
			textbox.value = inputValue;
			if (textbox.setValue) textbox.setValue(textbox.value);
		}
	}
	// oninput is for mouse context menu of cut,paste
	input.oninput = function(e) {
		if (updateOn == 'EveryClick') valueChanged();
	};
	// support paste,cut for IE8,IE7
	if (isIE7orIE8 && updateOn == 'EveryClick') {
		$(input).bind('cut paste', null, function(e) {
			setTimeout(function() {
				valueChanged();
			}, 50);
		});
	}
	input.onkeyup = function(e) {
		$(input).removeClass('placeholder');
		if (textbox.onkeyup) textbox.onkeyup(e || event, input);
		if (updateOn == 'EveryClick') valueChanged();
		return true;
	};
	if (textbox.placeholder && placeholderNativeSupport) $(input).attr('placeholder', textbox.placeholder);

	input.value = textbox.value;

	if (!placeholderNativeSupport) {
		input.onfocus = function(e) {
			if ($(input).hasClass('placeholder')) {
				$(input).removeClass('placeholder');
				input.value = '';
			}
		};
		input.onblur = function() {
			if (textbox.placeholder && input.value == '') {
				input.value = textbox.placeholder;
				$(input).addClass('placeholder');
			}
		};
		input.onblur();
	}

	if (updateOn == 'Blur') {
		$(input).blur(valueChanged);
	}

	if (settings.autoRTLForHebrewContent && textbox.value) {
		var firstCharCode = textbox.value.trim().charCodeAt(0);
		if (firstCharCode >= 1488 && firstCharCode <= 1514)	// hebrew text (between × to ×ª)
			$(input).css("direction","rtl");
	}
}

function aa_init_jscolor(textbox, settings) {
	/* uses jscolor for editable color (http://jscolor.com) */
	var input = settings.InputElement;
	// var baseUrl = settings.BaseUrl || aa_base_lib() + '/jscolor/';
	if (!window.jscolor)
		console.error('jscolor lib is not loaded: http://jscolor.com/');

	var jsColorSettings = {
		styleElement: settings.StyleElement || settings.InputElement,
		pickerClosable: settings.PickerClosable ? true : false,
		required: false,
		hash: true,
		onImmediateChange: function() { onChange(this.toString(),true);	}
	};
	var myPicker = new jscolor.color(input, jsColorSettings);
	$(settings.ClickElement).click(function() {
		myPicker.showPicker();
	});
	$(settings.InputElement).keyup(function(event) {
	  	if ( event.which == 13 ) {
		  	myPicker.hidePicker();
		  	if (!this.value) {
			  	this.style.backgroundColor = '';
			  	setTimeout(function() { settings.InputElement.focus(); }, 1);
		  	}
		 	onChange(this.value,false);
		}
	}).click(function() {
		myPicker.showPicker();
	} );
	function onChange(value,fromColorPicker) {
		var color = value || '';
		if (fromColorPicker && value && value.charAt(0) != '#') color = '#' + value;

		if (textbox.value != color) {
			textbox.value = color;
			if (textbox.setValue) textbox.setValue(textbox.value);
		}
	}
}

function aa_jquery_date_picker(dateObj, settings) {
	settings = aa_defaults(settings, {
		InputElement: dateObj.el
	});
	var input = $(settings.InputElement)[0];
	var baseUrl = settings.BaseUrl || aa_base_lib() + '/datepicker-1.11/';

	var cssList = [ baseUrl + 'jquery-ui.css' ];
	var jsList = [ baseUrl + 'jquery-ui.js' ];
	if ($.datepicker) return init();

	aa_loadLib("jquerydatepicker", cssList , jsList).done(init);

	function init() {
		if (!ajaxart.isattached(dateObj.el))
			return aa_addOnAttach(dateObj.el,init);

		var params = {
			dateFormat: dateObj.displayFormat,
			onSelect: function(value) {
				var storageVal = displayToStorage(value);
				if (dateObj.setValue) dateObj.setValue(storageVal);
				dateObj.value = storageVal;
//				$(input)[0].value = 'abc';
			},
			beforeShow: function(value) {
//				$(input).datepicker("setDate",storageToDisplay(dateObj.value));
			}
		};
		try {
			if (dateObj.minDate) params.minDate = $.datepicker.parseDate(dateObj.storageFormat, dateObj.minDate);
			if (dateObj.maxDate) params.maxDate = $.datepicker.parseDate(dateObj.storageFormat, dateObj.maxDate);
		} catch(e) { ajaxart.logException('error in date picker',e);}

		$(input).datepicker(params);
		try {
			if (dateObj.value) $(input).datepicker("setDate",storageToDisplay(dateObj.value));
		} catch(e) { ajaxart.logException('error in date picker',e);}

		if ($(settings.OpenByClickElement)[0]) {
			$(settings.OpenByClickElement).click(function() {
				$(input).datepicker( "show" );
			});
		}

		aa_addOnDetach(input,function() {
			$(input).datepicker("destroy");
		});
	}

	function displayToStorage(displayVal) {
		var date = $.datepicker.parseDate(dateObj.displayFormat, displayVal );
		return $.datepicker.formatDate(dateObj.storageFormat, date );
	}
	function storageToDisplay(storageVal) {
		var date = $.datepicker.parseDate(dateObj.storageFormat, storageVal);
		return $.datepicker.formatDate(dateObj.displayFormat, date );
	}
}

function aa_init_jscolor_with_transparent_checkbox(textbox, settings) {
	if (settings.CheckboxElement) {
		textbox.setValueoriginal = textbox.setValue;
		if (!textbox.value) settings.CheckboxElement.checked = true;
		textbox.setValue = function(value) {
			textbox.setValueoriginal(value);
			settings.CheckboxElement.checked = false;
		}
		settings.CheckboxElement.onchange = function() {
			textbox.setValueoriginal("");
			$(settings.StyleElement || settings.InputElement).css("background", "white");
		}
	}
	aa_init_jscolor(textbox, settings);
}



//******************* Star Rating ************************/

aa_gcs("rating",{
	Rating: function(profile,data,context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data, profile, 'Style', context);

		field.Control = function(field_data, ctx) {
			ctx = aa_merge_ctx(context,ctx);
			var rating = {
				value: aa_totext(field_data),
				setValue: function(newval) {
					this.value = newval;
					ajaxart.writevalue(field_data, newval);
					aa_invoke_field_handlers(field.OnUpdate, this.el, null, field, field_data, {});
				}
			};
			return [aa_renderStyleObject2(field.Style,rating,field_data,field,ctx,{})];
		};		
	}
});

function aa_rating_stars(rating,settings) {
	settings = aa_defaults(settings,{
		starElement: rating.$el.firstOfClass('star')
	});

	var stars = [];
	for(var i=0;i<5;i++) {
		var starElem = $(settings.starElement).clone().insertAfter(stars[stars.length-1] || settings.starElement);
		stars.push(starElem[0]);
		starElem[0].jbRatingIndex = i;
	}
	$(settings.starElement).remove();

	$(stars).hover(function() {
		var index = this.jbRatingIndex;
		$(stars).removeClass('full').removeClass('hover');
		$(stars.slice(0,index+1)).addClass('hover');
	});
	$(stars).click(function() {
		var index = this.jbRatingIndex+1;
		rating.setValue(''+index);
		refresh();
	});
	rating.$el.mouseout(refresh);

	refresh();

	function refresh() {
		$(stars).removeClass('full').removeClass('hover');
		var val = parseInt(rating.value || 0);
		$(stars.slice(0,val)).addClass('full');
	}
}

/************** boolean *******************/
function aa_booleanStyle(boolObj) {
	var text = boolObj.isTrue ? boolObj.textForTrue : boolObj.textForFalse;
	boolObj.$el.text(text);
}


aa_noOfOpenDialogs = 0;
aa_dialogCounter = 0;
openDialogs = [];
aa_openDialogs = [];

aa_gcs("dlg", {
  OpenDialog: function (profile,data,context) 
  {
	var dlg = { isObject: true }
	dlg.Title = aa_multilang_text(data,profile,'Title',context);
	dlg.Data = ajaxart.run(data,profile,'DialogData',context);
	dlg.Contents = aa_first(dlg.Data,profile,'Contents',context);
	dlg.noOfOpenDialogs = window.aa_noOfOpenDialogs;
	dlg.Style = aa_first(data,profile,'Style',context);
	dlg.Mode = dlg.Style.Mode;
	dlg.Context = context;
	
	dlg.onElem = aa_first(data,profile,'LauncherElement',context);
	dlg.JBStudio = (dlg.onElem && jQuery(dlg.onElem).parents('.jbstudio_dlg').length > 0);
	
	function init(dlg) {
	    dlg.createFrame = function() {
	    	if (!dlg.ShowFocusUnderline) {
	    		dlg.Style.Css += ' #this *:focus { outline:none; }';
	    	}
	    	this.StyleClass = aa_attach_global_css(this.Style.Css);
	    	var jElem = jQuery(this.Style.Html);
	    	jElem.addClass(this.StyleClass);
	    	jElem.addClass(ajaxart.deviceCssClass || '');
	    	if (dlg.JBStudio) jElem.addClass('jbstudio_dlg');
	    	
	    	var dialogObject = aa_api_object(jElem);
	    	aa_apply_style_js(dialogObject,this.Style);
	    	return jElem[0];
	    }
		
		dlg.ContentsPlaceholder = function() {
			var out = this.Frame;
			if (jQuery(out).hasClass('aa_dialogcontents')) return out;
			return jQuery(out).find('.aa_dialogcontents')[0];
		}
		dlg.RunOnOK = function() { ajaxart.run(this.Data,profile,'RunOnOK',context); }
		
		dlg.OK = function(data1,ctx) {
			if (!dlg.Frame) return;
			var contents = dlg.ContentsPlaceholder();
			if (! aa_passing_validations(contents) ) return;
			aad_runMethodAsync(this,this.RunBeforeOK,this.Data,dlg.Context,function() {		// allow asyc call before ok (e.g. trying to save on the server)
				if ( jQuery(contents).find('.aa_noclose_message').length > 0 ) return;
				dlg.Close(data1,ctx);
				var ctx2 = aa_ctx(context,{ DialogOriginalData: dlg.Data });
				if (dlg.onElem) ctx2.ControlElement = [dlg.onElem];
				ajaxart.run(dlg.Data,profile,'RunOnOK',ctx2);
			});
		}
		dlg.Apply = function(data1,ctx) {
			var ctx2 = aa_ctx(context,{ DialogOriginalData: dlg.Data});
			ajaxart.run(this.Data,profile,'RunOnOK',ctx2);
		}
		dlg.Cancel = function(data1,ctx) {
//			if (dlg.NoCancel) return this.OK(data1,ctx);
			this.Close(data1,ctx);
			if (this.RunOnCancel) this.RunOnCancel(data,context);
			jBart.trigger(dlg,'cancel');
		}
		dlg.Open = function(data1,ctx) {
			var dlg = this;

			aa_invoke_dialog_handlers(dlg.BeforeOpenFunc,dlg,context);  // dialog size etc.
			if (dlg._cancelOpen) return;

			// first close all popups
			if (! ajaxart.inPreviewMode) {
				if (!this.DontCloseOtherPopupsOnOpen) {
					if (! dlg.JBStudio) {
						var stop = false;
						while (ajaxart.dialog.openPopups.length > 0 && !stop) {
							var dialogCount = ajaxart.dialog.openPopups.length;
						    aa_closePopup(ajaxart.dialog.openPopups[ajaxart.dialog.openPopups.length-1]);
						    if (ajaxart.dialog.openPopups.length == dialogCount)	// the popup is not closed
						    	stop = true;
						}
					} else {
						// a studio dialog...do not close runtime popups
						var openPopups= [];
						for(var i=0;i<ajaxart.dialog.openPopups.length;i++) {
							var popup = ajaxart.dialog.openPopups[i];
							if (!popup.Dlg || !popup.Dlg.JBStudio) {
								openPopups.push(popup);
							} else {
								// a design time popup - closing it
								aa_uncapture_for_popup(popup);
								if (!popup.Dlg) {	
									aa_remove(popup.contents.parentNode,true);
								}
								if (popup.Dlg) popup.Dlg.Close([],ajaxart.newContext(),true);
							}
						}
						ajaxart.dialog.openPopups = openPopups;
					} 
				}
			}
			
			if (this.Mode == 'dialog') aa_noOfOpenDialogs++;
			
			//var cls = dlg.DialogClass;
			dlg.Frame = dlg.createFrame();
			aa_invoke_dialog_handlers(dlg.BeforeOpen,dlg,context);  // screen cover etc.
			
			aa_openDialogs.push(dlg);
			
			if (this.Mode == 'popup') {
			  dlg.Popup = {Dlg: dlg, contents: dlg.Frame, onElem: dlg.onElem };
			  ajaxart.dialog.openPopups.push(dlg.Popup);
			  setTimeout( function() { 
//				  aa_capture_for_popup(dlg.Popup); 
				  dlg.Popup.initialized = true; 
			  }, 1 );
			}
			
			dlg.Frame.Dialog = dlg;
			var jFrame = jQuery(dlg.Frame);
			aa_defineElemProperties(dlg.Frame,'counter');

			dlg.Rtl = aa_is_rtl(dlg.onElem) && ! dlg.AlwaysLTR;
			if (jQuery(dlg.onElem).parents('.jbstudio').length > 0) jFrame.addClass('jbstudio');
			
			dlg.Frame.counter = ++aa_dialogCounter;		// used to determine who is the current dialog, in case of more than one dialog
			if (dlg.ZIndex) {
				jFrame.css('zIndex',dlg.ZIndex);
			}	else { 
				jFrame.css('zIndex',aad_dialog_zindex(2001 + aa_dialogCounter,jFrame[0]));
			}
			jFrame.addClass('aa_dlg').addClass(dlg.DialogClass || '');
			
			
			if (dlg.Rtl) jFrame.addClass('right2left');
			
			if (! ajaxart.inPreviewMode) jFrame.addClass('aa_dlg').css('position','absolute');
			if (dlg.Title && jFrame.find('.aa_dialog_title').length >0) {
				var titleDiv = jQuery('<div class="aa_dialog_title_text"/>')[0];
				titleDiv.innerHTML = dlg.Title;
				jFrame.find('.aa_dialog_title')[0].appendChild(titleDiv);
			}
			if (dlg.Contents) {
				dlg.ContentsPlaceholder().appendChild(dlg.Contents);
			  dlg.Contents.tabIndex = 0;
			}
			if (dlg.Buttons && dlg.Buttons.length > 0 && dlg.ButtonsControl) {
				jQuery(dlg.Frame).find('.aa_dialogbuttons')[0].appendChild(dlg.ButtonsControl(data1,ctx));
			}
			dlg._FixDialogPosition = function() {
				var oldIsReady = dlg.isReady; 
				if (!dlg.isReady && jFrame.find('.aa_dialog_not_ready').length > 0) {
					dlg.isReady = false;
					return;
				}
				dlg.isReady = true;
				if (dlg.FixDialogPosition) dlg.FixDialogPosition(oldIsReady ? false : true);
			    jFrame.show();
			}
			if (! ajaxart.inPreviewMode) {
				document.body.appendChild(dlg.Frame);
			    jFrame.hide();
		    	dlg._FixDialogPosition(true); 
		    	aa_element_attached(dlg.Frame); 
			}
//			setTimeout(function() {
//				if (dlg.Disabled) return;
//				else if (dlg.Contents) dlg.Contents.focus();
//			},1);

		    jQuery(dlg.Frame).keydown( function(e){
				aa_invoke_dialog_handlers(dlg.KeyDown,e||event,context);
			});
			
			if (dlg.onElem) dlg.onElem.jbDialog = dlg;
		    
			aa_invoke_dialog_handlers(dlg.AfterOpen,dlg,context);  // dialog size etc.
		}
		dlg.Close = function(data1,ctx,fromClosePopup) {
			var ctx = this.Context || ctx;
			aa_invoke_dialog_handlers(this.BeforeClose,this);  
			if (this.RunBeforeClose) this.RunBeforeClose(data1,aa_ctx(ctx,{ControlElement: [this.Frame]}));
			var frame = this.Frame;
			if (!this.Frame) return;
			aa_remove(this.Frame,true);
			this.Frame = null;
			if (this.Mode == 'dialog') aa_noOfOpenDialogs--;
			else if (!fromClosePopup) aa_closePopup(this.Popup); 
			
			aa_invoke_dialog_handlers(this.AfterClose,this);  // screen cover etc.
			if (this.RunOnClose) this.RunOnClose(data1,ctx);
			
			jBart.utils.removeFromArray(aa_openDialogs,this);
			if (dlg.onElem) dlg.onElem.jbDialog = null;
		}
		var newContext = aa_ctx(context,{_Dialog: [dlg]} );
	
		dlg.Style.Features(data,newContext);
		ajaxart.runNativeHelper(data,profile,'MoreFeatures',newContext);
		ajaxart.runsubprofiles(data,profile,'Feature',newContext);
		
		dlg.Open(data,newContext);
	}
	init(dlg);
  },
  AboveLauncher: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.FixDialogPosition = function(firstTime) 
	  {
		  var control = this.onElem;
		  if (!firstTime || !control || !this.Frame) return;
		  var jPopup = jQuery(this.Frame);
		  
		  var mode = aa_text(data,profile,'Location',context);
		  var d;
		  if( window.innerHeight ) 
			  d = { pageYOffset: window.pageYOffset,pageXOffset:window.pageXOffset, innerHeight: window.innerHeight ,innerWidth: window.innerWidth }
		  else if( document.documentElement &&document.documentElement.clientHeight )
			  d = { pageYOffset: document.documentElement.scrollTop , pageXOffset : document.documentElement.scrollLeft, innerHeight : document.documentElement.clientHeight, innerWidth : document.documentElement.clientWidth}
		  else if( document.body )
			  d = { pageYOffset :document.body.scrollTop, pageXOffset :document.body.scrollLeft,innerHeight: document.body.clientHeight,innerWidth :document.body.clientWidth};
		  d.innerWidth -= 18;	//dirty, considering vertical scroll's width
		  var fixed_location = false;
		  jQuery(control).parents().each(function() { if (jQuery(this).css("position") == 'fixed') fixed_location=true; } );
		  if (fixed_location) { d.pageYOffset = d.pageXOffset = 0; jPopup[0].style.position = 'fixed'; }
			  
		  jPopup.show();		// shows before moving so offsetHeight,offsetWidth are correct
		  var p_height = this.Frame.offsetHeight;
		  var p_width = this.Frame.offsetWidth;
		  var l_ctrl_height = control.offsetHeight;
		  var l_ctrl_width = control.offsetWidth;
		  
		  var pageX = aa_absLeft(control) + l_ctrl_width/2 - p_width/2;
		  var pageY = aa_absTop(control) + l_ctrl_height/2 - p_height/2;
		  
		  var padding = 4;
		  if (pageX < d.pageXOffset + padding) pageX = d.pageXOffset + padding;
		  if (pageY < d.pageYOffset + padding) pageY = d.pageYOffset + padding;
		  if (pageX + p_width + padding> d.pageXOffset + d.innerWidth)
			  pageX = d.pageXOffset + d.innerWidth - p_width - padding;
		  if (pageY + p_height + padding> d.pageYOffset + d.innerHeight)
			  pageY = d.pageYOffset + d.innerHeight - p_height - padding;
		  jPopup.css("top",pageY).show();
		  jPopup.css("left",pageX);
	  }
  },
  CenteringLauncher: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.FixDialogPosition = function(firstTime,forceFixLocation) 
	  {
		  var control = this.onElem;
		  if (!control || !this.Frame) return;

		  var jPopup = jQuery(this.Frame);

		  var centerX = aa_absLeft(control) + (jQuery(control).width()/2);
		  var centerY = aa_absTop(control) + (jQuery(control).height()/2);
			  
		  var width = jPopup.outerWidth();
		  var height = jPopup.outerHeight();
		  
		  var dlgLeft = centerX - (width/2);
		  var dlgTop = centerY - (height/2);;
		  
		  if (dlgLeft<0) dlgLeft=0;
		  if (dlgTop<0) dlgTop=0;

		  jPopup.css("left",dlgLeft).css('top',dlgTop).show();
		  
		  aa_invoke_dialog_handlers(dlg.PositionChanged,dlg,context);
	  };
  },
  NearLauncher: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.FixDialogPosition = function(firstTime,forceFixLocation) 
	  {
		  var control = this.onElem;
		  if (!control || !this.Frame) return;
		  if (!firstTime && this.Frame.offsetHeight == this.lastHeight) return;
		  var jPopup = $(this.Frame);
		  
		  var mode = aa_text(data,profile,'Location',context);
		  var d;
		  if( window.innerHeight ) 
			  d = { pageYOffset: window.pageYOffset,pageXOffset:window.pageXOffset, innerHeight: window.innerHeight ,innerWidth: window.innerWidth }
		  else if( document.documentElement &&document.documentElement.clientHeight )
			  d = { pageYOffset: document.documentElement.scrollTop , pageXOffset : document.documentElement.scrollLeft, innerHeight : document.documentElement.clientHeight, innerWidth : document.documentElement.clientWidth}
		  else if( document.body )
			  d = { pageYOffset :document.body.scrollTop, pageXOffset :document.body.scrollLeft,innerHeight: document.body.clientHeight,innerWidth :document.body.clientWidth};
		  var launcher_fixed_location = false;
		  $(control).parents().each(function() { if ($(this).css("position") == 'fixed') launcher_fixed_location=true; } );
		  if (launcher_fixed_location) { d.pageYOffset = d.pageXOffset = 0; jPopup[0].style.position = 'fixed'; }
			  
		  jPopup.show();		// shows before moving so offsetHeight,offsetWidth are correct
		  var p_height = this.Frame.offsetHeight;
		  var p_width = this.Frame.offsetWidth;
		  var l_ctrl_height = control.offsetHeight;
		  var l_ctrl_width = control.offsetWidth;
		  var goLeft = aa_bool(data,profile,'PopupLeftOfLauncher',context);
		  this.lastHeight = p_height;
		  
		  // makes sure it doesn't goes more than screen size
			if (p_width > d.innerWidth) { jPopup.css("max-width", d.innerWidth + "px"); p_width = this.Frame.offsetWidth; }
			if (p_height > d.innerHeight) { jPopup.css("max-height", d.innerHeight + "px"); p_height = this.Frame.offsetHeight;}
  		  
		  var pageX = aa_absLeft(control), pageY = aa_absTop(control);
		  if (!aa_bool(data,profile,'HidingLauncher',context))
			  pageY += l_ctrl_height +2;
		  
		  var padding = 2;
		  if (this.popupLocation == 'up' || (mode != 'below launcher' && d.innerHeight + d.pageYOffset < pageY + p_height && d.pageYOffset <= pageY - p_height - l_ctrl_height - padding)) {	// jPopup going up
			this.popupLocation = 'up';
			pageY  -= p_height + l_ctrl_height + padding +2;
		  }
  		  else if (mode == 'below,above or aside of launcher' && d.innerHeight + d.pageYOffset < pageY + p_height && 
  				d.pageYOffset > pageY - p_height - l_ctrl_height - padding*2) {	// cannot go not up and not down
  			pageY = d.innerHeight/2 - p_height/2 + d.pageYOffset;	// put at center vertically
  			
			if (!goLeft && pageX + l_ctrl_width + p_width +padding <= d.pageXOffset + d.innerWidth) // go right 
				pageX = pageX + l_ctrl_width + padding;
			else if (pageX - p_width >= d.pageXOffset || goLeft) {	// go left
				pageX = pageX - p_width - padding;
				goLeft = false;  // no need to calc the go left again...
			}
			else // go center
				pageX = d.innerWidth/2 - p_width/2+ d.pageXOffset;
		  }
  		  if (d.innerHeight + d.pageYOffset < pageY + p_height)	{ // overflows downwards
  			  var height_diff = p_height - jPopup.height();
  			  jPopup.css("max-height", d.innerHeight + d.pageYOffset - pageY - height_diff - padding + "px");
  			  if (d.innerHeight + d.pageYOffset - pageY - height_diff - padding <= 0)	// dialog too small
  				dlg.Close();
  		  }
		  if (d.pageXOffset + d.innerWidth < pageX + p_width ) {	// overflows rightwards
			  // if (pageX - p_width + l_ctrl_width >= d.pageXOffset) {	// go left
			  pageX = pageX + l_ctrl_width - p_width;
			  goLeft = false; // no need to calc the go left again...
			  // }
			  // else {	// attach center to launching element
//				  pageX = pageX + l_ctrl_width/2 - p_width/2;
//				  if (d.pageXOffset + d.innerWidth < pageX + p_width + padding)	// overflows rightwards
//					 pageX = d.pageXOffset + d.innerWidth - p_width - padding;
//				  else if (d.pageXOffset > pageX )	// overflows leftwards
//						 pageX = d.pageXOffset + padding;
			  // }
		  }
		  if (aa_bool(data,profile,'UseFixedPosition',context) && !launcher_fixed_location) {
			  jPopup[0].style.position = 'fixed';
			  pageX -= d.pageXOffset;
			  pageY -= d.pageYOffset;
		  }
		  if (firstTime || forceFixLocation) {
			  var left = goLeft ? pageX - jPopup.width() : pageX, top = pageY;
			  left += aa_int(data,profile,'DeltaX',context);
			  top += aa_int(data,profile,'DeltaY',context);
			  if (left + jPopup.width() > d.innerWidth) 
				  left = d.innerWidth - jPopup.width();
			  if (left < 0 ) left = 0;
			  if (window.fb_params) left += 9;	// TODO: fix this !!!  
			  jPopup.css("left",left).css('top',top).show();
			  
			  aa_invoke_dialog_handlers(dlg.PositionChanged,dlg,context);
		  }
		  
		  if (aa_bool(data,profile,'PopupAtLeastWideAsLauncher',context))
			  jPopup.css('min-width',l_ctrl_width+'px');
	  }
  },
  StudioStyleDialogOf: function (profile,data,context)
  {
  	var dlg = aa_var_first(context,'_Dialog');
	  aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) {
	  	jQuery(dlg.Frame).addClass('jbstudio_style_dialog');
	  	dlg.Frame.jbStyleXtml = aa_first(data,profile,'Xtml',context);
	  });

  },
  TopZIndexWhenTouching: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) {
		  jQuery(dlg.Frame).find(".aa_dialog_title").mousedown(function() {
//		  jQuery(dlg.Frame).mousedown(function() {
			  dlg.setAsTop();
  		   });
		  dlg.setAsTop();
	  });
	  dlg.setAsTop = function() {
		var other_dialogs = jQuery(".aa_dlg");
		var topZIndex = 0;
		for(var i=0;i<other_dialogs.length;i++) {
			if (other_dialogs[i].Dialog == dlg) continue;
			var zindex = parseInt( jQuery(other_dialogs[i]).css('z-index') || '0') || 0;
			if (zindex > topZIndex) topZIndex = zindex;
		}
		var myzindex = parseInt(jQuery(dlg.Frame).css('z-index') || '0') || 0;
		if (myzindex <= topZIndex) 
			jQuery(dlg.Frame).css('z-index',topZIndex+1);
	  }
  },
  InScreenCenter: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.FixDialogPosition = function(firstTime) 
	  {
		if (!dlg.alreadyShown && !firstTime) return;
		if (firstTime) dlg.firstTimeShow = new Date().getTime();
		
		var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
		var screenHeight = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);

		var scrollOffsetX = document.body.scrollLeft || document.documentElement.scrollLeft;
		var scrollOffsetY = document.body.scrollTop || document.documentElement.scrollTop;
		if (!this.Frame) return;
		var jFrame = jQuery(this.Frame);
	  	
	  	var jDlgBody = jQuery(this.ContentsPlaceholder());
	  	if (jDlgBody.height() > jDlgBody[0].scrollHeight) jDlgBody.height(jDlgBody[0].scrollHeight);
	  	if (jDlgBody.width() > jDlgBody[0].scrollWidth) jDlgBody.width(jDlgBody[0].scrollWidth);

	  	var yCaption = jFrame.height() - jDlgBody.height();
	  	var xCaption = jFrame.width() - jDlgBody.width();
	  	if (jFrame.height() > screenHeight) jDlgBody.height(screenHeight-yCaption-50);
	  	if (jFrame.width() > screenWidth) jDlgBody.width(screenWidth-xCaption-50);

	  	// Handle out of screen
	  	var fixPos = false;
	  	if (aa_absLeft(jFrame[0]) < 0 || screenWidth - jFrame.width() - aa_absLeft(jFrame[0]) < 0) fixPos = true;
	  	if (aa_absTop(jFrame[0]) < 0 || screenHeight - jFrame.height() - aa_absTop(jFrame[0]) < 0) fixPos = true; 
	  	
	  	if (firstTime || aa_bool(data,profile,'AlwaysInScreenCenter',context) || fixPos) {
		  jFrame.css('left',Math.max(5,(screenWidth - jFrame.width())/2) + "px");
		  jFrame.css('top',Math.max(5,(screenHeight - jFrame.height())/2) + "px");
		  jFrame[0].style.position = 'fixed';
	  	}
	  	dlg.alreadyShown = true;
	  }
  },
  UniquePopup: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
  	  var id = aa_text(data,profile,'Identifier',context);
  	  
//	  aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) {
		if (aa_bool(data,profile,'AutoClose',context)) {
			var popups = jQuery('body').find('.aa_dlg');
			for(var i=0;i<popups.length;i++)
			  if (popups[i].Dialog.Identifier == id) popups[i].Dialog.Close([],context);
		}
		dlg.Identifier = id;
//	  });
	  if (aa_bool(data,profile,'KeepPopupLocation',context)) 
	  {
		  jBart.vars.dialogLocations = jBart.vars.dialogLocations || {};
		  aa_register_handler(dlg,'BeforeClose', function(dlg,ctx) {
			  jBart.vars.dialogLocations[id] = { left: dlg.Frame.style.left , top: dlg.Frame.style.top, position: dlg.Frame.style.position, right:dlg.Frame.style.right }; 
		  });
		  aa_register_handler(dlg,'BeforeOpen', function(dlg,ctx) {
			  if (!jBart.vars.dialogLocations[id]) return;
			  dlg.OrigFixDialogPosition = dlg.FixDialogPosition;
			  dlg.FixDialogPosition = function(firstTime) {
				  if (!firstTime) {
					  if (! dlg.OrigFixDialogPosition) return;
					  return dlg.OrigFixDialogPosition(firstTime);
				  }
				  dlg.Frame.style.left = jBart.vars.dialogLocations[id].left;
				  dlg.Frame.style.top = jBart.vars.dialogLocations[id].top;
				  dlg.Frame.style.position = jBart.vars.dialogLocations[id].position;
				  dlg.Frame.style.right = jBart.vars.dialogLocations[id].right;
				  dlg.OrigFixDialogPosition(false);
			  }
		  });
	  }
  },
  DragDialog: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) {
		  var titleElem = jQuery(dlg.Frame).find(".aa_dialog_title")[0] || (jQuery(dlg.Frame).hasClass('aa_dialog_title') && dlg.Frame);
		  aa_enable_move_by_dragging(dlg.Frame,titleElem,function() { /*ajaxart_dialog_close_all_popups();*/ });
	  });	  
  },
  DialogFrame: function (profile,data,context) 
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.createFrame = function() {
		  var dlg = this;
		  var allText = '<table cellpadding="0" cellspacing="0"><tbody class="aa_dlg_tbody">'
			  +  '<tr><td class="aa_dialog_title"/></tr>'
			  +  '<tr><td style="vertical-align:top"><div class="aa_dialogcontents"/></td></tr>'
		      +  '<tr><td class="aa_dialogbuttons"/></tr></tbody></table>';
		  var jFrame = jQuery(allText);
		  aa_enable_move_by_dragging(jFrame[0],jFrame.find(".aa_dialog_title")[0],function() { ajaxart_dialog_close_all_popups(); });
		  return jFrame[0];
	  }
  },
  ToggleDialog: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];

	  aa_register_handler(dlg,'BeforeOpenFunc', function(dlg,ctx) {
		 if (dlg.onElem && dlg.onElem.jbDialog && ajaxart.isattached(dlg.onElem.jbDialog.Frame)) {
			 dlg.onElem.jbDialog.Close();
			 dlg.onElem.jbDialog = null;
			 dlg._cancelOpen = true;
		 } 
	  });
  },
  PopupFrame: function (profile,data,context) 
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.PopupStyle = aa_text(data,profile,'Style',context); 
	  dlg.createFrame = function() {
		  var allText = '<div class="aa_popup aa_dialogcontents" style="'+this.PopupStyle+'"/>';
		  return jQuery(allText)[0];
	  }
  },
  Css: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) {
		var cls = aa_attach_global_css(aa_text(data,profile,'Css',context));
		jQuery(dlg.Frame).addClass(cls);
	  }); 
  },
  HoverPopup: function (profile,data,context)
  {
	var dlg = context.vars._Dialog[0];

	aa_register_handler(dlg,'BeforeOpen', function(dlg,ctx) 
	{
		// close all other hover-popus
		var new_popups = [];
		for (var i in ajaxart.dialog.openPopups) {
			var popup = ajaxart.dialog.openPopups[i];
			if (popup.Dlg && popup.Dlg.HoverPopup && popup.Dlg != dlg)
				popup.Dlg.Close();
			else
				new_popups.push(popup)
		}
		ajaxart.dialog.openPopups = new_popups;
	});
	aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) {
		dlg.HoverPopup = true;
		dlg.OrigMouseOut = dlg.onElem.onmouseout;
		dlg.OrigMouseOver = dlg.onElem.onmouseover;
		dlg.StartClosingPopup = function()	{
    		setTimeout(function() { 
    			if (dlg.Frame && ! dlg.Frame.isInside) { dlg.OK(data,context); }
    		},200);
		}
		dlg.onElem.onmouseout = function() {
			if (dlg.Frame) dlg.Frame.isInside = false;
			if (!dlg.Frame.hasFocus) dlg.StartClosingPopup();
			if (dlg.OrigMouseOut) dlg.OrigMouseOut();
		}
		dlg.onElem.onmouseover = function() {
			if (dlg.Frame) dlg.Frame.isInside = true;
		}
    	dlg.Frame.onmouseover = function() { dlg.Frame.isInside = true; }
    	dlg.Frame.onmouseout = function() { 
    		dlg.Frame.isInside = false;
    		if (!dlg.Frame.hasFocus) dlg.StartClosingPopup();
    	}
    	dlg.Frame.onfocus = function() { dlg.Frame.hasFocus = true; }
    	dlg.Frame.onblur = function() { dlg.Frame.hasFocus = false; }
    });
    aa_register_handler(dlg,'AfterClose', function(dlg,ctx) {
    	dlg.onElem.onmouseout = dlg.OrigMouseOut;
    	dlg.onElem.onmouseover = dlg.OrigMouseOver;
    });
  },
  CloseWhenClickingOutside: function (profile,data,context)
  {
		var dlg = context.vars._Dialog[0];
		dlg.Orig_mousedown = (window.captureEvents) ? window.onmousedown : document.onmousedown;
		var ignoreLaunchingElement = aa_bool(data,profile,'IgnoreLaunchingElement',context);
		
		function isChild(child,parent) {
			if (!child) return false;
			if (child == parent) return true;
			return isChild(child.parentNode,parent);  
		}
		function captureClick(e) {
			var dlg = context.vars._Dialog[0];
		    var elem = jQuery( (typeof(event)== 'undefined')? e.target : (event.tDebug || event.srcElement)  );

		    if (elem.parents('html').length == 0) return; // detached - should not close..?
		    if (dlg.Frame == elem.parents('.aa_dlg')[0] || elem.hasClass('aa_dlg')) return;  // clicking inside us should not close
		    if (ignoreLaunchingElement && isChild(elem[0],dlg.onElem)) return;
		    
		    dlg.OK(data,context);
		}
		
		setTimeout( function() { 	
			if (window.captureEvents) window.onmousedown=captureClick;
			else document.onmousedown=captureClick;
		},1);
		
	  aa_register_handler(dlg,'AfterClose', function(dlg,ctx) 
		{
	    	if (window.captureEvents) 
	    	  window.onmousedown = dlg.Orig_mousedown;
	    	else 
	    	  document.onmouseclick = dlg.Orig_mousedown;
		});	
  },
  OKOnEnter: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.OKOnEnter = aa_bool(data,profile,'Enabled',context);
	  aa_register_handler(dlg,'KeyDown', function(e,ctx) 
	  {
		 if(e.keyCode != 13 || !dlg.OKOnEnter) return;
		 
		 var elem = (typeof(event)== 'undefined')? e.target : event.srcElement;
	     if (!elem || elem.tagName.toLowerCase() != 'textarea') 
	       dlg.OK(data,context);
	  });
  },
  CloseOnEsc: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.CloseOnEsc = aa_bool(data,profile,'Enabled',context);
	  aa_register_handler(dlg,'KeyDown', function(e,ctx) 
	  {
		 if(e.keyCode == 27) dlg.Cancel();
	  });
  },
  ButtonsHorizontal: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.ButtonsControl = function(data1,ctx) {
		var out = jQuery('<table cellpadding="4"><tr/></table>')[0];
		var align_param = aa_text(data,profile,'Align',context);
		var align = align_param;
		if (align_param == "auto")
			align = dlg.Rtl ? 'left' : 'right';
		jQuery(out).css('float',align);
		var tr = jQuery(out).find('tr')[0];
		for(var i=0;i<this.Buttons.length;i++) {
			var btn = this.Buttons[i].Control(data1,ctx)[0];
			var td = jQuery('<td/>')[0];
			td.appendChild(btn);
			tr.appendChild(td);
		}
		return out;
	  }
  },
  DialogShadow: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) 
	  {
		var shade1 = jQuery('<tr class="dialog_right_shadow_tr"><th class="dialog_shadow_extra_th"/>'
					      + '<th rowspan="6" class="dialog_right_shadow_th"><div class="dialog_right_shadow" /></th></tr>');
	
		var shade2 = jQuery('<tr class="dialog_bottom_shadow" ><td><span class="dialog_bottom_outer" ><span class="dialog_bottom_inner" ></span>'
				          + '</span></td></tr>');
		
		if (ajaxart.isIE) { // causes the title to be two lines (we should refactor the dialog not to use table)
			shade1.find('.dialog_right_shadow_th').css('display','none');
			shade2.css('display','none');
		}
		
		var tbody = jQuery(dlg.Frame).find('tbody')[0];
		tbody.insertBefore(shade1[0],tbody.firstChild);
		tbody.appendChild(shade2[0]);
		jQuery(dlg.Frame).css('border','none');
	  });
  },
  Size: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  aa_register_handler(dlg,'BeforeOpen', function(dlg,ctx) 
	  { 
		  var top = dlg.ContentsPlaceholder();
		  aa_set_element_size(top,aa_text_with_percent(data,profile,'Size',context));
		  aa_set_element_size(top,aa_text_with_percent(data,profile,'MaxSize',context),"max-");
	  });
  },
  Resizer: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  aa_register_handler(dlg,'BeforeOpen', function(dlg,ctx) 
	  { 
		  var top = dlg.ContentsPlaceholder();
		  
		  aa_addResizer(top,{
		  	onResize: function(width,height) {
			    jQuery(top).width(width).height(height).css('max-width',width+'px').css('max-height',height+'px');

			    var right = jQuery(dlg.Frame).css('right');
			    if (right && right != 'auto') {
				    var dlgLeft = aa_absLeft(dlg.Frame);
				    jQuery(dlg.Frame).css('left',dlgLeft + 'px').css('right','');
			    }
			},
		    insertResizer1: function(element,resizer) {
			  element.appendChild(resizer);
			}
  		  });
	  });
  },
  CloseDialogFrame: function (profile,data,context)
  {
	  var topDialog = aa_top_dialog();
	  if (!topDialog) return;
	  if (topDialog.OldDialog) aad_close_dialog_old('Cancel',true);
	  else topDialog.Dialog.Close([],context);
  },
  CloseContainingDialog: function (profile,data,context)
  {
	  var ctrl = context.vars.ControlElement[0];
	  while (ctrl) {
		  var dialog = ctrl.Dialog;
		  if (dialog) 
			return dialog.Cancel(dialog.Data,dialog.Context);
		  ctrl = ctrl.parentNode;
	  }
  },
  InplaceDialog: function (profile,data,context)
  {
	var previewValue =  ajaxart.inPreviewMode;
	ajaxart.inPreviewMode = true;
    ajaxart.runNativeHelper(data,profile,'OpenDialog',context);
    ajaxart.inPreviewMode = previewValue;
    
    var dialog = aa_openDialogs[aa_openDialogs.length-1];
    if (!dialog || dialog.Title != aa_text(data,profile,'Title',context)) return;
    jQuery(dialog.Frame).addClass('aa_inplace_dialog');
    var out = dialog.Frame;
    dialog.Cancel(dialog.Data,dialog.Context);
    var field = context.vars._Field[0];
    field.Control = function() { 
    	return [out]; 
    }
  },
  CloseDialog: function (profile,data,context)
  {
	  var topDialog = aa_top_dialog();
	  if (!topDialog) return;
	  if (topDialog.OldDialog) {
		  // close by clicking on the OK button (because of async checks etc.)
		  var okButton = jQuery(topDialog.dialogContent).find('.OKButton')[0];
		  if (okButton) {
		    aa_fire_event(okButton,'mousedown',context,{});
		    aa_fire_event(okButton,'mouseup',context,{});
		  }
	  }
	  else {
		  if (aa_text(data,profile,'CloseType',context) == "OK")
			  topDialog.Dialog.OK(topDialog.Dialog.Data,topDialog.Dialog.Context);
		  else
			  topDialog.Dialog.Cancel(topDialog.Dialog.Data,topDialog.Dialog.Context);
	  }
  },
  CloseIconOld: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) 
	  {
		var jTitle = jQuery(dlg.Frame).find('.aa_dialog_title');
		if (jTitle.length == 0)
			jTitle = jQuery(dlg.Frame);
		if (aa_bool(data,profile,'UseXCharacter',context)) {
			var img = jQuery('<div class="aa_dialog_caption_close xchar"><div></div>');
			img.find('>div').text(aa_text(data,profile,'XCharacter',context));
			img = img[0];
		} else {
			var src = aa_text(data,profile,'Image',context);
			var img = jQuery('<img class="aa_dialog_caption_close" src="'+src+'"/>')[0];
		}
		jQuery(img).addClass( aa_attach_global_css(aa_text(data,profile,'Css',context),null,'close_dialog_old') );
		img.onclick = function() { dlg.Cancel(dlg.Data,ctx); }
		
		jTitle[0].insertBefore(img,jTitle[0].firstChild);
	  });
  },
  CloseIcon: function (profile,data,context)
  {
	  var style = aa_first(data,profile,'Style',context);

	  aa_register_handler(context.vars._Dialog[0],'AfterOpen', function(dlg,ctx) {
		  aa_renderStyleObject(style,{
			 dialog: dlg.Frame,
			 CloseDialog: function() { dlg.Cancel(dlg.Data,ctx); }
		  },ctx)
	  },'CloseIcon');
  },
  AutomaticFocus: function (profile,data,context)
  {
	  if (ajaxart.inPreviewMode) return;
	  var dlg = context.vars._Dialog[0];
	  var focus_on = aa_text(data,profile,'FocusOn',context);
	  aa_register_handler(dlg,'AfterOpen', function(dlg,ctx) {
		  if (focus_on == "first input") {
				setTimeout(function() {
					if (dlg.Disabled) return;
					if (ajaxart.controlOfFocus)
	    	  	  		ajaxart.controlOfFocus.IgnoreBlur = true;
					
					var inp = jQuery(dlg.Contents).find('input');
					if (inp.length > 0) inp[0].focus();
				},1);
		  }
	  },"AutomaticFocus");
  },
  NoCancel: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.NoCancel = true;
	  if (!dlg.Buttons) return;
	  for(var i=0;i<dlg.Buttons.length;i++) {
		  if (dlg.Buttons[i].ID == 'OK') {
			  var okbtn = ajaxart.runNativeHelper(data,profile,'OKButton',context)[0];
			  if (okbtn) dlg.Buttons[i] = okbtn;
		  }
		  if (dlg.Buttons[i].ID == 'Cancel') {
			  dlg.Buttons.splice(i,1);
		  }
	  }
  },
  DisableBodyScroll: function (profile,data,context)
  {
	  var dlg = context.vars._Dialog[0];
	  dlg.DisableBodyScroll = aa_bool(data,profile,'Enabled',context);
	  aa_register_handler(dlg,'BeforeOpen', function(dlg,ctx) 
	  {
		  if (!dlg.DisableBodyScroll) return;
		  if (!jBart.dialogs.DisableBodyScroll_counter) jBart.dialogs.DisableBodyScroll_counter =0;
		  jBart.dialogs.DisableBodyScroll_counter++;
		  
		  jQuery('body').css('overflow','hidden');
	  });
	  aa_register_handler(dlg,'AfterClose', function(dlg,ctx) 
	  {
		  if (!dlg.DisableBodyScroll) return;
		  if (--jBart.dialogs.DisableBodyScroll_counter == 0)
			jQuery('body').css('overflow','auto');
	  });
  },
  ScreenCover: function (profile,data,context) 
  {
	  var dlg = context.vars._Dialog[0];
	  var alreadyExists = dlg.CoverColor != null;
	  dlg.CoverColor = aa_text(data,profile,'Color',context);
	  dlg.CoverOpacity = aa_text(data,profile,'Opacity',context);
	  if (alreadyExists) return;
	  aa_register_handler(dlg,'BeforeOpen', function(dlg,ctx) 
	  {
		//var wrappingDiv = jQuery('<div class="dialog_cover" style="position:absolute;top:0px;left:0px;" />')[0];
		var wrappingDiv = jQuery('<div class="dialog_cover" style="position:fixed;top:0px;left:0px;" />')[0];
		
		wrappingDiv.style.backgroundColor = dlg.CoverColor;
		wrappingDiv.onmousedown = function(e) {
			e = e || event;
			if (e == null) return;
		    if (typeof(Event) != 'undefined' && Event.resolve) Event.cancelBubble(Event.resolve(e)); 
		}
		wrappingDiv.Dialog = dlg;
		var scree_size = aa_screen_size();
		//wrappingDiv.style.width = Math.max(document.documentElement.scrollWidth,scree_size.width) -18 + "px";
		//wrappingDiv.style.height = Math.max(document.documentElement.scrollHeight,scree_size.height) -18 + "px";
		wrappingDiv.style.width = '100%';
		wrappingDiv.style.height = '100%';
		wrappingDiv.style.zIndex = aa_int(data,profile,'MinZIndex',context) + aa_noOfOpenDialogs;
		wrappingDiv.style.opacity = dlg.CoverOpacity;
		wrappingDiv.style.filter = "alpha(opacity=" + dlg.CoverOpacity *100 + ")";	// IE	
		wrappingDiv.tabIndex = 0;
		
	    jQuery(wrappingDiv).keydown( function(event){
	    	if(event.keyCode == 27)	wrappingDiv.Dialog.Cancel();
	    } );
		if (!ajaxart.inPreviewMode) document.body.appendChild(wrappingDiv);
	  });
	  aa_register_handler(dlg,'AfterClose', function(dlg,ctx) 
	  {
		  var covers = jQuery('body').find('.dialog_cover');
		  for(var i=0;i<covers.length;i++)
			  if (covers[i].Dialog == dlg) {
				  aa_remove(covers[i],true);
				  return;
			  }
	  });
  },
  TopDialog: function (profile,data,context)
  {
	  var topDialog = aa_top_dialog();
	  if (!topDialog) return [];
	  if (aa_bool(data,profile,'ReturnContent',context))
		  return [topDialog.Dialog.Contents];
	  else
		  return [topDialog.Dialog];
  },
  CloseAllDialogs: function (profile,data,context)
  {
	  for (var i=0; i<aa_openDialogs.length; i++)
		  aa_openDialogs[i].Close();
	  aa_openDialogs = [];
	  return [];
  },
  CloseDialogByID: function (profile,data,context)
  {
	  var id = aa_text(data,profile,'Identifier',context);
 	  var popups = jQuery('body').find('.aa_dlg');
	  for(var i=0;i<popups.length;i++) {
		  if (id != '' && popups[i].Dialog.Identifier == id) { 
			  popups[i].Dialog.Close();
			  return;
		  }
	  }
  }
});


function aa_invoke_dialog_handlers(eventFuncs,dlg,context)
{
	if (eventFuncs)
		for(var i=0;i<eventFuncs.length;i++)
			eventFuncs[i](dlg,context);
}

function aa_top_dialog()
{
  var dialogs = jQuery('body').find('.aa_dlg');
  var maxCounter = 0,topDialog=null;
  for(var i=0;i<dialogs.length;i++) {
	  if (dialogs[i].counter > maxCounter) { topDialog = dialogs[i]; maxCounter = topDialog.counter; }
  }
  if (openDialogs.length == 0) return topDialog;
  
  var topOldDialog = openDialogs[openDialogs.length-1];
  if (!topDialog || topDialog.noOfOpenDialogs < topOldDialog.noOfOpenDialogs) return topOldDialog;
  
  return topDialog;
}

function aa_enable_move_by_dragging(draggable_frame,draggable_area,onstartdrag,onenddrag)
{
	if (!draggable_area) return;
	jQuery(draggable_area).mousedown(function(e) {
		  e = e || event;
		  if (! draggable_frame.Moving) {
			  	var right_pos = (draggable_frame.style.right.split("px").length > 1) ? draggable_frame.style.right.split("px")[0] : null;
			  	draggable_frame.Moving = { mouse_x: (e.clientX || e.pageX), mouse_y: (e.clientY || e.pageY), 
				  	frame_x: draggable_frame.offsetLeft, frame_y: draggable_frame.offsetTop, frame_right: right_pos };
			  	onstartdrag();
			  	ajaxart_disableSelection(document.body);
			  	ajaxart_disableSelection(jQuery(draggable_area).parents(".aa_dlg")[0]);
		  }
		  var mouse_move = function(e) {
			  e = e || event;
			  var top = Math.max( (e.clientY || e.pageY) - draggable_frame.Moving.mouse_y + draggable_frame.Moving.frame_y, 0);
			  draggable_frame.style.top = top + "px";
			  draggable_frame.style.bottom = 'inherit';
			  if (draggable_frame.Moving.frame_right) {	//	anchoring to the right side
				  draggable_frame.style.right = draggable_frame.Moving.frame_right - ((e.clientX || e.pageX) - draggable_frame.Moving.mouse_x) + "px";
			  } else {
				  draggable_frame.style.left = (e.clientX || e.pageX) - draggable_frame.Moving.mouse_x + draggable_frame.Moving.frame_x + "px";
				  draggable_frame.style.right = 'inherit';
			  }
		  }
		  var mouse_up = function(e) {
			  e = e || event;
			  draggable_frame.Moving = null;
			  window.onmousemove = null; window.onmouseup =null;  document.onmouseup=null; document.onmousemove=null; 
			  ajaxart_restoreSelection(document.body);
			  ajaxart_restoreSelection(jQuery(draggable_area).parents(".aa_dlg")[0]);
			  if (onenddrag) onenddrag();
		  }
		  if (window.captureEvents){ window.onmousemove = mouse_move;window.onmouseup = mouse_up; }
		  else { document.onmouseup=mouse_up;	document.onmousemove=mouse_move;  }
	  });
}

aa_gcs("dialog", {
	  TogglePopup: function (profile,data,context)
	  {
		var onElem = aa_first(data,profile,'OnElement',context);
		var widthOption = aa_text(data,profile,'WidthOption',context);
		if (widthOption == '') widthOption = 'launcher width';
		var width = aa_text(data,profile,'Width',context);
		var height = aa_text(data,profile,'Height',context);
	    var popupdata = ajaxart.run(data,profile,'PopupData',context);
	    var closeOnEnter = aa_bool(data,profile,'CloseOnEnter',context);
	    var closeOnDoubleClick = aa_bool(data,profile,'CloseOnDoubleClick',context);
	    var popupCssClass = aa_text(data,profile,'PopupCssClass',context);
	    var returnFocusTo = aa_first(data,profile,'ReturnFocusTo',context);
	    var style = aa_text(data,profile,'Style',context);
		for(i=0; i<ajaxart.dialog.openPopups.length; i++)
		{
			if (ajaxart.dialog.openPopups[i].onElem == onElem)
			{
				var popupContents = ajaxart.dialog.openPopups[i].contents;
			    var popup = jQuery(popupContents).parents('.aapopup');
			    if (popup.length > 0 && popup[0].parentNode != null) {
			    	aa_remove(popup[0],true);
			    }
				
			    var newArr= [];
			    for(var j in ajaxart.dialog.openPopups)
			    {
			    	if (i != j)
			    		newArr.push( ajaxart.dialog.openPopups[j] );
			    }
			    aa_uncapture_for_popup(ajaxart.dialog.openPopups[i]);
			    ajaxart.dialog.openPopups = newArr;
			    
				return ["true"];
			}
		}
		ajaxart.setVariable(context,"_LaunchingElement",[onElem]);
		var contents = aa_first(popupdata,profile,'Contents',context);
		if (!contents) return;
		var popupObj = {contents: contents , onElem: onElem, profile: profile, returnFocusTo: returnFocusTo };
		contents.PopupObj = popupObj;
		// console.log("TogglePopup " + popupObj.onElem.parentNode.Field.Id);
		if (contents != null)
			ajaxart.dialog.openPopups.push(popupObj);
		if (onElem == null || contents == null ) { ajaxart.log("toggle popup - empty contents or no launching element","warning"); return []; }
		contents.LaunchingElement = onElem;
		if (onElem.offsetParent == null) { ajaxart.log("toggle popup - launching element has no offsetParent","warning");  }
		var jOnElem = jQuery(onElem);
		var popup = jQuery(document.createElement("div")).addClass("aapopup " + popupCssClass);
		popup[0].profile = profile;
		popup[0].context = context;
		popup[0].data = data;
		if (style != "") {
			if (style.indexOf(":") > 0)
				aa_setCssText(popup[0],style);
			else
				popup[0].className = popup[0].className + style;
		}
		if (! aa_intest)
		{
			popup[0].style.display = 'none';
			popup[0].display = 'none';
		}
		jQuery(contents).appendTo(popup);
		if (aa_bool(data,profile,'ShowCloseButton',context))
		{
			var deleteDiv = jQuery('<div style="padding: 0 0 16px 16px; position:absolute; top: 7px; right:4px; cursor:pointer;" />')[0];
			deleteDiv.style.background = "url(" + aa_text(data,profile,'CloseImage',context) + ') no-repeat';
			deleteDiv.popup = popupObj;
			deleteDiv.onmousedown = function() {
				aa_closePopup(this.popup);
			}
			popup[0].insertBefore(deleteDiv,popup[0].firstChild);
		}

		var registerFunc = function(popup,popupdata,popupObj,closeOnEnter) {
			popup[0].onkeyup = function(e) { 
				e = e || event;
				if (typeof(e) == "undefined") e = event;
				if (closeOnEnter && e.keyCode == 13 && this.parentNode != null) // ENTER
				{
			    	var elem = jQuery( (typeof(event)== 'undefined')? e.target : event.srcElement  );
			    	if (elem[0] && elem[0].tagName.toLowerCase() == 'textarea') return;
					
//					this.parentNode.removeChild(this);
//					aa_element_detached( this );
					aa_closePopup(popupObj);
					ajaxart.run(popupdata,profile,'OnSuccess',context);
					ajaxart_stop_event_propogation(e);
				}
				if (e.keyCode == 27) {
					if (ajaxart.currentContextMenu == null || $(ajaxart.currentContextMenu).css("display") != 'block' ) {// ESC
//						this.parentNode.removeChild(this);
//						aa_element_detached(this);
						ajaxart.run(data,profile,"OnCancel",context);
						ajaxart_stop_event_propogation(e);
						aa_closePopup(popupObj);
					}
				}
			};
			if (closeOnDoubleClick)
			  popup[0].ondblclick = function() {
				this.parentNode.removeChild(this);
				aa_element_detached( this );
				ajaxart.run(popupdata,profile,'OnSuccess',context);
			  }
		}
		registerFunc(popup,popupdata,popupObj,closeOnEnter);
		
		window.aa_noOfOpenDialogs = window.aa_noOfOpenDialogs || 0;

		var xydelta = aa_text(data,profile,'XYCorrections',context).split(',');
		
		if (jOnElem.parents('.jbstudio').length > 0) popup.addClass('jbstudio');
		
		if (jOnElem.parents('.right2left').length > 0)
		{
			popup.addClass('right2left');
		}
		else
		{
			popup.css('left',aa_absLeft(onElem)+parseInt(xydelta[0]));
			if (width == "" && widthOption == 'launcher width') 
				jQuery(popup).css('min-width',jOnElem.width() + 100); //width = jOnElem.width()+"px";
			else
				popup[0].style.minWidth = width;
			//popup[0].style.minWidth = width;
		}
		++aa_dialogCounter;
		var zindex = aad_dialog_zindex(2000 + aa_dialogCounter+1,popup[0]);
		popup.css('z-index',zindex);
		//popup.css('top',aa_absTop(onElem) + jOnElem[0].clientHeight + 50); // + parseInt(xydelta[1]));
		
		if (height != "") popup.height(height);
		//popup.height('100px');
		//popup.width('60px');
		
		popup.appendTo("body");
		aa_element_attached(popup);

		var newcontext = ajaxart.clone_context(context);
		ajaxart.setVariable(newcontext,"ControlElement",[contents]);
		if (ajaxart.fieldscript(profile,'AutoFocusOn',true) != null && !ajaxart.inPreviewMode)
		{
			var autoFocusParams = ajaxart.calcParamsForRunOn(newcontext,ajaxart.run(data,profile,'AutoFocusOn',newcontext));
			var autoFocusOn = ajaxart.getControlElement(autoFocusParams);
			if (autoFocusOn.length > 0 && 'focus' in autoFocusOn[0])
			{
			    var timeout = 1;
			    if (ajaxart.isSafari || ajaxart.isFireFox) timeout = 100;
		    	var set_focus = function(e) {  setTimeout(function() 
		    	{
		    		e = e || event;
	    	  	  	if (ajaxart.controlOfFocus != null)
	    	  	  		ajaxart.controlOfFocus.IgnoreBlur = true;
		    		if (jQuery(e).parents("body").length > 0) e.focus();  
		    	},timeout) }
		    	set_focus(autoFocusOn[0]);
			}
		}

		var init_popup = function(popup,width,widthOption,popupObj) { return function() {
			ajaxart.dialog.positionPopup(popup[0], onElem, null, false);
			if (width == '' && widthOption == 'launcher width' && jOnElem[0].offsetWidth > 2)
				popup.css('min-width',jOnElem[0].offsetWidth - 2); // potential bug - 2 for the border
			if (popup.hasClass('right2left'))
			{
				var lanchingElementRight = aa_absLeft(onElem) + jOnElem[0].offsetWidth;
				var popupLeft = lanchingElementRight - popup[0].offsetWidth;
				popup.css('left',popupLeft + 'px');
				popup.css('right','');
			}
			aa_capture_for_popup(popupObj);
			popupObj.initialized = true;
			if (aa_bool(data,profile,'AutoCloseOnMouseOut',context)) 
			{
				popup[0].onmouseover = function() { popup[0].isInside = true; }
				popup[0].onmouseout = function() { popup[0].isInside = false; setTimeout(function() {
					if (! popup[0].isInside)
						aa_closePopup(popup[0]);
				},500)}
			}
			if (ajaxart.isIE) // avoid scroll - IE bug?
				popup.height((popup.height() +2) + 'px');
			popup[0].style.display = '';
			popup[0].display = '';
			ajaxart.run(data,profile,'OnPopupOpen',aa_ctx(context, {ControlElement: [popup[0]]}) );
		}}
		setTimeout(init_popup(popup,width,widthOption,popupObj),1);
			
	  },
	  ClosePopup: function (profile,data,context)
	  {
		  var counter = 10;
		  if (aa_bool(data,profile,'AllPopups',context))
			  while (ajaxart.dialog.openPopups.length > 0 && counter > 0)
			  {
				  aa_closePopup(ajaxart.dialog.openPopups[ajaxart.dialog.openPopups.length-1]);
				  counter--;
			  }
		  if (ajaxart.dialog.openPopups.length > 0)
			  return aa_closePopup(ajaxart.dialog.openPopups[ajaxart.dialog.openPopups.length-1]);
	  }
});

jBart.disableSelections = function() {
  	ajaxart_disableSelection(document.body);
  	var frames = document.frames;
}
jBart.restoreSelections = function() {
	ajaxart_restoreSelection(document.body);
  	var frames = document.frames;
}

// jBart.addResizer assumes element has a div parent, and that it has no visible siblings 
function aa_addResizer(element,resizeProperties)
{
	var defaultProperties = { image: aa_base_images() + '/resizer.gif', width: '16px', height: '16px', minWidth: 20, minHeight: 20,
		zIndex: 10,
	  onResize: function(width,height) {},
	  onResizeEnd: function(width,height) {},
	  insertResizer: function(element,resizer) {
		  element.parentNode.appendChild(resizer);
	  }
	};
	
	resizeProperties = $.extend(defaultProperties,resizeProperties);
	
	if (!element || !element.parentNode) return;
	jQuery(element.parentNode).css('position','relative');
	var jResizer = jQuery('<div style="position:absolute;bottom:0;right:0;background-repeat:no-repeat;" />');
	jResizer.css('background','url('+resizeProperties.image+')').css('width',resizeProperties.width).css('height',resizeProperties.height).css('cursor','se-resize').
		css("z-index",resizeProperties.zIndex);
	resizeProperties.insertResizer(element,jResizer[0]);

	jResizer.mousedown(function(e) {
		  if (! jResizer[0].jbResizingProps) {
		  	var width = jQuery(element).width();
		  	var height = jQuery(element).height();
		  	jResizer[0].jbResizingProps = { mouse_x: (e.clientX || e.pageX), mouse_y: (e.clientY || e.pageY), width: width, height: height };
		  	jBart.disableSelections();

		  	var resizeCover = jQuery('<div id="aa_resize_cover" style="height:100%; width: 100%; background:pink;z-index:10000; opacity:0; filter: alpha(opacity=0);position:fixed;top:0;left:0;top:0;bottom:0"/>');
			jQuery('body').append(resizeCover);
		  }
		  var mouse_move = function(e) {
			  e = e || event;
			  var props = jResizer[0].jbResizingProps;
			  var mouse_x = (e.clientX || e.pageX), mouse_y = (e.clientY || e.pageY);
			  var newWidth = props.width + (mouse_x - props.mouse_x);
			  var newHeight = props.height + (mouse_y - props.mouse_y);
			  if (newWidth > resizeProperties.minWidth) jQuery(element).width(newWidth); 
			  if (newHeight > resizeProperties.minHeight) jQuery(element).height(newHeight);
			  
			  resizeProperties.onResize(newWidth,newHeight);
		  }
		  var mouse_up = function(e) {
			  e = e || event;
			  jResizer[0].jbResizingProps = null;
			  window.onmousemove = null; window.onmouseup =null;  document.onmouseup=null; document.onmousemove=null; 
		  	  jBart.restoreSelections();
		  	  resizeProperties.onResizeEnd(jQuery(element).width(),jQuery(element).height());
		  	  jQuery('#aa_resize_cover').remove();

		  }
		  if (window.captureEvents){ window.onmousemove = mouse_move;window.onmouseup = mouse_up; }
		  else { document.onmouseup=mouse_up; document.onmousemove=mouse_move; }
    });
}

function aad_dialog_zindex(proposedZIndex,popupElement,isStudio) {
//	return proposedZIndex;

	if (typeof(isStudio) === 'undefined')
		isStudio = $(popupElement).hasClass('jbstudio') || $(popupElement).hasClass('jbstudio_dlg') || $(popupElement).hasClass('xtml_dt_popup');

	var max = proposedZIndex-1,zindex;

	if (isStudio) {
		// we should also be jbstudio_dlg
		var otherStudioPopups = $('.jbstudio_dlg, .aaeditor');
		for(var i=0;i<otherStudioPopups.length;i++) {
			try {
				zindex = parseInt(otherStudioPopups[i].style.zIndex || '0') || 0;
			} catch(e) {
				zindex = 0;
			}
			max = Math.max(max,zindex+2);
		}
	} else {
		var openPopus = aa_open_popups();
		for(var i=0;i<openPopus.length;i++) {
			max = Math.max(max,openPopus[i].zindex+2);
		}
	}

	return max+1;
}













aa_gcs("field", {
	DynamicFields: function (profile,data,context)
	{
		var fieldItems = ajaxart.run(data,profile,'FieldItems',context);
		var out = [];

		for(var i=0;i<fieldItems.length;i++) {
			var field = aa_first([fieldItems[i]],profile,'Field', aa_ctx(context,{_FieldItem: [fieldItems[i]] })); 
			fixField(field,fieldItems[i]);
			out.push(field);
		}
		return out;

		function fixField(field,fieldItem) {
			field.FieldItem = fieldItems[i];
			aa_bind(field,'ModifyInstanceContext',function(args) {
				var ctx2 = aa_merge_ctx(context,args.Context);
				args.Context.vars._FieldItem = [field.FieldItem];
			},'DynamicFields',null,true);	// add as first listener, so other handlers can use _FieldItem
		}
	},
	Text: function (profile,data,context)   // gc of field.Text
	{
		var field = { isObject : true};
		var ctx2 = aa_ctx(context,{_Field: [field]} );

		field.Id = aa_text(data,profile,'ID',ctx2);
		field.ID = [field.Id];
		field.Title = aa_multilang_text(data,profile,'Title',ctx2);
		field.HideTitle = aa_bool(data,profile,'HideTitle',ctx2);
		field.CellPresentation = 'control';
		field.Style = aa_first(data,profile,'Style',context);
		
		field.TitleAsText = ! aa_paramExists(profile,'Text',true);
		
		field.Control = function(field_data,ctx) {
			var text = aa_multilang_text(field_data,profile,'Text',aa_merge_ctx(ctx2,ctx));
			if (!text && field.TitleAsText) text = field.Title;
			text = text.replace(/\n/g,"<br/>");
		
			return [ aa_renderStyleObject(field.Style,{ text: text, data: field_data[0] },ctx) ];
		}
		field.Text = function(field_data,ctx) {
			var text = aa_multilang_text(field_data,profile,'Text',aa_merge_ctx(ctx2,ctx));
			if (!text && field.TitleAsText) text = field.Title;
			text = text.replace(/\n/g,"<br/>");

			return [text];
		}
		ajaxart.runsubprofiles(data,profile,'FieldAspect',ctx2);
		return [field];
	},
	XtmlControl: function (profile,data,context)
	{
		var field = { isObject : true };
		field.Title = aa_multilang_text(data,profile,'Title',context);
		field.Id = aa_text(data,profile,'ID',context);
		field.ID = [field.Id];
		field.FieldData = function(data1) { return data1; }
		field.CellPresentation = ["control"];
		
		aa_setMethod(field,'Control',profile,'Control',context);
		ajaxart.runsubprofiles(data,profile,'FieldAspect',aa_ctx(context,{_Field: [field]} ));
		
		return [field];
	},
	JavaScriptControl: function(profile,data,context)
	{
		var field = { isObject : true };
		field.Title = aa_multilang_text(data,profile,'Title',context);
		field.Id = aa_text(data,profile,'ID',context);
		field.ID = [field.Id];
		field.FieldData = function(data1) { return data1; }
		field.CellPresentation = ["control"];
		
		var html_compiled = ajaxart.compile(profile,'Html',context);
		var js_func = aa_get_func(aa_text(data,profile,'JavaScript',context));
			
		var get_ctrl = function(data1,ctx) {
			var html = ajaxart_runcompiled_text(html_compiled, data1, profile, "Html" ,context);
			var control = $(html);
			if (control.length > 1) {
				var control2 = $('<div/>').append(control);
				control = control2;
			}
			if (html == "") control = [];
			var ctrl = (control.length > 0) ? control[0] : null;
			var ctrl_after_js;
			if (js_func) {
				var data_item = (data1.length > 0) ? data1[0] : null;
				ctrl_after_js = js_func(data_item,ctrl,ctx);
			}
			var out = (ctrl_after_js) ? ctrl_after_js : ctrl;
			if (!out) return [];
			$(out).addClass(aa_attach_global_css(aa_text(data,profile,'Css',context)));
			return [out];
		}
		var register = function(get_ctrl) {
			ajaxart_addScriptParam_js(field,'Control',get_ctrl,context);
		}
		register(get_ctrl);
		ajaxart.runsubprofiles(data,profile,'FieldAspect',aa_ctx(context,{_Field: [field]} ));
		
		return [field];
	},
	IsGroup: function (profile,data,context)
	{
		if (data.length == 0) return [];
		if (data[0].Fields != null) return ["true"];
		return [];
	},
	Fields: function (profile,data,context)
	{
		return ajaxart.runsubprofiles(data,profile,'Field',context);
	},
	InnerReferenceFields: function (profile,data,context)
	{
		var refFields = context.vars._ReferenceFields;
		if (refFields == null || refFields.length ==0) return [];
		var path = aa_text(data,profile,'Path',context);
		var out = refFields[0].FieldById[path.split('@').pop()];
		if (out != null && out.Fields != null) return out.Fields;
		return [];
	},
	SubFields: function (profile,data,context)
	{
		var parent = aa_first(data,profile,'Parent',context);
		var fields = [];
		var fillFields = function(parent) {
			var inner_fields = parent.Fields;
			for(var i=0;i<inner_fields.length;i++) {
				if (! inner_fields[i].IsGroup) fields.push(inner_fields[i]);
				else if (inner_fields[i].IsVirtualGroup ) fillFields(inner_fields[i]);
			}
		}
		if (parent != null)	fillFields(parent);
		return fields;
	},
	RefreshField: function(profile,data,context)
	{
		var fieldID = aa_text(data,profile,'FieldID',context);
		if (!fieldID) return;
		var field_ids = fieldID.split(',');
		var scope = aa_text(data,profile,'Scope',context);
		aa_refresh_field(field_ids,scope,aa_bool(data,profile,'FireOnUpdate',context),aa_first(data,profile,'Transition',context),context);
	},
	ToggleFieldClass: function(profile,data,context) {
		var ctrl = aa_find_field_controls({
			scope: aa_text(data,profile,'Scope',context),
			fieldID: aa_text(data,profile,'FieldID',context)
		})[0];
		var className = aa_text(data,profile,'ClassName',context);
		var show = aa_bool(data,profile,'ConditionForClass',context);
		if (ctrl) {
			if (show) $(ctrl).addClass(className);
			else $(ctrl).removeClass(className);
		}
	},
	RefreshFieldByElement: function(profile,data,context)
	{
		var element = aa_first(data,profile,'Element',context);
		var transition = aa_first(data,profile,'Transition',context);
		if (!element) return;
		
		aa_refresh_cell(element,context,transition,null,true);
	},
	FieldWithAspects: function (profile,data,context) {
		var field = aa_first(data,profile,'Field',context);
		if (!field) return [];
		ajaxart.runsubprofiles(data,profile,'FieldAspect',aa_ctx(context,{_Field:[field]}));

		return [field];
	},
	RefreshCurrentField: function (profile,data,context) {
		var element = context.vars.ControlElement[0];
		aa_refresh_cell(element,context,null,null,true);
	},
	FieldTitle: function (profile,data,context)
	{
		var field = ajaxart.run(data,profile,'Field',context);
		if (field.length == 0 || field[0].Title == null) return [];
		return [field[0].Title];
	},
	IsTabSelected: function(profile,data,context)
	{
		var tab_ctrl_id = aa_text(data,profile,'TabControl',context);
		var tab_id = aa_text(data,profile,'Tab',context);
		var out = [];

		$(aad_find_field(tab_ctrl_id,'aa_tabcontrol')).each(function(index,tab) {
			if ($(tab).find('.tab_' + tab_id).hasClass('aa_selected_tab')) out = ["true"];
		});
		return out;
	},
	RefreshTabsHead: function(profile,data,context)
	{
		var tabs = context.vars.ControlElement[0];
		if (tabs.RefreshTabsHead)
			tabs.RefreshTabsHead();
	}
});

aa_gcs('field_feature',{
	Hidden: function (profile,data,context) {
		var field = aa_var_first(context,'_Field');
		var use_field_data = aa_text(data,profile,'DataForCondition',context) == 'Field data';
		field.IsCellHidden = function(item_data,ctx,field_data) {	// field_data param is optional. If not passes, we calculate it
			var input_data = item_data;
			if (use_field_data && field_data)
				input_data = field_data;
			else if (use_field_data && field.FieldData)
				input_data = field.FieldData(item_data,aa_merge_ctx(context,ctx));

			return !aa_bool(input_data,profile,'ShowCondition',aa_merge_ctx(context,ctx));
		};
		field.RenderHiddenCell = aa_text(data,profile,'WhenHidden',context) != 'Do not render';

		aa_bind(field,'ModifyControl',function(args) {
			if (field.IsCellHidden(args.Item,args.Context,args.FieldData))
				aa_hide(args.Wrapper);
		});		
	},
	HiddenTableColumn: function (profile,data,context) {
		var field = aa_var_first(context,'_Field');
		field.IsFieldHidden = function(data2,ctx) {
			return !aa_bool(data2,profile,'ShowCondition',aa_merge_ctx(context,ctx));	
		};		
	}
});

aa_gcs('field_aspect',
{
	Description: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		if (field)
			field.Description = aa_multilang_text(data,profile,'Description',context);
	},
	JavaScript: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var runWhen = aa_text(data,profile,'RunWhen',context);
    	var js = profile.getAttribute('Code');
    	if (!js) js = aa_text(data,profile,'Code',context);
		var func = aa_get_func(js);
		if (runWhen == 'init') func(data[0],null,field,context);
		if (runWhen == 'control' ||  runWhen == 'control attached' ) {
			aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
				if (runWhen == 'control') func(field_data[0],cell,field,ctx);
				if (runWhen == 'control attached') aa_addOnAttach(cell,function() { func(field_data[0],cell,field,ctx); });
			});
		}
	},
	PopupOnHover: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var delay = aa_int(data,profile,'Delay',context);

		aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
			cell.onmouseover = function() {
				if (cell.isInside) return;
				if (cell.jbTimer) clearTimeout(cell.jbTimer);
				cell.jbTimer = setTimeout(function() {
					if (cell.isInside)
					  ajaxart.runNativeHelper(field_data,profile,'Open',aa_merge_ctx(context,ctx,{ControlElement: [cell], Item:item}));
					cell.jbTimer = null;
				},delay);
				cell.isInside = true;
			};
			cell.onmouseout = function() { 
				cell.isInside = false;
			};
			cell.onclick = function() {
				if (cell.jbTimer) { clearTimeout(cell.jbTimer); cell.jbTimer=null; }
				ajaxart.runNativeHelper(field_data,profile,'Open',aa_merge_ctx(context,ctx,{ControlElement: [cell], Item:item}));
			}
		},'PopupOnHover');
	},
	TextSummary: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		if (aa_bool(data,profile,'IgnoreEmptyValues',context)) {
			var compiled = ajaxart.compile_text(profile, "Text",context);
			field.Text = function(data1,ctx) {
				if (aa_totext(data1) == "") return [];
				return [compiled(data1,ctx)];
			}
		}
		else
			aa_addMethod(field,'Text',profile,'Text',context);
		return [];
	},
	NumberFormat: function (profile,data,context)
	{
		var field = context.vars._Field && context.vars._Field[0];
		if (field == null) return [];
		var compiled_format = ajaxart.compile(profile,'Format',context);

		if (compiled_format != 'same')
			aa_addMethod(field,'Text',profile,'Format',context);
		return [];
	},
	Tooltip: function(profile,data,context)
	{
		var field = context.vars._Field[0];
		field.Tooltip = aa_multilang_text(data,profile,'Tooltip',context); 
//		aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
//			cell.title = aa_multilang_text(field_data,profile,'Tooltip',context);
//		});
		aa_field_handler(field,'ModifyCell', function(cell,field_data) {
			cell.title = aa_multilang_text(field_data,profile,'Tooltip',context);
		});
	},
	RunAction: function(profile,data,context)
	{
		var field = context.vars._Field[0];
		ajaxart.runNativeHelper(data,profile,'SetupAction',context);
		jBart.bind(field,'ModifyControl',function(args) {
			var content = args.Wrapper.jbContent || args.Wrapper.firstChild || args.Wrapper; 
			ajaxart.run(args.FieldData,profile,'AfterControlCreated',aa_ctx(context,{ControlElement: [content]}));
		});
	},
	AsynchAction: function(profile,data,context)
	{
		var field = context.vars._Field[0];
		field.AsyncActionRunner = function(settings) {
			var result = settings.Wrapper || settings.wrapper;
			var style = aa_first(data,profile,'LoadingStyle',context);
			var loading = aa_renderStyleObject(style,{
				text: aa_text(data,profile,'LoadingText',context)
			},context);
			result.appendChild(loading);

		    var newContext = aa_ctx(context,{ });
			ajaxart_RunAsync(data,ajaxart.fieldscript(profile,'Action'),newContext,function(data1,ctx,success) {
				aa_empty(result);
				// there are 2 ways for field control: createCellControl and aa_fieldControl
				if (settings.CreateCellControl) {
					var ctx = settings.context;
					var inner = settings.wrapper;
					var cell_data = ajaxart_field_calc_field_data(field,settings.field_data,ctx);
					var cntr = ctx.vars._Cntr && ctx.vars._Cntr[0];
					
					if (field.AsSection && !field.HideTitle) {
						var sectionCtrl = aa_buildSectionControl(cntr,field,settings.field_data,cell_data,ctx);
						inner.appendChild(sectionCtrl);
					} else {
						ajaxart_field_createCellControl(settings.field_data,cntr,inner,"control",field,cell_data,ctx);
					}
				} else {
					settings.Wrapper = result;
					aa_fieldControl(settings,true);
				}
				aa_element_attached(result.firstChild);
			});
		};
	},
	RefreshDependentFields: function(profile,data,context)
	{
		var field = context.vars._Field[0];
		field.DependentFields = aa_text(data,profile,'FieldsIds',context);
		field.RefreshOn = aa_text(data,profile,'RefreshOn',context);
		field.RefreshScope = aa_text(data,profile,'RefreshScope',context);
		
		aa_field_handler(field,'OnUpdate', function(field,field_data,input) {
			if (field.RefreshOn == 'every click with delay')
				aa_run_delayed_action('RefreshDependentFields_'+field.Id,function() { doUpdate(input); } ,600,true);
			else
				doUpdate(input);
		});		

		function doUpdate(input) {
			// using container context, if exists
			var ctx = context;
			var cntr = $(input).parents('.aa_container')[0];
			if (cntr) ctx = cntr.Cntr.Context;
			ajaxart_field_RefreshDependentFields(field,input,ctx);	
		}
	},
	SortMethodOld: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		if (!field) return [];
		var method = aa_text(data,profile,'Method',context);
		if (method == "numeric")
			field.SortValFunc = function(x) { return parseFloat(x); }
		if (method == "date")
			field.SortValFunc = function(x) { return aadate_date2int(x); }
	},
	Title: function (profile,data,context)  // gc of field_aspect.Title
	{
		var field = context.vars._Field[0];
		field.Title = aa_multilang_text(data,profile,'Title',context);
		
		field.DynamicTitle = function(data1,ctx) {
			return aa_multilang_text(data1,profile,'Title',aa_ctx(context,ctx));
		}
	},
	ChangeFieldID: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var id = aa_text(data,profile,'ID',context);
		field.Id = id;
		field.ID = [id];
	},
	ShowErrorOnCondition: function (profile,data,context) {
		var field = context.vars._Field[0];
		field.OriginalControl = field.Control;
		field.Control = function(field_data,ctx) {
			var ctx2 = aa_merge_ctx(ctx,context);
			if (aa_bool(field_data,profile,'ConditionToShowError',ctx2)) {
				var errorText = aa_text(field_data,profile,'ErrorText',ctx2);
				var errorStyle = aa_first(field_data,profile,'ErrorStyle',ctx2);

				return [aa_renderStyleObject(errorStyle, {
					text: errorText,
					field_data: field_data, field: field
				}, ctx2,true)];
			} else {
				return this.OriginalControl(field_data,ctx);
			}
		}
	}, 
	FeatureForChildren: function (profile,data,context) {
		var field = context.vars._Field[0];
		aa_bind(field,'innerFields',function(args) {
			for(var i=0;i<args.Fields.length;i++) {
				aa_run(data,profile,'Feature',aa_ctx(context,{ _Field: [args.Fields[i]] }));
			}
		});
	},
	ShowFirstSucceedingChild: function (profile,data,context) {
		var field = context.vars._Field[0];
		aa_bind(field,'innerFields',function(args) {
			if (args.Fields.length > 1) 
				args.Fields.splice(1,args.Fields.length);
		});
	},
	Variable: function (profile,data,context) {
		var field = context.vars._Field[0];
		var varName = aa_text(data,profile,'VarName',context);

		aa_bind(field,'ModifyInstanceContext',function(args) {
			var ctx2 = aa_merge_ctx(context,args.Context);
			args.Context.vars[varName] = ajaxart.run(args.FieldData,profile,'Value',ctx2);
		});
	},
	GlobalVariable: function (profile,data,context) {
		var field = context.vars._Field[0];
		var varName = aa_text(data,profile,'ResourceName',context);

		aa_bind(field,'ModifyInstanceContext',function(args) {
			var ctx2 = aa_merge_ctx(context,args.Context);
			aa_setDataResource(context,varName,aa_run(args.FieldData,profile,'Value',ctx2));
		});
	},
	VariableForCellElement: function (profile,data,context) {		
		var field = context.vars._Field[0];
		var varName = aa_text(data,profile,'VarName',context);

		aa_bind(field,'ModifyInstanceContext',function(args) {
			var wrapper = aa_var_first(args.Context,'Wrapper');
			if (wrapper)
				args.Context.vars[varName] = [wrapper];
		});
	},
	TransitionForRefresh: function (profile,data,context) {
		var field = context.vars._Field[0];
		field.TransitionForRefresh = aa_first(data,profile,'Transition',context);
	},
	AddControl: function (profile,data,context) {
		var field = context.vars._Field[0];
		var wrapperCss = aa_cssClass(data,profile,'CssForWrapper',context,'add_control_wrapper');
		aa_bind(field,'ModifyControl',function(args) {
			$(args.Wrapper).addClass(wrapperCss);
			var ctx = aa_merge_ctx(context,args.Context);
			var innerPage = aa_first(data,profile,'Contents',ctx);

			var div = $('<div style="display:inline-block" />')[0];
			aa_fieldControl({Field: innerPage, FieldData: args.FieldData, Item: args.FieldData, Wrapper: div, Context: ctx});

			args.Wrapper.appendChild(div);
		});
	},
	ColumnWidth: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.Width = ajaxart.run(data,profile,'Width',context);
	},
	HighlightSubTextOnFilter: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var idForFilteredResults = 0;
		var highlight_class = aa_attach_global_css( aa_text(data,profile,'HighlightCss',context) , null, 'highlight' );
		
		if (context.vars.ItemListCntr) { // new itemlist
			var itemlistCntr = context.vars.ItemListCntr[0];
			aa_bind(field,'ModifyCell',function(args) {
				var filter = itemlistCntr.GetFilterOfSpecificResult && itemlistCntr.GetFilterOfSpecificResult(args.Item[0],args.FieldData);
				if (filter && filter.FilterType && filter.FilterType.HighlightSelectedText) {
					  var content = $(args.Wrapper).find(">.aa_text,>span>.aa_text")[0];
					  if (!content && args.Wrapper.firstChild && args.Wrapper.firstChild.nodeType == 1) content = args.Wrapper.firstChild;
					  content = content || args.Wrapper; 
					
					  filter.FilterType.HighlightSelectedText(content,highlight_class + ' aa_highlight',itemlistCntr.GetFilterQueryData(filter));
				}
			});
			return;
		}
		aa_field_handler(field,'ModifyCell', function(cell,field_data,cell_presentation,ctx,item) {
			  var cntr = ctx.vars.DataHolderCntr && ctx.vars.DataHolderCntr[0];
			  var filterObject = null;
			  if (cntr && cntr.IDForFilteredResults && cntr.IDForFilteredResults > 1) {
				  if (cntr.IDForFilteredResults != idForFilteredResults) {
					  idForFilteredResults = cntr.IDForFilteredResults;
					  if (cntr.Filters) {
						  for(var j=0;j<cntr.Filters.length;j++) {
							  if (cntr.Filters[j].field == field) {
								  filterObject = cntr.Filters[j];
							  }
						  }
					  }
					  cntr.FieldsCache = cntr.FieldsCache || {};
					  cntr.FieldsCache[field.Id] = filterObject;
				  } else {
					  filterObject = cntr.FieldsCache[field.Id];
				  }
				  if (!filterObject || !filterObject.HighlightSelectedText) return;
				  				  
				  var content = $(cell).find(">.aa_text,>span>.aa_text")[0];
				  if (!content && cell.firstChild && cell.firstChild.nodeType == 1) content = cell.firstChild;
				  content = content || cell; 
				  
				  filterObject.HighlightSelectedText(content,highlight_class + ' aa_highlight');
			  }
		},'HighlightSubTextOnFilter');
		
	},
	Password: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.ManualWriteValue = true;
		field.HashPassword = aa_bool(data,profile,'HashPassword',context);
		
		field.Control = function(field_data,ctx)
		{
			var field = context.vars._Field[0];
			return [ajaxart_field_createSimpleInput(field_data,context,false,'PASSWORD')];
		}
		field.ReadOnlyControl = function(field_data,ctx)
		{
			return $('<div>*****</div>').get(); 
		}
		
		aa_field_handler(field,'OnKeyup',function(field,field_data,input,e) {
			var field = context.vars._Field[0];
			var hash = (field.HashPassword) ? ajaxart_hashPassword(input.value) : input.value;
			ajaxart.writevalue(field_data,hash);
		},'password');
		
		return ["true"];
	},
	DisableCharacters: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.KeyPressValidator = new RegExp(aa_text(data,profile,'CharacterPattern',context));
	},
	DefaultValue: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		// old field
		field.DefaultValue = function(data1,ctx) {
			return ajaxart.run(data1,profile,'Value',aa_merge_ctx(context,ctx));
		}
		// new field
		field.HasDefaultValue = true;
		aa_bind(field,'FieldData',function(args) {
			if (aa_totext(args.FieldData) == '')
				ajaxart.writevalue(args.FieldData,field.DefaultValue(args.Item,aa_merge_ctx(context,args.Context)),true);
		},'DefaultValue');
	},
	DisableByCondition: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var cssClass = aa_cssClass(data,profile,'CssForDisabled',context);

		field.Disabled = function(data1,ctx)
		{
			var item = ctx.vars._Item ? ctx.vars._Item : data1;
			return aa_bool(item,profile,'EnableCondition',context) ? [] : ['true'];
		}
		field.IsDisabled = function()
		{
			return !aa_bool(data,profile,'EnableCondition',context);
		}
		field.DisableText = function()
		{
			return aa_text(data,profile,'DisableText',context);
		}
		aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
				$(cell).find('.field_control').each(
				function() { 
					input = this;
					var enable = aa_bool(item,profile,'EnableCondition',context);
					if (enable)
					{
						$(this).find("input").removeAttr("disabled").removeClass('aa_disabled');
						$(this).removeAttr("disabled");
						$(input).removeClass('aa_disabled');
						$(this).removeClass('aa_disabled ' + cssClass);
					}
					else
					{
						$(this).find("input").attr("disabled","disabled");
						$(this).attr("disabled","disabled");
						$(input).addClass('aa_disabled ' + cssClass);
					}
				});
		},'DisableByCondition');
	},
	HideByCondition: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		if (!aa_bool(data,profile,'CheckConditionForEveryItem',context)) {
			field.Hidden = function(data1,ctx)
			{
				var item = ctx.vars._Item ? ctx.vars._Item : data1;
				return aa_bool(item,profile,'ShowCondition',context) ? [] : ['true'];
			}
		}
		aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
			    var cellParent = $(cell).parent();
				var parent_line = $(cell).parent()[0];
			    var elem_to_hide = parent_line;
				if (! (cellParent.hasClass('field_row') || cellParent.hasClass('aa_section') ) )
					elem_to_hide = cell;
			    if (aa_bool(field_data,profile,'ShowCondition',aa_merge_ctx(context,ctx)))
			    {
			    	$(cell).removeClass('aa_hidden_field');
			    	elem_to_hide.style.display = '';
			    	elem_to_hide.display = '';
			    }
			    else
			    {
			    	$(cell).addClass('aa_hidden_field');
			    	elem_to_hide.style.display = 'none';
			    	elem_to_hide.display = 'none';
			    }
		},'HideByCondition');
	},
	CheckConditionForEveryItem: function(profile,data,context) {
		return [{
			apply: function(field,context) {
				var use_field_data = aa_text(data,profile,'DataForCondition',context) == 'Field data';
				field.IsCellHidden = function(item_data,ctx,field_data) {	// field_data param is optional. If not passes, we calculate it
					var input_data = item_data;
					if (use_field_data && field_data)
						input_data = field_data;
					else if (use_field_data && field.FieldData)
						input_data = field.FieldData(item_data,aa_merge_ctx(context,ctx));

					return !aa_bool(input_data,profile,'ShowCondition',aa_merge_ctx(context,ctx));	// todo: compile
				};
				field.RenderHiddenCell = aa_text(data,profile,'WhenHidden',context) != 'Do not render';

				aa_bind(field,'ModifyControl',function(args) {
					if (field.IsCellHidden(args.Item,args.Context,args.FieldData))
						aa_hide(args.Wrapper);
				});

			}
		}];
	},
	CheckConditionOnce: function(profile,data,context) {
		return [{
			apply: function(field,context) {
				field.IsFieldHidden = function(data2,ctx) {
					return !aa_bool(data2,profile,'ShowCondition',aa_merge_ctx(context,ctx));	// todo: compile
				};
			}
		}];
	},
	Hidden: function(profile,data,context) {
		var field = context.vars._Field[0];
		var on_condition = aa_first(data,profile,'OnCondition',context);
		if (!on_condition) {
			field.IsHidden = true;
			field.IsFieldHidden = function() { return true; }

			// backward compatability
			aa_bind(field,'ModifyControl',function(args) {
				aa_hide(args.Wrapper);
			});
		}
		else
			if (on_condition.apply) on_condition.apply(field,context);
	},
	CustomSuggestionBox: function(profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		ajaxart.customsuggestbox.init(field,data,profile,context);
		return [];
	},
  AddTextToSuggestionBox: function (profile, data,context)
  {
	  ajaxart.customsuggestbox.addTextToSuggestionBox(profile, data,context);  
	  return [];
  },
  CloseSuggestionBox: function (profile, data,context)
  {
	  ajaxart.suggestbox.closePopup();
	  return [];
  },
  OpenSuggestionBoxPopup: function (profile, data,context)
  {
	  ajaxart.customsuggestbox.openSuggestionBoxPopup(profile, data,context);
	  return [];
  },
  OpenSuggestionBoxList: function (profile, data,context)
  {
	  ajaxart.customsuggestbox.openSuggestionBoxList(profile, data,context);
	  return [];
  },
  TriggerSuggestionBoxPopup: function (profile, data,context)
  {
	  ajaxart.customsuggestbox.triggerSuggestionBoxPopup(profile, data,context);
	  return [];
  },
  Hyperlink: function(profile,data,context)
  {
	var field = context.vars._Field[0];
	var cssClass = aa_attach_global_css( aa_text(data,profile,'Css',context) , null, 'hyperlink' );
	
	aa_field_handler(field,'ModifyCell', function(td,field_data,cell_presentation,ctx,item) {
		$(td).addClass("aa_hyperlink").addClass(cssClass);
		td.onclick = function() {
			if (window.aa_incapture) return;
			ajaxart.run(item,profile,'Action',aa_ctx(aa_merge_ctx(context,ctx), {_ItemsOfOperation:item, Item:item, _ElemsOfOperation:[this.parentNode] , ControlElement: [td]}));
		}
	});
  },
  ImageInTextbox: function(profile,data,context)
  {
	var field = context.vars._Field[0];
	aa_field_handler(field,'ModifyCell', function(td,field_data,cell_presentation,ctx,item) {
		var input = $(td).find('.aatextbox')[0];
		var img = $('<img src="'+aa_text(data,profile,'Image',context)+'" />');
		img[0].style.cssText = aa_text(data,profile,'CssForImage',context);
		img.insertAfter(input);
	});
  },
  RunningInputFieldData: function(profile,data,context)
  {
	  if (context.vars._Field && context.vars._Cntr && context.vars._Cntr[0].Items[0])
		  return context.vars._Field[0].FieldData(context.vars._Cntr[0].Items[0].Items);
	  return [];
  }
});

aa_gcs("search_algorithm", {
	SimpleSearch: function (profile,data,context) 
	{
		var matchOnlyTextBeginning = aa_bool(data,profile,'MatchOnlyTextBeginning',context);
		return [ {
			newFilter: aa_create_text_filter(matchOnlyTextBeginning) 
		}];
	},
	SearchWords: function (profile,data,context)
	{
		return [ {
			newFilter: aa_create_search_words_text_filter() 
		}];
	}
});



ajaxart.gcs.datefilter =
{
	ExpressionToFromTo: function (profile,data,context)
	{
		if (! ajaxart.isxml(data)) return [];
		var exp = data[0].getAttribute('Expression') || "";
		var vals = exp.split('-');
		if (vals.length != 2) return [];
		data[0].setAttribute('From',vals[0]);
		data[0].setAttribute('To',vals[1]);
	}
}


ajaxart.gcs.validation =
{
	ContainsText: function (profile,data,context) 
	{
	  var text = aa_totext(data);
	  if (text == "") return [];
	  var lookFor = aa_text(data,profile,'Text',context);
	  return aa_frombool( text.indexOf(lookFor) == -1 );
	},
	IsNumber: function (profile,data,context) {
		var value = aa_totext(data);
		if (isNaN(Number(value))) return ["true"];
		if (value.charAt(0) == '0' && value.length > 1 && value.charAt(1) != '.') return ["true"];
		return [];
	},
	MatchesRegularExpression: function (profile,data,context) 
	{
		var text = aa_totext(data);
		if (text == "") return [];
		
		var lookFor = aa_text(data,profile,'Expression',context);
		return aa_frombool(!text.match('^' + lookFor + '$'));
	},
	Unique: function (profile,data,context)
	{
		var text = aa_totext(data); 
		if (text == "") return [];
		var options = ajaxart.run(data,profile,'OtherValues',context);
		for(var i=0;i<options.length;i++) {
			if (text == aa_totext([options[i]]) && options[i] != data[0]) return ["true"]; 
		}
	},
	PassingValidations: function (profile,data,context) 
	{
		var ctrl = aa_first(data,profile,'TopControl',context);
		return aa_frombool( aa_passing_validations(ctrl) );
	},
	ShowValidationError: function (profile,data,context) 
	{
		var ctrl = aa_first(data,profile,'TopControl',context);
		var error = aa_multilang_text(data,profile,'Error',context);
		aa_validation_showerror(ctrl,error,null,context);
		return [];
	}
}


aa_gcs("notification_box", {
	NotificationBox: function (profile,data,context) 
	{
	  var field = aa_create_base_field(data, profile, context);
	  field.Control = function(data1,ctx) {
		  var out = aa_renderStyleObject(field.Style,{
			  notification_id: aa_text(data,profile,'ID',context),
			  setStatusClass: function(status) {
			    var classes = this.className.split(' ');
			    var found = false;
			    for(var i=0;i<classes.length;i++) {
			    	if (classes[i].indexOf('aanotif_status_') == 0) {
			    		classes[i] = 'aanotif_status_' + status;
			    		found = true;
			    	}
			    }
			    if (!found) classes.push('aanotif_status_' + status);
			    this.className = classes.join(' ');
		  	  }
		  },context);
		  $(out).addClass('aa_notification_box_'+out.notification_id);

		  if (aa_text(data,profile,'TextToShowOnPreview',context)) {
			var evt = { text: aa_text(data,profile,'TextToShowOnPreview',context) , status: 'info' };
			out.trigger('notification',evt);	  	
		  }

		  return [out];
	  }
	  return [field];
	},
	ShowNotification: function (profile,data,context)
	{
		aa_showNotification(context,
			aa_text(data,profile,'NotificationBox',context),
			aa_int(data,profile,'Duration',context),
			aa_text(data,profile,'Text',context),
			aa_text(data,profile,'Status',context)
		);
	}
});

function aa_showNotification(context,id,duration,text,status) {		
		var top = aa_intest ? aa_intest_topControl : document;
		var notificationBoxes = $(top).find('.aa_notification_box_'+id);
		for (var i=0;i<notificationBoxes.length;i++) {
			var evt = { text: text , status: status, duration:duration };
			notificationBoxes[i].trigger('notification',evt);
		}
}
function aa_notification_box(notificationBox,settings) {
	settings = aa_defaults(settings,{
		DurationTime: 2000
	});
  
  var jBox = notificationBox.$el;
  notificationBox.bind('notification',function(evt) {
     notificationBox.setStatusClass( evt.status );
     jBox.html(evt.text);
     jBox.css('opacity','0');
     jBox.addClass('shown');
     if (evt.status == 'clear') jBox.removeClass('shown');
     jBox.animate({opacity: 1},'slow');
     if (evt.status == 'saving') return;
     
     setTimeout(function() {
       jBox.animate({opacity: 0},'slow', function() { jBox.html(''); jBox.removeClass('shown');}); 
     },evt.duration || settings.DurationTime);
  });          

}

ajaxart.gcs.transition =
{
	RightSlide: function (profile,data,context)
	{
	  var obj = { isObject:true }
	  obj.replace = function(oldElem,newElem)
	  {
		  aa_left_right_slide(oldElem,newElem,'RightSlide',aa_int(data,profile,'Duration',context),aa_text(data,profile,'Background',context), aa_bool(data,profile,"CoverLeftMargin",context));
	  }
	  return [obj];
	},
	LeftSlide: function (profile,data,context) 
	{
	  var obj = { isObject:true }
	  obj.replace = function(oldElem,newElem)
	  {
		  aa_left_right_slide(oldElem,newElem,'LeftSlide',aa_int(data,profile,'Duration',context),aa_text(data,profile,'Background',context));
	  }
	  return [obj];
	},
	Fade: function (profile,data,context) 
	{
	  var obj = { isObject:true }
	  obj.replace = function(oldElem,newElem)
	  {
		  aa_refresh_fade_transition(oldElem,newElem,'LeftSlide',aa_int(data,profile,'Duration',context));
	  }
	  return [obj];
	}
};
function aa_refresh_fade_transition(oldElem,newElem,type,duration) {
	  var old_parent_position = newElem.parentNode.style.position;
	  if (!old_parent_position) newElem.parentNode.style.position = 'relative';
	  var new_zindex = (oldElem.style.zIndex) ? newElem.style.zIndex+1 : 1;
	  var css = "#this.newtrans { transition: opacity " + duration + "ms ease-out; opacity:1; }" + 
	  	"#this { position:absolute; top:0px; z-index:" + new_zindex + "; opacity:0; }";
	  var cssForOld = "#this.newtrans { transition1: opacity " + duration + "ms ease-out;  opacity: 0; }" + 
	  	"#this { opacity:1; }";
	  var cls = aa_attach_global_css(css);
	  var clsOld = aa_attach_global_css(cssForOld);
	  $(newElem).addClass(cls);
	  $(oldElem).addClass(clsOld);
	  setTimeout(function() { $(oldElem).addClass('newtrans'); $(newElem).addClass('newtrans'); });
	  
	  setTimeout(function() {
		  if (!newElem || !newElem.parentNode) return;
		  newElem.parentNode.style.position = old_parent_position;
		  $(newElem).removeClass(cls).removeClass('newtrans');
		  aa_remove(oldElem,true);
	  },duration);	
}
function aa_left_right_slide(oldElem,newElem,type,duration,background,use_cover)
{
	  var old_parent_position = newElem.parentNode.style.position;
	  if (!old_parent_position) newElem.parentNode.style.position = 'relative';
	  var new_width = Math.max(oldElem.clientWidth,newElem.clientWidth);
	  var new_height = Math.max(oldElem.clientHeight,newElem.clientHeight);
	  var left_start = (type == 'LeftSlide') ? new_width : -new_width;
	  var width_start = (type == 'LeftSlide') ? 0 : new_width;
	  var new_zindex = (oldElem.style.zIndex) ? newElem.style.zIndex+1 : 1;
	  var background_css = ";background:" + background;
	  if (background == "") background_css = "";
	  var cover;
	  if (type == 'RightSlide' && use_cover) {
		  cover = document.createElement('div');
		  cover.style.cssText = "position:absolute; height: " + new_height + "px; top:0px; left: -"+ new_width + "px; width:" + new_width + "px;" + background_css + ";z-index:" + new_zindex+1;
		  newElem.parentNode.appendChild(cover);
	  }
	  var css = "#this.newpos { left: 0px; width: " + new_width + "px; } " + 
	  			"#this.newpos { -webkit-transition: width " + duration + "ms ease-out, left " + duration + "ms ease-out }" + 
	  			"#this { position:absolute; top:0px; overflow-x:hidden; width:" + width_start + "px; z-index:" + new_zindex + "; left: " + left_start + "px" +
	  			background_css + ";height:" + new_height + "px" +
	  			"} ";
	  var cls = aa_attach_global_css(css);
	  $(newElem).addClass(cls);
	  setTimeout(function() { $(newElem).addClass('newpos'); });
	  
	  setTimeout(function() {
		  if (!newElem || !newElem.parentNode) return;
		  newElem.parentNode.style.position = old_parent_position;
		  $(newElem).removeClass(cls).removeClass('newpos');
		  if (cover) newElem.parentNode.removeChild(cover);
		  aa_remove(oldElem,true);
	  },duration);
}

function aa_showblock(block,data,context) 
{
	var ctrl = block.Control(data,context);
	if (ctrl.length == 0) return null;
	
	if (block.ModifyControl)
		for(var i=0;i<block.ModifyControl.length;i++)
			block.ModifyControl[i](ctrl[0],[],'control',context,[]);
	
	return ctrl[0];
}
function ajaxart_fieldaspect_getField(context) {
  var field = context.vars['_Field'];
  if (field == null || field.length == 0) return null;
  return field[0];
}

function ajaxart_field_getFields(cntr,mode,item_data)
{
	if (typeof(item_data) == "undefined") item_data = [];
	
	var fields = cntr.Fields;
	var out = [];
	var isNew = cntr.IsNewItem;
	var isReadOnly = ( cntr.Items[0].ReadOnly != null && ajaxart.tobool_array(cntr.Items[0].ReadOnly) );
	var isEdit = ! (isNew || isReadOnly); 
	for(var i=0;i<fields.length;i++) {
		var field = fields[i];
		
		if (field.IsHidden) continue;
		if (isNew && field.HiddenForNew) continue;
	    if (isReadOnly && field.HiddenForReadOnly) continue;
	    if (isEdit && field.HiddenForEdit) continue;
	    if (mode == "table" && field.HiddenForTable) continue;
	    if (mode == "property sheet" && field.HiddenForProperties) continue;
	    if (mode != "property sheet" && field.Hidden && aa_tobool(field.Hidden(item_data,cntr.Context)) ) continue;	    
		out.push(fields[i]);
	}
	
	return out;
}

function ajaxart_field_fix_title(field,path,context)
{
	if (field.Title == null || field.Title.length == 0)
	{
		var title = path.split('/').pop().split('@').pop();
		title = title.substr(0,1).toUpperCase() + title.substr(1,title.length);
		title = aa_text_capitalizeToSeperateWords(title);
		
		field.Title = ajaxart_multilang_text(title,context);
	} 
}

function ajaxart_field_text(field,field_data,item,context)
{
	if (field.Text)
		var result = ajaxart.totext_array(aa_runMethod(field_data,field,'Text',context));
	else if (item[0].__item) // is wrapper
		var result = item[0][field.Id];
	else
		var result = ajaxart.totext_array(field_data);
	if (field.Highlight)
		result = ajaxart_field_highlight_text(result,field.Highlight);
	return result;
}

function ajaxart_field_is_readOnly(cntr,field,context)
{
	if (field.Writable) return false;
	if (field.ReadOnly == true) return true;
	if (aad_object_run_boolean_method(field,'ReadOnly',[],context)) return true;
	if (!cntr) return false;
	if (cntr.Items == null) return true;
	if (cntr.Items[0].ReadOnly == true) return true;
	if (cntr.ReadOnly) return true;
	return ( cntr.Items[0].ReadOnly != null && ajaxart.tobool_array(cntr.Items[0].ReadOnly) );
}

function aa_fieldById(id, fields)
{
	if (fields)
		for(var i=0;i<fields.length;i++) {
			if (fields[i].Id == id) return fields[i];
			if (fields[i].IsGroupOnlyForLayout) {	// getting inside groups
				var result = aa_fieldById(id,fields[i].Fields);
				if (result) return result;
			}
		}
	
}

function ajaxart_field_calc_field_data(field,item_data,context)
{
	if (field.Multiple && field.MultipleItems) // multiple with items - field data is not relevant
		return item_data;
	if (field.FieldData)
	{
		var results = aa_runMethod(item_data,field,'FieldData',context);
		// fielddata must not return more than one element
		if (results.length < 2) 
			return results;
		else
			return [results[0]];
	}
	else 
		return item_data;
}

function ajaxart_field_RefreshDependentFields(field,srcElement,context)
{
	if (!field|| !field.DependentFields) return;
	
	var parent = $(document);
	if (field.RefreshScope == 'container' || field.RefreshScope == 'screen')
		parent = $(srcElement).parents('.aa_container,.aa_widget').slice(-1);
	else if (field.RefreshScope == 'group')
		parent = $(srcElement).parents('.aa_container,.aa_widget').slice(0,1);
	else if (field.RefreshScope == 'item' ) // depricated
		parent = $(srcElement).parents('.aa_item').slice(0,1);
	else if (field.RefreshScope == 'table line' )
	{
		var listIndex = $(srcElement).parents().index($(srcElement).parents('.aa_list'));
		var parents_up_to_list = $(srcElement).parents().slice(0,listIndex);
		parent = parents_up_to_list.filter('.aa_item').slice(-1);
	}
	if (field.RefreshScope == 'screen' && !parent[0]) parent = $(document);

	var dependent = field.DependentFields.split(',');
	for(var f=0;f<dependent.length;f++)
	{
		var fieldID = dependent[f];
		if (field.RefreshScope == 'sibling') { 
			aa_refresh_sibling_field(srcElement,fieldID,context);
		} else {
			var ctrls = parent.find(".fld_" + fieldID);
			for(var i=0;i<ctrls.length;i++)
				aa_refresh_cell(ctrls[i],context);
		}
	}
}
function aa_build_th(cntr,field,ctx)
{
	var th = $('<th class="fieldtitle th_' + field.Id + '"><span class="aa_field_menu">&nbsp;</span><span class="fieldtitle_title"/><span class="fieldtitle_sort">&nbsp;</span></th>');
	th[0].Field = field;
	th.find('>.fieldtitle_title').text(field.Title);
	var width = ajaxart_getUiPref(cntr.ID[0],field.Id+'_ColumnWidth',ctx) || ajaxart.totext_array(field.Width);
	if (width != null)
	  $(th).width(width);

	if (field.AddInfoIcon) 
		field.AddInfoIcon(th.get(),ctx);
	var field_menu_elem = $(th).find('>.aa_field_menu')[0];
	if (field_menu_elem && cntr.EnableFieldMenu)
	{
		field_menu_elem.onmousedown = function(e) 
		{ 
	    	var newContext = aa_ctx( ctx, {
	    			MousePos: [ { isObject: true, pageX: e.pageX || e.clientX, pageY: e.pageY || e.clientY} ]
	    	});
	    	if (th.OpenFieldMenu)
	    		th.OpenFieldMenu(newContext);
			return aa_stop_prop(e);
		}
	}
	return th[0];
}

function ajaxart_field_fix_th(cntr,th,field,ctx)
{
	var width = ajaxart_getUiPref(cntr.ID[0],field.Id+'_ColumnWidth',ctx) || ajaxart.totext_array(field.Width);
	if (width != null)
	  $(th).width(width);
}

function ajaxart_subfield_bypath(field,path) {
	if (path == "") return field;
	if (field.Fields == null) return null;
	var path1 = path,rest = "";
	if (path.indexOf('/') > -1) { 
		path1 = path.substring(0,path.indexOf('/')-1); 
		rest = path.substring(path.indexOf('/')+1);
	}
	for(var i=0;i<field.Fields.length;i++) {
		var subfield = field.Fields[i];
		if (subfield.Path != null) {
			if (subfield.Path == path1) return ajaxart_subfield_bypath(subfield,rest);
		} else {  // no path. maybe virtual group
			var result = ajaxart_subfield_bypath(subfield,path);
			if (result != null) return result;
		}
	}
	return null;
}
function aa_field_handler(field,event,handler,id,phase)
{
	aa_register_handler(field,event,handler,id,phase);
}

function aa_invoke_field_handlers(eventFuncs,input,e,field,field_data,extra)
{
	if (aa_incapture) return;
	if (eventFuncs)
		for(var i=0;i<eventFuncs.length;i++)
			eventFuncs[i](field,field_data,input,e,extra);
}

function ajaxart_fields_aftersave(item,data,originalData,fields,context)
{
  if (fields == null) return;
  for(var i=0;i<fields.length;i++) {
	  var field = fields[i];
	  var data1 = data; odata1 = originalData;
	  var path = field.Path;
	  if (path == null) path = "";
	  
	  if (path != "" && data1.length >0) data1 = aa_xpath(data1[0],path);
	  if (path != "" && odata1.length >0) odata1 = aa_xpath(odata1[0],path);
	  
	  if (field.Fields != null) {
		  ajaxart_fields_aftersave(item,data,originalData,field.Fields,context);
	  }
	  if (field.AfterSave) {
		  var newContext = aa_ctx(context,{OriginalValue: odata1, Item: item});
		  aa_runMethod(data1,field,'AfterSave',newContext);
	  }
  }
}
function aa_set_fielddata_method(field,path)
{
	field.FieldData = function(data,ctx) 
	{
		if (data.length == 0) return [];
		if (!data[0].nodeType) 
			var out = [data[0][path.split('@').pop()]];
		else
			var out = aa_xpath(data[0],path,false);
		if (out.length > 0) 
			return out;
		if (!ctx || aa_tobool(ctx.vars._NoDefaultValue)) return out;
		
		var out = aa_xpath(data[0],path,true);
		var defaultValue = aa_runMethod(data,field,'DefaultValue',ctx);
		ajaxart.writevalue(out,defaultValue,true);
		return out;
	};
}

function aa_fieldTitle(field ,item_data, context,ignoreHideTitle)
{
	if (field.HideTitle && !ignoreHideTitle) return ''; 
	if (field.DynamicTitle) return field.DynamicTitle(item_data,context);
	return field.Title;
}

function aa_section(section,settings) {
  section.$el.firstOfClass('section_title').text(section.Title);  
  section.addSectionBody(section.$el.firstOfClass('section_body')[0]);
}
function aa_wrapWithSection(ctrl,field,sectionStyle,item_data,ctx,field_data)
{
	var jElem = $(sectionStyle.Html);
	var title = aa_fieldTitle(field ,item_data, ctx,true);
	var section = {
		Title: title,
		Image: field.SectionImage,
		field: field,
		field_data: field_data || [],
		context: ctx,
		collapsed: !!field.SectionCollapsedByDefault,
		setImageSource: function(classOrElement,imageObject,deleteIfNoImage)	{
			var inner = this.getInnerElement(classOrElement);
			if (inner) aa_set_image(inner,imageObject,deleteIfNoImage);
		},
		setInnerHTML: function(classOrElement,text)	{
			var inner = this.getInnerElement(classOrElement);
			if (inner) inner.innerHTML = text;
		},
		getInnerElement: function(classOrElement)
		{
			if (typeof(classOrElement) == 'string') {  // it is a class
				if (classOrElement == '') return this.el;
				if (classOrElement.indexOf('.') == 0)
				  return aa_find_class(this.$el,classOrElement.substring(1))[0];
				return null;
			}
			return classOrElement || this.el;
		},		
		addSectionBody: function(classOrElement) {
			var inner = this.getInnerElement(classOrElement);
			if (inner) inner.appendChild(ctrl); 
			if (this.collapsed) $(inner).css('display','none');
		},
		updateCollapsed: function(collapsed) {
			this.collapsed = collapsed;
		},
		$el: jElem,
		el: jElem[0],
		jElem: jElem,
		control: jElem[0]
	};
	section.setImage = section.setImageSource;

	aa_trigger(field,'beforeWrapWithSection',{ context: ctx, sectionObject: section });
	
	section.$el.addClass(aa_attach_style_css(sectionStyle));
	aa_apply_style_js(section,sectionStyle);
	return section.el;
}

function aa_refresh_sibling_field(srcElement,fieldID,context)
{
	var parent = srcElement.parentNode;
	if (!parent || parent.tagName == 'body') return;
	var ctrls = $(parent).find('.fld_'+fieldID);
	if (ctrls.length > 0) {
		for(var i=0;i<ctrls.length;i++)
			aa_refresh_cell(ctrls[i],context);
	} else {
		aa_refresh_sibling_field(parent,fieldID,context);
	}
}

function aa_alert(message) {
	if (window.jBartNodeJS) return jBartNodeJS.alert(message);
	
	if ($("#aa_immediate_log").length == 0) {
		var log = $('<div id="aa_immediate_log" style="position:absolute; top:0px; background:white; z-index:3000"></div>');
		log[0].Counter = 0;
		$("body").append(log);	
		$('<span class="close">close</span>').click(function() { $("#aa_immediate_log").remove() }).appendTo(log);
	}
	if ($("#aa_immediate_log")[0]) {
		var counter = $("#aa_immediate_log")[0].Counter++;
		$("#aa_immediate_log").prepend("#" + counter + ": " + message + "<br/>");
	}
}

function aa_audioPlayer(audioplayer) {
    if (!audioplayer.audioUrl) { 
      audioplayer.$el.find(".button").hide();
      audioplayer.$el.find(".no_audio").show();
      return; 
    }
    var ext = audioplayer.audioUrl.split("\.").pop();
    var mime = (ext == 'mp3') ? 'mpeg' : ext;
    var source = $("<source/>").attr('src',audioplayer.audioUrl).attr('type','audio/'+mime);
    audioplayer.$el.find("audio").append(source);
    var playing = false;
    audioplayer.$el.find(".button").click(function(e) {
      if (playing) {  // pause
        audioplayer.$el.find("audio")[0].pause();
        playing = false;
        $(this).removeClass('playing');
      } else { // play
        audioplayer.$el.find("audio")[0].play();
        playing = true;
        $(this).addClass('playing');
      }
    });
    audioplayer.$el.find("audio").bind("ended",null,function() {
        playing = false;
        $(this).removeClass('playing');          
    });
}






aa_gcs("field_aspect", {	
	CellPresentation: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		if (field == null) return [];
		field.CellPresentation = aa_text(data,profile,'Content',context);
		
		return [];
	},
	PagePreviewDevice: function (profile,data,context)
	{
		if (!ajaxart.jbart_studio) return;

		aa_bind(context.vars._Field[0],'ModifyInstanceContext',function(args) {
			var device = aa_first(data,profile,'Device',context);
			var width = device ? parseInt(device.Width) : 0;
			var height = device ? parseInt(device.Height) : 0;

	    args.Context.vars._PagePreview = [{ Width: width, Height: height, TightPreview: aa_bool(data,profile,'TightPreview',context) }];
	  });		
	},
	DisplayUnits: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var cssClass = aa_cssClass(data,profile,'Css',context,'units');
		var display_location = aa_first(data,profile,'Location',context);
		var unit = aa_text(data,profile,'Unit',context);
		
		jBart.bind(field,'ModifyControl',function(args) {
			var content = args.Wrapper.firstChild || args.Wrapper; 
			aa_renderStyleObject(display_location,{fieldContent: content, unitString: unit },context,true);
		},'DisplayUnits');
	},
	TransformTextToInputValue: function (profile,data,context) {
		var field = context.vars._Field[0];
		field.TextDataToInputValue = function(data1,ctx) {
			return aa_run(data1,profile,'DataToInputValue',aa_merge_ctx(context,ctx))
		}
		field.TextInputValueToData = function(data1,ctx) {
			return aa_run(data1,profile,'InputValueToData',aa_merge_ctx(context,ctx))
		}
	},
	TextboxCharacterMask: function (profile,data,context) {
		var field = context.vars._Field[0];
		var charsRegex = aa_text(data,profile,'AllowedCharsRegex',context); // e.g. regex = [0-9]
		if (!charsRegex) return;
		field.InputValueMask = aa_input_value_mask(charsRegex);
	},
	TextboxCharacterLength: function (profile,data,context) {
		var field = context.vars._Field[0];
		var length = aa_int(data,profile,'Length',context);
		aa_bind(field,'inputMask',function(args) {
			if (args.val.length > length) args.val = args.val.substring(0,length);
		});		
	},
	ClearValueButton: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.ClearValueStyle = aa_first(data,profile,'Style',context);
		
		function refresh(wrapper,field_data) {
			var apiObject = {
				ClearValue: function(e) {
				  var input = jQuery(wrapper).find('input')[0];
				  if (input) {
					  input.value = '';
					  field.ManualWriteValue = false; // Yaniv: I do not understand this line...
					  if (input.updateValue) input.updateValue();
					  if (input.Refresh) input.Refresh();
					  if (input.jbApiObject && input.jbApiObject.setValue) input.jbApiObject.setValue('');
					  refresh(wrapper,field_data);
				  } else {
					  ajaxart.writevalue(field_data,'');
					  aa_refresh_cell(wrapper,context);
				  }
				  aa_stop_prop(e);
				  return false;
				},
				FieldControlWrapper: wrapper,
				IsValueEmpty: aa_totext(field_data) == "",
				Title: aa_multilang_text(data,profile,'Title',context)
			}
			var clearBtn = aa_renderStyleObject(field.ClearValueStyle,apiObject,context);
			jQuery(clearBtn).addClass('aa_clear_button');
		}
		
		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx) {
			refresh(cell,field_data);
		});
		aa_field_handler(field,'OnUpdate',function(field,field_data,input){
			var cell = input.parentNode;
			refresh(cell,field_data);
		});
	},
	Control: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		if (field == null) return [];
		aa_addControlMethod(field,'WritableControl',data,profile,'Control',context);
	},
	GlobalCss: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var css = aa_text(data,profile,'GlobalCss',context);
		var cls = aa_attach_global_css(css,null,field.Id);
		aa_field_handler(field,'ModifyCell',function(cell,field_data,cell_presentation,ctx,item)
		{
			if (aa_paramExists(profile,'OnCondition') && ! aa_bool(field_data,profile,'OnCondition',context)) return;
			jQuery(cell).addClass(cls);
		});	
	},
	CssOnCondition: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var css = aa_text(data,profile,'Css',context);
		var cls = aa_attach_global_css(css,null,field.Id,true);
		var conditionOnItem = aa_text(data,profile,'ConditionInput',context) == 'item';
		var cssClass = aa_text(data,profile,'CssClass',context);
		if (cssClass) cls += ' ' + cssClass;
		
		aa_field_handler(field,'ModifyCell',function(cell,field_data,cell_presentation,ctx,item)
		{
			var content = cell.firstChild || cell;

			if (aa_paramExists(profile,'OnCondition')) {
				var condData = conditionOnItem ? item : field_data;
				if (! aa_bool(condData,profile,'OnCondition',context)) {
					jQuery(content).removeClass(cls);
					jQuery(cell).removeClass(cls+'_wrapper');
					return;
				}
			}
			jQuery(content).addClass(cls);
			jQuery(cell).addClass(cls+'_wrapper');
		},null,200);	
	},
	Css: function (profile,data,context)
	{
		var css_for = aa_text(data,profile,'OnElement',context);
		var class_compiled = ajaxart.compile(profile,'Class',context);
		var inline_compiled = ajaxart.compile(profile,'Inline',context);
		var condition_compiled = ajaxart.compile(profile,'OnCondition',context, null, false, true);
		var apply_css = function(elems,data2) {
			for (var i=0; i<elems.length; i++) {
				if (! ajaxart_runcompiled_bool(condition_compiled, data2, profile, "OnCondition", context, true )) return;
				var cls = ajaxart_runcompiled_text(class_compiled, data2, profile, "Class" ,context);
				var inline = ajaxart_runcompiled_text(inline_compiled, data2, profile, "Inline" ,context);
				if (inline != "") aa_setCssText(elems[i],elems[i].style.cssText + ";" + inline);
				if (cls != "") elems[i].className = elems[i].className + " " + cls;
			}
		};
		var register = function(apply_css,css_for) {
			var css = function(cell,field_data,cell_presentation,ctx) {
				if (css_for == "cell")
					var work_on = cell;
				else if (css_for == "content") 
					var work_on = jQuery(cell).find('.field_control')[0];
				else if (css_for == "title")	
					var work_on = jQuery(cell.parentNode).find('>.propertysheet_title_td')[0];
				else
					var work_on = cell;
				if (!work_on) 
					work_on = cell;
				apply_css([work_on],field_data);
			}
			var field = ajaxart_fieldaspect_getField(context);
			aa_field_handler(field,'ModifyCell',css);
		}
		register(apply_css,css_for);
		return [];
	},
	RefreshOnBrowserUrlChange: function (profile,data,context) {
		var field = context.vars._Field[0];
		var to = aa_text(data,profile,'AddClassTo',context);
		aa_bind(field,'ModifyCell',function(args) {
			$(args.Wrapper).addClass('jb_refreshOnUrlChange');
		},'RefreshOnBrowserUrlChange');		

		if (!jBart.hashValueChangedRefreshField) {
			jBart.hashValueChangedRefreshField = function() {
				if (window.jbHashChangeFromJS) return;
				var fieldCells = $('.jb_refreshOnUrlChange');
				for(var i=0;i<fieldCells.length;i++) 
					aa_refresh_cell(fieldCells[i],context,null,null,true);
			};
			$(window).bind('hashchange',jBart.hashValueChangedRefreshField);
		}

	},
	DescriptionForEmptyText: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.DescriptionForEmptyText = ajaxart.totext_array(ajaxart_multilang_run(data,profile,'Description',context));
		field.DescriptionForEmptyTextCss = aa_text(data,profile,'Css',context);
		field.EmptyTextCssClass = aa_attach_global_css(field.DescriptionForEmptyTextCss ,null,'empty_text_description');

		if (field.HandleDescriptionForEmptyText) {
			return field.HandleDescriptionForEmptyText(field.DescriptionForEmptyText);
		}
		
		if (!field.DescriptionForEmptyText) return; // removing DescriptionForEmptyText

		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx,item)
		{
//			if (ajaxart_field_is_readOnly(ctx.vars._Cntr && ctx.vars._Cntr[0],cell.Field,ctx)) return;
			aa_addDescriptionForEmptyText(cell,field.DescriptionForEmptyText,field.EmptyTextCssClass);
		},'DescriptionForEmptyText',10);

		if (ajaxart.isChrome || ajaxart.isFireFox || ajaxart.isSafari) return; // we use placeholder

		aa_field_handler(field,'OnFocus',function(field,field_data,input)
		{
			if (jQuery(input).hasClass('empty_text_description'))
			{
				if (input.value == field.DescriptionForEmptyText)
					input.value = ""; 
				jQuery(input).removeClass('empty_text_description').removeClass(field.EmptyTextCssClass);
			}
		},'DescriptionForEmptyText',10);
		aa_field_handler(field,'OnBlur',function(field,field_data,input)
		{
			if (input.value == '' && document.activeElement != input)
			{
				jQuery(input).addClass('empty_text_description').addClass(field.EmptyTextCssClass);
				input.value = field.DescriptionForEmptyText;
			}
		},'DescriptieonForEmptyText',10);
		return [];
	},
	FieldData: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		if (field == null) return [];
		var moreVars = null;
		if (context.vars._FieldItem) // dynamic fields
			moreVars = {_FieldItem : context.vars._FieldItem};
		aa_addMethod(field,'FieldData',profile,'FieldData',context,moreVars);
		return [];
	},
	MobileScroll: function(profile,data,context)
	{
		if (!window.iScroll && !window.aa_loading_iscroll) {  // for design time only. the runtime should include iscroll.js statically
			window.aa_loading_iscroll = true;
			jQuery.getScript('lib/iscroll.js',function() {aa_loading_iscroll=false;} );
		}
			
		var field = context.vars._Field[0];
		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx) {
			cell.style.overflow = 'auto'; 

			aa_addOnAttach(cell,function() {
				var paramsToEval = "var params = " + aa_text(data,profile,'ScrollParams',context) + ';';
				eval(paramsToEval);
				var element = cell;
				if (aa_text(data,profile,'OnElement',context) == 'content') {
					element = cell.firstChild;
					if (!element) return;
				}
				
				ajaxart.run(data,profile,'Height',aa_ctx(context,{ControlElement: [element]}));  // set the height
				ajaxart.run(data,profile,'Width',aa_ctx(context,{ControlElement: [element]})); // set the width
				
				if (window.iScroll && aa_bool(data,profile,'EnableScroll',context)) {
				  cell.IScroll = new iScroll(element,params);
				  setTimeout(function() {cell.IScroll.refresh()},200);
				}
			});
		});
	},
	HoverCssClass: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx) {
			cell.onmouseover = function() { jQuery(cell).addClass('aa_hover'); }
			cell.onmouseout = function() { jQuery(cell).removeClass('aa_hover'); }
		});
		return [];
	},
	ImageReadOnlyImp: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		if (field == null) return [];
		field.ImageHeight = aa_text(data,profile,'Height',context);
		field.ImageWidth = aa_text(data,profile,'Width',context);
		field.KeepImageProportions = aa_bool(data,profile,'KeepImageProportions',context) && field.ImageHeight != "" && field.ImageWidth != "";
		field.HideEmptyImage = aa_bool(data,profile,'HideEmptyImage',context) ;

		// the px does problems with dynamically changing image size
		field.ImageWidth = field.ImageWidth.split('px')[0];	
		field.ImageHeight = field.ImageHeight.split('px')[0];
		if (!field.KeepImageProportions) {
			if (field.ImageWidth!="") field.ImageWidth += 'px';
			if (field.ImageHeight!="") field.ImageHeight += 'px';
		}
		
		var urlForMissingImage = aa_text(data,profile,'UrlForMissingImage',context);
		var textForMissingImage = aa_text(data,profile,'TextForMissingImage',context);
		var src_compiled = ajaxart.compile(profile,'Src',context);
		field.Text = function(data1,ctx)
		{
			var field = this;
			var src = ajaxart_runcompiled_text(src_compiled, data1, profile, "Src", ctx );
			if (field.HideEmptyImage && ajaxart.totext_array(data1) == "")
				src = "";
			if (src == "") {
				if (textForMissingImage != "")
					return [jQuery("<span class='aa_missing_image'></span>").text(textForMissingImage)[0]];
				else if (urlForMissingImage != "")
					src = urlForMissingImage;
				else return ["<span/>"];
			}
			var out = "<img src='" + src + "'";
			var style = " style='";
			if (field.ImageHeight != "") { 
				style = style + "height:" + field.ImageHeight + "; "; 
				out += ' height="' + field.ImageHeight + '"'; 
			} 
			if (field.ImageWidth != "") { 
				style = style + "width:" + field.ImageWidth + "; "; 
				out += ' width="'+field.ImageWidth+'"'; 
			}
			out = out + style + "' ";
			out += "/>";
			return [out]
		}
		field.ReadOnlyControl = function(data1,ctx) {
			var field = this;
			var image = jQuery(this.Text(data1,ctx)[0])[0];
			
			if (aa_paramExists(profile,'OnClick'))
			{
				image.onclick = function() { 
					if (window.aa_incapture) return;
					ajaxart.run(data1,profile,'OnClick',aa_merge_ctx(context,ctx)); 
				}
				jQuery(image).css('cursor','pointer');
			}
			if (field.KeepImageProportions)	{
				aa_keepimageprops(image,field.ImageWidth,field.ImageHeight);
				var wrapper = jQuery('<div style="overflow:hidden; width:'+field.ImageWidth+"px; height:"+field.ImageHeight+'px"/>')[0];  // for alignment
				wrapper.appendChild(image);
				return [wrapper];
			}
			return [image];
		}
		if (field.ReadOnly)
			field.Control = field.ReadOnlyControl;
		
		if (field.KeepImageProportions)
			field.CellPresentation = 'control';
		
		return [];
	},
	ModifyControl: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		if (field == null) return [];
		aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
			var input = jQuery(cell).find('.field_control') || cell.firstChild;
			ajaxart.run(item,profile,'Action',aa_merge_ctx(context,ctx,{ Cell: [cell], FieldData: field_data, Input: input.get() }));
		});
		return [];
	},
	OnUpdate: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		var onUpdate = function(field,field_data,input,e,extra)
		{
			var ctx1 = input.ajaxart ? aa_merge_ctx(context,input.ajaxart.params) : context;
			var parent_elem = jQuery(input).parents('.aa_item')[0]; 
			var item = parent_elem && parent_elem.ItemData;
			var newContext = aa_ctx(ctx1,{ _Field: [field], _FieldData: field_data
				, _Input: [input], ControlElement: [input], _Item: item || [] } );
			if (extra) newContext = aa_ctx(newContext,extra);
			if (jQuery(input).parents('.aa_container').length > 0) { 
				newContext.vars._Cntr = [ jQuery(input).parents('.aa_container')[0].Cntr ];
				newContext.vars.HeaderFooterCntr = newContext.vars._Cntr[0].Context.vars.HeaderFooterCntr;
			}
			
			ajaxart.run(field_data,profile,'Action',newContext);
		}
		aa_field_handler(field,'OnUpdate',onUpdate,aa_text(data,profile,'ID',context),aa_int(data,profile,'Phase',context));
		
		if (aa_bool(data,profile,'FireOnUpdateWhenLoaded',context)) {
			jBart.bind(field,'ModifyControl',function(args) {
				aa_invoke_field_handlers(field.OnUpdate,args.Wrapper,null,field,args.FieldData);
			});
		}
		return [];
	},
	PopupImage: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var id = aa_text(data,profile,'ID',context);
		if (id == '') id = null;
		field.PupupImageCss = aa_attach_global_css( aa_text(data,profile,'Css',context) , null, 'popupimage' );
		
		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx) {
			if (ajaxart_field_is_readOnly(ctx.vars._Cntr && ctx.vars._Cntr[0],cell.Field,ctx)) return;

			var input = aa_find_field_input(cell);
			if (!input) return;
			var img = document.createElement("span");
			img.className = 'aa_field_image image_fld_' + field.Id + ' '+ field.PupupImageCss;
			img.innerHTML = '&nbsp;';
			//var css = 'background-image:url(' + aa_text(data,profile,'Image',context) + ')';
			//img.style.cssText = css;
			jQuery(img).insertAfter(input);
			img.onmousedown = function(e)
			{
				if (input && input.TogglePopup && !jQuery(input).hasClass('aa_disabled') ) 
					input.TogglePopup();
			}
			img.onmousemove= function(e) 
			{ 
				var input = aa_find_field_input(cell);
				if (input && input.DetectResize) input.DetectResize(e); 
			};
		},id);

		return [];
	},
	Resizer: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.RememberResizerWidth = aa_bool(data,profile,'RememberLastWidth',context);
		
		if (aa_bool(data,profile,'Disable',context))
		{
			aa_field_handler(field,'ModifyControl',function() {},'resizer');
			return [];
		}
		var resizer = function(cell,field_data,cell_presentation,ctx) {
			function init(input,field) {
				aa_defineElemProperties(input,'DetectResize');  // for memory leaks
				
				function cellResizeStart(e) {
					document.onmouseup = cellResizeStop;
					input.onmousemove= null;
					document.onmousemove= cellResizeMove;
					return aa_stop_prop(e);
				}
				function cellResizeMove(e) {
					var mousepos = aa_mousePos(e);
	
					var new_size = mousepos.x - aa_absLeft(input);
					if (jQuery(input).parents('.right2left').length > 0)
						new_size = aa_absLeft(input) + input.offsetWidth - mousepos.x;
					
					jQuery(input).width(new_size);
	
					if (field.RememberResizerWidth && ctx.vars._Cntr) {
						ajaxart_setUiPref(aa_totext(ctx.vars._Cntr[0].ID),field.Id+'_Width','' + new_size + 'px',ctx);
					}
					return aa_stop_prop(e);
				}
				function cellResizeStop(e) {
					jQuery(input).removeClass('col_resize');
					document.onmouseup = null;
					document.onmousemove= null;
					input.onmousemove= input.DetectResize;
					input.onmousedown = input.onmousedownOrig;
					return aa_stop_prop(e);
				}

				input.onmousemove = input.DetectResize = function(e) {
					var mousepos = aa_mousePos(e);
					
					var in_resize_place = aa_absLeft(input) + input.offsetWidth - mousepos.x < 3;
					if (jQuery(input).parents('.right2left').length > 0)
						in_resize_place = mousepos.x - aa_absLeft(input) < 3;
					if (in_resize_place)
					{
						jQuery(input).addClass('col_resize');
						input.onmousedown= cellResizeStart;
					}
					else
					{
						jQuery(input).removeClass('col_resize');
						input.onmousedown= input.onmousedownOrig;
					}
				}
			}
			if (cell.ReadOnly) return;
			var input = jQuery(cell).find('>.field_control')[0];
			if (input != null) 
			{
				input.onmousedownOrig = input.onmousedown;
				init(input,field);
				if (field.RememberResizerWidth && ctx.vars._Cntr)
				{
					var cntr = ctx.vars._Cntr[0];
					var field_width = ajaxart_getUiPref(aa_totext(cntr.ID),field.Id+'_Width',ctx);
					if (field_width != null)
					 jQuery(input).css('width',field_width);
				}
			}
		}
		aa_field_handler(field,'ModifyControl',resizer,'resizer');

		return [];
	},
	DefineAction: function (profile,data,context) {
		var field = context.vars._Field[0];
		field.Actions = field.Actions || {};
		var actionName = aa_text(data,profile,'ActionName',context);

		field.Actions[actionName] = function(field_data,ctx) {
			ajaxart.run(field_data,profile,'Action',aa_merge_ctx(context,ctx));
		}
	},
	SimpleInput: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		if (field == null) return [];
		field.Control = function(field_data,ctx)
		{
			var field = this;
			ctx = aa_ctx(ctx,{_Field: [field]});
			
			var cntr = ctx.vars._Cntr && ctx.vars._Cntr[0];
			if (ajaxart_field_is_readOnly(cntr,field,ctx)) {
		    	var text = (field.Text) ? aa_totext(field.Text(field_data,context)) : aa_totext(field_data);
		    	text = text.replace(/\n/g,"<br/>");
				var out = jQuery("<div class='aa_text'/>").html(text)[0];
				return [out];
			}
			return [ajaxart_field_createSimpleInput(field_data,ctx,ajaxart_field_is_readOnly(cntr,field,ctx))];
		}
 	    //aa_addControlMethod_js(field,'Control',simple,context);
		
		return [];
	},
	Toolbar: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var cssClass = aa_attach_global_css(aa_text(data,profile,'Css',context),null,'field_toolbar');
		aa_addMethod(field,'Operations',profile,'Operations',context);
		field.RefreshToolbar = function(field,cell,field_data,ctx) {
			jQuery(cell).addClass(cssClass);
			if (ctx.vars._Cntr && ajaxart_field_is_readOnly(ctx.vars._Cntr[0],field,ctx)) return;

			var toolbar = jQuery('<span class="aa_field_toolbar" />')[0];
			var minWidth = aa_text(data,profile,'MinWidth',context);
			if (minWidth != '') 
			  jQuery(toolbar).css('min-width',minWidth).css('display','inline-block');
			
			var ops = aa_runMethod(field_data,field,'Operations',ctx);
			for(var i=0;i<ops.length;i++)
			{
				var op = ops[i];
				var img = document.createElement("span");
				aa_defineElemProperties(img,'Action,Operation');
				//img.innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;";
				img.Operation = op;
				var opCssClass = ajaxart.totext_array(aa_runMethod(field_data,op,'CssClass',ctx));
				img.className = 'aa_field_toolbar_image ' + opCssClass;
				img.title = ajaxart.totext_array(aa_runMethod(field_data,op,'Title',ctx));
				var image = aa_totext(aa_runMethod(field_data,op,'Icon',ctx));
				if (image != "")
					img.style.background = "url("+image+") no-repeat";
				
			    toolbar.appendChild(img);
				
				img.Action = img.onmousedown = function(e)
				{
					var img = (typeof(event)== 'undefined')? e.target : event.srcElement;					
					var op = img.Operation;
					var input = jQuery(cell).find('.field_control')[0];
					if (op != null)
						aa_runMethod(field_data,op,'Action',aa_ctx(ctx,{ _Field: [field], _FieldData: field_data, ControlElement: [input], _Input: [input], _OperationElement: [img]}));
				}
			};
			var oldToolbar = jQuery(cell).find('>.aa_field_toolbar')[0];
			aa_remove(oldToolbar,true);
			if (jQuery(cell).find('>.aa_option_page').length>0)
			  jQuery(toolbar).insertBefore( jQuery(cell).find('>.aa_option_page') );
			else
			  cell.appendChild(toolbar);
		}
		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx) {
			field.RefreshToolbar(field,cell,field_data,ctx);
		});
		if (aa_bool(data,profile,'RefreshOnUpdate',context)) 
		{
			aa_field_handler(field,'OnUpdate',function(field,field_data,input){
				// recreate the toolbar
				var cell = input.parentNode;
				field.RefreshToolbar(field,cell,field_data,context);
			});
		}
	},
	WritableControl: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		if (field == null) return [];
		aa_setMethod(field,'WritableControl',profile,'Control',context);
		
		return [];
	},
	LimitTextLength: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var maxLength = aa_int(data,profile,'MaxLength',context);
		if (maxLength <=0) return;
		var cuttingMark = aa_text(data,profile,'CuttingMark',context);
		var fullTextAsTooltip = aa_bool(data,profile,'FullTextAsTooltip',context);
		var fullTextOnClick = aa_bool(data,profile,'FullTextOnClick',context);

		aa_bind(field,'ModifyControl',function(args) {
			var content = args.Wrapper.firstChild || args.Wrapper;
			var text = $(content).html();
			if (text && text.length > maxLength) {
				var newtext = text.substring(0,maxLength - cuttingMark.length) + cuttingMark;
				if (fullTextAsTooltip) content.setAttribute('title' ,text);
				$(content).addClass('limit_text_length');
				if (fullTextOnClick) $(content).click(function() {
					if ($(content).hasClass('limit_text_length')) {
						$(content).html(text);
						$(content).removeClass('limit_text_length');
					} else {
						$(content).html(newtext);
						$(content).addClass('limit_text_length');						
					}
				});
				$(content).html(newtext);
			}
		});
	},
	OnKeyUp: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		aa_field_handler(field,'OnKeyup',function(field,field_data,input,e,extra)
		{
			var newContext = aa_ctx(context,{ _Field: [field], _FieldData: field_data
				, _Input: [input], ControlElement: [input] } );
			if (jQuery(input).parents('.aa_container').length > 0)
				newContext.vars._Cntr = [ jQuery(input).parents('.aa_container')[0].Cntr ];
			if (extra && extra.KeyCode)
				newContext.vars.KeyCode = extra.KeyCode;
			if (extra && extra.CtrlKey)
				newContext.vars.CtrlKey = extra.CtrlKey;
			
			ajaxart.run(field_data,profile,'Action',newContext);
		});
		return [];
	},
	OnClick: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		var func = function(cell,field_data,cell_presentation,ctx) {
			var input = jQuery(cell).find('.field_control')[0];
			var click = function(e) {
				if (window.aa_incapture) return;
				ajaxart.run(field_data,profile,'Action',aa_ctx(ctx,{_Field: [field], _FieldData: field_data, ControlElement: [this] } ));
			}
			if (input)
				input.onclick = click;
			else
				cell.onclick = click;
		}
		aa_field_handler(field,'ModifyCell',func);
		return [];
	},
	OnHover: function (profile,data,context)
	{
		var field = ajaxart_fieldaspect_getField(context);
		aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
			cell.onmouseover = function() {
				if (!cell.isInside)
					ajaxart.run(field_data,profile,'Action',ctx);
				cell.isInside = true;
			};
			cell.onmouseout = function() { cell.isInside = false; };
		},'OnHover');
		return [];
	},
	CleanGlobalCss: function (profile,data,context) {
		return [aa_clean_global_css(aa_text(data,profile,'Css',context))];
	},
	AdaptCssForBrowser: function (profile,data,context) {
		var css = aa_text(data,profile,'Css',context);
		var forAllBrowsers = aa_bool(data,profile,'GenerateCssForAllBrowsers',context)
		return [aa_adapt_css_for_browser(css, forAllBrowsers)];
	},
	IsCssWellFormed: function (profile,data,context) {
		var css = aa_text(data,profile,'Css',context);
		if (aa_is_css_well_formed(css)) 	return ["true"];
		else								return [];
	},
	Animation: function (profile, data, context) {
		var field = ajaxart_fieldaspect_getField(context);
		var type = aa_first(data,profile,'Type',context);
		if (!type) return [];
		aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
			var elem = cell.firstChild; // scrolling is done on 'content', and can use parentNode for the cell
			if (!elem) return;
			type.animate(elem, function() {
				ajaxart.run(data,profile,'OnDone',context);
			});
		});
		return [];		
	},
	DynamicSize: function (profile, data, context) {
		var field = ajaxart_fieldaspect_getField(context);
		var width = aa_first(data,profile,'Width',context);
		var height = aa_first(data,profile,'Height',context);
		aa_bind(field,'ModifyControl',function(args) {
			var elem = args.Wrapper.firstChild;
			if (!elem) return;
			if (width) width.apply(elem);
			if (height) height.apply(elem);
		});
	}
});


function aa_runFieldAction(object,actionName,moreParams)
{
	/* aa_runFieldAction runs an action of a field defined in field_aspect.DefineAction.
	   object is an api object (e.g. button)
	   moreParams defines variables to be available in the action. e.g. { Location: 'left' }
	*/
	actinName = actionName || 'action';
	moreParams = moreParams || {};
	var field = object.field || object.Field;
	var fieldData = object.FieldData;
	if (!fieldData && object.data) fieldData = [object.data];
	fieldData = fieldData || [];
	var ctx = object.context || object.Context;

	if (!field || !ctx) return;
	if (!field.Actions || !field.Actions[actionName]) {
		return ajaxart.log('calling a non existing field Action ' + actionName,'error');
	}
	var vars = { ControlElement: [object.el] };
	for(var i in moreParams) {		
		if (!moreParams.hasOwnProperty(i)) continue;
		var val = moreParams[i];
		if (!aa_isArray(val)) val = [val];
		vars[i] = val;
	}
	field.Actions[actionName](fieldData,aa_ctx(ctx,vars));
}

function aa_input_value_mask(charsRegex) {
	var totalRegex = new RegExp('^'+charsRegex+'+$');

	return function(val) {
		if (val.match(totalRegex)) return val;
		var out = '';
		for(var i=0;i<val.length;i++) {
			var innerChar = val.charAt(i);
			if (innerChar.match(totalRegex)) out += innerChar;
		}
		return out;
	};
}











aa_gcs("action", {
	WriteValue: function (profile,data,context)
	{
		var into = ajaxart.run(data,profile,'To',context);
		var value = ajaxart.run(data,profile,'Value',context);
		if (ajaxart.isObject_array(into) && into[0].WriteValue) { // value by ref
			if (typeof into[0].WriteValue == "function") // js
				into[0].WriteValue(value,context);
			else
				ajaxart.runScriptParam(value,into[0].WriteValue,context); // xtml
	  } else {
		  ajaxart.writevalue(into,value);
		}
		return ["true"];
	},
	WriteValueWithoutAutoSave: function (profile,data,context)
	{
		var to = ajaxart.run(data,profile,'To',context);
		var value = ajaxart.run(data,profile,'Value',context);
		ajaxart.writevalue(to,value,true);
	},
	RunActionOnItems: function (profile,data,context)
	{
		var items = ajaxart.run(data,profile,'Items',context);
		
		var indicateLast = aa_bool(data,profile,'IndicateLastItem',context);
		var indicateIndex = aa_bool(data,profile,'IndicateItemIndex',context);
		
		for (var i=0;i<items.length;i++)
		{
			var ctx = context;
			if (indicateIndex) ctx = aa_ctx(ctx,{_ItemIndex: [''+i]});
			if (i == items.length-1 && indicateLast) ctx = aa_ctx(ctx,{_IsLastItem: ["true"]}); 
			ajaxart.run([items[i]],profile,'Action',ctx);
		}
	},
	RunActions : function (profile,data,context)
	{
		ajaxart.runsubprofiles(data,profile,'Action',context);
	},
	SetWindowTitle: function (profile,data,context) {
		document.title = aa_text(data,profile,'Title',context);
	},
	JBartDebugAlert: function (profile,data,context) {
		aa_alert( aa_text(data,profile,'Message',context) );
		return data;
	}
});

aa_gcs("bart_url", {
	NewUrlFragment: function (profile,data,context)
	{
		var current = aa_text(data,profile,'Current',context);
		var proposed = aa_text(data,profile,'Proposed',context);

		var curr = current.split('?');
		var prop = proposed.split('?');
		
		var prop_index = "";
		for(var i=1;i<prop.length;i++) {
			if ( prop[i].length > 0 && prop[i].charAt(prop[i].length-1) == ';') prop[i] = prop[i].substring(0,prop[i].length-1);
			
			var item = prop[i].substring(0,prop[i].indexOf('='));
			if (item == '') continue;
			if (i==1) prop_index += ",";
			prop_index = prop_index + item + ",";
		}
		
		var out = "";
		for(var i=1;i<prop.length;i++) {
			var pos = prop[i].indexOf('=');
			if (pos == -1 || pos == prop[i].length-1) continue;
			out += "?" + prop[i];
		}
	
		for(var i=1;i<curr.length;i++) {
			var attr = curr[i].substring(0,curr[i].indexOf('='));
			if (attr.length == 0) continue;
			if (prop_index.indexOf(',' + attr + ',') > -1 ) continue;
//			var _pos = attr.indexOf('_');
//			if (_pos == 0) continue;
//			if (_pos > -1) {
//				var tempPrefix = attr.substring(0,_pos);
//				if (prop_index.indexOf(',' + tempPrefix + ',') > -1 ) continue;
//			}
			out += "?" + curr[i];
		}
		return [out];
	}
});

aa_gcs("ui", {
	CustomCss: function (profile,data,context) {
		var style = aa_first(data,profile,'Style',context);
		if (!style) return [];
		style.Css = aa_text(data,profile,'Css',context);
		return [style];
	},
	CustomStyleByField: function (profile,data,context)
	{
	  return [{
		  Field: function(data1,ctx) { 
		  	return aa_first(data1,profile,'Field',aa_merge_ctx(context,ctx));
	  	  }
	  }];
	},
	CustomStyle: function(profile,data,context)
	{
		var style = {
			Html: aa_text(data,profile,'Html',context),
			Css: aa_text(data,profile,'Css',context),
			Javascript: aa_text(data,profile,'Javascript',context),
			IsTriplet: true,
			params: {}
		};
		var atts = profile.attributes;			// adding attributes as params
		for (var i=0; i < atts.length; i++) {
			var att_name = atts.item(i).nodeName;
			if (att_name != "t" && att_name != "value" && att_name != 'Data' && att_name != "name" && att_name != "Trace")
				style.params[att_name] = ajaxart.totext_array(ajaxart.dynamicText(data,atts.item(i).nodeValue,context));
		}
		return [style];
	}
});

aa_gcs("jbart_jsloader", {
    LoadJavascriptFile: function (profile,data,ctx)
    {
		return [{
			Load:function(data1,context) {
		    	if (! ajaxart.jbart_studio && aa_bool(data,profile,'LoadInDesignTimeOnly',context)) return;
		    	var url = aa_text(data,profile,'Url',context);
		    	jBart.vars.loaded_scripts = jBart.vars.loaded_scripts || {};
		    	if ( jBart.vars.loaded_scripts[url] ) return; // already loaded
	
			    ajaxart_async_Mark(context);
			    jBart.vars.loaded_scripts[url] = true;
			    
		    	ajaxart_RunAsync(data,ajaxart.fieldscript(profile,'EnsureLoaded'),aa_ctx(context,{JsFileUrl: [url]}),function() {
		    		ajaxart_async_CallBack(data,context);
		    	});
			}
		}]
    },
    LoadCssFiles: function (profile,data,ctx)
    {
		return [{
			Load: function(data1,context) {
		    	if (! ajaxart.jbart_studio && aa_bool(data,profile,'LoadInDesignTimeOnly',context)) return;
		    	ajaxart.runNativeHelper(data,profile,'Load',ctx);
			}
		}]
    },
    AutoUsing$: function (profile,data,context)
    {
	    ajaxart_async_Mark(context);
	    $.ajax({ url: aa_totext(context.vars.JsFileUrl), dataType: 'script',
	    	success: function() {
	    		ajaxart_async_CallBack(data,context);
	    	},
	    	error: function() {
	    		ajaxart_async_CallBack(data,context);
	    	}
	    });
    },
    PollingOfJsExpression: function (profile,data,context)
    {
	    var jsExpressionFunc = aa_get_func(aa_text(data,profile,'Expression',context));
	    var pollingTime = aa_int(data,profile,'PollingTime',context);

	    if (jsExpressionFunc()) return; // no need to load anything
	    
	    ajaxart_async_Mark(context);
	    var scriptElement = document.createElement('script');
	    scriptElement.setAttribute('src',aa_totext(context.vars.JsFileUrl));
	    document.body.appendChild(scriptElement);
	    
	    ajaxart_async_Mark(context);

	    function checkIfLoaded() {
	    	if (jsExpressionFunc()) {
	    		ajaxart_async_CallBack(data,context);
	    	} else {
	    		setTimeout(checkIfLoaded,pollingTime);
	    	}
	    }
	    checkIfLoaded();
    },
    CallbackFunction: function (profile,data,context)
    {
    	alert('EnsureLoaded of CallbackFunction is not implemented yet');
    }
});
aa_gcs("bart", {
    PageByID: function (profile,data,context)
    {
		if (!context.vars._AppContext) return [];
    	var pages = context.vars._AppContext[0].Pages;
    	if (!pages) return [];
    	var pageID = aa_text(data,profile,'PageID',context);
		var page = aad_object_byid(pages,pageID);
		if (page) return [page];
		return ajaxart.runNativeHelper(data,profile,'NewPage',context);
		return [];
    },
    HtmlPageTitle: function (profile,data,context)
    {
    	return [{
    		Load: function(data1,ctx) {
    			document.title = aa_text(data,profile,'Title',aa_merge_ctx(context,ctx));
    		}
    	}];
    },
    Javascript: function (profile,data,context1)
    {
    	return [{
   		 Load: function(data1,context) {
	    	if (aa_tobool(context.vars.JBart_OnlyShowPage)) return;
	    	
	    	var js = profile.getAttribute('ScriptOnLoad');
	    	if (!js || js == '') return;
			try {
		    	var func = aa_get_func(js,true);
		    	func(context);
			} catch (e) { 
				ajaxart.log("JavaScript: " + e.message, "error"); 
			}
    	}
    	}];
//    	var elem=document.createElement("script");
//    	elem.setAttribute("type", "text/javascript");
//    	elem.innerHTML = js;
//		document.getElementsByTagName("head")[0].appendChild(elem);
    },
    Page: function (profile,data,context) 
    {
	  var obj = { isObject: true };
	  obj.ID = ajaxart.run(data,profile,'ID',context);
	  obj.ResourceIDs = ajaxart.run(data,profile,'ResourceIDs',context);
	  obj.ResourceID = ajaxart.run(data,profile,'ResourceID',context);
	  obj.Type = ajaxart.run(data,profile,'Type',context);
	  var init = function(page) { 
	    page.Control = function(data1,ctx) {
	      var ctx2 = aa_merge_ctx(context,ctx);
	      ajaxart.runNativeHelper(data,profile,'OverrideUiPrefs',ctx2);
	      var out = [];
	      ajaxart.trycatch( function()  {
		    out = ajaxart.run(data1,profile,'Control',aa_ctx(ctx2, {PageID: page.ID}));
	      }, function (e) {	// catch
	    	  out = $('<div>error showing page</div>').get();
	      });
		  return out;
	    }
	  }
	  init(obj);
	  return [obj];
    }
});

aa_gcs("jbart_resource", {
	Data: function (profile,data,context)   // gc of jbart_reource.Data
	{
		var obj = { Type: "query" };
		obj.Id = aa_text(data,profile,'ResourceID',context);
		obj.ID = [obj.Id];
		obj.CacheIn = aa_first(data,profile,'CacheIn',context);
		obj.FullID = aa_getWidgetIDFromContext(context) + '_' + obj.Id;
		obj.AutoSaveSampleData = aa_bool(data,profile,'AutoSaveSampleData',context); // for the usage of the dt
		var type = obj.Type = aa_text(data,profile,'ValueType',context);
		
		// setting obj.Items
		obj.Items = [];
		
		obj.LoadFromValue = function(value) {
			if (type == 'calculated') return;
			if (type == 'xml clean ns') value = aa_xml_cloneNodeCleanNS(value);
			if (type == 'xml' || type == 'xml clean ns') {
				if (obj.Xml) {
					// already exists (when loading from data source)
					var val = jbart_data(value,'single');
					if (val && val[0]) {
						ajaxart.xml.copyElementContents(obj.Xml,val[0]);
						aa_triggerXmlChange(obj.Xml);
					}
				} else {	// first time					
					obj.Items = jbart_data(value,'single');
					obj.Xml = obj.Items[0];
				}
			}
			if (type == 'text') obj.Items = [ aa_totext([value]) ];
			if (type == 'xml multiple') obj.Items = jbart_data(value,'multiple');
			
			if (typeof(value) != 'string') value = aa_totext([value]);
			
			if (type == 'json to xml') obj.Items = jbart_data(value,'single');
			if (type == 'json') {
				var val = {};
				try {
					val = JSON.parse(value);
				}
				catch(e) { val.error = 'JSON: ' + (e.getMessage ? e.getMessage() : '') + ', parsing value ' } 
				obj.Items = (aa_isArray(val)) ? val : [val];
			}
			if (obj.Type == 'javascript') {
				var val = aa_run_js_code(value,data,context);
				if (val)
				  obj.Items = (aa_isArray(val)) ? val : [val];
			}
		}
		
		if (type == 'calculated') {
			obj.Items = aa_run(data,profile,'Value',context);
		} else {
			if (obj.CacheIn) 
				var value = aa_totext(obj.CacheIn.GetValue(data,aa_ctx(context,{ DataResource: [obj] })));
			else if (type == 'xml' || type == 'xml clean ns') {
				var value = aa_first(data,profile,'Value',context);
			} else {
				var value = aa_cdata_value(aa_xpath(profile,'Value')[0]);
			}
			obj.LoadFromValue(value);
		}
		
		if ((type == 'xml' || type == 'xml clean ns') && obj.CacheIn) {
			obj.XmlChanged = function() {
				if (obj.Saving) return;
				obj.Saving = true;
				setTimeout(obj.SaveXml,200);
			};
			obj.SaveXml = function() {
				obj.CacheIn.Save(data,aa_ctx(context,{ DataResource: [obj]}))
				obj.Saving = false;
			};
			aa_bindXmlChange(obj.Xml,obj.XmlChanged);
		}
		
		obj.DataSource = aa_first(data,profile,'DataSource',context);
		if (obj.DataSource && obj.Xml) {
			var info = aa_getXmlInfo(obj.Xml,context,false);
			info.Save = function(data2,ctx) {
			  obj.DataSource.Save(obj.Items,aa_ctx(context,ctx));
			}
			obj.Load = function(data1,ctx) {
				if (this.DataLoaded) return;
				ajaxart_async_Mark(ctx);
				aad_runMethodAsyncQuery(obj,obj.DataSource.Retrieve,data,aa_merge_ctx(context,ctx),function(result,ctx2){
					obj.DataLoaded = true;
					obj.LoadFromValue(result[0]);
					ajaxart_async_CallBack(data1,ctx);
				});
			}
		}

		return [obj];
	},
	CacheInCookies: function (profile,data,context)
	{
		return [{
			GetValue: function(data1,ctx) {
				var resource = ctx.vars.DataResource[0];
				var out = aa_valueFromCookie(resource.FullID);
				return out ? [out] : [];
			},
			Save: function(data1,ctx) {
				var resource = ctx.vars.DataResource[0];
				if (resource.Items[0]) {
				  aa_writeCookie(resource.FullID,ajaxart.xml2text(resource.Items[0]));
				}
			}
		}];
	},
	CacheInLocalStorage: function (profile,data,context)
	{
		return [{
			GetValue: function(data1,ctx) {
				var resource = ctx.vars.DataResource[0];
				var out = window.localStorage[resource.FullID];
				return out ? [out] : [];
			},
			Save: function(data1,ctx) {
				var resource = ctx.vars.DataResource[0];
				if (resource.Items[0]) {
					window.localStorage[resource.FullID] = ajaxart.xml2text(resource.Items[0]);
				}
			}
		}];
	}
});
aa_gcs("bart_resource", {
	ResourcesToGlobalVars: function (profile,data,context)
	{
		if (! context.vars._GlobalVars) return;
		var globals = context.vars._GlobalVars[0];
		var bc = context.vars._AppContext[0];
		var resources = bc.Resources;
		for(var i=0;i<resources.length;i++) {
			init(globals,resources[i]);
		}
		
		function init(globals,resource) {
			var id = aa_totext(resource.ID);
			globals[id] = function() { return resource.Items; };			
		}
	},
	Value: function (profile,data,context)
	{
		var obj = { isObject:true , Type: "value" }
		obj.Id = aa_text(data,profile,'ResourceID',context);
		obj.ID = [obj.Id];
		obj.FullID = aa_getWidgetIDFromContext(context) + '_' + obj.Id;		
		obj.Items = ajaxart.run(data,profile,'Value',context);
		
		return [obj];
	},
	Xml: function (profile,data,context)
	{
		var obj = { isObject:true , Type: "query" }
		obj.Id = aa_text(data,profile,'ResourceID',context);
		obj.ID = [obj.Id];
		obj.Mode = aa_text(data,profile,'Mode',context);
		obj.Storage = aa_text(data,profile,'Storage',context);
		obj.FullID = aa_getWidgetIDFromContext(context) + '_' + obj.Id;
		obj.AutoSaveSampleData = aa_bool(data,profile,'AutoSaveSampleData',context); // for the usage of the dt
		
		var nameOfGlobalVar = 'jBartWidget_' + ajaxart.totext(context.vars.WidgetId) + '_' + obj.Id; 
		if ( window[nameOfGlobalVar] )
			obj.Xml = window[nameOfGlobalVar][0] || aa_parsexml('<xml/>');
		else if (obj.Storage == '' || obj.Storage == 'in memory')
		  obj.Xml = aa_first(data,profile,'Xml',context);
		else {
			var textval = '';
			if (obj.Storage == 'cookie') 
			  textval = aa_valueFromCookie(obj.FullID);
			if (obj.Storage == 'local storage' && window.localStorage) 
				textval = window.localStorage[obj.FullID];
			
			if (textval == null || textval == '') 
				obj.Xml = aa_first(data,profile,'Xml',context);
			else
				obj.Xml = aa_parsexml(textval);
			
			if (!obj.Xml) obj.Xml = aa_parsexml('<xml/>');
			function init(obj) {
				obj.XmlChanged = function() {
					if (obj.Saving) return;
					obj.Saving = true;
					setTimeout(obj.SaveXml,200);
				}
				obj.SaveXml = function() {
					if (obj.Storage == 'cookie')
					  aa_writeCookie(obj.FullID,ajaxart.xml2text(obj.Xml));
					if (obj.Storage == 'local storage' && window.localStorage) {
						window.localStorage[obj.FullID] = ajaxart.xml2text(obj.Xml);
					}
					obj.Saving = false;
				}
				aa_bindXmlChange(obj.Xml,obj.XmlChanged);
			}
			init(obj);
		}
		if (!obj.Xml) return [obj];
		obj.Items = ( obj.Mode == 'single' ? [obj.Xml] : aa_xpath(obj.Xml,'*') ); 
		
		obj.DataSource = aa_first(data,profile,'DataSource',context);
		if (obj.DataSource) {
			var info = aa_getXmlInfo(obj.Xml,context,false);
			info.Save = function(data2,ctx) {
				obj.DataSource.Save([obj.Xml],aa_ctx(context,ctx));
			}
			obj.Load = function(data1,ctx) {
				if (this.DataLoaded) return;
				ajaxart_async_Mark(ctx);
				aad_runMethodAsyncQuery(obj,obj.DataSource.Retrieve,data,aa_ctx(context,ctx),function(result,ctx2){
					obj.DataLoaded = true;
					if (result.length > 0) ajaxart.xml.copyElementContents(obj.Xml,result[0]);
					ajaxart_async_CallBack(data1,ctx);
				});
			}
		}
		return [obj];
	},
	Javascript: function (profile,data,context)
	{
		try {
	    	var func = aa_get_func(profile.getAttribute('Code'));
	    	var out = func(context);
	    	return [out];
		} catch (e) { 
			ajaxart.log("JavaScript: " + e.message, "error"); 
		}
	}
});


aa_gcs("data_items", {
	Items: function (profile,data,context)
	{
		var out = {};

		out.ItemTypeName = ajaxart.run(data,profile,'ItemTypeName',context);
		out.Items = ajaxart.run(data,profile,'Items',context);

		var refreshFunc = function(out) { this.run = function() { out.Items = ajaxart.run(data,profile,'Items',context); return ["true"];} };
		ajaxart_addScriptParam_js(out,'Refresh',new refreshFunc(out).run,context);

		var newContext = aa_ctx(context,{_Items: [out]} );
		ajaxart.runsubprofiles(data,profile,'Aspect',newContext);
		
		if (! out.Subset) {
			out.Subset = function(data1,ctx) { 
				var subset = { isObject: true, Items: ctx.vars._InnerItem };
				return [subset];
			}
		}
		return [out];
	},
	AddXmlItem: function (profile,data,context)
	{
		var dataitems = context.vars._Items[0];
		var parent = aa_first(data,profile,'Parent',context);
		dataitems.SubsetForNewItem = function(data1,ctx) {
			var newXml = aa_parsexml( aa_text(data,profile,'NewItem',context) ,'', '', false,parent);
			if (!newXml) return;
			var innerItems = { isObject: true, Items: [newXml]};
			if (parent && newXml && parent.appendChild) {
				parent.appendChild(newXml);
			}
			innerItems.Cancel = function() {
				parent.removeChild(newXml);
			}
			return [innerItems];
		}
	}
});
aa_gcs("uiaction",{
	AddCssClass: function(profile, data, context) {
	  	var field_id = aa_text(data,profile,'AddTo',context);
		var elem = aad_find_field(field_id,null);
		$(elem).addClass( aa_text(data,profile,'Class',context) );
	}
});
aa_gcs("operation", {
	ClickOnButton: function(profile, data, context) {
	  	var field_id = aa_text(data,profile,'Button',context);
	  	if (!field_id) return;
	  	var btn = null,controlElement = aa_var_first(context,'ControlElement');
	  	if (controlElement) btn = $(controlElement).find('.fld_'+field_id)[0];
	  	if (!btn) {
				var top = aa_intest ? aa_intest_topControl : document;
		  	var btn = $(top).find('.fld_'+field_id)[0];
		  }
	  	if (!btn) return;
	  	
	  	if (btn.jbButtonElement)
	  		$(btn.jbButtonElement).trigger("click");
	  	else
	  		if (btn.jbApiObject && btn.jbApiObject.action) btn.jbApiObject.action();
	},
	SelectTextInTextBox: function(profile, data, context) {
	  	var field_id = aa_text(data,profile,'Textbox',context);
	  	var input = aa_find_field_input(aa_find_field(context,field_id)[0]);
	  	if (input) input.select();
	},
	SelectFromPicklist: function(profile, data, context) {
	  	var field_id = aa_text(data,profile,'FieldID',context);
	  	var optionCode = aa_text(data,profile,'OptionCode',context);

	  	var top = aa_var_first(context,'ControlElement') || 'body';
	  	var picklist_ctrl = $(top).find('.fld_'+field_id)[0];
	  	if (picklist_ctrl && picklist_ctrl.jbApiObject && picklist_ctrl.jbApiObject.setValue)
	  		picklist_ctrl.jbApiObject.setValue(optionCode);
	}

});

aa_gcs("text",{
});

aa_gcs("xml",{
	AttributeName: function(profile,data,context)
	{
		if (ajaxart.isxml(data) && data[0].nodeType == 2) 
			return [ data[0].nodeName ];
		return [];
	},
	AddChildren: function(profile, data, context) {
		var inputForChanges = ajaxart.getVariable(context,"InputForChanges");
		var children = ajaxart.run(inputForChanges,profile, 'Children', context);
		var clone = aa_bool(inputForChanges,profile,'CloneChildren',context);
		
		if (data.length == 0) return [];
		var imported_items = [];
		for(var i=0;i<children.length;i++) {
			var item = aa_importNode(children[i],data[0]);
			imported_items.push(item);
			if (!clone)
				aa_xml_appendChild(data[0],item);
			else
				aa_xml_appendChild(data[0],ajaxart.xml.clone([item]));
		}
		if (children.length > 0) aa_triggerXmlChange(data[0]);
		ajaxart.run(imported_items,profile, 'RunOnChildren', context)
		return data;
	},
	Attributes: function(profile,data,context)
	{
		var alsoEmpty = aa_bool(data,profile,'AlsoEmpty',context);
		
		if (ajaxart.isxml(data) && data[0].nodeType == 1)
		{
			var out = [];
			var atts = data[0].attributes;
			if (atts != null)
				for (var i = 0; i < atts.length; i++) {
					if (alsoEmpty) out.push(atts.item(i));
					else if (atts.item(i).nodeValue != "") out.push(atts.item(i));
				}
			
			return out;
		}
		return [];
	},
	Duplicate : function(profile, data, context) {
		var element = ajaxart.run(data,profile, 'Element', context);
		var inputforChanges = ajaxart.getVariable(context,"InputForChanges");
		var items = ajaxart.run(inputforChanges,profile, 'Items', context);
		var Separator = ajaxart.run(data,profile, 'Separator', context);
		var SeparatorAround = aa_bool(data,profile,'SeparatorAround',context);
		var bindToSeparator = ajaxart.run(data,profile,'BindToSeparator',context);
		
		if (element.length == 0 || element[0].nodeType != 1) return []; 
		var parent = element[0].parentNode;
		if (Separator[0] != null && SeparatorAround)
			{
				var toAdd = ajaxart.xml.clone(Separator);
				if (Separator[0].ajaxart != null) toAdd.ajaxart = Separator[0].ajaxart;
				parent.appendChild(toAdd);
			}
		var local_context = ajaxart.clone_context(context); 
		for (var i=0; i<items.length; i++) {
			var item = items[i];
			var new_item = ajaxart.xml.clone(element);
			ajaxart.setVariable(local_context,"InputForChanges",[item]);
			ajaxart.setVariable(local_context,"DuplicateIndex",[ "" + (i+1)]);
			var changes = ajaxart.subprofiles(profile,'ChangeOnElement');
			ajaxart.each(changes,function(changeProfile) {
				ajaxart.run([new_item],changeProfile, "", local_context);
			});
			if (i==0) {
				var changes = ajaxart.subprofiles(profile,'ChangeOnFirstElement');
				ajaxart.each(changes,function(changeProfile) {
					ajaxart.run([new_item],changeProfile, "", local_context);
				});
			}
			parent.appendChild(new_item);
			if (Separator[0] != null)
				if (i+1 < items.length || SeparatorAround)
				{
					var toAdd = ajaxart.xml.clone(Separator);
					if (Separator[0].ajaxart != null) toAdd.ajaxart = Separator[0].ajaxart;
					parent.appendChild(toAdd);
				}
		}
		parent.removeChild(element[0]);
		return ["true"];
	},
	Parent: function(profile, data, context) {
		if (! ajaxart.isxml(data)) return [];
		if (data[0].nodeType == 1 && data[0].parentNode != null) 
			return [ data[0].parentNode ];
		return [];
	},
	SetAttribute: function(profile, data, context) 
	{
		var inputForChanges = ajaxart.getVariable(context,"InputForChanges");
		var newValue = aa_text(inputForChanges,profile, 'Value', aa_ctx(context,{ _XmlNode: data }));
		var attrName = aa_text(inputForChanges,profile, 'AttributeName', context);
		if (attrName == "") { return; }
		var removeEmptyAttribute = aa_bool(data,profile, 'RemoveEmptyAttribute', context);
		var changed = false;
		
		for(var i=0;i<data.length;i++) {
			var xml = data[i];
			if (!ajaxart.isxml(xml) || xml.nodeType != 1)
				return;
			if (newValue != "" && xml.getAttribute(attrName) == newValue) continue;
			
			if (newValue != "")
				xml.setAttribute(attrName,newValue);
			else { // empty
				if (aa_bool(data,profile, 'RemoveEmptyAttribute', context))
					xml.removeAttribute(attrName);
				else
					xml.setAttribute(attrName,"");
			}
			changed = true;
		}
		if (changed) aa_triggerXmlChange(data[0]);
		
		return [newValue];
	},
	Tag: function(profile, data, context) {
		var removeNamespace = aa_bool(data,profile, 'RemoveNamespace', context);
		if ( !ajaxart.isxml(data) ) return [];
		
		var xml = data[0];
		if (xml.nodeType == 2 ) {// attribute
			xml = aa_xpath(xml,'..')[0];
			if (!xml) return [];
		}
		
		var tag = aa_tag(xml);
		if ( removeNamespace )
			return [tag.replace(/.*:/,"")];
		else
			return [tag];
		
		return [];
	},
	WithChanges: function(profile, data, context) {
		//$("#ajaxart_trace_control").append(ajaxart.xml.xpath_of_node(profile,"id",true) + '<br/>');
		var xml_src = ajaxart.run(data,profile,'Xml',context);
		var newContext = ajaxart.clone_context(context);
		ajaxart.setVariable(newContext,"InputForChanges",data);
		var out = [];
		ajaxart.each(xml_src, function(item) {
			var xml = item;
			if ( ! ajaxart.ishtml(item) && aa_bool(data,profile,'CloneXml',context))
			  xml = ajaxart.xml.clone([item]);
				
			var changes = ajaxart.subprofiles(profile,'Change');
			ajaxart.each(changes,function(changeProfile) {
				ajaxart.run([xml],changeProfile, "", newContext);
			});
			out.push(xml);
		});
		return out;
	},
	Wrap: function(profile, data, context) {
		if ((!ajaxart.isxml(data)) || data[0].nodeType == 9) { return []; } // Document 

		var headtag = aa_text(data,profile,'HeadTag',context);
		var head = aa_first(data,profile, 'Head', context);
		if (head == null) {
			if (headtag == "") return [];
			head = aa_createElement(data[0],headtag);
		}
				
		if (! ajaxart.ishtml(data))
		{
			for(var i=0;i<data.length;i++)
				aa_xml_appendChild(head,data[i].cloneNode(true));
		}
		else
		{
			for(var i=0; i<data.length; i++)
				aa_xml_appendChild(head,data[i]);
		}
		
		return [head];
	},
	Xml: function(profile, data, context) {
		var dynamicContent = profile.getAttribute('DynamicContent') == 'true';
		var xmlescape = profile.getAttribute('EncodeDynamicContent') != 'false';

		var child = ajaxart.childElem(profile,"*");
		if (child == null) 
			return [ aa_createElement(data[0],'xml') ];

	  if (!dynamicContent)
		{
			return [ ajaxart.xml.clone([child]) ];
		} else {  // dynamic content
	    	var text = ajaxart.xml2text(child);
	    	var newxml_text = ajaxart.dynamicText(data,text,context,data,false,xmlescape)[0];
	    	var out = aa_parsexml(newxml_text);
	    	if (out != null) return [out];
	    	return [];
	    }
	},
	XmlItems: function (profile,data,context)
	{
		var dataitems = { isObject: true }
		dataitems.ParentXml = aa_first(data,profile,'Parent',context);
		var tag = aa_text(data,profile,'Tag',context);
		dataitems.Tag = tag;
		if (tag.indexOf(',') > -1) {  // more than one tag
			var tags = tag.split(',');
			dataitems.Tag = tags[0];
			dataitems.AllTags = tags;
		}
		dataitems.ItemTypeName = aa_text(data,profile,'ItemTypeName',context);
		if (dataitems.ItemTypeName == "")
			dataitems.ItemTypeName = aa_text_capitalizeToSeperateWords( ajaxart_multilang_text(tag,context) );
		
		var init = function(dataitems) 
		{
			dataitems.InitXmlItem = function(xml) 
			{
				var info = aa_getXmlInfo(xml,context);
				info.DataItems = dataitems;
				info.PrepareForEdit = function() {
					this.OriginalCopy = this.Xml.cloneNode(true);
				}
				info.Cancel = function(data1,ctx2) {
					if (aa_tobool(ctx2.vars.IsNewItem))
						this.Delete(data1,ctx2);
					else if (this.OriginalCopy)
					  ajaxart.xml.copyElementContents(this.Xml,this.OriginalCopy);
				}
				info.Delete = function() {
					xml.parentNode.removeChild(xml);
					aa_removeXmlInfo(xml);
					aa_triggerXmlChange(this.DataItems.ParentXml);
					for(var i=0;i<dataitems.Items.length;i++) {
						if (dataitems.Items[i] == xml) { dataitems.Items.splice(i,1); break;} 
					}
					aa_triggerXmlChange(dataitems.ParentXml);				
				}
			}
			dataitems.Refresh = function(data1,ctx) {
				if (!dataitems.AllTags)
				  dataitems.Items = (dataitems.Tag != "") ? aa_xpath(dataitems.ParentXml,dataitems.Tag) : [];
				else {
					dataitems.Items = [];
					for(var i in dataitems.AllTags)
						if (dataitems.AllTags.hasOwnProperty(i))
							ajaxart.concat(dataitems.Items,aa_xpath(dataitems.ParentXml,dataitems.AllTags[i]));
				} 
				if (aa_paramExists(profile,'ElementCondition')) {
					var newItems = [];
					for(var i=0;i<dataitems.Items.length;i++)
						if (aa_bool([dataitems.Items[i]],profile,'ElementCondition',context))
							newItems.push(dataitems.Items[i]);
					
					dataitems.Items = newItems;
				}
				for(var i=0;i<dataitems.Items.length;i++)
					dataitems.InitXmlItem(dataitems.Items[i]);
			}
			dataitems.DeleteItem = function(data1,ctx) {
				var info = aa_getXmlInfo(data1[0],context);
				if (info.Delete) return info.Delete(data1,ctx);
			}
			dataitems.SubsetForNewItem = function(data1,ctx) {
				var tag = dataitems.Tag;
				if ( dataitems.AllTags && aa_totext(ctx.vars._NewItemTag) != "" ) {
					tag = aa_totext(ctx.vars._NewItemTag);
					if ( dataitems.AllTags.join(',').indexOf(tag) == -1) tag = dataitems.Tag; 
				}
				var item = aa_createElement(dataitems.ParentXml,tag);
				ajaxart.run([item],profile,'DoOnNewItem',context);
				var info = aa_getXmlInfo(item,context);
				info.DataItems = dataitems;
				info.Save = function(data2,ctx2) {
					var dataitems = this.DataItems;
					if (!dataitems.ParentXml) return [];
					dataitems.ParentXml.appendChild(this.Xml);
					aa_triggerXmlChange(dataitems.ParentXml);
					dataitems.Items.push(item);
					dataitems.InitXmlItem(item);
				}
				var subset = { isObject: true , Items: [item]};
				subset.Save = function(data2,ctx2) {
					var info = aa_getXmlInfo(this.Items[0],context);
					info.Save([info.Xml],ctx);
				}
				if (aa_tobool(ctx.vars._DataItemsImmediateAdd)) {
					subset.Save([],ctx);
					subset.Save = function(data1,ctx2) {
						if (subset.Items.length == 0) return [];
						var info = aa_getXmlInfo(subset.Items[0],ctx2);
						info.Save(data1,ctx2);
					}
				}
				
				return [subset];
			}
			dataitems.Subset = function(data1,ctx) 
			{
				var item = ctx.vars._InnerItem[0];
				var subset = { isObject: true, ItemTypeName: dataitems.ItemTypeName , Items: [item]}
				var info = aa_getXmlInfo(item,context);
				subset.DeleteItem = info.Delete;
				subset.Cancel = info.Cancel;
				subset.Save = function() {}
				if (info.PrepareForEdit) info.PrepareForEdit();
				return [subset];
			}
			dataitems.CanPasteFromDataItems = function(draggedDataItems,ctx) {
				if (aa_paramExists(profile,'CanPasteItem')) {
			      return aa_frombool( aa_bool([draggedDataItems],profile,'CanPasteItem',aa_ctx(context,{_Items: [this]})) );
				}
				if (draggedDataItems[0].Tag && dataitems.Tag && draggedDataItems[0].Tag == dataitems.Tag)
					return ['true'];
				return [];
			}
			dataitems.MoveBefore = function(data1,ctx) {
				if (data1.length == 0) return [];
			    var item = data1[0].Item[0];
			    var to = data1[0].BeforeItem[0];
				if (ajaxart.isxml(to) && ajaxart.isxml(item) )
					if (to.ownerDocument == item.ownerDocument && item.ownerDocument != null)
						to.parentNode.insertBefore(item,to);

				aa_triggerXmlChange(dataitems.ParentXml);				
				dataitems.Items = aa_xpath(dataitems.ParentXml,dataitems.Tag);
				return ["true"];
			}
			dataitems.MoveToEnd = function(data1,ctx) {
				if (data1.length == 0) return [];
			    var item = data1[0];
				if (dataitems.ParentXml == null)
					return [];
				dataitems.ParentXml.appendChild(item);
				dataitems.Items = aa_xpath(dataitems.ParentXml,dataitems.Tag);
				aa_triggerXmlChange(dataitems.ParentXml);				
				
			    return ["true"];
			}
			dataitems.SetNewOrder = function(items,ctx) {
				if (items.length == 0) return [];
				if (!dataitems.ParentXml) return [];
				if ($(dataitems.ParentXml).find('>*').length != items.length) return [];
				$(dataitems.ParentXml).empty().append(items);
				dataitems.Items = aa_xpath(dataitems.ParentXml,dataitems.Tag);
				aa_triggerXmlChange(dataitems.ParentXml);				
				
			    return ["true"];
			}

		}
		init(dataitems);
		dataitems.Refresh(data,context);
		ajaxart.runsubprofiles(data,profile,'Aspect',aa_ctx(context, {_Items: [dataitems]}));
		
		return [dataitems];
	}
});

aa_gcs("xtml", {
	  UseAndTranslateParam: function (profile,data,context)
	  {
		  var param = aa_text(data,profile,'Param',context); 
		  var input = ajaxart.run(data,profile,'Input',context);
		  
		  var paramScript = context.params[param];
		  if (aa_isArray(paramScript)) // script='false'
			  return paramScript;
		  
		  if (paramScript == null || paramScript.script == null) return [];
		  if (paramScript.compiled == "same") return input;
		  
		  // if we're here we are in script=true
		  
		  var newContext = {};
		  newContext.vars = context.vars;
		  newContext.params = context.componentContext.params;
		  newContext.componentContext = context.componentContext.componentContext;
		  
		  if (paramScript.script.nodeType == 2) // attribute, we can translate it
			  return ajaxart_multilang_run(input,paramScript.script,'',newContext);
		  
		  if (paramScript.compiled == null)
			  return ajaxart.run(input,paramScript.script,"",newContext);
		  else  
			  return paramScript.compiled(input,newContext);
	  },
	  ComponentDefinition: function (profile,data,context)
	  {
		return ajaxart.make_array(data,function(item) {
		   var id = aa_text(item,profile,'ID',context);
		   if (id == "")
			   return null;
		   var toXtml = aa_bool(item,profile,'ToXtml',context);
		   try {
			 var middlePos = id.indexOf('.');
			 var ns = id.substring(0,middlePos);
			 var compName = id.substr(middlePos+1);

			 if (ajaxart.components[ns] == null) return [];
			 var global = ajaxart.components[ns][compName];
		   } catch(e) { ajaxart.log("ComponentDefinition: cannot find component " + id); return [];}
		   
		   if (toXtml)
			   return ajaxart.childElem(global,"xtml");
		   else
			   return global;
		   
		},true);
	  },
	  ComponentsOfType: function (profile,data,context)
	  {
		  if ( ! window.ajaxart_comp_of_type_cache ) {
			  ajaxart_comp_of_type_cache = {};
			  ajaxart_comp_of_type_advanced_cache = {};
			  for (var i in ajaxart.components) {
				  var advanced = false;
				  if (i.lastIndexOf("_dt") == i.length-3 && i.length > 3 || i == "aaeditor") advanced = true;
				  for(var j in ajaxart.components[i]) {
					  var comp = ajaxart.components[i][j];
					  if (comp.getAttribute('hidden') == 'true' || comp.getAttribute('deprecated') == 'true') continue;
//					  if (! advanced && comp.getAttribute('advanced') == "true") advanced = true;
					  var types = (comp.getAttribute('type') || '').split(',');
					  for(var k=0;k<types.length;k++) {
						  if (types[k].split('.').length > 2) // e.g. data_items.Items.PageData
							  types.push(types[k].substring(0,types[k].lastIndexOf('.')));
					  }
					  var category = comp.getAttribute('category');
					  if (category) types.push(types[0]+'.'+category);
					  
					  for(var t in types)
					  {
						  var type = types[t];
						  if (!advanced) {
							if (ajaxart_comp_of_type_cache[type] == null) ajaxart_comp_of_type_cache[type] = [];
							ajaxart_comp_of_type_cache[type].push("" + i + "." + j);
						  }
						  else {
						    if (ajaxart_comp_of_type_advanced_cache[type] == null) ajaxart_comp_of_type_advanced_cache[type] = [];
						    ajaxart_comp_of_type_advanced_cache[type].push("" + i + "." + j);
						  }
					  }
				  }
			  }
		  }
		  
		  var type = aa_text(data,profile,'Type',context);
		  var out = ajaxart_comp_of_type_cache[type];

		  if (aa_bool(data,profile,'ForAllTypes',context)) {
			  ajaxart.concat(out,ajaxart_comp_of_type_advanced_cache[type]);
			  ajaxart.concat(out,ajaxart_comp_of_type_cache["*"]);
		  }
		  
		  if (out == null) out = [];
		  return out;
	  },
	  Params: function (profile,data,context)
	  {
		  var out = { isObject: true };
		  var elem = profile.firstChild;
		  while (elem != null)
		  {
			  if (elem.nodeType == 1) 
			  {
				  var tag = elem.tagName;
				  var name = elem.getAttribute('name');
				  if (name == null || name == "") { elem = elem.nextSibling;  continue; }
				  
				  if (tag == 'Param') {
					  out[name] = ajaxart.run(data,elem,'',context);
				  } else if (tag == 'ScriptParam') {
					  out[name] = { script: elem , context: context, compiled: ajaxart.compile(elem,'',context,elem.getAttribute("paramVars")) };
				  } else if (tag == 'Method') {
					  out[name] = { script: elem , context: context, objectForMethod: [out], compiled: ajaxart.compile(elem,'',context,elem.getAttribute("paramVars")) };
				  } else if (tag == 'ScriptParamArray') {
					  var scriptArr = ajaxart.run(data,elem,'',context);
				      var value = [];
					  for(var j=0;j<scriptArr.length;j++)
						value.push( { script: scriptArr[j] , context: context.componentContext } );
					  
					  out[name] = value;
				  }
			  }
		    elem = elem.nextSibling;
		  }
				
		  return [out];
	  },
	  UseParam: function (profile,data,context)
	  {
		  var param = aa_text(data,profile,'Param',context); 
		  var input = ajaxart.run(data,profile,'Input',context);

		  var paramScript = context.params[param];
		  if (aa_isArray(paramScript)) // script='false'
			  return paramScript;

		  if (typeof(paramScript) == 'function') return paramScript(input,context);
		  
		  if (paramScript == null || paramScript.script == null) 
			  return [];
		  if (paramScript.compiled == "same") return input;
		  
		  // if we're here we are in script=true
		  
	  	  var newContext = { params: []};
	  	  newContext.vars = context.vars;
	  	  if (context.componentContext) {
	  	    newContext.params = context.componentContext.params;
	  	    newContext.componentContext = context.componentContext.componentContext;
	  	  }
			
		  if (paramScript.compiled == null)
			  return ajaxart.run(input,paramScript.script,"",newContext);
		  else  
			  return paramScript.compiled(input,newContext);
	  },
	  UseParamArray: function (profile,data,context)
	  {
		  var param = aa_text(data,profile,'Param',context); 
		  var paramScript = context.params[param];
		  if (!paramScript) {
		  	ajaxart.log('UseParamArray: Can not find param ' + param);
		  	return [];
		  }
		  if (aa_isArray(paramScript)) // script='false'
			  return paramScript;

	  	  var newContext = {};
	  	  newContext.vars = context.vars;
	  	  if (context.componentContext) {
		  	  newContext.params = context.componentContext.params;
		  	  newContext.componentContext = context.componentContext.componentContext;
		  	}

	  	  return ajaxart.runsubprofiles(data,paramScript.script,paramScript.field,newContext);
	  },
	  UseParamArrayAsync: function (profile,data,context)
	  {
		  var param = aa_text(data,profile,'Param',context); 
		  var paramScript = context.params[param];
		  if (aa_isArray(paramScript)) // script='false'
			  return paramScript;
		  
		  var actionProfs = ajaxart.subprofiles(paramScript.script,paramScript.field);
		  if (actionProfs.length == 0) return;
		  
		  var newContext = {};
		  newContext.vars = context.vars;
		  newContext.params = context.componentContext.params;
		  newContext.componentContext = context.componentContext.componentContext;
		  
		  var cbObj = ajaxart_async_GetCallbackObj(newContext);
	      cbObj.marked = true;
		  cbObj.index = 0;
		  cbObj.actionProfs = actionProfs;
			
		  var callBack = function(data1,context1) {
			var cbObj = ajaxart_async_GetCallbackObj(newContext);
			if (cbObj.index >= cbObj.actionProfs.length) {
				ajaxart_async_CallBack(data,newContext); return;
			}
			var actionProf = cbObj.actionProfs[cbObj.index];
			cbObj.index++;
			ajaxart_RunAsync(data,actionProf,newContext,cbObj.seqCallBack);
		  }
		  cbObj.seqCallBack = callBack;
		  callBack(data,newContext);
	  }
});

aa_gcs("yesno", {
	  Expression: function (profile,data,context)
	  {
		return ajaxart.run(data,profile,'Expression',context,'',true);
	  },
	  IsEmpty: function (profile,data,context)
	  {
		  var val = ajaxart.run(data,profile,'Value',context);
		  var checkInner = aa_bool(data,profile,'CheckInnerText',context);
		  return aa_isEmpty(val,checkInner);
	  },
	  PassesFilter: function (profile,data,context)
	  {
	  	return ajaxart.make_array(data,function(item) {
	  		if (! aa_bool(item,profile,'Filter',context))
	  			return null;
			return item;
	  	});
	  },
	  ItemsEqual: function (profile,data,context)
	  {
	    var item1 = ajaxart.run(data,profile,'Item1',context);
	    var item2 = ajaxart.run(data,profile,'Item2',context);
	    
	    if (item1.length == 0 && item2.length == 0) return ["true"];
	    if (item1.length == 0 || item2.length == 0) {
	    	var item = (item1.length > 0) ? item1 : item2;
	    	if ( aa_itemsEqual(item[0],"") ) return ["true"]; else return [];
	    }
	    
	    if ( aa_itemsEqual(item1[0],item2[0]) ) return ["true"];
	    return [];
	  },
	  Not: function (profile,data,context)
	  {
		  var result = aa_bool(data,profile,'Of',context);
		  if (result == false)
			  return ["true"];
		  else
			  return [];
	  },
	  OR: function (profile,data,context)
	  {
	    var subprofiles = ajaxart.subprofiles(profile,'Item');
	    
		for(var i=0;i<subprofiles.length;i++)
		{
	  		if ( aa_bool(data,subprofiles[i],"",context) )
	  			return ["true"];
	  	};
	  	return [];
	  },  
	  And: function (profile,data,context)
	  {
	    var subprofiles = ajaxart.subprofiles(profile,'Item');
	    
		for(var i=0;i<subprofiles.length;i++)
		{
	  		if ( ! aa_bool(data,subprofiles[i],"",context) )
	  			return [];
	  	};
	  	return ["true"];
	  },
	  Empty: function (profile,data,context)
	  {
	  	return aa_isEmpty(data,aa_bool(data,profile,'CheckInnerText',context));
	  },	
	  NotEmpty: function (profile,data,context)
	  {
		  var value = ajaxart.run(data,profile,'Value',context);
		  var check = aa_bool(data,profile,'CheckInnerText',context);
		  var result = aa_isEmpty(value,check);
		  if (result == true || result[0] == 'true') return [];
		  return ['true'];
	  }	
});

aa_gcs("data_items", {
	InnerDataItems: function (profile,data,context)
	{
		var dataitems = context.vars._Items[0];
		dataitems.Parent = aa_first(data,profile,'ParentDataItems',context);
		if (dataitems.Parent == dataitems) { dataitems.Parent = null; return []; }
		var init = function(dataitems) {
			dataitems.SaveParent = function(data1,ctx) {
				if (dataitems.Parent.SaveParent)
				  return dataitems.Parent.SaveParent(data1,ctx);
				else if (dataitems.Parent.Save)
					return dataitems.Parent.Save(data1,ctx);
			}
		}
		init(dataitems);
	}
});

aa_gcs("field", {
	XmlMultipleGroup: function (profile,data,context)
	{
		var field = { isObject : true, Title: aa_multilang_text(data,profile,'Title',context), IsGroup: true, IsMultipleGroup: true }
		var path = aa_text(data,profile,'Path',context);
		var middleElement = path.indexOf('/') != -1;
		
		field.Id = aa_text(data,profile,'ID',context);
		if (field.Id == "") field.Id = path.split('/').reverse().pop();
		
		field.ID = [ field.Id ]; 
		field.Fields = ajaxart.runsubprofiles(data,profile,'Field',context);
		
		field.FieldData = function(data) { return data; }
		
		var itemsProvider = aa_first(data,profile,'Items',context);
		if (itemsProvider && itemsProvider.ContainerData) field.FieldData = itemsProvider.ContainerData;
		else {
			if (path.indexOf('/') != -1) {
				var lastpos = path.lastIndexOf('/');
				var subPath = (lastpos==-1) ? path : path.substring(0,lastpos);
				aa_set_fielddata_method(field,subPath);
			}
		}

		field.InnerItems = function(data1,ctx) {
			var ctx = aa_merge_ctx(context,ctx);
			var out = ajaxart.runNativeHelper(data1,profile,'Items',ctx);
			out[0].MultipleItemsField = this; 
			return out;
		}
		field.Operations = function(data1,ctx) {
			return ajaxart.run(data,profile,'Operations',context);
		}
		field.Control = function(data1,ctx) {
			var ctx2 = aa_ctx(aa_merge_ctx(context,ctx),{_Field: [this]});
			return ajaxart.runNativeHelper(data1,profile,'Control',ctx2);
		}
		field.Aspects = function(data1,ctx) { return ajaxart.runsubprofiles([],profile,'Aspect',context); }
		
		var newContext = aa_ctx(context,{_Field: [field]} );
		ajaxart.runsubprofiles(data,profile,'FieldAspect',newContext);
		
		return [field];
	}
});

aa_gcs("ui_async", {
	  Control: function (profile,data,context)
	  {
		var out = document.createElement('div');
		var loadingControl = aa_first(data,profile,'ControlForLoading',context);
		if ( loadingControl != null ) { out.appendChild(loadingControl); $(out).addClass('aa_loading'); }
		
		var ShowControl1 = function(out) { return function(data1,context1) {
			var ShowControl2 = function(data2,ctx2) {
				var control = aa_first(data1,profile,'Control',context);
				aa_empty(out);
				$(out).removeClass('aa_loading');
				if (control != null) {
					out.appendChild(control);
					aa_element_attached(control);
					aa_fixTopDialogPosition();
				}
				aa_fire_async_finished();
			}
			
			ajaxart_RunAsync(data1,ajaxart.fieldscript(profile,'AsyncAction'),context,ShowControl2); 
		} };
		var async_data = ajaxart.fieldscript(profile,'AsyncData');
		if (async_data)
			aa_RunAsyncQuery(data,async_data,context,ShowControl1(out));
		else
			ShowControl1(out)(data,context);
		//ajaxart_RunAsync(data,async_data,context,ShowControl1(out));
		
		return [out];
	  }
});

aa_gcs("action_async", {
	RunActions: function(profile, data, context)
	{
		return ajaxart.gcs.action_async.SequentialRun(profile,data,context);
	},
	SequentialRun: function(profile, data, context)
	{
		aad_async_XtmlSequentialRun(data,profile,'Action',context);
	}
});
aa_gcs("ui", {
	ButtonAsHyperlink: function (profile,data,context)
	{
		var btnContext = context.vars.ButtonContext[0];
		var out = null;;
		var image = aa_totext(btnContext.Image);
		var text = aa_totext(btnContext.Text);
		var tooltip = aa_totext(btnContext.Tooltip);
		var textInlineCss = aa_text(data,profile,'TextInlineCss',context); 
		var imageInlineCss = aa_text(data,profile,'ImageInlineCss',context); 
			
		if (image == "") { // no image
			out = $('<a class="button_hyperlink" style="'+textInlineCss+'" title="'+tooltip+'" href="#"/>')[0];
			out.innerHTML = text;
		}
		else {
			out = $('<span class="button_hyperlink_image"/>')[0];
			var img = $('<img src="'+image+'" style="'+imageInlineCss+'" />')[0];
			var alink = $('<a href="#" style="'+textInlineCss+'" onclick="return false;" class="button_hyperlink" title="'+tooltip+'"/>')[0];
			alink.innerHTML = text;
			out.appendChild(img);
			out.appendChild(alink);
		}
		var initEvents = function(out) {
			out.onclick = function(e) {
			  if (window.aa_incapture) return;
			  e = e || event;
			  if (aa_incapture) return false;
			  aa_runMethod(data,context.vars.ButtonContext[0],'OnClick',aa_ctx(context,{ControlElement: [out]}));
			  ajaxart_stop_event_propogation(e);
			  return false;
			}
			$(out).hover(function() {
			  aa_runMethod(data,context.vars.ButtonContext[0],'OnHover',context);
			}, function() {} ); 
		}
		initEvents(out);
		return [out];
	},
	InlineCssIntoElements: function(profile,data,context) {
		var html = aa_text(data,profile,'Html',context);
		var css = aa_text(data,profile,'Css',context);
		jHtml = $("<div>" + html + "</div>");
		css_parts = css.split("}");
		for (var i=0; i<css_parts.length; i++) {
			var name_and_style = css_parts[i].split("{");
			if (name_and_style.length != 2) continue;
			var selector = name_and_style[0];
			var style = name_and_style[1].replace(/\n/g,' ');
			jHtml.find(selector).each(function() { this.style.cssText = style; });
		}
		return [ jHtml.html() ];
	}
});

aa_gcs("uiaction", {
DoFind: function (profile,data,context)
{
	  var filter_elems = ajaxart.run(data,profile,'FilterElements',context);
	  var cntr = context.vars._Cntr[0];
	  if (cntr == null) return [];
	  cntr.DoFind(ajaxart.totext_array(data),filter_elems);
	  return ["true"];
}
});

aa_gcs("jbart_api", {
	ShowWidget: function(profile,data,context)
	{
		var controlToShowFunc = null; // for auto-tests
		if (aa_paramExists(profile,'ControlToShowInBartContext')) {
			controlToShowFunc = function(data1,ctx) {
				return aa_first(data1,profile,'ControlToShowInBartContext',aa_merge_ctx(context,ctx));
			}
		}

		var ctx = aa_create_jbart_context({
			WidgetXml: aa_first(data,profile,'WidgetXml',context),
			Language: aa_text(data,profile,'_Language',context),
			Context: context			
		});

		var out = aa_show_jbart_widget_page({
			Context: ctx,
			page: aa_text(data,profile,'Page',context),
			success: function(data,ctx) { 
				ajaxart.run(data,profile,'RunAfter',aa_merge_ctx(context,ctx));		
			},
			ControlToShowInBartContext: controlToShowFunc
		});

		return [out];
	}	
});



/* jBart.exec runs a jBart action component
 * It gets the action name (to be seen under xtml components), the data for the action and a jbart context object 
 *   
 * example usage (in foursquare4Ipad app):
 * jBart.exec('SelectCurrentVenueInList','',context);
 */
jBart.exec = function (action_name,data,context)
{
	var profile = aa_parsexml('<xtml t="sample.'+action_name+'" />');
	ajaxart.run([],profile,[data],context);
};
/* jBart.get evaluates a jbart expression
 * It gets the jbart expression, its data, a context object and result type (text/array/xml) 
 * Note that the expression will contain %. To put % in jbart js you need to write \%, otherwise it will be evaluated before compiling  
 * 
 * example usage (in foursquare4Ipad app):
 * var selected = jBart.get('%$FSState/@item%','',context,'text');
 */
jBart.get = function(expression,data,context,result_type)
{
	data = data || '';
	if (!result_type) result_type = 'text';
	context = context || ajaxart.newContext();
	var value = ajaxart.dynamicText([data],expression,context,null,false);
	if (result_type == 'text') return aa_totext(value);
	if (result_type == 'array')	return value;
	if (result_type == 'xml' || result_type == 'native') return value[0];
	if (result_type == 'int') {
		var text = aa_totext(value)
		return text ? parseInt(text) : Number.NaN;
	}
	if (result_type == 'bool') return aa_totext(value) == 'true';
	
	return value[0];
};
/* jBart.set( is used to write a value using a jbart expression (usually to a resource)
 * It gets a jbart expression for the 'to' , the value to set and a context object
 * 'data' is the input for the 'to expression'. E.g. it can be used to set values inside an item
 *  
 * Note that the expression will contain %. To put % in jbart js you need to write \%, otherwise it will be evaluated before compiling  
 * 
 * example usage (in foursquare4Ipad app):
 * jBart.set('\%$FSState/@lat\%',position.coords.latitude,'',context);
 */
jBart.set = function(to_as_expression,value,data,context)
{
	context = context || ajaxart.newContext();
	var to = ajaxart.dynamicText([data],to_as_expression,context,null,false);
	ajaxart.writevalue(to,[value]);
};

aa_gcs("field", {
	CustomControl: function (profile,data,context)
	{
		var field = { isObject : true };
		field.Title = aa_multilang_text(data,profile,'Title',context);
		field.Image = aa_text(data,profile,'Image',context);
		field.Id = aa_text(data,profile,'ID',context);
		field.ID = [field.Id];
		field.FieldData = function(data1) { return data1; }
		field.CellPresentation = ["control"];
		field.HideTitle = (!aa_bool(data,profile,'ShowTitle',context));
		
		aa_setMethod(field,'Control',profile,'Control',context);

		var newContext = aa_ctx(context,{_Field: [field]} );
		ajaxart.runsubprofiles(data,profile,'FieldAspect',newContext);
		
		return [field];
	},
	Control: function (profile,data,context)
	{
		var field = { isObject : true };
		field.Title = aa_multilang_text(data,profile,'Title',context);
		field.Id = aa_text(data,profile,'ID',context);
		field.ID = [field.Id];
		field.FieldData = function(data1) { return data1; }
		field.CellPresentation = ["control"];
		field.ReadOnly = true;
		field.HideTitle = aa_bool(data,profile,'HideTitle',context);
		
		var newContext = aa_ctx(context,{_Field: [field]} );
		ajaxart.run(data,profile,'Control',newContext);
		ajaxart.runsubprofiles(data,profile,'FieldAspect',newContext);
		
	    return [field];
	},
	Button: function (profile,data,context)
	{
		var field = { isObject : true };
		field.Id = aa_text(data,profile,'ID',context);
		field.ID = [field.Id];
		field.FieldData = function(data1) { return data1; }
		field.CellPresentation = ["control"];
		field.HideTitle = (aa_bool(data,profile,'HideTitle',context));

		field.Refresh = function(data1,ctx) {
			field.Title = aa_multilang_text(data,profile,'Title',context);
			field.Image = aa_first(data,profile,'Image',context);
			if (field.Image && field.Image.Url)
			  field.Image.StaticUrl = aa_totext(field.Image.Url(data,context));
			field.Style = aa_first(data,profile,'Style',aa_ctx(context,{_Field: [field]}));
			if (field.Style)
			  field.StyleClass = aa_attach_global_css(field.Style.Css);
		}

		field.Refresh(data,context);
		if (!field.Style) return;
		
		field.Control = function(field_data,ctx) {
			var field = this;
			var style = field.Style;
			if (style.Html == "") return [];
			var jElem = jQuery(style.Html);
			jElem[0].jbContext = aa_merge_ctx(context,ctx);
			if (field.Image && field.Image.Url)
				  field.Image.StaticUrl = aa_totext(field.Image.Url(field_data,context));
			
			var button = aa_api_object(jElem,{image: field.Image, Field: field, data: field_data});
			button.text = button.tooltip = aa_multilang_text(field_data,profile,'ButtonText',context);
			if (aa_paramExists(profile,'Tooltip')) button.tooltip = aa_multilang_text(field_data,profile,'Tooltip',context);
			
			if (button.text == '') button.text = field.Title;
			var initButtonEvents = function(button) {
			  aa_defineElemProperties(button,'Action');
			  
			  button.Action = function(settings) {
				settings = settings || {};
				var e = settings.event;
				var data = settings.data || field_data;
				if (window.aa_incapture) return;
				var itemElem = [ jQuery(button).parents('.aa_item')[0] ];
				if (itemElem[0] == null) itemElem = [];
				var item = (itemElem[0]) ? itemElem[0].ItemData : []; 
				var ctx2 = aa_ctx(aa_merge_ctx(context,ctx),{ControlElement: button.jElem.get(), _ElemsOfOperation: itemElem, _ItemsOfOperation: item });
				if (settings.vars)
					ctx2 = aa_ctx(ctx2,settings.vars);
				if (e) ctx2.vars._DomEvent = [e];
				if (typeof settings.end == 'function') {
					ajaxart_RunAsync(data,ajaxart.fieldscript(profile,'Action'),ctx2,settings.end);
				} else {
					return ajaxart.run(data,profile,'Action',ctx2);
				}
			  }
			}
			initButtonEvents(button);
			aa_apply_style_js(button,field.Style);
			jElem.addClass(field.StyleClass);
			//ajaxart.databind([jElem[0]],field_data,context,profile,data);	// for runtime inspect
			return jElem.get();
		}

		ajaxart.runsubprofiles(data,profile,'FieldAspect',aa_ctx(context,{_Field: [field]}));
		
	    return [field];
	},
	Field1: function (profile,data,context)
	{
		var field = { isObject : true };
		field.Title = aa_multilang_text(data,profile,'Title',context);
		field.Id = aa_text(data,profile,'ID',context);
		field.ID = [field.Id];
		
		aa_addMethod(field,'FieldData',profile,'FieldData',context);
		aa_addMethod(field,'Control',profile,'Control',context);

		var newContext = aa_ctx(context,{_Field: [field]} );
		ajaxart.runsubprofiles(data,profile,'FieldAspect',newContext);
		ajaxart.run(data,profile,'Multiple',newContext);
		
	    return [field];
	},
	FireOnUpdate: function(profile,data,context)
	{
		var elem = ajaxart.getControlElement(context)[0];
		var td = jQuery(elem).parents('.aa_cell_element')[0];
		if (td == null) return [];
		aa_invoke_field_handlers(td.Field.OnUpdate,elem,null,td.Field,td.FieldData);
		return [];
	}
}); 

aa_gcs("animation", {
	CssBasedAnimation: function (profile,data,context) {
		return [{
			animate: function(elem,ondone) {
				var screen = aa_screen_size(true);
				var ctx2 = aa_ctx(context, { ScreenWidth: [screen.width + "px"], ScreenHeight: [screen.height +"px"]});
				jQuery(elem).addClass(aa_attach_global_css(aa_text(data,profile,'Css',ctx2)));
				jQuery(elem).addClass('beforeAnimation');
				setTimeout(function() { // use timeout to make sure all other modifiers have finished
					aa_addOnAttach(elem,function() {
						jQuery(elem).removeClass('beforeAnimation');
						var transition_end = function() {
							jQuery(elem).removeClass("afterAnimation"); 
							if (ondone)
								ondone(elem);
							elem.removeEventListener('webkitTransitionEnd', transition_end);
							elem.removeEventListener('transitionend', transition_end);
						};
						elem.addEventListener('webkitTransitionEnd', transition_end);
						elem.addEventListener('transitionend', transition_end);
						jQuery(elem).addClass('afterAnimation');
					});
				},1);
			}
		}];
	},
	JQueryShow: function (profile,data,context) {
		var duration = aa_int(data,profile,'Duration',context);
		return [{
			animate: function(elem,ondone) {
				jQuery(elem).hide();
				if (duration == 0) {
					jQuery(elem).show();
					ondone();
				}
				else {
					jQuery(elem).show(duration, "swing", ondone);
				}				
			}
		}];
	},
	Hide: function (profile,data,context) {
		var field_id = aa_text(data,profile,'FieldId',context);
		var animation = aa_first(data,profile,'AnimationType',context);
		if (!animation || !field_id) return [];
		jQuery(aad_find_field(field_id)).each(function(index,field_control) {
			if (field_control && animation) {
				animation.hide(field_control, function() {
					ajaxart.run(data,profile,'OnDone',context);
				});
			}
		});
		return [];
	},
	CssBasedHideAnimation: function (profile,data,context) {
		return [{
			hide: function(elem,ondone) {
				var screen = aa_screen_size(true);
				var ctx2 = aa_ctx(context, { ScreenWidth: [screen.width + "px"], ScreenHeight: [screen.height +"px"]});
				aa_addOnAttach(elem,function() {
					var transition_end = function() {
						if (ondone)
							ondone(elem);
						elem.removeEventListener('webkitTransitionEnd', transition_end);
						elem.removeEventListener('transitionend', transition_end);
					};
					elem.addEventListener('webkitTransitionEnd', transition_end);
					elem.addEventListener('transitionend', transition_end);
					jQuery(elem).addClass(aa_attach_global_css(aa_text(data,profile,'Css',ctx2)));
				});
			}
		}];
	},
	JQueryHide:function (profile,data,context) {
		var duration = aa_int(data,profile,'Duration',context);
		return [{
			hide: function(elem,ondone) {
				if (duration == 0) {
					jQuery(elem).hide();
					ondone();
				} else {
					jQuery(elem).hide(duration, "swing", ondone);
				}
			}
		}];
	}
});

aa_gcs("scroll", {
	Scroll: function(profile,data,context)
	{
		var field = context.vars._Field[0];
		field.Scroll = aa_first(data,profile,'Scroll',context);
		if (field.Scroll && field.Scroll.Load) field.Scroll.Load([],context);  // load js files etc.
		var paddingRight = aa_text(data,profile,'PaddingRight',context);
		
		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx) {
			if (field.Scroll && field.Scroll.OnModifyControl) field.Scroll.OnModifyControl([],aa_ctx(context,{ControlElement: [cell]}));
			aa_addOnAttach(cell,function() {
				var elem = cell.firstChild; // scrolling is done on 'content', and can use parentNode for the cell
				if (!elem) return;
//				if (elem.tagName.toLowerCase() == 'td' && elem.firstChild) // scrolling is done better on 'div' rather on 'td'
//					elem = elem.firstChild;
				var ctx2 = aa_ctx(context,{ControlElement: [elem]});
				elem.jbScroll = field.Scroll;
				if (field.Scroll && field.Scroll.Prepare) field.Scroll.Prepare([],ctx2);
				if (elem.ScrollElement) // allow changing the scroll element
					ctx2 = aa_ctx(context,{ControlElement: [elem.ScrollElement]});  
//				jQuery(ctx2.vars.ControlElement[0]).addClass(aa_attach_global_css(aa_text(data,profile,'Css',context)));

				ajaxart.run(data,profile,'Height',ctx2);  // set the height
				ajaxart.run(data,profile,'Width',ctx2); // set the width
				ctx2.vars.ControlElement[0].jbSizeChanged = function() {	// when device causes size change like resize or orientation change
					if (field.Scroll.SizeChanged)
						field.Scroll.SizeChanged([],ctx2);
				}
				
				if (field.Scroll && field.Scroll.Activate) field.Scroll.Activate([],ctx2);
				if (paddingRight) $(elem).css('padding-right',paddingRight);
			});
		});
	},
	BrowserScrollbar: function (profile,data,context)
	{
		return [{ isObject: true,
			Activate: function(data1,ctx) {
				this.Control = ctx.vars.ControlElement[0];
				if (this.Control.parentNode.tagName.toLowerCase() != 'td') this.Control = this.Control.parentNode;
						
				jQuery(ctx.vars.ControlElement).css('overflow','auto');
			},
			ScrollToBottom: function() {
				this.Control.scrollTop = this.Control.scrollHeight;
			}
		}];
	},
	NoScroll: function (profile,data,context)
	{
		var cls = aa_attach_global_css(aa_text(data,profile,'Css',context));
		return [{ 
			isObject: true,
			OnModifyControl : function(data1,ctx) {
				jQuery(ctx.vars.ControlElement).addClass(cls);
			}
		}];
	},
	Scroll2: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		
		field.ScrollStyle = aa_first(data,profile,'Style',context);
		field.ScrollWidth = aa_first(data,profile,'Width',context);
		field.ScrollHeight = aa_first(data,profile,'Height',context);
		var topClass = aa_attach_global_css(field.ScrollStyle.Css,context);
			
		aa_field_handler(field,'ModifyCell',function(cell,field_data,cell_presentation,ctx,item)
		{
			var content = cell.firstChild || cell;
			var topDiv = content;
			while (topDiv && ",table,tbody,tr,td,".indexOf(topDiv.tagName.toLowerCase()) > -1) {
				topDiv = topDiv.parentNode;
			}
			var scroll = field.ScrollObject = aa_renderStyleObject(field.ScrollStyle,{
				ScrollHeight: field.ScrollHeight,
				ScrollWidth: field.ScrollWidth,
				fixSize: function(element) {
				  if (field.ScrollHeight) field.ScrollHeight.apply(element);
				  if (field.ScrollWidth) field.ScrollWidth.apply(element);
				},
				init: function(settings) {
					this.refresh = settings.refresh;
					this.requiresDivWrapper = settings.requiresDivWrapper;
				},
				body: content,
				topDiv: topDiv
			},ctx);
			
			if (field.ScrollHeight) jBart.bind(field.ScrollHeight,'update',function() { field.ScrollObject.refresh(); });
			if (field.ScrollWidth) jBart.bind(field.ScrollWidth,'update',function() { field.ScrollObject.refresh(); });
			
			if (field.ScrollObject.requiresDivWrapper) {
				aa_addOnAttach(content,function() {
					var parent = topDiv.parentNode;
					scroll.divWrapper = jQuery('<div class="aa_scroll_wrapper"/>').addClass(topClass).append(topDiv)[0];
					parent.appendChild(scroll.divWrapper);
					field.ScrollObject.refresh();	
				});
			} else {
				jQuery(topDiv).addClass(topClass);
				field.ScrollObject.refresh();
			}
		});	
	},
	IScroll: function (profile,data,context)
	{
		var out = { isObject: true }
		out.Load = function() {
			if (window.IScroll || window.loading_iscroll4) return;
			window.loading_iscroll4 = true;
			var path = aa_text(data,profile,'JsLocation',context);
			aa_load_js_css(path, 'js');
		}
		out.OnModifyControl = function(data1,ctx) {
			jQuery(ctx.vars.ControlElement).css('overflow','auto'); 
		}
		out.Prepare = function(data1,ctx) {
			var wrapper = document.createElement('DIV');
			var elem = ctx.vars.ControlElement[0];
			elem.ScrollElement = wrapper;
	        elem.parentNode.appendChild(wrapper);
			wrapper.appendChild(elem);
			wrapper.jbScrolledElem = elem;
		}
		out.Activate = function(data1,ctx) {
			var paramsToEval = "var params = " + aa_text(data,profile,'ScrollParams',context) + ';';
			eval(paramsToEval);

			if (window.iScroll) {
				var elem = ctx.vars.ControlElement[0];
				
				elem.IScroll = new iScroll(elem,params);
				if (elem.jbScrolledElem) elem.jbScrolledElem.IScroll = elem.IScroll;
				setTimeout(function() {elem.IScroll.refresh()},200);
				elem.contentChanged = function() { this.IScroll.refresh(); }
				out.elem = elem;
			} else {
				jQuery(ctx.vars.ControlElement).css('overflow','hidden');
				setTimeout(function() { out.Activate(data1,ctx)} ,500 );
			}
		}
		out.Refresh = function(data1,ctx) {
			this.elem.IScroll.refresh();
		}
		out.ScrollToBottom = function(time, onlyIfNeeded) {
			if (!time) time = 200;
			if (!onlyIfNeeded || this.elem.scrollHeight > this.elem.clientHeight)
				this.elem.IScroll.scrollTo(0, this.elem.clientHeight - this.elem.scrollHeight,time,false);
		}
		return [out];
	},
	TinyScroll: function (profile,data,context)
	{
		var out = { isObject: true }
		out.Load = function() {
			if (window.IScroll || window.loading_tinyscroll) return;
			window.loading_tinyscroll = true;
			var path = aa_text(data,profile,'JsLocation',context);
			jQuery('body').append('<script type="text/javascript" src="'+path+'"></script>');
		}
		out.OnModifyControl = function(data1,ctx) {
			jQuery(ctx.vars.ControlElement).css('overflow','auto'); 
		}
		out.Prepare = function(data1,ctx) {
		    var wrapper = jQuery('<div class="tscrollbar">\
	                <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>\
	                <div class="viewport"><div class="overview"></div></div></div>');

	        var width = aa_text(data,profile,'Width',context);
	        if (width != '') wrapper.width(width);
	        
        	var cls = aa_attach_global_css(aa_text(data,profile,'Css',context));
        	wrapper.addClass(cls);
        	
	        var elem = ctx.vars.ControlElement[0];
	        
	        var scrollElem = elem.ScrollElement = wrapper.find('.viewport')[0];
	        var top = elem.parentNode;
	        top.appendChild(wrapper[0]);
		    wrapper.find('.overview').append(elem);
		    scrollElem.Scroll = wrapper;
		    scrollElem.contentChanged = function() { 
		    	setTimeout(function() {scrollElem.Scroll.tinyscrollbar_update();},10); 
		    }
		}
		out.Activate = function(data1,ctx) {
	    	setTimeout(function() { 
				var scrollElem = ctx.vars.ControlElement[0];
				out.scrollElem = scrollElem; 
	    		if (scrollElem.Scroll.tinyscrollbar) {
	    			scrollElem.Scroll.tinyscrollbar(); 
	    			scrollElem.Scroll.tinyscrollbar_update();
	    		}
	    	},1);
		}
		out.ScrollToBottom = function() {
			this.scrollElem.Scroll.tinyscrollbar_update('bottom');
		}
		
		return [out];
	},
	DeviceBottom: function (profile,data,context)
	{
		if (ajaxart.inPreviewMode) return;
		
		var elem = context.vars.ControlElement[0];
		elem.HeightDelta = aa_int(data,profile,'Delta',context);
		var cls_for_delta = aa_text(data,profile,'HtmlClassForDelta',context);
		if (cls_for_delta && jQuery("." + cls_for_delta).length > 0)
			elem.HeightDelta = jQuery("." + cls_for_delta)[0].offsetHeight + (elem.HeightDelta ? elem.HeightDelta : 0);

	    elem.StretchHeight = function() {
	    	ajaxart.ui.HeightToWindowBottom(this,this.HeightDelta);
	    }
	    setTimeout(function() { elem.StretchHeight();},100);

	    aa_addWindowResizeListener(elem,function() { elem.StretchHeight(); });
		jQuery(elem).addClass('aa_resize_bind');
		jBart.bind(elem,"WindowResize",elem.StretchHeight);
	},
	DeviceRight: function (profile,data,context)
	{
		if (ajaxart.inPreviewMode) return;

		var elem = context.vars.ControlElement[0];
		elem.WidthDelta = aa_int(data,profile,'Delta',context);
		jQuery(elem).addClass('aa_mobile_stretch');
	    elem.StretchWidth = function() {
	    	aa_widthToWindowRight(this,this.WidthDelta);	
	    }
	    setTimeout(function() { elem.StretchWidth();},100);
	    

	    aa_addWindowResizeListener(elem,function() { elem.StretchWidth(); });
	    
		jQuery(elem).addClass('aa_resize_bind');
		jBart.bind(elem,"WindowResize",elem.StretchWidth);
	},
	FixedHeight: function (profile,data,context)
	{
		if (ajaxart.inPreviewMode) return;
		var height = aa_text(data,profile,'Height',context);
		if (!ajaxart.isIDevice) {
			var height2 = aa_text(data,profile,'HeightForNonMobile',context);
			if (height2 != '') height = height2; 
		}
		var cell = context.vars.ControlElement[0];
		if (height != '') 
			cell.style.height = height;
	},
	FixedWidth: function (profile,data,context)
	{
		if (ajaxart.inPreviewMode) return;
		var width = aa_text(data,profile,'Width',context);
		if (!ajaxart.isIDevice) {
			var width2 = aa_text(data,profile,'WidthForNonMobile',context);
			if (width2 != '') width = width2; 
		}
		if (width != '' && context.vars.ControlElement) context.vars.ControlElement[0].style.width = width;
	}
});

aa_gcs("scroll_size", {
	FixedHeight: function (profile,data,context)
	{
	  var height = aa_int(data,profile,'Height',context);
	  var applyOn = aa_text(data,profile,'ApplyOn',context);
	  return [{
		 apply: function(elem,delta) {
		 	if (!delta) delta = 0;
		 	jQuery(elem).css(applyOn,height-delta + "px");
		  }
	  }];
	},
	FixedWidth: function (profile,data,context)
	{
	  var width = aa_int(data,profile,'Width',context);
	  var applyOn = aa_text(data,profile,'ApplyOn',context);
	  return [{
		 apply: function(elem,delta) {
		 	if (!delta) delta = 0;
		 	jQuery(elem).css(applyOn,width-delta + "px");
		  }
	  }];
	},
	DeviceWidth: function(profile,data,context)
	{
		var field_delta = aa_text(data,profile,'ReduceWidthOfOtherField',context);
		var stretch = aa_bool(data,profile,'StretchFromCurrentLocation',context);
		var pixels_delta = aa_int(data,profile,'ReducePixels',context);
		var applyOn = aa_text(data,profile,'ApplyOn',context);
		var percentages = parseInt(aa_text(data,profile,'Percentages',context).replace("%",""));
		
		aa_init_onresize();
		
		return [{
			apply: function(elem,extra_delta) {
				function fix_size() {
					var delta = extra_delta ? extra_delta : 0;
					var width = aa_screen_size(true).width;
					if (percentages && !isNaN(percentages))
						width *= percentages/100;
					if (field_delta && aad_find_field(field_delta)[0])
					 	delta += aad_find_field(field_delta,'',true)[0].offsetWidth;
					if (pixels_delta)
						delta += pixels_delta;
					if (stretch)
						aa_widthToWindowRight(elem,delta,applyOn);
					else
						jQuery(elem).css(applyOn,width-delta + "px");
				}
				if (field_delta)
					aa_addOnAttachMultiple(elem, function() { setTimeout(fix_size,1); } );	// we use time-out so offsetWidth is valid
				else if (stretch)
					aa_addOnAttachMultiple(elem, fix_size );
				else
					fix_size();

				aa_attach_window_resize(fix_size,elem);
			}
		}]
	},
	DeviceHeight: function(profile,data,context)
	{
		var field_delta = aa_text(data,profile,'ReduceHeightOfOtherField',context);
		var stretch = aa_bool(data,profile,'StretchFromCurrentLocation',context);
		var pixels_delta = aa_int(data,profile,'ReducePixels',context);
		var applyOn = aa_text(data,profile,'ApplyOn',context);
		var percentages = parseInt(aa_text(data,profile,'Percentages',context).replace("%",""));
		
		aa_init_onresize();
		
		return [{
			apply: function(elem,delta) {
				var fix_size = function() {
					var delta = 0;
					var height = aa_screen_size(true).height;
					if (percentages && !isNaN(percentages))
						height *= percentages/100;
					if (field_delta && aad_find_field(field_delta)[0])
					 	delta += aad_find_field(field_delta,'',true)[0].offsetHeight;
					if (pixels_delta)
						delta += pixels_delta;
					if (stretch)
						ajaxart.ui.HeightToWindowBottom(elem,delta,applyOn);
					else
						jQuery(elem).css(applyOn,height-delta + "px");
				}
				if (field_delta)
					aa_addOnAttachMultiple(elem, function() { setTimeout(fix_size,1); } );	// we use time-out so offsetWidth is valid
				else if (stretch)
					aa_addOnAttachMultiple(elem, fix_size );
				else
					fix_size();

				fix_size();
				
				aa_attach_window_resize(fix_size,elem);
			}
		}];
	}
});
aa_gcs("field_control", {
	Image: function (profile,data,context) // GC of field_control.Image
  {
		var field = context.vars._Field[0];
		var defaultImage = aa_text(data,profile,'DefaultImage',context);

		field.Control = function(field_data,ctx) {
			var image = aa_first(field_data,profile,'Image',context);
			if (image && image.Url)
			  image.StaticUrl = aa_totext(image.Url(field_data,context)) || defaultImage;

			var image2 = aa_create_static_image_object(image);			
			var style = aa_first(data,profile,'Style',context);
			
			return [aa_renderStyleObject(style,{ Field: field, image: image2, data: field_data[0] },context,true)];
		};
  },
	CustomXtmlControl: function (profile,data,context)
  {
			var field = aa_create_base_field(data, profile, context);
			field.Control = function(field_data,ctx) {
				return ajaxart.run(field_data,profile,'Control',aa_merge_ctx(context,ctx));
			};
			return [field];
  },
  CustomControlOld: function (profile,data,context)
  {
		var field = context.vars._Field[0];
		field.Control = function(field_data,ctx) {
			var style = ajaxart.runNativeHelper(field_data,profile,'StyleObject',context)[0];
			
			return [aa_renderStyleObject(style,{ Field: field, Data: field_data },context)];
		}
  } 
});
aa_gcs("field_feature", {
	Css: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var css = aa_text(data,profile,'Css',context);
		aa_field_handler(field,'ModifyCell',function(cell,field_data,cell_presentation,ctx,item)
		{
			var cls = aa_attach_global_css(css,null,field.Id,true,false,ctx);
			jQuery(cell).addClass(cls+'_wrapper');
			var content = cell.firstChild || cell;
			jQuery(content).addClass(cls);
		},null,200);	
	},
	CssClass: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		var to = aa_text(data,profile,'AddClassTo',context);
		aa_bind(field,'ModifyCell',function(args) {
			var cssClass = aa_text(args.FieldData,profile,'ClassName',context);
			var passCondition = aa_bool(args.FieldData,profile,'ConditionForClass',context);
			if (passCondition) {
				var elem = args.Wrapper;
				if (to == 'content') elem = args.Wrapper.firstChild || args.Wrapper;

				$(elem).addClass(cssClass);
			}
		});
	}
});

function aa_init_onorientchange_MobileDeviceStretchBottomRight()
{
    if (window.aa_onorientchange_MobileDeviceStretchBottomRight) return;
    
    window.aa_MobileDeviceBottomRight_orientation = function(orient) {
	  var elems = jQuery('.aa_mobile_stretch');
	  for(var i=0;i<elems.length;i++) {
		  if (elems[i].StretchHeight) elems[i].StretchHeight();
		  if (elems[i].StretchWidth) elems[i].StretchWidth();

	      if (elems[i].IScroll) elems[i].IScroll.refresh();
	  }
    }
    aa_addEventListener(window,"resize", aa_MobileDeviceBottomRight_orientation, false);
//    aa_add_onorientationchange(aa_MobileDeviceBottomRight_orientation);
}


function aa_create_text_filter(matchOnlyTextBeginning)
{
	return function(initialFilterData)
	{
		var CompileFilterData = function(filter_data)
		{
			var txt = aa_totext(filter_data);
			if (txt == '') return [];
			return txt.toLowerCase().split(',');
		}
		return	{
			TextFilter: true,
			filterData: CompileFilterData(initialFilterData),
			SetFilterData: function(filterData) { this.filterData = CompileFilterData(filterData); }, 
			ToSQLText: function(rawData) { return ajaxart.totext_array(rawData) },
			Match: function(field,wrapper)
			{
				if (this.filterData.length == 0) return true;
				for(var i in this.filterData)
				{
					var index = ('' + wrapper[field.Id]).toLowerCase().indexOf(this.filterData[i]);
					var result = matchOnlyTextBeginning ? index == 0 : index > -1;
					if (result) return true;
				}
				return false;
			},
			HighlightSelectedText: function(control,selectedClass) {
  				var pattern = this.filterData[0];
  				
				if (control.innerHTML.toLowerCase().indexOf(pattern) != -1)
				   control.innerHTML = ajaxart_field_highlight_text(control.innerHTML,pattern,selectedClass);
			}
		}
	};
}

function aa_create_search_words_text_filter(matchOnlyTextBeginning)
{
	return function(initialFilterData)
	{
		var CompileFilterData = function(filter_data)
		{
			var text = aa_totext(filter_data).toLowerCase();
			
			var pattern = { searchWordsPattern: true };
			pattern.text = text;
			
			var pp = pattern.text.split(' ');
			pattern.p1 = (pp.length > 0 && ' ' + pp[0]);
			pattern.p2 = (pp.length > 1 && ' ' + pp[1]);
			pattern.p3 = (pp.length > 2 && ' ' + pp[2]);
			pattern.p4 = (pp.length > 3 && ' ' + pp[3]);
			pattern.words = pp.length;
			
			return pattern;
		}
		return	{
			TextFilter: true,
			filterData: CompileFilterData(initialFilterData),
			SetFilterData: function(filterData) { this.filterData = CompileFilterData(filterData); }, 
			ToSQLText: function(rawData) { return ajaxart.totext_array(rawData) },
			Match: function(field,wrapper)
			{
				var pattern = this.filterData; 
				if (!pattern) return true;
				
				var val = wrapper[field.Id];
				var s = ' ' + val.toLowerCase().replace(/^\s*|\s*$/g, ' ');
				var words_found = 0,show_first=false;
				
				var p1 = pattern.p1;
				if (pattern.words > 1) {
					if (p1 && s.indexOf(p1) != -1) words_found++;
					if (pattern.p2 && s.indexOf(pattern.p2) != -1) words_found++;
					if (pattern.p3 && s.indexOf(pattern.p3) != -1) words_found++;
					if (pattern.p4 && s.indexOf(pattern.p4) != -1) words_found++;
					if (words_found == pattern.words) {
						show_first = true;
					} 
				} else if (s.indexOf(p1) == 1) {	// starts with pattern
					show_first = true;
				} else if (s.indexOf(p1) > 0) {
					words_found++;
				}

				if (show_first || words_found == pattern.words) return true;
				return false;
			},
			HighlightSelectedText: function(control,selectedClass) {
  				var pattern = this.filterData;
  				var p1,p2,p3,p4;  // TODO: for on pattern.words
  			    if (pattern.p1) p1 = pattern.p1.substring(1); 
  			    if (pattern.p2) p2 = pattern.p2.substring(1); 
  			    if (pattern.p3) p3 = pattern.p3.substring(1);// remove space prefix
  			    if (pattern.p4) p4 = pattern.p4.substring(1);
  				
  	    		if (p1 && control.innerHTML.toLowerCase().indexOf(p1) != -1)
  	    			control.innerHTML = ajaxart_field_highlight_text(control.innerHTML,p1,selectedClass);
  	    		if (p2 && control.innerHTML.toLowerCase().indexOf(p2) != -1)
  	    			control.innerHTML = ajaxart_field_highlight_text(control.innerHTML,p2,selectedClass);
  	    		if (p3 && control.innerHTML.toLowerCase().indexOf(p3) != -1)
  	    			control.innerHTML = ajaxart_field_highlight_text(control.innerHTML,p3,selectedClass);
  	    		if (p4 && control.innerHTML.toLowerCase().indexOf(p4) != -1)
  	    			control.innerHTML = ajaxart_field_highlight_text(control.innerHTML,p4,selectedClass);
			}
		}
	};
}

function aa_addWindowResizeListener(element,callback)
{
	window.aavar_resizeListeners = window.aavar_resizeListeners || [];
	aavar_resizeListeners.push( {element: element, callback: callback } );
	
	if (!window.aavar_resizeCallback) {
		window.aavar_resizeCallback = function() 
		{
			var newListeners = [];
			for(var i=0;i<aavar_resizeListeners.length;i++) {
				try {
					if (ajaxart.isattached(aavar_resizeListeners[i].element)) {
						newListeners.push( aavar_resizeListeners[i] );
						aavar_resizeListeners[i].callback();
					}
				} catch(e) {
					ajaxart.logException('exception in window resize',e);
				}
			}
			aavar_resizeListeners = newListeners;
		}
	  aa_addEventListener(window,"resize", aavar_resizeCallback );
	}
}
function aa_init_class(className, prototypeFunctions) {
  if (!ajaxart.classes[className]) {
    ajaxart.classes[className] = function(settings) {
      aa_extend(this, settings);
      if (this._ctor) this._ctor();
    };
    aa_extend(ajaxart.classes[className].prototype, prototypeFunctions);
  }
}

function aa_find_bart_context(elem) {
  for (; elem && elem.nodeType == 1; elem = elem.parentNode) {
    if (elem.jbContext) {
      var bartcontext = aa_var_first(elem.jbContext, '_AppContext');
      if (bartcontext) return bartcontext;
    }
  }
  return null;
}

function aa_getItemData(object) {
  var context = object.context;
  if (!context && object.vars && object.params) context = object;
  // TODO: handle a case where object is a html element

  return context.vars.Item || [];
}

function aa_scrollToShowElement(elem, direction, margins) {
  // Consider using scrollIntoView (DOM)
  // TODO: handle scrolling down + use the direction parameter

  direction = direction || ''; // direction can be: 'up','down' or ''

  var iter = elem;
  var parent = iter && iter.parentNode;
  margins = margins || {
    top: 0,
    bottom: 0
  };

  while (parent && parent.nodeType == 1 && parent.tagName.toLowerCase() != 'html') {
    var overflowy = $(parent).css('overflow-y');
    if (overflowy == 'scroll' || overflowy == 'auto' || parent == document.body) {

      var newScrollTop = parent.scrollTop + $(iter).position().top - $(parent).position().top - margins.top;
      newScrollTop = Math.max(0,newScrollTop);

      $(parent).scrollTop(newScrollTop);

      // var top = aa_relTop(iter, parent) - margins.top;
      // if (parent == document.body && jBart.headerHeight) {
      //   top -= jBart.headerHeight;
      // }

      // if (top < $(parent).scrollTop()) {
      //   $(parent).scrollTop(top);
      //   iter = parent;
      // }
    }
    parent = parent.parentNode;
  }
}

function aa_isParent(child, parent) {
  for (var iter = child; iter && iter.nodeType == 1; iter = iter.parentNode) {
    if (iter == parent) return true;
  }
  return false;
}

function aa_registerHeaderEvent(thead, eventType, func, ownerId, activation_mode) {
  if (thead.EventHandler == null) {
    aa_defineElemProperties(thead, 'handlers,EventHandler');
    thead.handlers = [];
    thead.EventHandler = function(e) {
      var elem = jQuery((typeof(event) == 'undefined') ? e.target : (event.tDebug || event.srcElement));
      e = e || event; // IE
      if (elem.hasClass('fieldtitle_info')) return false; // a bit ugly. it has its own handler

      if (elem.hasClass('fieldtitle')) var th = elem;
      else var th = elem.parents('th');
      if (th.length == 0) return true;

      if (e.type == 'mousedown') thead.LastMouseDown = {
        th: th[0]
      };
      if (e.type == 'mouseout') thead.LastMouseDown = null;

      for (var i = 0; i < thead.handlers.length; i++) {
        var handler = thead.handlers[i];
        if (handler.eventType != e.type) continue;
        if (e.button == 2) {
          if (handler.activation_mode == 'right mouse') handler.func(e, thead, th[0]);
        } else {
          var activate = (handler.activation_mode == 'no dominant' && thead.Owner == null) || (handler.activation_mode == 'suspect' && thead.Suspect != null && thead.Owner == null) || (handler.activation_mode == 'dominant' && thead.Owner == handler.ownerId);
          if (activate) handler.func(e, thead, th[0]);
        }
      }
    }
    thead.onmousedown = thead.onmouseout = thead.onmouseup = thead.onmousemove = thead.EventHandler;
  }
  thead.handlers.push({
    eventType: eventType,
    func: func,
    ownerId: ownerId,
    activation_mode: activation_mode
  })
}

function aa_empty(elem, clearMemoryLeaks) {
  var children = [];
  while (elem.firstChild) aa_remove(elem.firstChild, clearMemoryLeaks);
  aa_clear_virtual_inner_element(elem);
}

function aa_clear_virtual_inner_element(elem) {
  if (!elem.virtual_inner_elements) return;
  for (var i = 0; i < elem.virtual_inner_elements.length; i++) {
    aa_empty(elem.virtual_inner_elements[i]);
  }
}

function aa_bind_ui_event(elem, event1, func1) {
  if (!elem) return;
  if (event1 == "mouserightclick") {
    // Disable browser context menu (requires both selectors to work in IE/Safari + FF/Chrome)
    jQuery(elem).bind('contextmenu', function() {
      return false;
    });

    jQuery(elem).mousedown(function(e) {
      var evt = e;
      if (evt.button == 2) {
        aa_xFireEvent(this, 'click', null); // right-click is also click (for element selection)
        ajaxart.ui.lastEvent = (e) ? e : window.event;
        func1(e);
        ajaxart.ui.lastEvent = null;
        return false;
      }
      return true;
    });
    return;
  }
  if (elem.addEventListener) elem.addEventListener(event1, func1, false);
  else if (elem.attachEvent) {
    elem.attachEvent("on" + event1, func1);
    elem.jbEvents = elem.jbEvents || [];
    elem.jbEvents.push({
      event: "on" + event1,
      callback: func1
    });
  }
}

function aa_absLeft(elem, ignoreScroll) {
  if (elem == null) return 0;
  var orig = elem,
    left = 0,
    curr = elem;
  // This intentionally excludes body which has a null offsetParent.
  if (!ignoreScroll) {
    while (curr && curr.tagName && curr.tagName.toLowerCase() != 'body') {
      left -= curr.scrollLeft;
      curr = curr.parentNode; // scroll can not be calculated using offsetParent!
    }
  }
  while (elem) {
    left += elem.offsetLeft;
    elem = elem.offsetParent;
  }
  return left;
}

function aa_absTop(elem, ignoreScroll) {
  var top = 0,
    orig = elem,
    curr = elem;
  // This intentionally excludes body which has a null offsetParent.
  if (typeof(ignoreScroll) == "undefined") ignoreScroll = false;
  if (!ignoreScroll) {
    while (curr && curr.tagName && curr.tagName.toLowerCase() != 'body') {
      top -= curr.scrollTop;
      curr = curr.parentNode;
    }
  }
  while (elem) {
    top += elem.offsetTop;
    elem = elem.offsetParent;
  }
  return top;
}

function aa_relTop(elem, parent) {
  var top = 0,
    orig = elem,
    curr = elem;
  // This intentionally excludes body which has a null offsetParent.
  if (typeof(ignoreScroll) == "undefined") ignoreScroll = false;
  if (!ignoreScroll) {
    while (curr && curr.tagName && curr != parent) {
      top -= curr.scrollTop;
      curr = curr.parentNode;
    }
  }
  while (elem && elem != parent) {
    top += elem.offsetTop;
    elem = elem.offsetParent;
  }
  return top;
}

function aa_mousePos(e, removeWindowScroll) {
  var out = {};
  if (typeof(event) != 'undefined') var e = window.event;

  if (e.pageX || e.pageY) {
    out = {
      x: e.pageX,
      y: e.pageY
    };
  } else if (e.clientX || e.clientY) {
    var posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
    var posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    out = {
      x: posx,
      y: posy
    }
  }
  if (removeWindowScroll && out.y) out.y -= (window.pageYOffset || 0);
  if (removeWindowScroll && out.x) out.x -= (window.pageXOffset || 0);

  return out;
}

function aa_addWindowResizeEvent(elem, callback) {
  if (window.removeEventListener) window.removeEventListener('resize', callback);
  else window.detachEvent('resize', callback);

  aa_addEventListener(window,'resize', callback);

  aa_addOnDetach(elem, function() {
    aa_removeEventListener(window,'resize', callback);
  });

}
aa_gcs("ui", 
{
  Image: function (profile,data,context)
  {
	var src = aa_text(data,profile,'Source',context);
	var title = ajaxart_multilang_text(aa_text(data,profile,'Title',context),context);
	var width = aa_text(data,profile,'Width',context);
	var height = aa_text(data,profile,'Height',context);
	var out = jQuery('<img />')[0]; 
	out.setAttribute("src",src);
	out.setAttribute("title",title);
	if (height != "")
	  out.setAttribute('height',height);
	if (width != "") 
		out.setAttribute('width',width);
	if (ajaxart.subprofiles(profile,'OnClick') != null)
		out.className = 'clickable';
	jQuery(out).click(function() {
		if (window.aa_incapture) return;
		ajaxart.run(data,profile,"OnClick",aa_ctx(context,{ControlElement: [this]}));
	});
	return [out];
  },
  HtmlControl: function (profile,data,context)
  {
	  var html = aa_text(data,profile,'Html',context);
	  var css = aa_text(data,profile,'Css',context);
	  var div = document.createElement("DIV");
	  if (aa_bool(data,profile,'WordWrap',context))
		  div.style.whiteSpace = "normal";
	  div.innerHTML = html;
	  if (css != "")
		  div.className = aa_attach_global_css(css);
	  return [div];
  },
  Text: function (profile,data,context)  // GC of ui.Text
  {
	  var text = aa_text(data,profile,'Text',context);
	  var style = aa_text(data,profile,'Style',context);
	  var multiLang = aa_bool(data,profile,'MultiLang',context);
	  
	  if (multiLang)
	  	text = aa_text([text],aa_parsexml('<s t="text.MultiLang" Pattern="%%" Dynamic="true"/>'),'',context);
	  if (! aa_bool(data,profile,'HtmlContents',context))
		text = text.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br/>");
      var span = document.createElement("span");
 	  if (style != "")
 		 aa_setCssText(span,style);
 	  span.className = "ajaxart_text";
 	  span.innerHTML = text;
 	  
 	  var hint = aa_text(data,profile,'Hint',context);
 	  if (hint != "") span.setAttribute('title',hint);
 	  
 	  return [span];
  },
  ControlWithAction: function (profile,data,context)
  {
	  ajaxart.run(data,profile,'RunBeforeControl',context);
	  var out = ajaxart.run(data,profile,'Control',context);
	  var newcontext = aa_ctx(context, { ControlElement: out, _ElemsOfOperation: out});
	  if (aa_bool(data,profile,'RunAfterControlWithTimer',context)) {
	    var timeout = 1;
	    if (ajaxart.isSafari) timeout = 100;
	    setTimeout(function() { ajaxart.run(data,profile,'RunAfterControl',newcontext); }  ,timeout); 
	  }
	  else
		  ajaxart.run(data,profile,'RunAfterControl',newcontext);
	  return out;
  },
  DataBind: function(profile,data,params)
  {
	var newData = ajaxart.getVariable(params,"InputForChanges");
    var script = aa_first(data,profile,'Script',params);
	var element = data;
	
	ajaxart.databind(element,newData,params,script);
	
	return data;
  },
  ElementOfClass : function(profile, data, params) {
	  	var cls = aa_text(data,profile,'Cls',params);
	  	var onlyFirst = aa_bool(data,profile,'OnlyFirst',params);
	  	var down = ( aa_text(data,profile,'Direction',params) == 'down');
	  	
	  	var child;
	  	if (!ajaxart.ishtml(data)) { ajaxart.log("ElementOfClass - input is not html","error"); return []; }
	  	var index = 0;
	  	var elements_queue = [];
	  	if (down)
	  		elements_queue.push(data[0]);
	  	else {
	  		if (data[0].parentNode != null)
	  			elements_queue.push(data[0].parentNode);
	  	}
	  	
	  	var out = [];
	  	while (index < elements_queue.length) {
	  		var element = elements_queue[index];
	  		index++;
	 		
	  		if (jQuery.inArray( cls, element.className.split(/\s+/) ) > -1 )
	  			if (onlyFirst)
	  				return [element];
	  			else
	  				out.push(element);
	  		
	  		if (down)
	  		{
		  		child = element.firstChild;
		  		while (child != null) {
		  			if (child.nodeType == 1)// element
		  				elements_queue.push(child);
		  			child = child.nextSibling;
		  		}
	  		} 
	  		else {
	  			if (element.parentNode != null && element.parentNode.nodeType == 1) 
	  				elements_queue.push(element.parentNode);
	  		}
	  	}
	  	return out;
	  },
	  HasClass: function (profile,data,context)
	  {
		  var cls = aa_text(data,profile,'Cls',context);
		  if ( jQuery(data).hasClass(cls) )
			  return ["true"];
		  return [];
	  },
	  Html: function (profile,data,params)
	  {
	    var html = aa_text(data,profile,'Html',params);
	    var tag = aa_text(data,profile,'Tag',params);
	    var dynamicContent = aa_bool(data,profile,'DynamicContent',params);

	    if (html == "") {
	    	html = aa_xml2htmltext(ajaxart.childElem(profile,"*"));
	    	if (dynamicContent)
	    		html = ajaxart.dynamicText(data,html,params,data,false,true)[0];
	    }
		if (tag != "") {
			var out = document.createElement(tag);
			out.innerHTML = html;
			return [out];
		}
		else {
			if (html == null) return [];
			return [jQuery(html)[0]];
		}
	  },
	  ControlWithCss: function (profile,data,context)
	  {
		var control = ajaxart.run(data,profile,'Control',context);
		var css = aa_text(data,profile,'Css',context);
		jQuery(control).addClass(aa_attach_global_css(css));
		return control;
	  },
	  ItemList: function (profile,data,context,override_items,override_aspects)
	 	{
		    var id = aa_string2id(aa_text(data,profile,'ID',context));
	 		var cntr = { ID: [id] , isObject: true }
	 		
		    var newcontext = aa_ctx(context,{_ParentCntr: context.vars._Cntr, _Cntr : [cntr]} );
	 		if (aa_bool(data,profile,'DataHolderCntr',context))
	 			newcontext = aa_ctx(newcontext,{DataHolderCntr: [cntr]});
	 		
	 		var data_items;
	 		if (aa_paramExists(profile,'DataHolder') && !override_items)
	 		{
	 			cntr.DataHolder = dataholder = aa_first(data,profile,'DataHolder',newcontext);
	 			cntr.Fields = dataholder.Fields;
	 			cntr.Items = data_items = [{isObject: true, Items: dataholder.Wrappers}];
	 			newcontext = aa_ctx(newcontext,{DataHolderCntr: [cntr], _Items: data_items});
	 		}
	 		else
	 		{
	 			data_items = override_items || ajaxart.run(data,profile,'Items',newcontext);
	 			if (!data_items[0]) data_items = [{Items:[]}];
	 			cntr.Items = data_items;
	 			ajaxart.setVariable(newcontext,"_Items",data_items);
	 			var ctx4 = aa_ctx(newcontext,{_FormulaInput: data_items[0].Items});
			    var fields = ajaxart.runsubprofiles(data,profile,'Field',ctx4);
			    ajaxart.concat(fields,ajaxart.run(data,profile,'Fields',ctx4));
	 			
	 			cntr.Fields = fields;
	 		}
			if (override_aspects)
		      var aspects = override_aspects;
			else {
			  var aspects = ajaxart.run(data,profile,'Presentation',newcontext);
			  aspects = aspects.concat(ajaxart.runsubprofiles(data,profile,'Aspect',newcontext));
			}
			for(var i=0;i<cntr.Fields.length;i++)
				if (cntr.Fields[i].CntrAspects)
				{
					var fld_aspects = cntr.Fields[i].CntrAspects;
					for(var j=0;j<fld_aspects.length;j++)
						aspects.push(fld_aspects[j].GetContent(data,newcontext)[0]);
				}

		    // takeover - used by GroupBy aspect to duplicate container in groups
		    var orignalItemListFunc = function(newcontext) { return function(override_items,override_aspects) {
		    	return ajaxart.gcs.ui.ItemList(profile,data,newcontext,override_items,override_aspects);
		    }}
		    for(var i=0;i<aspects.length;i++)
		    	if (aspects[i].takeOver != null)
			    	return aspects[i].takeOver(aspects,data_items,orignalItemListFunc(newcontext),newcontext);
		    
	 		cntr.Ctrl = jQuery('<div class="aa_container aa_inherit_selection"><div class="aa_container_header"/><ul style="list-style: none; padding:0; white-space: normal;" class="aa_list aa_listtop aa_cntr_body"/><div class="aa_container_footer"/></div>')[0];
	 		if (id != '')
	 			jQuery(cntr.Ctrl).addClass('Page_'+id);
		    // use the aspects to create the container - they can replace the default one.
		    for(var i=0;i<aspects.length;i++)
		    	ajaxart.runScriptParam(data,aspects[i].CreateContainer,newcontext);
		    cntr.Ctrl.Cntr = cntr;
		    ajaxart.databind([cntr.Ctrl],data,context,profile);
		    
			cntr.Items = data_items;
		    cntr.PostActors = [];cntr.PreActors = [];
		    cntr.RegisterForPostAction = function(aspect,phase) { cntr.PostActors.push({ phase: phase || 0, aspect: aspect}); }
		    cntr.RegisterForPreAction = function(aspect,phase) { cntr.PreActors.push({ phase: phase || 0, aspect: aspect}); }
		    cntr.Aspects = aspects;
			cntr.XtmlSource = [ {isObject :true, script :profile, input: data, context :context }];
			
			cntr.createNewElement = function(item_data,item_aggregator)
		    {
				var li = document.createElement('li');
				li.className = "aa_item";
				li.ItemData = item_data;
				ajaxart_add_foucs_place(li);
		    	if (item_aggregator)
		    		item_aggregator.push(li);
				return li;
		    };
		    cntr.insertNewElement = function(elem,parent)
		    {
		    	var list = ajaxart_find_list_under_element(parent);
		    	if (list != null)
		    		list.appendChild(elem);
		    };
		    cntr.next = function(elem,cntr) { return ajaxart_tree_next(elem,cntr) };
		    cntr.prev = function(elem,cntr) { return ajaxart_tree_prev(elem,cntr) };
		    cntr.ElemsOfOperation = function() 
		    { 
		    	if (this.GetMultiSelectedItems)
		    		return this.GetMultiSelectedItems();
		    	return jQuery(this.Ctrl).find('.aa_selected_item').slice(0,1).get(); 
		    }
		    cntr.ItemsOfOperation = function() 
		    { 
		    	var elems = this.ElemsOfOperation();
		    	var itemsData = [];
		    	for(var i in elems)
		    		itemsData = itemsData.concat(elems[i].ItemData);

		    	return itemsData;
		    }
		    cntr.Context = newcontext;

		    aa_setMethod(cntr,'Operations',profile,'Operations',context);

		    for(var i=0;i<cntr.Aspects.length;i++) {
		    	try {
		    		aa_runMethod(data,cntr.Aspects[i],'InitializeContainer',newcontext);
		    	} catch(e) { 
		    		ajaxart.log("error in aspect " + cntr.Aspects[i].XtmlSource[0].script.getAttribute('t') + ": " + e.message + (e.stack || ''),"error"); }
		    }

		    cntr.PreActors.sort(function(a,b) { return a.phase > b.phase ? 1 : -1; });
		    cntr.PostActors.sort(function(a,b) { return a.phase > b.phase ? 1 : -1; });

		    for(var i=0;i<cntr.PreActors.length;i++) {
		    	ajaxart.trycatch( function() {
		    		aa_runMethod(data,cntr.PreActors[i].aspect,'PreAction',newcontext);
			    	 //ajaxart.runScriptParam([],cntr.PreActors[i].aspect.PreAction,cntr.Context);
		    	}, function(e) { ajaxart.logException(e); });
		    }

		    if (cntr.DataHolder)
		    	cntr.DataHolder.UserDataView.Sort = cntr.Dataview_PreSort || [];
		    aa_recalc_filters_and_refresh(cntr,data,newcontext,false);
			if (cntr.SoftSelector) // auto select, e.g from url
			{
	  	    	var top_cntr_list = ajaxart_find_aa_list(cntr);
	  	    	var all_elems = jQuery(top_cntr_list).find('.aa_item').get();

				var key_to_select = ajaxart.totext_array(ajaxart.runScriptParam(data,cntr.SoftSelector.GetValue,cntr.Context));
				for(var i=0;i<all_elems.length;i++)
					if (cntr.ItemId && key_to_select != "" && cntr.ItemId(all_elems[i].ItemData,all_elems[i]) == key_to_select) 
						ajaxart_uiaspects_select(jQuery(all_elems[i]),jQuery([]),"auto",cntr.Context);
			}

		    return [cntr.Ctrl];
	 	},
	 	Document: function (profile,data,context)
	 	{
	 		// assumption: ui.Document is not called in batch
		    var id = aa_string2id(aa_text(data,profile,'ID',context));
		    var fields = ajaxart.runsubprofiles(data,profile,'Field',context);
		    ajaxart.concat(fields,ajaxart.run(data,profile,'Fields',context));
		    
			var dataitems = ajaxart.run(data,profile,'Item',context);
			
			var operationsFunc = function(data1,ctx) { return ajaxart.run(data1,profile,'Operations',aa_merge_ctx(context,ctx)); }
			var aspectsFunc = function(data1,ctx) {
				var newContext = aa_merge_ctx(context,ctx);
				var cntr = ctx.vars._Cntr[0];
				var fields = cntr.Fields;
				
			    var aspects = ajaxart.run(data,profile,'Presentation',newContext);
			    ajaxart.concat(aspects,ajaxart.runsubprofiles(data,profile,'Aspect',newContext));
				for(var i=0;i<fields.length;i++)
				  if (fields[i].CntrAspects)
					aspects = aspects.concat(fields[i].CntrAspects);
				return aspects;
			}
			// TODO: change aspectsFunc to be an array and not a function [ make sure all aspects are written correctly ]
	 		var out = aa_uidocument(data,id,dataitems,fields,aspectsFunc,operationsFunc,context);
	 		ajaxart.databind([out],data,context,profile);
	 		out.Cntr.XtmlSource = [ {isObject :true, script :profile, input: data, context :context }];
	 		
	 		return [out];
	 	},
	 	UseGroupAsPage: function (profile,data,context)
	 	{
	 		return [{
	 			ID: 'inner_page',
	 			Fields: [],
	 			Control: function(data1,ctx) {
			 		var groupID = aa_text(data,profile,'Group',context);
			 		var cntr = ctx.vars._Cntr && ctx.vars._Cntr[0];
			 		if (!cntr)  { ajaxart.log('UseGroupAsPage: Can not find cntr','error'); return []; }
			 		var groupField = aa_fieldById(groupID,cntr.Fields);
			 		if (!groupField) ajaxart.log('Can not find group ' + groupID + ' in container ' + cntr.ID[0],'error');
			 		this.Fields = groupField ? [groupField] : [];

	 				var pageParams = ctx.vars._PageParams[0];
	 				var groupData = pageParams ? pageParams.DataItems[0].Items : data1;
//	 				var aspects = ajaxart.runScriptParam([],pageParams.Aspect,ctx); 
	 				if (groupField)
	 				  return groupField.Control(groupData,ctx);
	 				return [];
	 			}
	 		}];
	 	},
	 	ToggleClassByCondition:function (profile,data,context)
	 	{
	 		var elem = aa_first(data,profile,'Element',context);
	 		if (! ajaxart.ishtml_item(elem)) return [];
	 		var condition = aa_bool(data,profile,'ClassCondition',context);
	 		var cls = aa_text(data,profile,'Class',context);
	 		if (condition)
	 			jQuery(elem).addClass(cls);
	 		else
	 			jQuery(elem).removeClass(cls);
	 		return [];
	 	}
});

aa_gcs("uiaction",{
   GoToPage: function(profile, data, context)
   {
  	 var url = aa_text(data,profile,'Url',context);
  	 if (url == "") return;
  	 var type = aa_text(data,profile,'Type',context);
  	 var target = (type == 'navigate current page') ? "_top" : "_new";
     if (ajaxart.inPreviewMode == true) return [];
     
  	 if (target == "_new") {
//		var controls = ajaxart.getControlElement(context);
//		if (controls.length > 0 && !ajaxart.isattached(controls[0])) return data;
		target = "_blank";
  	 }
  	 window.open(url,target);
  	 return data;
   },
	AddClass: function(profile, data, context)
	{
		var classes = aa_text(data,profile,'Cls',context);
		var element = ajaxart.getControlElement(context,true);
		jQuery(element).addClass(classes);
		return data;
	},
   RunUiActions : function(profile, data, context)
   {
	    var actions = ajaxart.subprofiles(profile,'Action');
		var newContext = ajaxart.clone_context(context);
	    ajaxart.setVariable(newContext,"ControlElement",data);
	    var inp = ajaxart.getVariable(context,"InputForChanges");
	    for(var i=0;i<actions.length;i++)
	    	var subresult = ajaxart.run(inp,actions[i],"",newContext);
	    
	    return data;
   },
	SetText: function(profile, data, context)
	{
	    var text = aa_text(data,profile,'Text',context);
	    var mode = aa_text(data,profile,'Mode',context);
		
		var elements = ajaxart.getControlElement(context);
		if (elements.length == 0) return [];
	    var element = elements[0];
	    
	    if (jQuery(element).hasClass('aa_text')) { element.innerHTML = text; return;}
	    if (mode == "CharByChar")
	    {
	    	element.value = '';
	    	element.setAttribute('value','');
	    	for(var i=0;i<text.length;i++)
	    	{
	    		aa_xFireEvent(element, 'keydown', {keyCode: text.charCodeAt(i), CharByChar: true}, context.vars.InTest != null);
	    		aa_xFireEvent(element, 'keyup', {keyCode: text.charCodeAt(i), CharByChar: true}, context.vars.InTest != null);
	    	}
	    	return;
	    }

		var tag = element.tagName.toLowerCase(); 
		
		if (tag == "textarea" )
			element.value = text;
		else if (tag == "input")
		{
			if (mode == "ReplaceAll")
			{
				element.setAttribute("value",text);
				element.value = text;
			}
			else if (mode == "InsertAtCaret")
			{
                if ('selectionStart' in element) // W3C
                    element.value = element.value.substr(0, element.selectionStart) + text + element.value.substr(element.selectionEnd, element.value.length);
                else if (document.selection) { // IE
                    element.focus();
                    document.selection.createRange().text = text;
                }				
			}
			else if (mode == "InsertAtEnd")
			{
				element.value = element.value + text;
				element.setAttribute("value",element.value);
			}
		} else if (jQuery(element).hasClass("button_hyperlink_image"))
			{
				ajaxart.each(jQuery(element).find(">a"), function(a) { 
					jQuery(a).text(text); 
				} );
			}
			else if (tag == "div" || tag=="span" || tag=="button" || tag =="a")
				element.innerHTML = text;
		
		aa_inuiaction = true;
		
		if (! aa_bool(data,profile,'DoNotFireEvents',context))
		{
			aa_xFireEvent(element, 'keydown');
			aa_xFireEvent(element, 'keyup');
		}

		if (! aa_bool(data,profile,'StayInControl',context))
			aa_xFireEvent(element, 'blur', null);

		aa_inuiaction = false;
		return [];
	}
});

aa_gcs("uipref",{
	InCookies: function (profile,data,context)
	{
		var obj = {
		  GetProperty: function(data1,ctx) {
			var prefix = aa_totext(ctx.vars.Prefix);
			var property = aa_totext(ctx.vars.Property);
			var out = aa_valueFromCookie(prefix+property);
			if (out == null) return [];
			return [out];
		  },
		  SetProperty: function(data1,ctx) {
			var prefix = aa_totext(ctx.vars.Prefix);
			var property = aa_totext(ctx.vars.Property);
			var value = aa_totext(ctx.vars.Value);

			aa_writeCookie(prefix+property,value);
		  }
		}
		return [obj];
	},
	PrefValue: function (profile,data,context)
	{
		var prefix = aa_text(data,profile,'Prefix',context);
		var property = aa_text(data,profile,'Property',context);
		var out = ajaxart_getUiPref(prefix,property,context);
		if (out == null)
			return [];
		else
			return [out];
	},
	SetPrefValue: function (profile,data,context)
	{
		var prefix = aa_text(data,profile,'Prefix',context);
		var property = aa_text(data,profile,'Property',context);
		var value = aa_text(data,profile,'Value',context);
		ajaxart_setUiPref(prefix,property,value,context);
		return [];
	}
});


/*** jBart API ***/

// IE8 support
if(typeof String.prototype.trim !== 'function') {
  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, ''); 
  }
}

function aa_convertToXml(item,name, error_control) {
	if (!item) return aa_parsexml('<xml/>');
	if (item.nodeType == 9) return item.documentElement; // xml document
	if (ajaxart.isxml_item(item)) return item;
	if (item.getNumberOfColumns)
		return aa_GoogleDataTableToXml(item);
	if (typeof(item) == 'object') // json
		return aa_JSON2Xml(item,'Top');
	if (typeof(item) == 'string') {
		var json = item.match(/^\s*[{[]+/); // json - starting with { or [
		var xml = item.match(/^\s*[<]+/); // xml - starting with <
		if (json)
			return aa_JSON2Xml(item,'Top');
		else if (xml)
			return aa_parsexml(item, "", error_control);
		else if (item.indexOf(',') != -1) // CSV?
			return aa_CSV2Xml(item);
	}
}
function aa_jbart_init_activator(jBartActivator,settings) {
		var language = '';
		settings.success = settings.success || function() {};
		settings.error = settings.error || function(msg) { if (console) console.log(msg); };

		ajaxart.base_images = settings.base_images_dir || ajaxart.base_images;
		ajaxart.base_lib = settings.base_lib_dir || ajaxart.base_lib;

		var widget_src = jBartActivator._widgetSource;
		var errors = [];
		jBartActivator._widgetXml = aa_convertToXml(jBartActivator._widgetSource,"widget xml", errors);

		settings.data = settings.data || {};
		settings.rawData = settings.rawData || {};
		var widget_id = jBartActivator._widgetXml.getAttribute('id');

		for(var res in settings.data) {
			var varname = 'jBartWidget_' + widget_id + '_' + res; 
			window[varname] = jbart_data(settings.data[res],'single');
		}
		for(res in settings.rawData) {
			var val = aa_isArray(settings.rawData[res]) ? settings.rawData[res] : [settings.rawData[res]];
			window['jBartWidget_' + widget_id + '_' + res] = val;
		}

		jBartActivator.Context = aa_create_jbart_context({
				WidgetXml: jBartActivator._widgetXml,
				Language: language,
				OnError: function(data1) {
					handleError(aa_totext(data1));
				},
				jbartObject: jBartActivator
		});

		function handleError(message) {
			ajaxart.log(message);
			params.error({message: message});
		}		
}

function aa_jbart_activator_showPage(jBartActivator,div,settings) {
  var out = aa_show_jbart_widget_page({
		Context: jBartActivator.Context,
		page: settings.page,
		success: settings.success
	});
	if (out && div) jQuery(div)[0].appendChild(out);
	aa_element_attached(out);
}
/*
 * params:
 * ** The Widget
 * 		widget_src : the xtml source code of the widget (also called widget)
 *  or
 *  	widget_id: the id of the widget. e.g. shai__myWidget
 *  	widget_repository: default it jbartdb. e.g. //jbartdb.appspot.com/
 *  
 *  *** More params
 *  page: the page to show - default is defined in the widget 
 *  language: i18n. e.g. hebrew
 *  spinner: you can define your own url or leave the null value to use the default spinner.
 *  nospinner: if true, no spinner is used
 *  
 *  *** Callbacks
 *  success: function called after the widget is loaded and attached
 *  error(e): function called on error
 */
jBart.appendWidget = function(place_to_add,params,jbartObject)
{
		function handleError(message) {
			ajaxart.log(message);
			params.error({message: message});
		}
		jBart.settings = params;
		params.success = params.success || function() {};
		params.error = params.error || function(msg) { jQuery(place_to_add).append(jQuery('<span/>').text(msg.message)); };
		var widgetID = params.widget_id;
		var loadingTime;

		ajaxart.base_images = params.base_images_dir || ajaxart.base_images;
		ajaxart.base_lib = params.base_lib_dir || ajaxart.base_lib;
		if (!place_to_add) return handleError('can not add to a null element');
		
		jQuery(place_to_add).addClass('jBartWidget');
		if (!params) return handleError('missing params');
		

		function getControl(widget_id) {
			var errors = [];
			if (! params.widget_src) return handleError('widget source for ' + (widget_id || 'unknown') + ' is not available'); 
			var widget_as_xml = aa_convertToXml(params.widget_src,"widget xml", errors);
			if (widget_as_xml.tagName == 'Error') return handleError(widget_as_xml.getAttribute('message'));
			if (errors.length > 0) return handleError(errors[0]);
			
			widget_id = widget_id || widget_as_xml.getAttribute('id');
			if (widget_id.indexOf('/') > -1) widget_id = widget_id.split('/')[1];
			widgetID = widget_id;

			var language = params.language ? params.language : "";
			var page = params.page;
			params.data = params.data || {};
			params.rawData = params.rawData || {};
			
			for(var res in params.data) {
				var varname = 'jBartWidget_' + widget_id + '_' + res; 
				window[varname] = jbart_data(params.data[res],'single');
			}
			for(var res in params.rawData) {
				var val = aa_isArray(params.rawData[res]) ? params.rawData[res] : [params.rawData[res]];
				window['jBartWidget_' + widget_id + '_' + res] = val;
			}

			var xtmlContent = aa_xpath(widget_as_xml,'bart_dev/db/bart_unit/bart_unit')[0];
			xtmlContent = xtmlContent || aa_xpath(widget_as_xml,'xtml')[0];
			ajaxart.load_xtml_content('widget',xtmlContent);  // for specific components
			var out = [aa_show_jbart_widget({
				WidgetXml: widget_as_xml,
				Page: page,
				Language: language,
				OnError: function(data1) {
					handleError(aa_totext(data1));
				},
				Context: aa_ctx( ajaxart.newContext(), {Language:[language]} ),
				jbartObject: jbartObject
			})];			
			if (out.length == 0) return null;
			jQuery(out[0]).addClass('ajaxart' + ajaxart.deviceCssClass);
			if (language == "hebrew")
				jQuery(out[0]).addClass('right2left');
			return out[0];
		}
		if (params.widget_id) { // we need to load the widget first
			var widget_id = params.widget_id;
			params.spinner = params.spinner || '//www.google.com/ig/images/spinner.gif';
			if (! params.nospinner) {
			  place_to_add.appendChild(jQuery('<img class="spinner" src="'+ params.spinner +'" ></img>')[0]);
			}
			window['jBartWidget_' + widget_id + '_loaded'] = function() {
				params.widget_src = window['jBartWidget_' + widget_id];
				jQuery(place_to_add).children(".spinner").remove();
				var ctrl = getControl(widget_id);
				controlCreated(ctrl);
			}
			var widgetUrl = (params.widget_repository || '//jbartdb.appspot.com') + '/widget.js?id=' + widget_id;
			aa_load_js_css(widgetUrl,'js');
		}
		else if (params.widget_src)
		{
			controlCreated(getControl());
		}
		else
			return handleError('missing param widget_id or widget_src');

		function controlCreated(ctrl) {
			if (ctrl) {
				$('#jbart_loading').empty();
				place_to_add.appendChild(ctrl);
				aa_element_attached(place_to_add);
				params.success();

				if (window.jBartLoadingStartTime) {
					loadingTime = new Date().getTime() - window.jBartLoadingStartTime;
				}
				addToGoogleAnalytics();

			} else {
				return handleError('widget returned an empty control');
			}
		}
		function addToGoogleAnalytics() {
			jBart.addedToGoogleAnalytics = jBart.addedToGoogleAnalytics || {};
			if (jBart.addedToGoogleAnalytics[widgetID]) return;
			jBart.addedToGoogleAnalytics[widgetID] = true;

			if (window.location.href.indexOf('localhost') > -1) return;
			if (params.hasOwnProperty('googleAnalytics') && !params.googleAnalytics) return;

			// Yaniv TODO: add it in an iframe
			if (window._gaq) {
			   _gaq.push(['_setAccount', 'UA-37216601-1']);
			   _gaq.push(['_setDomainName', 'none']);//'artwaresoft.appspot.com']);
			   _gaq.push(['_setAllowLinker', true]);
			   _gaq.push(['_trackPageview']);

				_gaq.push(['_trackEvent', 
					'jbart widget',
					widgetID,
					'show'
				]);

				loadingTime = parseInt(loadingTime / 500)*500;
				var loadingStr = loadingTime +  ' - ' + (loadingTime+500);

				if (loadingTime) {
					_gaq.push(['_trackEvent', 
						'jbart widget',
						widgetID,
						'loading_time_ms: ' + loadingStr
					]);
				}
			} else {
			     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			     setTimeout(function() { addToGoogleAnalytics(); },3000);
			}
		}
}
jBart.dialogs = {};
jBart.isReady = false;
jBart.ready = function(func) {
	if (jBart.isReady)
		ajaxart.ready(func,[],[]);
	else
		jBart.bind(jBart,'ready',func);
}

function jbart_init() {
	(function(jQuery) {
		jQuery.fn.jBart = function(params)
		{
			return this.each(function() {
				var elem = this;
				jBart.ready(function() {
					if (!params.widget) { if (window.console) { console.error("jBart: param 'widget' is missing"); } return; };
					if (!jBartWidgets[params.widget]) { if (window.console) { console.error("jBart: '" + params.widget + " is not a valid widget"); } return; };
					jBartWidgets[params.widget].show(elem, params);
					// jBart.appendWidget(elem,params);
				});
			});
		};
	})(jQuery);
	
	var activate = function() {
		// auto inject jBart widget to jBartWidget elems
		jQuery().ready( function() {
			if (!ajaxart.ready) return; // TODO: Fix to support dynamic loading of jbart after jQuery is already loaded 
			ajaxart.ready(function() {
				jBart.ajaxart = ajaxart;
				jBart.isReady = true;
				jBart.trigger(jBart,'ready');
				jQuery().find('.jBartWidget').each(function() {
					var params = {}
					if (this.className == 'jBartWidget') return;
//					if (!(this.className + ' ').split('jBartWidget ')[1].split('jBartWidget_')[1]) return;
					var widgetId= (this.className + ' ').split('jBartWidget ')[1].split('jBartWidget_')[1].split(' ')[0];
					var WidgetVarName = 'jBartWidget_' + widgetId;
				    params.widget = window[WidgetVarName];
					if (this.className.indexOf('jBartWidgetPage_') >-1)
					  params.page= (this.className + ' ').split('jBartWidgetPage_')[1].split(' ')[0];
					
				    if (params.widget)
						jQuery(this).jBart(params);
				    else
				    	ajaxart.log('can not find widget ' + widgetId);
				  	jQuery("#ajaxart_loading").hide();
				});
			},[]);
		})
	}
	if (!window.jBartNodeJS)
		activate();
	window.jbart_data = jbart_data;	// for use in external js
}
jbart_init();
function jbart_data(data,multiplicity)  // multiplicity can be 'multiple' (default) or 'single'
{
	if (data == window) return [];
	var error_control = [];
	var data_as_xml = aa_convertToXml(data,"widget data", error_control);
	if (!data_as_xml && typeof(data) == 'string') return [data];
	if (!data_as_xml) return null;
	// clean atom and rss headers
	var tagName = data_as_xml.tagName.split(':').pop();
	if (tagName == 'feed' || tagName == 'rss')
	{
		// clean NS and change root tag
		var items_path = (tagName == 'feed') ? 'atom:entry' : 'channel/item';
		var items = aa_xpath(data_as_xml, items_path);
		if (items.length > 0) {
			var result = '<top>';
			for(var i in items)
				result += ajaxart.xml.prettyPrint(items[i],'',true);
			result += '</top>';
			data_as_xml = aa_convertToXml(result,"cleaned data", error_control);
		}
	}
	if (!multiplicity || multiplicity == 'multiple')
		return aa_xpath(data_as_xml,'*');
	return [data_as_xml];
}

/******* action async **********/
function aa_RunAsyncQuery(data,fieldscript,context,callBack)
{
	if (fieldscript == null) { callBack([],context,false); return; }
	
	var callBackObj = { callBack: callBack, marked: false , success: true };
	var newContext = aa_ctx(context,{ _AsyncCallback : callBackObj });
	var result = [];
	ajaxart.trycatch( function()  {
		if (typeof(fieldscript) == "function") 
			result = fieldscript(data,newContext); 
		else if (fieldscript.compiled != null)
			result = fieldscript.compiled(data,newContext);
		else
			result = ajaxart.run(data,fieldscript,'',newContext);		// TODO: clean
	}, function (e) {	// catch
	   	   ajaxart.logException(e);
	       return [];
	});
	if (! callBackObj.marked && callBack)	// sync query
		callBack(result,context,true);
}
function ajaxart_RunAsync(data,fieldscript,context,callBack,object_for_method)
{
	if (fieldscript == null) { callBack(data,context,false); return; }
	
	var callBackObj = { callBack: callBack, marked: false , success: true };
	var newContext = aa_ctx(context,{ _AsyncCallback : callBackObj });
	if (ajaxart.debugmode) {
	  if (typeof(fieldscript) == "function") {
		  if (object_for_method) fieldscript.call(object_for_method,data,newContext);
		  else fieldscript(data,newContext);
	  }
	  else if (fieldscript.compiled != null)
			fieldscript.compiled(data,newContext);
		  else
		    ajaxart.run(data,fieldscript,'',newContext);
	} else {
	  try {
		  if (typeof(fieldscript) == "function") {
			  if (object_for_method) fieldscript.call(object_for_method,data,newContext);
			  else fieldscript(data,newContext);
		  }
		  else if (fieldscript.compiled != null)
			fieldscript.compiled(data,newContext);
		  else
		    ajaxart.run(data,fieldscript,'',newContext);		// TODO: clean
	  } catch(e) { ajaxart.logException(e); }
	}
	if (! callBackObj.marked && callBack)	// sync action
  	  callBack(data,context,true);
}
/************* bart **************/
function ajaxart_resourceByID(id,context)
{
	if (!context.vars._AppContext) return null;
	var bc = context.vars._AppContext[0];
	if (!bc.Resources) return null;

	var res = bc.Resources;
	for(var i=0;i<res.length;i++)
		if (aa_totext(res[i].ID) == id)
			return res[i];
	
	return null;
}

function ajaxart_popup_capture_click(e)
{
    var elem = jQuery( (typeof(event)== 'undefined')? e.target : (event.tDebug || event.srcElement)  );

    if (elem.parents('.customsuggestionpopup').length > 0) return; // clicking inside suggestion box
    if (elem.parents('.contextmenu').length > 0) return; // clicking inside context menu
    if (elem.parents('.capturebox').length > 0) return;
    if (elem.parents('html').length == 0 && elem[0].tagName.toLowerCase() != 'html') return; // detached - should not close..?
//    if (elem.parents().length == 0) return;
    
    var popups = ajaxart.dialog.openPopups;
    for(var i=0;i<popups.length;i++)
    {
    	var popup = popups[popups.length-i-1];
	    if (elem.parents('.aa_click_dosent_close_popup').length > 0) {
	    	// usage: click in inspect popup should not close the current editable popup 
	    	// we do close the popup if it is a 'son' of the inspect dialog
	    	var launching_element = (popup.Dlg) ? popup.Dlg.onElem : popup.onElem;
	    	if (jQuery(launching_element).parents('.aa_click_dosent_close_popup').length == 0)
	    		return;
	    }

    	var popup_frame = (popup.Dlg) ? popup.Dlg.Frame : popup.contents.parentNode;
    	
		//if ( !elem.hasClass('aapopup') && elem.parents('.aapopup').length == 0 && elem.parents('.contextmenu').length == 0 )  // outside the popup
    	if (elem[0] != popup_frame && elem.parents().filter(function() { return this == popup_frame } ).length == 0)
		{
    		if (!popup.initialized) continue;
			jQuery("#log").append("click outside popup");
			if (popup.Dlg && !popup.Dlg.JBStudio && elem.parents('.jbstudio_dlg').length > 0) {
				// no not close
			} else {
				aa_closePopup(popup);
				if (popup.Dlg) jBart.trigger(popup.Dlg,'cancel');
			}
			ajaxart_popup_capture_click(e); // try close more popups
			return;
		}
		else
		{
		  	if (ajaxart.controlOfFocus)
		  		ajaxart.controlOfFocus.IgnoreBlur = true;
			return;
		}
    }
}
function ajaxart_scroll_offset() {
	var scrollOffsetX = 0;
	var scrollOffsetY = 0;
	// taken fron http://www.howtocreate.co.uk/tutorials/javascript/browserwindow
	if( document.body && ( document.body.scrollLeft || document.body.scrollTop ) ) {
    //DOM compliant
		scrollOffsetY = document.body.scrollTop;
		scrollOffsetX = document.body.scrollLeft;
  } else if( document.documentElement && ( document.documentElement.scrollLeft || document.documentElement.scrollTop ) ) {
    //IE standards compliant mode
  	scrollOffsetY = document.documentElement.scrollTop;
    scrollOffsetX = document.documentElement.scrollLeft;
  }	
	return { x:scrollOffsetX, y:scrollOffsetY };
}
function aa_screen_height(context) {
	if (context.vars._PagePreview)
		return context.vars._PagePreview[0].Height;
	else
		return window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);
}
function aa_screen_width(context) {
	if (context.vars._PagePreview)
		return context.vars._PagePreview[0].Width;
	else
		return window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
}
function ajaxart_dialog_close_all_popups()
{
   	aa_closePopup(ajaxart.dialog.openPopups[0]);
}

function aa_capture_for_popup(popup)
{
	// console.log("capture_for_popup " + popup.onElem.parentNode.Field.Id);
	if (window.captureEvents)
	{ // FF
		popup.Orig_mousedown = window.onmousedown;  
		window.onmousedown = ajaxart_popup_capture_click;//for compression - ajaxart_popup_capture_click()
	}
	else  // IE
	{
		//alert('capture_for_popup');
		popup.Orig_mousedown = document.onmousedown;  
		document.onmousedown=ajaxart_popup_capture_click;
	}
	popup.capturing = true;
}

function aa_uncapture_for_popup(popup)
{
	// console.log("aa_uncapture_for_popup " + popup.onElem.parentNode.Field.Id);
	if (!popup || !popup.capturing) return;
	var orig_mousedown = popup ? popup.Orig_mousedown : null;
	if (window.captureEvents) // FF
		window.onmousedown = orig_mousedown;
	else  // IE
		document.onmouseclick = orig_mousedown;
}

function aa_closePopup(popup)
{
	if (window.aa_dont_close_popups) return;
	var popups = ajaxart.dialog.openPopups;
	if (popups.length == 0) return;
	if (!popup) popup = popups[popups.length-1];
		
	if (!aa_intest && !popup.initialized) return;

	// console.log("close " + popup.onElem.parentNode.Field.Id);
	var top_popup = popups[popups.length-1];
	var maxCount = 20;
	while(top_popup && top_popup != popup) // close cascading popups
	{
		if (!top_popup.initialized)
		{
			// console.log(top_popup.onElem.parentNode.Field.Id + " not initalized");
			if (popups.length <= 1) return;
			// can not delete un-initialized, so replace it with next top (if it is the one we would like to close)
			var new_top = popups[popups.length-2];
			if (new_top == popup)
			{
				// console.log("replaced with " + new_top.onElem.parentNode.Field.Id);
				var un_initialize = popups.pop();
				new_top = popups.pop();
				popups.push(un_initialize);
				popups.push(new_top);
				top_popup = new_top;
			}
			else
				return;
		}
		aa_closePopup(top_popup);
		popups = ajaxart.dialog.openPopups;
		top_popup = ajaxart.dialog.openPopups[ajaxart.dialog.openPopups.length-1];
		
		if (--maxCount < 0) break;
	}
	// console.log("closing " + top_popup.onElem.parentNode.Field.Id);
	ajaxart.dialog.openPopups.pop();
	aa_uncapture_for_popup(popup);
	if (!popup.Dlg) {	
		aa_remove(popup.contents.parentNode,true);
	}
	if (popup.returnFocusTo != null) popup.returnFocusTo.focus();
	if (ajaxart.suggestbox && ajaxart.ui.suggestBoxPopup)
		ajaxart.suggestbox.closePopup();
	
	if (popup.Dlg) popup.Dlg.Close([],ajaxart.newContext(),true);
	return [];
}

function aa_contentsOfOpenPopup()
{
	var popup = ajaxart.dialog.openPopups[ajaxart.dialog.openPopups.length-1];
	if (popup != null)
		  return [popup.contents];
	return [];
}

function aa_fixTopDialogPosition()
{
	var topDialog = aa_top_dialog();
	if (topDialog && topDialog.Dialog && topDialog.Dialog._FixDialogPosition) { topDialog.Dialog._FixDialogPosition(); return; }
	
	if (openDialogs.length == 0) return [];
	var dlgContent = openDialogs[openDialogs.length-1].dialogContent;
		var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
		var screenHeight = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);
		var scrollOffsetX = 0;
		var scrollOffsetY = 0;
		// taken fron http://www.howtocreate.co.uk/tutorials/javascript/browserwindow
		if( document.body && ( document.body.scrollLeft || document.body.scrollTop ) ) {  //DOM compliant
			scrollOffsetY = document.body.scrollTop;
			scrollOffsetX = document.body.scrollLeft;
	} else if( document.documentElement && ( document.documentElement.scrollLeft || document.documentElement.scrollTop ) ) {
	  //IE standards compliant mode
		scrollOffsetY = document.documentElement.scrollTop;
	    scrollOffsetX = document.documentElement.scrollLeft;
	}
	if (jQuery(dlgContent).width() + aa_absLeft(dlgContent) > screenWidth ||
		jQuery(dlgContent).height() + aa_absTop(dlgContent) > screenHeight )
	{
		dlgContent.style.left = (screenWidth - jQuery(dlgContent).width())/2 + scrollOffsetX + "px";
		dlgContent.style.top = (screenHeight - jQuery(dlgContent).height())/2 + scrollOffsetY + "px";
	}
	return [];
}

/*************** action **************/
aa_delayedRun = function(func,id,delay,milliToForce) 
{
	// look for the id in the table
	var newRecord = { id: id , handle: null}
	var getTimerFunc = function(record)
	{
		return function() {
			record.handle = 0;
			var force = false;
			if (record.startTime == null) record.startTime = new Date().getTime();
			else if (record.startTime + milliToForce > new Date().getTime())
				force = true;
			
			var success = func(force);
			if (success || force) {
				jBart.utils.removeFromArray(ajaxart.runDelayed,newRecord);
			}
			else
				newRecord.handle = setTimeout(getTimerFunc(newRecord),delay); // keep trying till milliToForce
		}
	}

	for(var i=0;i<ajaxart.runDelayed.length;i++)
	{
		var record = ajaxart.runDelayed[i];
		if (typeof(record.id) == typeof(id) && record.id == id) {
			if (record.handle != 0)
			  clearTimeout(record.handle);
			ajaxart.runDelayed[i] = newRecord;
			newRecord.handle = setTimeout(getTimerFunc(newRecord),delay);
			return ["true"];
		}
	}
	ajaxart.runDelayed.push(newRecord);
	newRecord.handle = setTimeout(getTimerFunc(newRecord),delay);
};
/******************* xml *******************/

function aa_bindXmlChange(xml,callback,settings) {
  ajaxart.xmlListeners = ajaxart.xmlListeners || [];
  ajaxart.xmlListenersCounter = ajaxart.xmlListenersCounter ? ajaxart.xmlListenersCounter+1 : 1;

  if (!xml || !xml.tagName) return;
  ajaxart.xmlListeners[xml.tagName] = ajaxart.xmlListeners[xml.tagName] || [];

	ajaxart.xmlListeners[xml.tagName].push({
		xml: xml,
		callback: callback,
		settings: settings,
		id: ajaxart.xmlListenersCounter
	});

  return ajaxart.xmlListenersCounter;
}

function aa_triggerXmlChange(xml,args) {
	if (!xml || !ajaxart.xmlListeners) return;
	var iter = xml.nodeType == 1 ? xml : aa_xpath(xml,'..')[0];

	// find if anyone is listening to a parent
	for(;iter && iter.nodeType == 1;iter=iter.parentNode) {
		var listeners = ajaxart.xmlListeners[iter.tagName];
		if (!listeners) continue;

		for(var i=0;i<listeners.length;i++) {
			if (listeners[i] && listeners[i].xml == iter)
				listeners[i].callback(xml,args);
		}

	}
}

function aa_unbindXmlChange(identifier) {
	if (!ajaxart.xmlListeners || !identifier) return;
	for(var tag in ajaxart.xmlListeners) {
		var listeners = ajaxart.xmlListeners[tag];
		for(var i=0;i<listeners.length;i++) {
			if (listeners[i] && listeners[i].id == identifier) {
				listeners.splice(i,1);
				return;
			}
		}
	}
}

function aa_xml2htmltext(xml) // faster than xml2text and supports mixed html inner text
{
	if (xml == null) return '';
	
	if (xml.nodeType == null) return xml;
	if (xml.nodeType == 2 || xml.nodeType == 3 || xml.nodeType == 4) { // Attribute or inner text
		return aa_xmlescape(xml.nodeValue);
	}
	 var out = xml.xml; //IE xml
	 if (xml.nodeType != null) // outer XML/html
	 {
	  if (!out) out = xml.outerHTML; // IE html
	  if (!out) { // mozilla
			var serializer = new XMLSerializer(); // XMLSerializer() omits newlines & tabs
			out = serializer.serializeToString(xml);
	  }
	 }
	 return out;
}
ajaxart.xml.parentNode = function(node)
{
	if (node.nodeType == 9) 
		return null;
	if (node.parentNode && node.parentNode.nodeType == 1)
		return node.parentNode;
	if (node.parentNode && node.parentNode.nodeType == 9)
		return null;
	if (node.ownerElement != null)
		return node.ownerElement;
	var xpath_result = aa_xpath(node,"..");
	if (xpath_result.length == 1) return xpath_result[0];
	return null;
}
ajaxart.replaceXmlElement = function(old_elem,new_elem,ishtml,cleanMemoryLeaks)
{
	if (old_elem == null || new_elem == null) return;
	if (old_elem.nodeType != 1) return;
	if (old_elem.parentNode == null) return;

	if (ishtml == true || ajaxart.isChrome)
	{
		if (new_elem.ownerDocument != old_elem.ownerDocument)
			new_elem = old_elem.ownerDocument.importNode(new_elem,true);
	}
	if (ishtml && old_elem.ParentObject != null) { 
		old_elem.ParentObject[0].ControlHolder = [new_elem];
		aa_defineElemProperties(old_elem,'ParentObject');
		aa_defineElemProperties(new_elem,'ParentObject');
		new_elem.ParentObject = old_elem.ParentObject; 
	}
	
	old_elem.parentNode.replaceChild(new_elem,old_elem);
	
	if (ishtml) {
		aa_element_attached(new_elem);
		if (cleanMemoryLeaks)
		  aa_remove(old_elem,cleanMemoryLeaks);
		else
		  aa_element_detached(old_elem);
	}
}
/******************* ui ********************/
function aa_element_detached(elem)
{
	if (!elem || ajaxart.isattached(elem)) return;
	
	var items = jQuery(elem).find('.aa_ondetach').get();
	if (jQuery(elem).hasClass('aa_ondetach')) items.push(elem);
	
	for(var i=0;i<items.length;i++) {
		try {
		if (items[i].OnDetach) items[i].OnDetach();
		  jQuery(items[i]).removeClass('aa_onattach_called');
		} catch(e) {ajaxart.logException(e); }
	}
}
function aa_element_attached(elem)
{
  if (! ajaxart.isattached(elem)) return;
  var items = jQuery(elem).find('.aa_onattach').get();
  if (jQuery(elem).hasClass('aa_onattach')) items.push(elem);
  for(var i=0;i<items.length;i++) {
	  if (jQuery(items[i]).hasClass('aa_onattach_called')) continue;
	  if (items[i].jbOnAttach) items[i].jbOnAttach.call(items[i]);
	  jQuery(items[i]).addClass('aa_onattach_called');
  }
}
function aa_addOnDetach(elem,func)
{
	jQuery(elem).addClass('aa_ondetach');
	elem.OnDetach = func;
}
function aa_urlAttribute(context,attr)
{
	var urlProvider = null;
	if (context.vars._AppContext) urlProvider = context.vars._AppContext[0].Url;
		
	if (urlProvider) 
		return aa_totext( aa_runMethod([],urlProvider,'GetValue',aa_ctx(context,{Attribute: [attr]})) );
	
	var url = window.location.href.split('#');
	if (url.length == 1) return "";
	var fragment = url[1];
	if (fragment.indexOf('?'+attr+'=') == -1) return "";
	var out = fragment.split('?'+attr+'=')[1].split('?')[0];
	return out.split(';')[0];
}
function aa_urlChange(context,newurl)
{
	var urlProvider = null;
	if (context.vars._AppContext) urlProvider = context.vars._AppContext[0].Url;
		
	if (urlProvider) 
    	return aa_totext( aa_runMethod([],urlProvider,'Update',aa_ctx(context,{ValuePairs: [newurl]})) );
	
	var url = window.location.href.split('#');
	var frag = url.length == 1 ? "" : url[1];
	var script = aa_parsexml('<xtml t="bart_url.NewUrlFragment" Current="'+frag+'" Proposed="'+newurl+'"/>');
	var newfrag = aa_text([],script,'',context);
	var new_url = url[0] + "#" + newfrag;
	if (window.location.href != new_url)
	{
		  if (window._gaq) // google analytics 
			  _gaq.push(['_trackPageview', '/' + new_url.split('/').pop()]);

		window.location = new_url;
	}
}
/******************* uiaction ********************/
function aa_xFireEvent(element,eventName,properties,inTest){
	window.__DOMEvents = window.__DOMEvents  || {
		  focusin:{eventGroup:"UIEvents",init:function(e,p){e.initUIEvent("focusin",true,false,window,1);}},
		  focusout:{eventGroup:"UIEvents",init:function(e,p){e.initUIEvent("focusout",true,false,window,1);}},
		  activate:{eventGroup:"UIEvents",init:function(e,p){e.initUIEvent("activate",true,true,window,1);}},
		  focus:{eventGroup:"UIEvents",init:function(e,p){e.initUIEvent("focus",false,false,window,1);}},
		  blur:{eventGroup:"UIEvents",init:function(e,p){e.initUIEvent("blur",false,false,window,1);}},
		  click:{eventGroup:"MouseEvents",init:function(e,p){e.initMouseEvent("click",true,true,window,1,p.screenX||0,p.screenY||0,p.clientX||0,p.clientY||0,p.ctrlKey||false,p.altKey||false,p.shiftKey||false,p.metaKey||false,p.button||0,p.relatedTarget||null);}},
		  dblclick:{eventGroup:"MouseEvents",init:function(e,p){e.initMouseEvent("click",true,true,window,2,p.screenX||0,p.screenY||0,p.clientX||0,p.clientY||0,p.ctrlKey||false,p.altKey||false,p.shiftKey||false,p.metaKey||false,p.button||0,p.relatedTarget||null);}},
		  mousedown:{eventGroup:"MouseEvents",init:function(e,p){e.initMouseEvent("mousedown",true,true,window,1,p.screenX||0,p.screenY||0,p.clientX||0,p.clientY||0,p.ctrlKey||false,p.altKey||false,p.shiftKey||false,p.metaKey||false,p.button||0,p.relatedTarget||null);}},
		  mouseup:{eventGroup:"MouseEvents",init:function(e,p){e.initMouseEvent("mouseup",true,true,window,1,p.screenX||0,p.screenY||0,p.clientX||0,p.clientY||0,p.ctrlKey||false,p.altKey||false,p.shiftKey||false,p.metaKey||false,p.button||0,p.relatedTarget||null);}},
		  mouseover:{eventGroup:"MouseEvents",init:function(e,p){e.initMouseEvent("mouseover",true,true,window,1,p.screenX||0,p.screenY||0,p.clientX||0,p.clientY||0,p.ctrlKey||false,p.altKey||false,p.shiftKey||false,p.metaKey||false,p.button||0,p.relatedTarget||null);}},
		  mousemove:{eventGroup:"MouseEvents",init:function(e,p){e.initMouseEvent("mousemove",true,true,window,1,p.screenX||0,p.screenY||0,p.clientX||0,p.clientY||0,p.ctrlKey||false,p.altKey||false,p.shiftKey||false,p.metaKey||false,p.button||0,p.relatedTarget||null);}},
		  mouseout:{eventGroup:"MouseEvents",init:function(e,p){e.initMouseEvent("mousemove",true,true,window,1,p.screenX||0,p.screenY||0,p.clientX||0,p.clientY||0,p.ctrlKey||false,p.altKey||false,p.shiftKey||false,p.metaKey||false,p.button||0,p.relatedTarget||null);}},
		  load:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("load",false,false);}},
		  unload:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("unload",false,false);}},
		  select:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("select",true,false);}},
		  change:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("change",true,false);}},
		  submit:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("submit",true,true);}},
		  reset:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("reset",true,false);}},
		  resize:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("resize",true,false);}},
		  keyup:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("keyup",true,false);}},
		  keydown:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("keydown",true,false);}},
		  scroll:{eventGroup:"HTMLEvents",init:function(e,p){e.initEvent("scroll",true,false);}}
	} 
	  // Attempts to fire a DOM event on an element
	  // param name="element" type="Element" The element or its identifier to fire the event
	  // param name="eventName" type="String" The name of the event to fire (without an 'on' prefix)
	  // param name="properties" type="Object" Properties to add to the event
	  //   e.g. {cancelBubble:false, returnValue:true}
	  // returns type="Boolean" True if the event was successfully fired, otherwise false
	  try{
	    properties=properties||{};
	    if(document.createEvent){
	      // DOM compatible browsers
	      if(element==window && !element.dispatchEvent){
	        // Safari3 doesn't have window.dispatchEvent()
	        element=document;
	      }
	      var def=__DOMEvents[eventName];
	      if(def){
	        var event=document.createEvent(def.eventGroup);
 	      	if (inTest) 
 	      		for(var property in properties)
 	      			try { event[property]=properties[property]; } catch(e) {} // button property throws..
	        def.init(event,properties);
	        event.srcElement = null;
	        if (ajaxart.isChrome && inTest)
	        {
	        	try {
	        	  event.tDebug = ajaxart_source_elem_in_test;
	        	} catch(e) {}
	        }
//	        for(var property in properties)
//	        	event[property] = properties[property];
      	element.dispatchEvent(event);
	        return true;
	      }
	    }else if(document.createEventObject){
	      // IE family
	      if(element==document){
	        // IE6,IE7 thinks window==document and doesn't have window.fireEvent()
	        // IE6,IE7 cannot properly call document.fireEvent()
	        element=document.documentElement;
	      }
	      var event=document.createEventObject();
	      //Object.extend(event,properties);
	      element.fireEvent("on"+eventName,event);
	      return true;
	    }
	  }catch (e){
	  }
	  return false;
	}

// asynch
aa_async_finished_listeners = [];
function ajaxart_async_CallBack(data,context)
{
	if ( context.vars._AsyncCallback != null && context.vars._AsyncCallback.callBack != null) {
		var success = context.vars._AsyncCallback.success;
		if (success == null) success = true;
		context.vars._AsyncCallback.callBack(data,context,success);
	}
}
function ajaxart_async_Mark(context,isQuery)
{
	if ( context.vars._AsyncCallback != null ) context.vars._AsyncCallback.marked = true;
	if (isQuery) context.vars._AsyncIsQuery = true;
}
ajaxart_async_GetCallbackObj = function(context)
{
	var out = context.vars._AsyncCallback;
	if (out == null) out = [ { callBack: function() {}, marked: false, success:true } ];
	context.vars._AsyncCallback = out;
	return out;
}
function aa_fire_async_finished()
{
	// let sync actions finish
	setTimeout(function() {
		for(var i=aa_async_finished_listeners.length-1;i>=0;i--)
			aa_async_finished_listeners[i].OnAsyncActionFinished();
	},1);
}
function aa_is_rtl(elem,ctx)
{
	if ( jQuery(elem).parents('.right2left').length > 0 ) return true;
	if (!elem && jQuery("body").find('.right2left').length > 0) return true;
	if (ctx && aa_totext(ctx.vars.Language) == 'hebrew') return true;
	return false;
}

function aa_createElement(elem, tag)
{
	if (elem == null || !ajaxart.isxml(elem))
		return aa_parsexml("<" + tag + "/>");
	return elem.ownerDocument.createElement(tag);
}
function aa_refresh_field(field_ids,scope,fire_on_update,transition,context)
{
	if (scope == 'sibling') { 
		var srcElement = context.vars.ControlElement[0];
		for(var j in field_ids) {
			aa_refresh_sibling_field(srcElement,field_ids[j],context);
		}
		return;
	};

	if (scope == 'parent')
	{
		// look in parents
	}
	var top = window.aa_intest ? aa_intest_topControl : document;
	if (scope == "screen")
	  top = window.aa_intest ? aa_intest_topControl : document;
	else if (scope == "document")
	  { top = context.vars._Cntr[0].Ctrl; }
	else if (scope == "table row")
	  { top = $(context.vars.ControlElement[0]).parents('tr')[0]; }
	for(var j =0;j<field_ids.length;j++)
	{
		var cls = "fld_" + field_ids[j];
		var ctrls = $(top).find('.'+cls).get();
		if ($(top).hasClass(cls)) ctrls.push(top);
		
		for(var i=0;i<ctrls.length;i++)
		{
			aa_refresh_cell(ctrls[i],context,transition,null,true);
//			if (fire_on_update)
//				aa_invoke_field_handlers(td.Field.OnUpdate,td,null,td.Field,td.FieldData);
		}
//		if (!ctrls.length) { ajaxart.log("RefreshField: cannot find field " + field_ids[j],"location"); }
	}
	aa_fixTopDialogPosition();
}
function aa_fixImageSize(img,user_width,user_height) 
{
	var imgObj = new Image(); imgObj.src = img.getAttribute('src');
	var naturalWidth = imgObj.width; var naturalHeight = imgObj.height;
	if (naturalWidth * naturalHeight == 0) {
		img.width = user_width; img.height = user_height; return;
	} 
	if (naturalWidth < img.width) img.width = naturalWidth; 
	if (naturalHeight < img.height) img.height = naturalHeight;
	var width = Math.min(naturalWidth,user_width), height = Math.min(naturalHeight,user_height); // IE hates imgObj.width
	
	var ratio = naturalWidth / naturalHeight;
	var currRatio = width / height;
	if (ratio != currRatio) {
		if (naturalWidth >= naturalHeight * currRatio) {
			img.width = user_width;
			img.height = Math.floor(width / ratio);
		} else {
			img.height = user_height;
			img.width = Math.floor(height * ratio);
		}
	} else {
		img.width = user_width; img.height = user_height;
	}
}
function aa_keepimageprops(img,user_width,user_height)
{
	var imgObj = new Image(); imgObj.src = img.getAttribute('src');
	if (imgObj.complete) aa_fixImageSize(img,user_width,user_height); 
	else {
		img.onload = function() { aa_fixImageSize(img,user_width,user_height); }
	}
}
function aa_uidocument(data,id,dataitems,fields,aspectsFunc,operationsFunc,context,readonly)
{
	var cntr = { ID: [id] , IsSingleItem: true, isObject: true , Fields: fields, Items: dataitems, ReadOnly: readonly==true }
	var newcontext = aa_ctx(context,{_ParentCntr: context.vars._Cntr, _Cntr : [cntr] } );
	cntr.Context = newcontext;
 	cntr.Ctrl = jQuery('<div class="aa_container aa_non_selectable"><div class="aa_container_header"/><div class="aa_list aasection aa_item aa_cntr_body"/><div class="aa_container_footer"/></div>')[0];
	cntr.Ctrl.Cntr = cntr;
 	if (id != '')
 	  jQuery(cntr.Ctrl).addClass('Page_'+id);

 	if (aa_tobool(context.vars.IsNewItem)) cntr.IsNewItem = true;
 		
 	var aspects = cntr.Aspects = aspectsFunc(data,newcontext);
 	
	for(var i=0;i<aspects.length;i++)
      ajaxart.runScriptParam(data,aspects[i].CreateContainer,newcontext);

	var fillContainer = function(cntr,aspects) {
		cntr.PostActors = [];cntr.PreActors = [];
		cntr.RegisterForPostAction = function(aspect,phase) { cntr.PostActors.push({ phase: phase || 0, aspect: aspect}); }
		cntr.RegisterForPreAction = function(aspect,phase) { cntr.PreActors.push({ phase: phase || 0, aspect: aspect}); }

		if (cntr.Items.length == 0) { cntr.Items = [{isObject: true , Items: []}] }
		if (cntr.Items[0].Items.length == 0) { cntr.NoData = true; cntr.Items[0].Items.push(aa_parsexml('<xml/>')) }
			
		var items_data = (cntr.Items == null || cntr.Items.length == 0 || cntr.Items[0].Items.length == 0) ? [] : [cntr.Items[0].Items[0]];

		cntr.ElemsOfOperation = function() { return jQuery(this.Ctrl).find('.aa_item').slice(0,1).get(); }
		cntr.ItemsOfOperation = function() { return [this.Items[0].Items[0]]; }

		cntr.CellPresentation = 'control';
		cntr.Operations = operationsFunc;    
		    
//		var doc_section = jQuery(cntr.Ctrl).find('.aasection')[0];
//		if (doc_section != null) {
//		  ajaxart.setVariable(newcontext,"_Section",[doc_section]);
//		  doc_section.ItemData = items_data;
//		}
		    
	    for(var i=0;i<cntr.Aspects.length;i++) {
	    	ajaxart.trycatch( function() {
	    		aa_runMethod(data,cntr.Aspects[i],'InitializeContainer',newcontext);
	    	}, function(e) { 
	    		var aspect = (cntr.Aspects[i].XtmlSource && cntr.Aspects[i].XtmlSource[0].script.getAttribute('t')) || '';
	    		ajaxart.log("error in aspect " + aspect + ": " + e.message + e.stack || '',"error"); 
	    	});
	    }

		cntr.PreActors.sort(function(a,b) { return a.phase > b.phase ? 1 : -1; });
	    cntr.PostActors.sort(function(a,b) { return a.phase > b.phase ? 1 : -1; });

		for(var i=0;i<cntr.PreActors.length;i++) {
		  	ajaxart.trycatch( function() {
		    	  ajaxart.runScriptParam([],cntr.PreActors[i].aspect.PreAction,cntr.Context);
		   	}, function(e) { ajaxart.logException(e); });
		}
	    aa_refresh_itemlist(cntr,newcontext,true);
	    //ajaxart.runsubprofiles(items_data,profile,'SectionAspect',newcontext);
	    
	    if (cntr.NoData && cntr.ControlForNoData) {
	        var top = ajaxart_find_aa_list(cntr);
	        var ctrl = cntr.ControlForNoData([],context)[0];
	      	jQuery(ctrl).addClass('aa_list');
	      	aa_replaceElement(top,ctrl);
	    }
	}
	
	if (cntr.RunAsyncAction && cntr.ControlForWaiting) {
		var myCallback = function(cntr,aspects) { return function() {
			var loading = cntr.Ctrl;
			cntr.Ctrl = cntr.OriginalCtrl;
			fillContainer(cntr,aspects);
			aa_replaceElement(loading,cntr.Ctrl);
	      	aa_fixTopDialogPosition();
		}}
		cntr.OriginalCtrl = cntr.Ctrl;
		cntr.Ctrl = cntr.ControlForWaiting(data,context)[0];
		cntr.Ctrl.Cntr = cntr;
		aad_runMethodAsync(cntr,cntr.RunAsyncAction,data,aa_ctx(context,{}),myCallback(cntr,aspects));
		return cntr.Ctrl;
	}
	
	fillContainer(cntr,aspects);
    return cntr.Ctrl;
}
function aa_set_initialize_container(aspect,func)
{
	aspect.InitializeContainer = function(data1,ctx) {
		var cntr = ctx.vars._Cntr[0];
		func(aspect,ctx,cntr);
	}
}
function aa_add_to_comma_separated(list,item)
{
	if (list == '') return item;
	if ((list+',').indexOf(','+item+',') > -1) return list;  // already inside. no need to add it again
	return list + ',' + item;
}
function aa_comma_size_to_css(size)
{
  size = size.replace(/px/g,"")
  var parts = size.split(',');
  var out = "";
  var width = parts[0];
  if (width != "") {
	  if (width.indexOf('%') == -1) width += "px";
	  out += "width:"+width+";";
  }
  if (parts.length == 1) return out;
  var height = parts[1];
  if (height != "") {
	  if (height.indexOf('%') == -1) height += "px";
	  out += "height:"+height+";";
  }
  return out;
}
function aa_CSV2Xml(txt)
{
	var result = aa_parsexml('<items/>');
	try {
		// first we pre-process to extract quotes 
		// handle cases like: 1997,"Super, luxurious truck" or 1997,"Super, ""luxurious"" truck" (http://en.wikipedia.org/wiki/Comma-separated_values#Specification)
		var new_text = "";
		var index = 0;
		var in_quote = false;
		var current_item = "";
		var quoted_items = [];
		while (1) {
			var next_index = txt.indexOf('"',index);
			if (next_index == -1) {
				new_text += txt.substring(index);
				break;
			}
			if (in_quote) {	// in quote
				if (txt.length>next_index+1 && txt.charAt(next_index+1) == '"') {	// double quote ""
					current_item += txt.substring(index,next_index) + '"';
					index = next_index + 2;
				}
				else { 	// finish current item
					current_item += txt.substring(index,next_index);
					quoted_items.push(current_item);
					index = next_index+1;
					in_quote = false;
					new_text += "___QUOTED___";
				}
			} else {	// start quote
				new_text += txt.substring(index,next_index);
				index = next_index+1;
				current_item = "";
				in_quote = true;
			}
		}
		txt = new_text;
		var lines = txt.replace('\r\n','\n').split('\n');
		var fields = lines[0].split(',');
		var fieldNames = [];
		var uniqueNamesHash = {};
		for(var i=0;i<fields.length;i++) 
		{
			// normalize field names as valid attribute names
			var name = fields[i].replace(/ ([a-z])/g,function(match) {return ' ' + match.toUpperCase()}).replace(/[^a-zA-Z0-9_]/g,'_');
			if (! name.match(/^[a-zA-Z].*/)) name = 'x' + name; // should start with alpha
			while (uniqueNamesHash[name]) // make name unique
				name += '_';
			fieldNames.push(name);
			uniqueNamesHash[name] = true;
		}
		for (var i=1;i<lines.length;i++) {
			var item = result.ownerDocument.createElement('item');
			var values = lines[i].split(',');
			for (var j=0;j<values.length;j++) {
				var val = values[j];
				if (val == "___QUOTED___")
					val = quoted_items.shift();
				item.setAttribute(fieldNames[j],val);
			}
			result.appendChild(item);
	}
	} catch(e) { 
	}
	return result;
}

function aa_GoogleDataTableToXml(data)
{
  	var fieldNames = [];
	var uniqueNamesHash = {};
	for (var col = 0; col < data.getNumberOfColumns(); col++)
	{
		// normalize field names as valid attribute names
		var name = data.getColumnLabel(col).replace(/ ([a-z])/g,function(match) {return ' ' + match.toUpperCase()}).replace(/[^a-zA-Z0-9_]/g,'');
		if (! name.match(/^[a-zA-Z].*/)) name = 'x' + name; // should start with
															// alpha
		while (uniqueNamesHash[name]) // make name unique
			name += '_';
		fieldNames.push(name);
		uniqueNamesHash[name] = true;
	}
	var xml = aa_parsexml('<items/>');
	for (var row = 0; row < data.getNumberOfRows(); row++) {
		var item = aa_parsexml('<item/>');
		xml.appendChild(item);
	    for (var col = 0; col < data.getNumberOfColumns(); col++) {
	      var formattedValue = data.getFormattedValue(row, col);
		  var col_id = fieldNames[col];
		  item.setAttribute(col_id,formattedValue);
	    }
	} 
	return xml;
}

function aa_attach_style_css(style)
{
	if (!style.CssClass) 
		style.CssClass = aa_attach_global_css(style.Css);
	return style.CssClass;
}
function aa_build_color_lookup(css) {
	colors = [];
	var match,result=css;
	var pattern = /((rgb|rgba|hsl|hsla)\([^\)]*\))/g;
	while (match = pattern.exec(css)) {
		result = result.replace(match[1],'##' + colors.length);
		colors.push(match[1]);
	}
	return { css:result, colors:colors };
}
function aa_color_lookup(colors,colorCode) {
	if (colorCode && colorCode.indexOf('##') == 0)
		return colors[colorCode.match(/([0-9]+)/)[1]];
	return colorCode;
}
function aa_adapt_css_for_browser(css, forAllBrowsers)
{	
	if (ajaxart.isFireFox) {
		css = css.replace(/-webkit-/g,'-moz-');
	}
	if (ajaxart.isIE) {
		css = css.replace(/-webkit-box/g,'-ms-flexbox');
		css = css.replace(/-webkit-/g,'-ms-');
	}
	if (ajaxart.isOpera)
		return css.replace(/-webkit-linear-gradient/g,'-o-linear-gradient');

	if (css.indexOf("input:placeholder") != -1) {
		if (forAllBrowsers) {
			css = css.replace(/input:placeholder([^{]+\{[^}]+})/, 
				"input::-webkit-input-placeholder$1" + "\n" + 
				"input:::-moz-placeholder$1" + "\n" + 
				"input.placeholder$1 /* IE */" + "\n" + 
				"input:::-ms-input-placeholder$1 /* IE10 */");
		} else {
			if (ajaxart.isChrome) 		css = css.replace(/input:placeholder([^{]+\{[^}]+})/, "input::-webkit-input-placeholder$1");
			else if (ajaxart.isFirefox) css = css.replace(/input:placeholder([^{]+\{[^}]+})/, "input:::-moz-placeholder$1");
			else if (ajaxart.isIE10)	css = css.replace(/input:placeholder([^{]+\{[^}]+})/, "input:::-ms-input-placeholder$1");
		}
	}
	if (ajaxart.isFireFox)
		return css.replace(/([^-])box-sizing/g,'$1-moz-box-sizing');
	return css;
}
function aa_cssClass(data,profile,field,context,classSuffixName,moreSettings) {
	moreSettings = moreSettings || {};
	var css = aa_text(data,profile,field,context);
	return aa_attach_global_css(css,null,classSuffixName,moreSettings.supportWrapper,moreSettings.lowPriority,context);
}
function aa_attach_global_css(globalcss,cntr,className,supportWrapper,lowPriority,context,settings)
{
	settings = settings || {};

	if (!window.aa_container_styles) window.aa_container_styles = {};
	if (!globalcss) return '';
	jBartWidgets.vars.uniqueNumber = jBartWidgets.vars.uniqueNumber || 0;
	
	var entry = globalcss;
	var classForItem = context && aa_totext(context.vars._ClassForItem);
	if (classForItem && globalcss.indexOf('#item') > -1) {
		entry = globalcss + '_' + classForItem;
	}

	if (!aa_container_styles[entry] || settings.noCssCache) { 
		var finalClassName = '';
		if (className) {
			finalClassName = 'jb_'+className;
			jBartWidgets.vars.usedJBClasses = jBartWidgets.vars.usedJBClasses || {};
			if (jBartWidgets.vars.usedJBClasses[finalClassName]) {
				finalClassName += (++jBartWidgets.vars.uniqueNumber);
			}
			jBartWidgets.vars.usedJBClasses[finalClassName] = true;
		} else {
			finalClassName = 'jb' + (++jBartWidgets.vars.uniqueNumber);
		}
		var obj = { elem_class : finalClassName , globalcss: globalcss};
		if (globalcss.indexOf('#cntr') >= 0)
			obj.cntr_class = 'jb' + (++jBartWidgets.vars.uniqueNumber);			
		aa_container_styles[entry] = obj;
		
		obj.globalcss = aa_clean_global_css(obj.globalcss);
		obj.globalcss = aa_adapt_css_for_browser(obj.globalcss);
		if (!aa_is_css_well_formed(obj.globalcss)) {
			var error = [];
			aa_is_css_well_formed(obj.globalcss,error);
			ajaxart.log("Css is invalid: " + error[0] + ". Css: " + obj.globalcss,"error");
			return "";
		}
		if (classForItem) {
			obj.globalcss = obj.globalcss.replace(/#item/g,'.'+classForItem);
		}
		obj.globalcss = obj.globalcss.replace(/#popup/g,'.jbart_popups >.'+obj.elem_class+'_popup');
		obj.globalcss = obj.globalcss.replace(/#this/g,'.'+obj.elem_class);
		obj.globalcss = obj.globalcss.replace(/#id/g,obj.elem_class);	// for animation ids: http://www.w3schools.com/css/css3_animations.asp
		if (supportWrapper)
		  obj.globalcss = obj.globalcss.replace(/#wrapper/g,'.'+obj.elem_class+'_wrapper');
		if (obj.cntr_class)
			obj.globalcss = obj.globalcss.replace(/#cntr/g,'.'+obj.cntr_class);
		
//		obj.globalcss = aa_expandCuscoVariablesMustacheStyle(obj.globalcss,context);
		obj.globalcss = obj.globalcss.replace(/_jbartImages_/g,aa_base_images());
		 
		if (settings && settings.fixGlobalCss) obj.globalcss = settings.fixGlobalCss(obj.globalcss);

		if (ajaxart.isIE) {	// IE limitation: does not support many style elems
			if (ajaxart.isIE78) {	// IE8 does not support changing innerHTML of attached style element
				window.jbIE8StyleElemCache = window.jbIE8StyleElemCache || '';
				window.jbIE8StyleElemCache += obj.globalcss + '  ';

				aa_run_delayed_action('IE8_style_elem_fix',function() {
					var styleElem = jQuery("<style>" + window.jbIE8StyleElemCache + "</style>")[0];
					var head = document.getElementsByTagName("head")[0];
					head.appendChild(styleElem);
					window.jbIE8StyleElemCache = '';
				},100,true);

			} else {
				if (!jBart.styleElem) {
					jBart.styleElem = jQuery("<style></style>")[0];
					var head = document.getElementsByTagName("head")[0];
					head.appendChild(jBart.styleElem);
				}
				var currentValue = jBart.styleElem.styleSheet ? jBart.styleElem.styleSheet.cssText : jBart.styleElem.innerHTML;
				var newCss = lowPriority ? obj.globalcss + '\n' + currentValue : currentValue + '\n' + obj.globalcss;
				if (jBart.styleElem.styleSheet)
					jBart.styleElem.styleSheet.cssText = newCss;
				else 
					jBart.styleElem.innerHTML = newCss;
			}
		} else {
			if (!obj.styleElem) {
				obj.styleElem = jQuery("<style></style>")[0];
				var head = document.getElementsByTagName("head")[0];
				head.appendChild(obj.styleElem);
			}
			obj.styleElem.innerHTML = obj.globalcss;
		}
		// obj.styleElem.StyleObject = obj;
	}
	
	if (cntr && aa_container_styles[entry].cntr_class)
		jQuery(cntr).addClass(aa_container_styles[entry].cntr_class);
	return aa_container_styles[entry].elem_class;
}

function aa_is_css_well_formed(css, error)
{
	// TODO: support css remarks
	// counting nesting brackets, ensuring there are no more closing brackets then opening brackets at any point 			
	var selector_count = 0;
	var level = 0;
	for (var j=0; j<css.length; j++) {
		if (css.charAt(j) == '{') { level++; selector_count++; }
		else if (css.charAt(j) == '}') {
			level--;
			if (level<0) {
				return false;
				if (error) error.push('Too many closing brackets in item:' + selector_count);
			}
		}
	}	
	if (level != 0) {
		if (error) error.push('Missing closing bracket');
		return false;
	}
	// Make sure there are only white spaces after the last '}'
	var suffix = css.substring(css.lastIndexOf('}')+1);
	if (suffix && !suffix.match(/\s*/) || suffix.match(/\s*/)[0] != suffix) {
		if (error) error.push('There are characters after the last closing bracket');
		return false;
	}
	return true;
}
function aa_expandCuscoVariablesMustacheStyle(text,context)
{
	if (text.indexOf('{{') == -1 || !context) return text;
	text = text.replace(/{{/g,'%').replace(/}}/g,'%');
	text = ajaxart.dynamicText([],text,context,[],false,false)[0];
	return text;
}
function aa_clean_global_css(css)	// makes sure '#this' is included in all expressions
{
	var index=0;
	while (1) {
		var bracket_index = css.indexOf('{',index);
		if (bracket_index == -1) break;
		var prefix = css.substring(index,bracket_index);
		if (prefix.indexOf("#") == -1) {	// must contain #
			if (prefix.lastIndexOf("*/") > -1)	// handle remarks
				prefix = prefix.substring(prefix.lastIndexOf("*/")+2);
//			prefix = prefix.replace(new RegExp("^[ \t\n\r]*"),"");	// trimming left white spaces
			if (prefix.indexOf("@") != -1) { index = bracket_index+1; continue; }	// don't touch meta classes, like @media print { input { color:green; } }
			if (aa_trim(prefix) == "from" || prefix.trim() == "to") { index = css.indexOf('}',bracket_index)+1; continue; }	// don't touch form and to: http://www.w3schools.com/css/css3_animations.asp
			var new_prefix = "#this " + prefix.split(",").join(",#this ");	// handle multiple selectors, like: input,textarea { color:red; }
			css = css.substring(0,bracket_index-prefix.length) + new_prefix + css.substring(bracket_index);
		}
		index = css.indexOf('}',bracket_index) +1;
		if (index == 0) break;
	}
	if (css.indexOf("{") == -1 && css.indexOf("}") == -1)
		css = "#this {" + css + "}";
	return css;
}
function aa_setCssText(elem,cssText)
{
  if (ajaxart.isFireFox) cssText = cssText.replace(/-webkit-/g,'-moz-');
  elem.style.cssText = cssText;
}
function aa_in_textlist(list,item)
{
  if (list.indexOf(','+item+',') == -1) return false;
  return true;
}
function aa_add_onorientationchange(func)
{
	if (!window.aav_onorientationchange) window.aav_onorientationchange = [];
	aav_onorientationchange.push(func);
}
function aa_init_ipad(options)
{
  if (!options) options = { orientationClasses: true };
  var setOrientationClass = function() {
	  var orientation = (window.orientation == 0 || window.orientation == 180) ? "portrait" : "landscape";
	  document.body.parentNode.setAttribute('class', orientation);  
	  
	  if (ajaxart.jbart_studio) {  // design time mode
		  orientation = aa_url_attribute(window.location.href,"ipad_orient");
		  if (orientation != "portrait") orientation = "landscape";
		  jQuery('body').removeClass('portrait').removeClass('landscape').addClass(orientation);
	  } 
	  if (window.aav_onorientationchange) {
		  for(var i in window.aav_onorientationchange) window.aav_onorientationchange[i](orientation);
	  }
  }
  if (options.orientationClasses) {
	  window.onorientationchange = setOrientationClass;
	  setOrientationClass();
  }
}
function aa_addOnAttachMultiple(elem,func)
{
	jBart.bind(elem,'_OnAttach',func);
	aa_addOnAttach(elem,function() {
		jBart.trigger(elem,'_OnAttach');
	});
}
function aa_addOnAttach(elem,func)
{
	$(elem).addClass('aa_onattach');
	elem.jbOnAttach = func;
	if (ajaxart.isattached(elem)) elem.jbOnAttach();
}
function aa_defineElemProperties(elem,properties)
{
	if (!elem.jBartDomProps) elem.jBartDomProps = properties.split(',');
	else ajaxart.concat(elem.jBartDomProps,properties.split(','));
}
function aa_clear_events(elem)
{
	jQuery(elem).unbind();
	
    if (elem.jbEvents && elem.detachEvent) {
    	for(var i=0;i<elem.jbEvents.length;i++) {
    		elem.detachEvent(elem.jbEvents[i].event,elem.jbEvents[i].callback);
    	}
    }
    for (var i in elem) {
    	if (i.indexOf('on') == 0) elem[i] = null;
    	if (elem['on'+i]) elem['on'+i] = null;
  	}
    
}
function aa_remove(elem,cleanMemoryLeaks)
{
	if (!elem) return;
	if (elem.parentNode) elem.parentNode.removeChild(elem);
	if (window.jBartNodeJS) return;
	aa_element_detached(elem);

	if (cleanMemoryLeaks)
	  jQuery(elem).remove(); // jQuery events leak in chrome as well

	if (cleanMemoryLeaks && ajaxart.isIE)  // http://msdn.microsoft.com/en-us/library/Bb250448 
	{
		function doCleanMemoryLeaks(elem) {
			if (elem.nodeType != 1) return;
		    if (elem.jbEvents && elem.detachEvent) {
		    	for(var i=0;i<elem.jbEvents.length;i++) {
		    		elem.detachEvent(elem.jbEvents[i].event,elem.jbEvents[i].callback);
		    	}
		    }
		    for (var i in elem) {
		  	  if (i.indexOf('on') == 0 || i.indexOf('jb') == 0) elem[i] = null;
	    	  if (elem['on'+i]) elem['on'+i] = null;
		  	}
		    if (elem.jBartDomProps) {
		    	for(var i=0;i<elem.jBartDomProps.length;i++) {
		    	  // if (elem.jBartDomProps[i] != 'jBartDomProps')
		    	  //   elem[elem.jBartDomProps[i]] = null; 
		    	}
		    	elem.jBartDomProps = null;
		    }
		    
		    elem.ajaxart = elem.Cntr = elem.Data = elem.ItemData = elem.Dialog = elem.jElem = elem.Field = elem.OnDetach = elem.Contents = null;
		    elem.FieldData = elem.contentChanged = elem.CellPresentation = elem.Context = elem.jBart = null;
		    
		    var cleanAllProps = false;
	  	    if (cleanAllProps) {
	  	    	for(var i in elem) {
		  		  try {
		  			if (elem[i]) {
		  				elem[i] = null;
		  			    ajaxart.log('memomry leak - ' + i,'error');
		  			}
		  		  } catch(e) {}
	  	    	}
		  	}
	  	    try {
		      // for (var i in elem) if (elem[i]) ajaxart.log('dom element property - ' + i,"error"); 
	  	    } catch(e) {}
	  	    
		    var child = elem.firstChild;
		    while(child) {
		    	doCleanMemoryLeaks(child);
		    	child = child.nextSibling;
		    }
		}
		doCleanMemoryLeaks(elem);
		
		var tag = aa_tag(elem) && aa_tag(elem).toLowerCase();
		try {
			if (tag != 'table' && tag != 'tfoot' && tag != 'thead' && tag != 'tr')	// http://support.microsoft.com/kb/239832
				elem.innerHTML = "";
		} catch(e) {}
	}
//	if (cleanMemoryLeaks && ajaxart.isIE)  { 
//	}
}
jBart.remove = function(elem) { aa_remove(elem,true); }
function aa_remove_from_list(list,item)
{
	for(var i in list)
		if (list[i] == item) {
			list.splice(i,1);
			return;
		}
}
function aa_renderStyleObject2(style,apiObject,field_data,field,context,settings) {
	try {
		apiObject.field = field;
		apiObject.field_data = field_data;
		apiObject.context = context;

		apiObject.params = style.params;
		if (field) aa_trigger(field,'initApiObject',{ apiObject: apiObject, field_data: field_data });

		if (style.Field) {  // style by field
			var wrapper = document.createElement('div');
			var ctx = aa_ctx(context,{ ApiObject: [apiObject] });
			var styleField = style.Field(field_data,ctx); 
			aa_fieldControl({ Field: styleField, Item: field_data, Wrapper: wrapper, Context: ctx });
			var content = $('<div style="display:inline-block;" class="aa_style_by_field_wrapper" />').append(wrapper);
			apiObject.control = apiObject.el = content[0];
			apiObject.$el = $(apiObject.el);
			apiObject.wrapperForStyleByField = wrapper;
			content[0].jbApiObject = apiObject;
			return content[0];
		}

		if (style.render) { 
			var out = style.render(apiObject,settings); 
			out.jbApiObject = apiObject;
			return out;
		}
		style.Html = style.Html.replace(/>\s+</g,'><');		// allow indentation in html without injecting whitespaces. e.g: <div class="text"/> <div class="separator" /> 
		var out = $(style.Html)[0] || $('<div/>')[0];
		apiObject.elem_class = aa_attach_global_css(style.Css,null,null,false,false,context,settings); 
		apiObject.el = out;
		apiObject.$el = $(out);

		$(out).addClass(apiObject.elem_class); 
		aa_apply_style_js(apiObject,style,context);
		
		return out;
	} catch(e) {
		ajaxart.logException('error rendering style object',e);
		return $('<div/>').get();		
	}	
}

function aa_renderStyleObject(style,objectProperties,context,objectIsNotTheElement,settings)
{
	try {
		if (style.Field) {  // style by field
			var object = aa_api_object(jQuery('<div/>')[0],objectProperties,objectIsNotTheElement);
			var item = objectProperties.data ? [objectProperties.data] : [];
			var wrapper = document.createElement('div');
			var ctx = aa_ctx(context,{ ApiObject: [object] });
			var styleField = style.Field(item,ctx); 
			aa_fieldControl({ Field: styleField, Item: item, Wrapper: wrapper, Context: ctx });
			var content = jQuery('<div style="display:inline-block;" class="aa_style_by_field_wrapper" />').append(wrapper);
			object.control = content[0];
			object.wrapperForStyleByField = wrapper;
			content[0].jbApiObject = object;
			return content[0];
		}
		style.Html = style.Html.replace(/>\s+</g,'><');		// allow indentation in html without injecting whitespaces. e.g: <div class="text"/> <div class="separator" /> 
		var jElem = jQuery(style.Html);
		if (!jElem[0]) jElem = jQuery('<div/>');
		objectProperties.context = context;
		if (style.params)
			objectProperties.params = style.params;
		var object = aa_api_object(jElem,objectProperties,objectIsNotTheElement);
		var cntr = context.vars._Cntr ? context.vars._Cntr[0] : null;
		object.elem_class = aa_attach_global_css(style.Css,cntr,null,false,false,context,settings); 
		jElem.addClass(object.elem_class); 
		aa_apply_style_js(object,style,context);
		
		return jElem[0];
	} catch(e) {
		ajaxart.logException('error rendering style object',e);
		return jQuery('<div/>').get();
	}
}

function aa_apply_style_js(obj,style,context,funcName)
{
	funcName = funcName || 'render';
	aa_style_context = { jElem: obj.jElem }
	if (!style.jsFunc && style.Javascript ) {
		jBart.compiledJS = jBart.compiledJS || {};
		var compiledJs = jBart.compiledJS[style.Javascript];
		if (!compiledJs) {
			compiledJs = {};
			try {
				if (style.Javascript.indexOf('function ' + funcName + '(') > -1) {
					eval('compiledJs.jsFunc = function(obj,context,funcToRun) { ' + style.Javascript + '\n return ' + funcName + '(obj,context); };');
				} else { // backward compatability
			  		eval('compiledJs.jsFunc = ' + style.Javascript);
			  	}
			} catch(e) {
				ajaxart.logException(e,'could not compile a js function ' + style.Javascript);
				if (jBart.onJsError)
					jBart.onJsError(e, style.Javascript);
			}
			jBart.compiledJS[style.Javascript] = compiledJs;
		}
		style.jsFunc = compiledJs.jsFunc;
	}
	try {
		if (style.jsFunc) return style.jsFunc(obj,context);
	} catch(e) {
		ajaxart.logException(e,'error running js code :' + style.Javascript);
		if (jBart.onJsError)
			jBart.onJsError(e, style.Javascript);
	}
}
function aa_find_class(jElem,cls)
{
	if (jElem.hasClass(cls)) return jElem;
	return jElem.find('.'+cls);
}
function aa_init_image_object(image,data,context)
{
	if (typeof(image) == 'string') return {StaticUrl: image, Size: ''};
	if (!image || !image.Url) return;
	image.StaticUrl = aa_totext(image.Url(data,context));
	return image;
}
function aa_set_image(elem,image,deleteWhenEmpty,size)
{
	if (!image) {
		if (deleteWhenEmpty) aa_remove(elem,true); 
		return; 
	}
	if (image && image.InCssClass) {
		jQuery(elem).css('display','block').addClass(image.CssClass);
		return;
	}
	if (image && (image.inSprite || image.asDivBackground) ) {
		var css = '#this { background:'+'url('+image.StaticUrl+') '+image.x+' ' + image.y + ' no-repeat; ';
		css += 'width: ' + image.width + '; height: ' + image.height + '; display:block; } ';
		
		if (image.hoverx) css += '#this:hover { background-position: ' + image.hoverx + ' ' + image.hovery + ' } ';
		if (image.activex) css += '#this:active { background-position: ' + image.activex + ' ' + image.activey + ' } ';
		jQuery(elem).addClass(aa_attach_global_css(css));
		return;
	}
	if (elem && elem.firstChild && elem.firstChild.tagName && elem.firstChild.tagName.toLowerCase() == 'img')
		return aa_set_image(elem.firstChild,image,true,size);
	if (elem && elem.tagName.toLowerCase() != 'img') {
		var imgElem = document.createElement('img');
		elem.appendChild(imgElem);
		var size2 = size || image.Size;
		if (size2) {
			size2 = size2.replace(/px/g,'');	// removing px for 
			var imageSize = size2.split(',');
			if (imageSize.length == 1) imageSize.push('0');
			for(var i in imageSize) if (imageSize[i] == '') imageSize[i] = '0';
			if (imageSize[0] != '0') elem.style.width = imageSize[0]+'px';
			if (imageSize[1] != '0') elem.style.height = imageSize[1]+'px';
		}
		return aa_set_image(imgElem,image,true,size);
	}
	if (typeof(image) == 'string') image = {StaticUrl: image, Size: ''};
	
	var src = image.StaticUrl || '';
	if (src == "") src = image.SecondUrl;
	if (src == "") {
		if (deleteWhenEmpty) aa_remove(elem,true);
		return;
	}
	elem.setAttribute('src',src);
	
	var size2 = size || image.Size;
	if (size2 == "") return;
	
	var imageSize = size2.split(',');
	if (imageSize.length == 1) imageSize.push('0');
	for(var i in imageSize) if (imageSize[i] == '') imageSize[i] = '0';
	
	aa_defineElemProperties(elem,'ImageWidth,ImageHeight');
	
	elem.ImageWidth = parseInt(imageSize[0].split('px')[0]); 
	elem.ImageHeight = parseInt(imageSize[1].split('px')[0]);
	if (elem.ImageWidth > 0) elem.width = elem.ImageWidth;
	if (elem.ImageHeight > 0) elem.height = elem.ImageHeight;
	if (elem.ImageWidth * elem.ImageHeight == 0) return;
	
	function FixImageSize(imgObj) 
	{
		var naturalWidth = imgObj.width,naturalHeight = imgObj.height;
		if (naturalWidth < elem.ImageWidth) elem.width = naturalWidth; 
		if (naturalHeight < elem.ImageHeight) elem.height = naturalHeight;
		var width = Math.min(naturalWidth,elem.ImageWidth), height = Math.min(naturalHeight,elem.ImageHeight); // IE hates img.width
		
		if (image.KeepImageProportions) {
			var ratio = naturalWidth / naturalHeight;
			var currRatio = width / height;
			if (ratio != currRatio) {
				if (naturalWidth >= naturalHeight * currRatio) {
					elem.width = elem.ImageWidth;
					elem.height = Math.floor(width / ratio);
				} else {
					elem.height = elem.ImageHeight;
					elem.width = Math.floor(height * ratio);
				}
			}
		}
	}
	  
	var imgObj = new Image(); imgObj.src = src;
	if (imgObj.complete) 
		FixImageSize(imgObj);
	else 
		elem.onload = function() { FixImageSize(imgObj);}
}
function aa_runActionOnClick(callback_func) {
  return function(e) {
	  var inner = jQuery(this)[0];
	  if (window.aa_incapture) return false;
	  if (inner.jbLastTimeClicked) {
		  if (new Date().getTime() - inner.jbLastTimeClicked < 300) return false; // double click
	  } 
	  inner.jbLastTimeClicked = new Date().getTime();
	  callback_func.call(inner,{event: e}); return false;
  }
}
function aa_api_object(jElem,props,objectIsNotTheElement)
{
	jElem = jQuery(jElem);
	if (objectIsNotTheElement) 
		var out = props;
	else {
		out = jElem[0];
		for(i in props) out[i] = props[i];
	}
	out.jElem = out.$el = jElem;
	out.control = out.el = jElem[0];
	jElem[0].jbApiObject = out;
	if (props)
	  if (props.context || props.Context) jElem[0].jbContext = props.context || props.Context;
	
	var props_str = 'jElem,getInnerElement,setInnerHTML,setImageSource,setImage,setOnClick,bind,trigger,control';
	for(var i in props) props_str += (','+i);
	if (!objectIsNotTheElement) aa_defineElemProperties(out,props_str); // for memory leaks
	
	out.bind = function(eventType,func) {
		this.jbListeners = this.jbListeners || [];
		this.jbListeners.push( { eventType: eventType, callback: func });
	}
	out.trigger = function(eventType,argsObject) {
		if (!this.jbListeners) return;
		for(var i=0;i<this.jbListeners.length;i++) {
			if (this.jbListeners[i].eventType == eventType)
				this.jbListeners[i].callback(argsObject);
		}
	}
	out.getInnerElement = function(classOrElement)
	{
		if (typeof(classOrElement) == 'string') {  // it is a class
			if (classOrElement == '') return this.jElem[0];
			if (classOrElement.indexOf('.') == 0)
			  return aa_find_class(this.jElem,classOrElement.substring(1))[0];
			return null;
		}
		return classOrElement || this;
	}
	out.setInnerHTML = function(classOrElement,text)
	{
		var inner = this.getInnerElement(classOrElement);
		if (inner) inner.innerHTML = text;
	}
	out.setImage = out.setImageSource = function(classOrElement,imageObject,deleteIfNoImage)
	{
		var inner = this.getInnerElement(classOrElement);
		if (inner) aa_set_image(inner,imageObject,deleteIfNoImage);
	}
	out.setOnClick = function(classOrElement,callback_func,jbart_click_behavior)
	{
		var inner = this.getInnerElement(classOrElement);
		if (!inner || !callback_func) return;
		inner.jbart_click_behavior = jbart_click_behavior;
		if (!jbart_click_behavior ) {
		  inner.onclick = function(e) {
			  if (window.aa_incapture) return false;
			  if (inner.jbLastTimeClicked) {
				  if (new Date().getTime() - inner.jbLastTimeClicked < 300) return false; // double click
			  } 
			  inner.jbLastTimeClicked = new Date().getTime();
			  callback_func.call(out,{event: e}); return false; 
		  }
		}
		else {
			// jbart click behavior
			var mouseHandlers = function(btn) { 
				  jQuery(btn).mousedown( function() {
					  var jbtn = jQuery(btn);
					  if (jbtn.attr('pressed_src') != "")
					  {
						  jbtn.attr('src',jbtn.attr('pressed_src'));
					  	  jbtn.addClass('pressed').addClass('pressing');
					  }
				  }).mouseout( function() {
					  var jbtn = jQuery(btn);
					  jbtn.removeClass('pressed');
					  jbtn.attr('src',jbtn.attr('original_src'));
				  }).mouseover( function() {
					  var jbtn = jQuery(btn);
					  if (jbtn.hasClass('pressing')) {
					    jbtn.addClass('pressed').removeClass('pressing');
						jbtn.attr('src',jbtn.attr('pressed_src'));
					  }
				  }).keydown( function(e) {
						e = e || event;
						if (e.keyCode == 13) // enter
						{
							ajaxart_stop_event_propogation(e);
							click(btn);
							return false;
						}
				  }).mouseup( function(e) {
					  var jbtn = jQuery(btn);
					  if (jbtn.hasClass('pressed') && !window.aa_incapture) callback_func();
				  });
			};
			mouseHandlers(inner);
		}
	}
	return out;
}
//whenever an html content changes, one needs to call aa_htmlContentChanged
//It will fix dialog sizes , special scrollbars (iscroll , tuiny scrollbar, etc.)
//To do something when the html content changes, one can define contentChanged method for an html element
function aa_htmlContentChanged(elem)
{
	while (elem != null) {
		if (elem.contentChanged) elem.contentChanged();
		elem = elem.parentNode;
	}
}
function aa_jbart_image(image,context)
{
   var base = (context.vars._Images && context.vars._Images[0]) || '';
   return base + image;
}
if (! window.aa_base_images)
aa_base_images = function()
{
	if (window.location.href.indexOf('http://localhost/ajaxart') == 0 || window.location.href.indexOf('https://localhost/ajaxart') == 0  || window.location.href.indexOf('http://localhost:8087/ajaxart') == 0)
		return 'images';
	return ajaxart.base_images || '';
};

if (! window.aa_base_lib)
aa_base_lib = function()
{
	if (window.location.href.indexOf('http://localhost/ajaxart') == 0 || window.location.href.indexOf('https://localhost/ajaxart') == 0 || window.location.href.indexOf('http://localhost:8087/ajaxart') == 0)
		return '/ajaxart/lib';
	return ajaxart.base_lib || '';
};

function aa_crossdomain_call(params, use_jsonp)
{
	if (!use_jsonp) {
		params.type = params.type || 'GET';
		var request = ajaxart.isIE ? new window.XDomainRequest() : new XMLHttpRequest();
        function handler(evtXHR) {
		    var request = this;
			if (request.readyState == 4 && params.success) 
				params.success(request.responseText,request.status);
		}
		if (jQuery.browser.msie) {
			request.open(params.type, params.url);
			request.onload = function(evtXHR) {
				if (this.responseText && params.success)
					params.success(this.responseText);
				if (!this.responseText && params.error)
					params.error();
			}
		} else {
			request.open(params.type, params.url, true);
			request.onreadystatechange = handler;
		}
		if (request.setRequestHeader)	// IE9 doesn't support this method
			request.setRequestHeader('Content-Type',params.dataType || 'text/plain; charset=utf-8');
		if (params.type == 'POST')
			request.send(params.data);
		else
			request.send();
	  ajaxart.log("calling crossdomain, type:" + params.type + ", \nurl:" + params.url + ",\ndata:" + params.data, "http");
	}
	else {
	  if (!ajaxart.jSonRequests) ajaxart.jSonRequests = {}
	  if (!ajaxart.jsonReqCounter) ajaxart.jsonReqCounter = 0;
	  window.aa_jsonp_callback = function(server_content,id,url)
	  {
	  	 if (ajaxart && ajaxart.jSonRequests[id]) {
	  		  ajaxart.jSonRequests[id].success(server_content);
	  		ajaxart.jSonRequests[id] = null;
	  	 }
	  }
	  ajaxart.jsonReqCounter = (ajaxart.jsonReqCounter + 1) % 1000;
	  ajaxart.jSonRequests[ajaxart.jsonReqCounter] = params; 
	  var url = params.url + '&aa_req_id=' + ajaxart.jsonReqCounter;
	  if (params.type == "POST" && params.data)
		  url = url + "&aa_postdata=" + encodeURIComponent(params.data);
	  jQuery.ajax( { cache: false ,dataType: 'script', httpHeaders : [], url: url, 
	  	error: function(jqXHR, textStatus, errorThrown) {
	  		params.error(textStatus + " " + errorThrown);
	  	} });
	}
}
jBart.aa_crossdomain_call = aa_crossdomain_call;	// to be able to access it from outside

function aa_getWidgetIDFromContext(context)
{
	if (context.vars.WidgetId) return aa_totext(context.vars.WidgetId);
	
	var elem = context.vars._AppContext[0].AppXtml;
	while (elem && elem.tagName != 'bart_sample' && elem.tagName != 'jbart_project')
		elem = elem.parentNode;
	if (elem) return elem.getAttribute('id') || '';
	return '';
}

jBart.utils.removeFromArray = function(array,object)
{
	for(var i=0;i<array.length;i++)
		if (array[i] == object) {
			array.splice(i,1);
			return;
		}
}
jBart.utils.refresh = function(element)
{
	while (element.ReplacedBy) element = element.ReplacedBy;
	
	var ctx = element.ajaxart;
	if (typeof(ctx) == "undefined" || ctx == null) return;

	var newData = ctx.data;
	if (ctx.origData != null) newData = ctx.origData;
	
	var newControl = aa_first(newData,ctx.script,"",ctx.params);
	if (newControl == "") newControl = document.createElement('div');
	aa_defineElemProperties(element,'ReplacedBy');
	element.ReplacedBy = newControl;
	
	aa_replaceElement(element,newControl,true);
	
	return newControl;
}
function aa_trigger(object,eventType,eventObject) {
	if (!object || !object.jbListeners || !object.jbListeners[eventType]) return;
	eventObject = eventObject || {};
	eventObject.eventType = eventType;
	
	var listeners = object.jbListeners[eventType];
	for(var i=0;i<listeners.length;i++) {
		try {
			listeners[i].handler.apply(object,[eventObject]);
		} catch(e) {
			ajaxart.logException(e,'error trigerring event ' + eventType);
		}
	}	
}
function aa_bind(object,eventType,handler,identifier,elementForAutoUnbind,addAsFirstListener) {
	if (!object) return;
	object.jbListeners = object.jbListeners || {};
	object.jbListeners.counter = object.jbListeners.counter || 0;
	var listenerID = ++object.jbListeners.counter;

	object.jbListeners[eventType] = object.jbListeners[eventType] || [];
	var listeners = object.jbListeners[eventType];

	for(var i=0;i<listeners.length;i++) {
		if (identifier && listeners[i].eventType == eventType && listeners[i].identifier == identifier) {
			listeners[i].handler = handler;
			return;
		}
  }
  var item = {eventType: eventType, handler: handler, identifier: identifier, listenerID: listenerID };
	if (addAsFirstListener)
		listeners.unshift(item);
	else
		listeners.push(item);	

	if (elementForAutoUnbind) {
		aa_addOnDetach(elementForAutoUnbind,function() { 
			aa_unbind(object,listenerID);
		});
	}

	return listenerID;
}

function aa_unbind(object,listenerID) {
	if (!object || !object.jbListeners) return;

	for(var i in object.jbListeners) {
		var listeners = object.jbListeners[i];
		if (!listeners.length) continue;

		for(var j=0;j<listeners.length;j++) {
			if (listeners[j].listenerID == listenerID) {
				listeners.splice(j,1);
				return;
			}
		}	
	}
}
function aa_async_trigger(object,eventType,eventObject) {
	var asyncDeferred = $.Deferred();

	if (!object || !object.jbListeners || !object.jbListeners[eventType]) return;
	eventObject = eventObject || {};
	eventObject.eventType = eventType;
	
	var listeners = object.jbListeners[eventType];
	var i=0;
	doNext();

	return asyncDeferred.promise();

	function doNext() {
		if (i>=listeners.length)
			return asyncDeferred.resolve();

		try {
			var promise = listeners[i].handler.apply(object,[eventObject]);
		} catch(e) {
			ajaxart.logException(e,'error trigerring event ' + eventType);
			var promise = null;			
		}
		$.when(promise).then(function() {
			i++;
			doNext();
		});
	}
	
}


jBart.trigger = aa_trigger;
jBart.bind = aa_bind;

jBart.activator = function(widgetSource) {
	jBart.xml2text = ajaxart.xml2text; // for F12
	// https://docs.google.com/a/artwaresoft.com/document/d/1SBPGSmYhLuwhxH9H7LtdOKsQ5VN4SdcqBMl1V3G6Kmc/edit#heading=h.k74m6lqj4kpw
	return {
		show: function(div,params) {
			div = jQuery(div)[0];
			var jbartObject = this;
			if (!params) params = {};
			if (!params.widget_src)
				params.widget_src = widgetSource;
			jBart.appendWidget(div,params,jbartObject);				
			jbartObject._initialized = true;
		},
		init: function(settings) {
			var jbartObject = this;
			settings = settings || {};
			aa_jbart_init_activator(jbartObject,settings);
		},
		showPage: function(div,settings) {
			// must be called after init
			div = jQuery(div)[0];
			if (!this.isInitialized()) return;
			aa_jbart_activator_showPage(this,div,settings);			
		},
		isInitialized: function() { 
			return !!this.Context;
		},
		jBart: jBart,
		_widgetSource: widgetSource
	}
} 
jBart.parsexml = function(contents,baseXml) { return aa_parsexml(contents,'','',false,baseXml); }

// settings include: 
// url 
// variableToFind - look for a variable under window
// isLoaded (optional) - a callback function which returns true when the js is loaded
// loadFunction (optional) - allows a different loading js rather than aa_load_js_css(url)
// success, error - callback functions
function aa_loadJsFile(settings) {
	settings.success = settings.success || function() {}
	if (!settings.isLoaded ) {
		settings.isLoaded = function() {
			if (!settings.variableToFind) return true;
			if (window[settings.variableToFind]) return true;
			return false;
		}
	}
	function checkLoaded() {
		try {
			if (settings.isLoaded()) return true;
		} catch(e) {}
		return false;
	}

	var availableTries = 20;
	var firstTime = true;
	checkWithTimeout();
	
	function checkWithTimeout()
	{
		if (checkLoaded()) return settings.success();
		if (firstTime) {
			if (settings.loadFunction) settings.loadFunction(settings.url);
			else aa_load_js_css(settings.url, 'js');
		}
		firstTime = false;
		
		if (--availableTries <=0 ) {
			settings.error = settings.error || function() {}
			return settings.error();
		}
		setTimeout(checkWithTimeout,500);
	}
}

function aa_create_jbart_context(settings) {
	var widgetXml = settings.WidgetXml;
	var context = settings.Context || ajaxart.newContext();
	var uiprefObj = uipref_in_cookies();
	
	var widgetId = widgetXml.getAttribute('id') || 'gdrive';
	var appXtml = aa_xpath(widgetXml,"bart_dev/db/bart_unit/bart_unit/Component[@id='App']/xtml")[0];
	if (!appXtml) appXtml = aa_xpath(widgetXml,"xtml/Component[@id='Widget']/xtml")[0];

	var language = settings.Language || aa_totext( aa_xpath(appXtml,"Language/@Language") ); 
	var globalVars = {};
	
	var resources = widgetDataResources();
	
	var bctx = {
	  AppXtml: appXtml,
	  Resources: resources,
	  Url: ajaxart.runComponent('bart_url.BrowserUrl',[],context)[0],
	  ValidationStyle: ajaxart.runComponent('validation.DefaultOld',[],context)[0]
	};

	if (settings.jbartObject) settings.jbartObject._AppContext = bctx;	

	var ctx = aa_ctx(context, { 
		_GlobalVars: [globalVars], _UIPref: [uiprefObj], Language: [language] , 
		_AppContext: [bctx], _WidgetXml: [widgetXml]
	});
	bctx.context = ctx;

	loadSampleComponents();		
	runAppFeatures();
	resourcesToGlobalVars();
	setOldPages();
	AppFeatures_Load();
	overrideUIPrefs();

	return ctx;

  function loadSampleComponents() {
  		ajaxart.componentsXtmlCache.sample = null;
    	
    	var namespaces = aa_xpath(widgetXml,"xtml");
    	var unit = aa_xpath(widgetXml,"bart_dev/db/bart_unit/bart_unit")[0];
    	if (unit) namespaces.push(unit);

    	for(var j=0;j<namespaces.length;j++) {
    		var ns = namespaces[j].getAttribute('ns') || 'sample';
	    	ajaxart.components[ns] = ajaxart.components[ns] || {};

    		var comps = aa_xpath(namespaces[j],'Component');
	    	for(var i=0;i<comps.length;i++) {
	    		  var id = comps[i].getAttribute("id");
	  	      ajaxart.components[ns][id] = comps[i];
	  	      ajaxart.componentsXtmlCache[ns+'.'+id] = null;
	  	      if (comps[i].getAttribute('execution') == 'native') {
	  	      	var code = aa_cdata_value(aa_xpath(comps[i],'Code')[0]);
	  	      	if (code) {
	  	      		ajaxart.gcs[ns] = ajaxart.gcs[ns] || {};
	  	      		eval('ajaxart.gcs[ns][id] = ' + code);
	  	      	}
	  	      }
	    	}
	    	
    		var types = aa_xpath(namespaces[j],'Type');
	    	for(var i=0;i<types.length;i++) {
    			ajaxart.types[ns + "_" + types[i].getAttribute('id')] = types[i];
    		}

    	}

  }
	function runAppFeatures() {
		bctx.Features = [];
		var featuresXtml = aa_xpath(appXtml,'ApplicationFeature');
		for(var i=0;i<featuresXtml.length;i++) {
			try {
			  ajaxart.concat(bctx.Features, ajaxart.run([],featuresXtml[i],'',ctx));
			} catch(e) {}
		}
	}
		
	function resourcesToGlobalVars()
	{
		window.jbDebugResource = globalVars;
		
		var resources = bctx.Resources;
		for(var i=0;i<resources.length;i++) {
			var init = function(resource) {
				var id = aa_totext(resource.ID);
				globalVars[id] = function() { return resource.Items; }
			}
			init(resources[i]);
		}

	}
	
	function setOldPages() {
		bctx.Pages = [];
		var pagesXtml = aa_xpath(appXtml,'Pages/Page');
		for(var i=0;i<pagesXtml.length;i++) 
			ajaxart.concat(bctx.Pages, ajaxart.run([],pagesXtml[i],'',ctx));
	}

	function AppFeatures_Load() {
		for(var i=0;i<bctx.Features.length;i++) {
			var feature = bctx.Features[i];
			try {
			  if (feature.Load) feature.Load([],ctx);
			} catch(e) {
				ajaxart.logException(e,'Loaing App Features Failure');
			}
		}
	}
	
	function overrideUIPrefs() {
		var uiPrefs = aa_xpath(widgetXml,'bart_dev/db/bart_unit/bart_unit/UIPref/*');
		for(var i=0;i<uiPrefs.length;i++) {
			var elem = uiPrefs[i];
			var prefix = elem.tagName;
			var attributes = elem.attributes;
			for(var j=0;j<attributes.length;j++) {
				var name = attributes.item(j).name;
				var value = elem.getAttribute(name);
				uiprefObj.SetProperty([],aa_ctx({ Prefix: [prefix], Property: [name], Value: [value] }));
			}
		}
	}
	function widgetDataResources() {
		var resources = [];
		var resourcesXtml = aa_xpath(appXtml,'Resources/Resource');
		if (!resourcesXtml.length) resourcesXtml = aa_xpath(appXtml,'DataResource');

		for(var i=0;i<resourcesXtml.length;i++) {
			var resourceXtml = resourcesXtml[i];
		    var resourceID = resourceXtml.getAttribute('ResourceID');
			var t = resourceXtml.getAttribute('t');
			var shortWidgetId = aa_array_lastItem(widgetId.split('/'));		    
			var varName = 'jBartWidget_' + shortWidgetId + '_' + resourceID;

			var resource = aa_first([],resourceXtml,'',aa_ctx(context,{WidgetId: [widgetId]}));
			if (window[varName]) {
				if (resource && resource.LoadFromValue && window[varName][0]) {
					resource.LoadFromValue(window[varName][0]);		// e.g. allow for xml cleaning
					resources.push( resource );
				} else {
					resources.push({ Id: resourceID, ID: [resourceID], Items: window[varName] });
				}
			} else {
				var resource = aa_first([],resourceXtml,'',aa_ctx(context,{WidgetId: [widgetId]}));
				if (resource) resources.push( resource );
				else ajaxart.log('could not create resource ' + resourceID,"error");
			}
		}
		return resources;
	}
	
	function uipref_in_cookies() {
		return {
		  GetProperty: function(data1,ctx) {
			var out = aa_valueFromCookie(aa_totext(ctx.vars.Prefix)+aa_totext(ctx.vars.Property));
			return out ? [out] : [];
		  },
		  SetProperty: function(data1,ctx) {
			aa_writeCookie(aa_totext(ctx.vars.Prefix)+aa_totext(ctx.vars.Property),aa_totext(ctx.vars.Value));
		  }
		}
	}
	
}

function aa_show_jbart_widget(settings)
{
	var ctx = aa_create_jbart_context(settings);
	if (settings.jbartObject) settings.jbartObject.Context = ctx;
	
	return aa_show_jbart_widget_page({
		Context: ctx,
		page: settings.Page,
		success: settings.success,
		ControlToShowInBartContext: settings.ControlToShowInBartContext,
		RunAfterControlWithTimer: settings.RunAfterControlWithTimer
	});
}

function aa_show_jbart_widget_page(settings)
{
	var ctx = settings.Context;
	var bctx = aa_var_first(ctx,'_AppContext');
	var pageID = settings.page;
	var appXtml = bctx.AppXtml;

	var out = document.createElement('div');
	jQuery(out).addClass('aa_widget jBartWidget');
	addWidgetCss();
	var widgetPage = showWidgetPage();
	out.appendChild(widgetPage);

	if (settings.RunAfterControlWithTimer) 
		setTimeout(runAfter,1); 
	else runAfter();
	
	if (settings.ControlToShowInBartContext) // for auto tests
		return settings.ControlToShowInBartContext([],ctx);
	
	aa_register_document_events(ctx);
  return out;

	function addWidgetCss()
	{
		var css = aa_totext(bctx.Css || []);
		if (css) 
			$(out).addClass(aa_attach_global_css(css));
	}
	function runAfter() {
		try {
			if (settings.success) settings.success([],ctx);
		} catch(e) {}
	}
	
	function showWidgetPage()
	{
	    var pageProfile = null;
	    if (pageID) {
	    	pageProfile = newPageByID(pageID);
	    	pageProfile = pageProfile || oldPageByID(pageID);
	    	if (!pageProfile) return $('<div/>').text('jbart page '+pageID+' not found')[0];
	    }
	    pageProfile = pageProfile || aa_xpath(appXtml,"MainPage1")[0];
	    if (!pageProfile && appXtml.getAttribute('MainPage')) {
	    	pageProfile = oldPageByID(appXtml.getAttribute('MainPage'));
	    }
	    pageProfile = pageProfile || newPageByID('main') || oldPageByID('main'); 
	    
	    var pageAsField = aa_first([],pageProfile,'',ctx);
	    if (pageAsField && pageAsField.Id) {
	    	var pageout = jQuery('<div/>')[0];
	    	aa_fieldControl({ Field: pageAsField, Wrapper: pageout, Item: [], Context: ctx });
	    	aa_trigger(bctx,'showPage',{ el: pageout });
	    	return pageout;
	    } else { // a page (e.g bart.SinglePage)
	    	var page = pageAsField;
	    	var pageout = page.Control([],aa_ctx(ctx,{_PageParams: [] }))[0];
	    	aa_trigger(bctx,'showPage',{ el: pageout });
	    	return pageout;
	    }
	}
  function newPageByID(pageID) {
    	return aa_xpath(appXtml, "../../Component[@id='"+pageID+"']/xtml")[0];
  }
  function oldPageByID(pageID) {
    	return aa_xpath(appXtml,"Pages/Page[@ID='"+pageID+"']")[0];		
  }
}
function aa_global_vars()
{
	window.jBartWidgets = window.jBartWidgets || { vars: {}};
	return jBartWidgets.vars;
}

function aa_loadRequiresJSFiles(settings) {
	/* Ensures some js files are loaded, and loads them if not loaded */
	var currentLoadIndex = -1;
	var timeOfAddingJsFile;

	settings.onload = settings.onload || function() {};
	settings.onerror = settings.onerror || function() {};
	
	step();

	function step() {
		currentLoadIndex++;
		if (currentLoadIndex >= settings.jsFiles.length) {
			settings.onload();
		} else {
			loadJsFile(settings.jsFiles[currentLoadIndex],step,settings.onerror);
		}
	}

	function loadJsFile(fileProperties,success,error) {
		if (checkJsVariable(fileProperties.jsVariable)) return success();

	    var fileref=document.createElement('script');
	    fileref.setAttribute("type","text/javascript")
	    fileref.setAttribute("src", fileProperties.url);
		document.body.appendChild(fileref);
		timeOfAddingJsFile = new Date().getTime();

		checkIfJsLoaded(fileProperties,success,error);
	}

	function checkIfJsLoaded(fileProperties,success,error) {
		if (checkJsVariable(fileProperties.jsVariable)) return success();
		if (new Date().getTime() - timeOfAddingJsFile > 15000) return error();

		setTimeout(function() { 
			checkIfJsLoaded(fileProperties,success,error);
		},400);
	}

	function checkJsVariable(jsVariable) {
		// support cases like: jQuery.fn.roundabout
		var parts = jsVariable.split(".");
		var current = window;
		for (i in parts) {
			current = current[ parts[i] ];
			if (!current) return false;
		}
		return true;
	}
}

function aa_hide(elem) {
	if (!jBart.classForHiddenAdded) {
		var css = '.aa_hidden_element { display: none !important; }';
		var styleElem = jQuery("<style></style>").text(css)[0];
		var head = document.getElementsByTagName("head")[0];
		head.appendChild(styleElem);
		jBart.classForHiddenAdded = true;
	}
	if (elem && elem.nodeType == 1)
	  jQuery(elem).addClass('aa_hidden_element');
}

function aa_show(elem) {
	if (elem && elem.nodeType == 1)
	  jQuery(elem).removeClass('aa_hidden_element');
}
function aa_refresh_widget_with_different_source(div, widget_as_str) {
	$(div).children().each(function() { aa_remove(this,true); });
	ajaxart.componentsXtmlCache = [];
	jBart.activator(widget_as_str).show(div);
}

function aa_bctx(context) {
	return context.vars._AppContext[0];
}

function aa_array_lastItem(arr) {
	if (arr.length) return arr[arr.length-1];
}

function aa_setDataResource(context,resourceID,newvalue) {
	if (!aa_isArray(newvalue)) newvalue = [newvalue];

	if (context.vars._AppContext) {
		var appContext = context.vars._AppContext[0];
		if (appContext.Vars && appContext.Vars[resourceID]) {
			appContext.Vars[resourceID] = function() { return newvalue; }
		}
		for(var i=0;i<appContext.Resources.length;i++)
			if (appContext.Resources[i].Id == resourceID) {
				appContext.Resources[i].Items = newvalue;
				if (appContext.Resources[i].Xml) appContext.Resources[i].Xml = newvalue[0];
			}
	}
	if (context.vars._GlobalVars && context.vars._GlobalVars[0][resourceID]) {
		context.vars._GlobalVars[0][resourceID] = function() { return newvalue; };
	}
}

function aa_errorLog(message) {
	if (window.console) {
		if (console.error) console.error(message);
		else console.log(message);
	}
}

function aa_consoleLog(message) {
	if (window.console && console.log) console.log(message);
}

function aa_path(object,path,value) {
  var cur = object;

  if (typeof value == 'undefined') {  // get
    for(var i=0;i<path.length;i++) {
      cur = cur[path[i]];
      if (cur == null || typeof cur == 'undefined') return null;
    }
    return cur;
  } else { // set
    for(var i=0;i<path.length;i++)
      if (i == path.length-1)
        cur[path[i]] = value;
      else
        cur = cur[path[i]] = cur[path[i]] || {};
    return value;
  }
}

/******************* Node JS *****************************/
function aa_runFromNodeJS(widgetXml,profileStr,data) {

	window.aa_hasAttribute = function(xml,attr) {
		console.log('mik mak');
		return xml.getAttribute(attr) != 'null';
	}

	var context = aa_create_jbart_context({
		WidgetXml: aa_parsexml(widgetXml),
		Language: '',
		jbartObject: {}
	});
	var input = data ? [data] : [];
	return aa_text(input,aa_parsexml(profileStr),'',context);
}



(function(jQuery) {
	jQuery.fn.jbart = function(params)
	{
		return this.each(function() {
			var elem = this;
			jBart.ready(function() {
				if (params.url)
				 	$.ajax({
				  		url: params.url,
				  		dataType: 'text',
				  		success: function(widgetSource) {
				  			jBart.appendWidget(elem,{ widget_src: widgetSource });
				  		}
				  	});
			});
		});
	};
})(jQuery);

function aa_loadZippedXtml(zipped) {
	var zip  = new JSZip();
	zip.load(zipped, {base64:true});
	zip.file(/.*/).forEach(function(file) { 
		ajaxart.load_xtml_content('',aa_parsexml(file.asText()));
	});
}


aa_gcs("jbartdb", {
	CreateNewNodeInJBartDB: function (profile,data,context)
	{
		var xml = aa_parsexml( aa_first(data,profile,'NodeXml',context) );
		if (aa_bool(data,profile,'AddTimestampToID',context)) {
			var id = xml.getAttribute('id') || '';
			id += '_' + aadate_dateObj2StdDate(new Date()).replace(/[:/ ]/g,'_');
			xml.setAttribute('id',id);
		}
		if (ajaxart.inPreviewMode) return;
		jBart.db.save({
			data: xml,
			success: function() {
				ajaxart.run([xml],profile,'OnSuccess',context);
			},
			error: function() {
				ajaxart.run(data,profile,'OnError',context);
			},
			server: aa_text(data,profile,'Server',context),
			context: context
		});
	},
	CloneNodeInJBartDB: function (profile,data,context)
	{
		jBart.db.cloneNode({
			data: aa_parsexml( aa_first(data,profile,'Node',context) ),
			success: function(newnode) {
				ajaxart.run([newnode],profile,'OnSuccess',context);
			},
			error: function() {
				ajaxart.run([newnode],profile,'OnError',context);
			},
			server: aa_text(data,profile,'Server',context),
			context: context
		});
	},
	DeleteNodeInJBartDB: function (profile,data,context)
	{
		var node = aa_first(data,profile,'Node',context);
		if (!node || node.nodeType != 1) return;
		if (ajaxart.inPreviewMode) return;
		
		jBart.db.deleteNode({
			data: node,
			success: function(newnode) {
				ajaxart.run([newnode],profile,'OnSuccess',context);
			},
			error: function() {
				ajaxart.run([newnode],profile,'OnError',context);
			},
			server: aa_text(data,profile,'Server',context),
			context: context			
		});
	},
	SaveNodeAsync: function (profile,data,context)
	{
		ajaxart_async_Mark(context);
		
		var xml = aa_parsexml( aa_first(data,profile,'Node',context) );
		if (ajaxart.inPreviewMode) return;

		jBart.db.save({
			data: xml,
			success: function() {
				ajaxart_async_CallBack([],context);				
			},
			error: function() {
				context.vars._AsyncCallback.success = false;
				ajaxart_async_CallBack([],context);				
			},
			server: aa_text(data,profile,'Server',context),
			context: context
		});
	},
	JBartDBNode: function (profile,data,context)
	{
	    ajaxart_async_Mark(context,true);
	    
	    ajaxart.run(data,profile,'OnLoading',context);
	    
		jBart.db.get({
			id: aa_text(data,profile,'ID',context),
			contentType: aa_text(data,profile,'ContentType',context),
			success: function(node) {
				ajaxart.run([node],profile,'OnSuccess',context);
				ajaxart_async_CallBack([node],context); 
			},
			error: function(error) {
				context.vars._AsyncCallback.success = false;
				ajaxart.run(data,profile,'OnError',context);
				ajaxart_async_CallBack([],context); 
			},
			server: aa_text(data,profile,'Server',context),
			context: context
		});
	},
	JBartDBQuery: function (profile,data,context)
	{
	    ajaxart_async_Mark(context,true);
	    
	    ajaxart.run(data,profile,'OnLoading',context);
	    
		jBart.db.query({
			contentType: aa_text(data,profile,'ContentType',context),
			templateOf: aa_text(data,profile,'TemplateOf',context),
			headersOnly: aa_bool(data,profile,'HeadersOnly',context),
			success: function(nodes) {
				ajaxart.run([nodes],profile,'OnSuccess',context);
				ajaxart_async_CallBack([nodes],context); 
			},
			error: function(error) {
				context.vars._AsyncCallback.success = false;
				ajaxart.run(data,profile,'OnError',context);
				ajaxart_async_CallBack([],context); 
			},
			server: aa_text(data,profile,'Server',context),
			context: context
		});
	},
	LoadFullNodeFromHeader: function (profile,data,context)
	{
		var headerXml = aa_first(data,profile,'HeaderXml',context);
		var childPresent = aa_xpath(headerXml,'*').length > 0;
		if (childPresent && !aa_bool(data,profile,'DoNotLoadIfPresent',context)) return;

		while(headerXml.firstChild) headerXml.removeChild(headerXml.firstChild);

		var deferred = $.Deferred();

		jBart.db.get({
			id: headerXml.getAttribute('id'),
			contentType: headerXml.getAttribute('_type'),
			success: function(node) {
				var children = aa_xpath(node,'*');
				for(var i=0;i<children.length;i++) {
					aa_xml_appendChild(headerXml,children[i]);
				}
				deferred.resolve(result);
			},
			server: aa_text(data,profile,'Server',context),
			error: deferred.reject,
			context: context
		});

		return [deferred.promise()];		
	},
	SaveFileToJBartDB: function (profile,data,context)
	{
		var id = aa_text(data,profile,'ID',context);
		var content = aa_text(data,profile,'Content',context);
		var deferred = $.Deferred();

		jBart.db.saveFile({
			id: id,
			content: content,
			success: function(success_result) {
				ajaxart.run(data,profile,'OnSuccess',aa_ctx(context,{_Result:[success_result],_FileId:[id], _FileContent:[content] } ));
				deferred.resolve(success_result);
			},
			error: function(error) {
				ajaxart.log("Error saving file '" + id + "'' to JBart DB: " + error.message + " \nurl:" + error.url,'error');
				ajaxart.run(data,profile,'OnError',aa_ctx(context,{_Message:[error.message],_Url:[error.url],_FileId:[id], _FileContent:[content] } ));
				deferred.reject(error);
			},
			server: aa_text(data,profile,'Server',context),
			context: context
		});

		return [deferred.promise()];		
	},
	GetFileFromJBartDB: function (profile,data,context)
	{
		var id = aa_text(data,profile,'ID',context);
		var deferred = $.Deferred();
		jBart.db.getFile({
			id: id,
			success: function(server_content) {
				var converted_result = ajaxart_server_content2result(server_content,aa_text(data,profile,"ResultFormat",context));
				ajaxart.run(converted_result,profile,'OnSuccess',context);
				deferred.resolve(converted_result);
			},
			error: function(error) {
				ajaxart.log("Error getting file '" + id + "'' to JBart DB: " + error.message + " \nurl:" + error.url,'warning');
				ajaxart.run(data,profile,'OnError',aa_ctx(context,{_Message:[error.message],_Url:[error.url],_FileId:[id] } ));
				deferred.reject(error);
			},
			server: aa_text(data,profile,'Server',context),
			context: context
		});
		return [deferred.promise()];
	}
});

jBart.db = jBart.db || {};
function aa_jbartdb_getServer(settings)	{
	if (settings.server) return settings.server;
	if (settings.context && settings.context.vars.JBartDBServer) return ajaxart.totext_array(settings.context.vars.JBartDBServer);
	return (jBart.settings && jBart.settings.jbartdb_server) || ajaxart.urlparam('jbartdb_server') || window.jbartdbserver || '//jbartdb.appspot.com';
}
function aa_jbartdb_security_tokens(settings) {
	var result = '';
	var instance = ajaxart.urlparam('instance'); 
	if (instance) result = '&instance=' + instance;

	var appName = ajaxart.urlparam('appName');
	var appNameMatch = window.location.href.match(/WixPage\/([^\/]+)/); // Wix
	if (appNameMatch && appNameMatch[1]) appName = appNameMatch[1];
	if (appName)
		result += '&appName=' + appName;
	var more_security_tokens = settings && settings.context && settings.context.vars.JBartDBSecurityTokens && ajaxart.totext_array(settings.context.vars.JBartDBSecurityTokens);
	if (more_security_tokens)
		result += more_security_tokens;
	return result;
}

jBart.db.get = function(settings)
{
	settings.error = settings.error || function() {};
	settings.server = aa_jbartdb_getServer(settings);
//	settings.server = 'http://localhost:8888';
	settings.cache = settings.cache || true;
	
	var ajaxSettings = { 
		url: settings.server+'/jbart_db.js?op=loadnode&contenttype='+settings.contentType+'&id='+settings.id,
		cache: false, 
		success: function(result) {
			result = aa_parsexml(result);
			if (result && result.getAttribute('_type') == settings.contentType) {
				settings.success(result);
			} else {
				if (settings.defaultValue) {
					settings.defaultValue.setAttribute('_type',settings.contentType);
					settings.defaultValue.setAttribute('id',settings.id);
					settings.success(aa_parsexml(settings.defaultValue));
				}
				else
					settings.error({ message: 'node ' + settings.server + '::' + settings.contentType + ':'+ settings.id + ' not found, and no default value' , code: 'node does not exist'});
			}
		},
		error: function() { settings.error({message: ''}); }
	}
	aa_crossdomain_call(ajaxSettings, true);
}
jBart.db.save = function(settings)
{
	settings.error = settings.error || function() {};
	settings.success = settings.success || function() {};
	settings.server = aa_jbartdb_getServer(settings);
	// settings.server = 'http://localhost:8888';
	
	if (! settings.data || settings.data.nodeType != 1 || !settings.data.getAttribute('id') || !settings.data.getAttribute('_type') ) {
		return settings.error('settings.data should be an xml of the format: <item id="xx" _type="myType" myatt="..."><myElem>..</myElem></item>');
	}
	
	if (!settings.vidProtection)
		settings.data.setAttribute('vid','force');

	if (!settings.data.getAttribute('_lastModified'))
		settings.data.setAttribute('_created',currentDate());	

	settings.data.setAttribute('_lastModified',currentDate());

	var id = settings.data.getAttribute('id');
	var _type = settings.data.getAttribute('_type');
	var url = settings.server+'/bart.php?op=savenode' + aa_jbartdb_security_tokens(settings);
	
	var result = $.ajax({ 
	  	url: url,
	  	cache: false, 
	  	type: 'POST', 
	  	headers: {'Content-Type': 'text/plain; charset=utf-8' },
	  	data: ajaxart.xml2text(settings.data,false)
  });
	$.when(result).then(
		function(result) { 
			result = aa_parsexml(result);
			if (result && result.getAttribute('type')=="success") {
				if (settings.vidProtection) {
					settings.data.setAttribute('vid',result.getAttribute('vid'));
				}
			  settings.success();
			}
			else {
				if (window.console && result.getAttribute('type') == 'error') {
					console.log('error saving node ' + _type + ':' + id + ' ' + result.getAttribute('reason'));
				}
				if (result.getAttribute('type') == 'error' && (result.getAttribute('reason')||'').indexOf("wrong vid:") == 0) {
					handleWrongVid(result);
				} else {
					settings.error(result);
			  }
			}
		},
		function(er) { 
			settings.error();
	});

	function handleWrongVid(result) {
		if (settings.autoMergeOnWrrongVid) {
			// TODO: try doing auto merge
		}
		settings.error('wrong vid');
	}
	
	function currentDate() {
		var now = new Date();
		return '' + pad(now.getDate()) + "/" + pad(now.getMonth()+1) + "/" + now.getFullYear() + " " + pad(now.getHours())+ ':' + pad(now.getMinutes());
	}
	function pad(i) { return i<10?'0'+i:i; }
}
jBart.db.query = function(settings)
{
	settings.error = settings.error || function() {};
	settings.server = aa_jbartdb_getServer(settings);
	if (typeof(settings.headersOnly) == 'undefined') settings.headersOnly = true;
	
	var headersOnly = settings.headersOnly ? '&headersonly=true' : '&headersonly=false';
	var templateOf = settings.templateOf ? '&templateOf='+settings.templateOf : '';
	var ajaxSettings = { 
		url: settings.server+'/jbart_db.js?op=query&contenttype='+settings.contentType+headersOnly+templateOf,
		cache: settings.cache ? true : false, 
		success: function(result) {
			result = aa_parsexml(result);
			settings.success(result);
		},
		error: function() { 
			settings.error({message: ''}); 
		}
	}
	aa_crossdomain_call(ajaxSettings, true);
}
jBart.db.deleteNode = function(settings) {
	settings.error = settings.error || function() {};
	settings.server = aa_jbartdb_getServer(settings);
	if (!settings.data)
		return settings.error('you must supply the node in settings.data when calling jBart.db.deleteNode');
	
	var id = settings.data.getAttribute('id'), type = settings.data.getAttribute('_type');
	if (!id || !type)
		return settings.error('you must supply the node in settings.data when calling jBart.db.deleteNode');

	aa_crossdomain_call({ 
		url: settings.server+'/jbart_db.js?op=deletenode&contenttype='+type+'&id='+id + aa_jbartdb_security_tokens(),
		cache: false, 
		success: function(result) {
			settings.success();
		},
		error: function() { 
			settings.error({message: ''}); 
		}
	}, true);
}
jBart.db.saveFile = function(settings) {
	settings = aa_defaults(settings,{
		success: function() {},
		error: function() {}
	})
	settings.server = aa_jbartdb_getServer(settings);
	if (!settings.id)
		return ajaxart.error({message:'save file to jbartdb: id is empty'});
	
	var url = settings.server+'/bart.php?op=savefile&id='+settings.id + aa_jbartdb_security_tokens(); 

  var result = $.ajax({ 
	  	url: url,
	  	cache: false, 
	  	type: 'POST', 
	  	headers: {'Content-Type': 'text/plain; charset=utf-8' },
	  	data: settings.content
  });
	$.when(result).then(
		function(result) { 
			var result_as_xml = aa_parsexml(result,'',[],true);
			if (!result_as_xml)
				settings.error({message:result, url:url});
			else if (result_as_xml.getAttribute("type") != 'success')
				settings.error({message:result_as_xml.getAttribute("reason"), url:url});
			else
				settings.success('');
		},
		function(er) { 
			settings.error({message:er, url:url}); 
	});
}
jBart.db.appendToFile = function(settings) {
  // ?op=appendtofile&id=log.txt&toappend=bbbb&timestamp=true	
	settings.server = aa_jbartdb_getServer(settings);
	if (!settings.id)
		return ajaxart.error({message:'save file to jbartdb: id is empty'});
	
	var timestamp = settings.timestamp ? '&timestamp=true' : '';	
	var url = settings.server+'/jbart_db.js?op=appendtofile&id='+ encodeURIComponent(settings.id) + '&toappend=' + encodeURIComponent(settings.toAppend) + timestamp + aa_jbartdb_security_tokens(); 

  var result = $.ajax({ 
	  	url: url,
	  	cache: false
  });
	$.when(result).then(
		function(result) { 
			settings.success(result);
		},
		function(er) { 
			settings.error({message:er, url:url}); 
	});
}

jBart.db.getFile = function(settings) {
	settings.server = aa_jbartdb_getServer(settings);
	if (!settings.id)
		return ajaxart.error({message:'get file to jbartdb: id is empty'});
	
	var url = settings.server+'/file/' + settings.id; 
	var result;

	if (!aa_jbartdb_isSameDomain(settings.server)) {
		result = aa_proxyGetCall({ url: url });
	} else {
		result = $.ajax({ 
		 	url: url,
		 	cache: false
	  });
	}
	$.when(result).then(
		function(result) { 
			if (result && result.nodeType == 9 && result.firstChild && result.firstChild.getAttribute('_type') == 'error') {
				return settings.error({message: result.firstChild.getAttribute('reason') || '', url:url}); 	
			}
			settings.success(result);
		},
		function(er) { 
			settings.error({message:er, url:url}); 
	});
}

jBart.db.cloneNode = function(settings) {
	var newnode;
	var charsForRandomization = '0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM';
	var maxTries = settings.maxTries || 10;

	function tryRandomID(length,tryCount) {
		var str = '';
		tryCount = tryCount || 1;
		if (tryCount > maxTries) 
			return settings.error('could not create clone. Tries ' + maxTries + ' times to create a random id');

		for(var i=0;i<length;i++) {
			var rnd = Math.floor(Math.random() * charsForRandomization.length);
			str += charsForRandomization.charAt(rnd);
		}

		jBart.db.get({
			server: settings.server,
			success: function() {
				tryRandomID(length+1,tryCount+1);
			},
			error: function() {
				saveClone(str);
			}
		});
	}

	function saveClone(newid) {
		newnode.setAttribute('id',newid);
		jBart.db.save({
			server: settings.server,
			data: newnode,
			error: function(e) { 
				settings.error(e);
			},
			success: function() {
				settings.success(newnode);
			}
		});
	}

	settings.error = settings.error || function() {};
	settings.server = aa_jbartdb_getServer(settings);
	settings.cloneMethod = settings.cloneMethod || 'random number';

	if (! settings.data || settings.data.nodeType != 1 || !settings.data.getAttribute('id') || !settings.data.getAttribute('_type') ) {
		return settings.error('settings.data should be an xml of the format: <item id="xx" _type="myType" myatt="..."><myElem>..</myElem></item>');
	}
	newnode = settings.data.cloneNode(true);

	if (settings.useCounter) {
	} else {
		tryRandomID(settings.randomNumberFirstLength || 3);		
	} 
};
jBart.db.syncServerTime = function(settings) {
	settings = aa_defaults(settings,{
		success: function() {},
		error: function() {},
		doNotSyncTwice: true
	});

	settings.server = aa_jbartdb_getServer(settings);

	if (settings.doNotSyncTwice && window.jbServerTimeDiff) return settings.success();

	window.jbServerTimeDiff = 0;
	if (ajaxart.jbart_studio) return settings.success();
	
	var now = new Date().getTime();

	var url = settings.server+'/jbart_db.js?op=now';

  var ajaxSettings = { 
	  	url: url,
	  	cache: false,
	  	success: function(result) {
				var now2 = new Date().getTime();
				var clientTime = parseInt((now2 + now)/2); // heuristic
				if (window.console)
					console.log('synching server time. client diff time for server call ' + (now2-now));

				result = aa_parsexml(result);
				if (result.nodeType == 1) {
					var serverTime = result.getAttribute('now');
					if (serverTime && parseInt(serverTime)) {
						window.jbServerTimeDiff = serverTime - now;
						if (window.console)
							console.log('server time diff=' + window.jbServerTimeDiff);
					}
				}
				settings.success(window.jbServerTimeDiff);
			},
			error: function(er) { 
				settings.error({message:er, url:url}); 
			}
  };
	aa_crossdomain_call(ajaxSettings, true);	
}

function aa_get_client_location(tries) {
	tries = tries || 1;
	if (tries && tries > 5) return;

	if (!jBart.clientIP) {
		if (window.wix_instance_data && wix_instance_data.ipAndPort) {
			jBart.clientIP = wix_instance_data.ipAndPort.split('/')[0];
			return aa_get_client_location();
		}

		window.jbGetIPCB = function(ipjson) {			
			if (window.sessionStorage) sessionStorage.jbClientIP = ipjson.ip;
			jBart.clientIP = ipjson.ip;
			aa_get_client_location();
		};
		if (window.sessionStorage && sessionStorage.jbClientIP) {
			jBart.clientIP = sessionStorage.jbClientIP;
		} else {
			$.getScript('http://jsonip.appspot.com/?callback=jbGetIPCB');

			setTimeout(function() {
				if (!jBart.clientIP) aa_get_client_location(tries+1);
			},1000);			
			return;
		}
	}

	if (jBart.clientLocation) return;
	try {
		if (window.sessionStorage && sessionStorage.jbClientLocation) {
			jBart.clientLocation = JSON.parse(sessionStorage.jbClientLocation);
		} else {
			window.jbClientLocationCB = function(resultStr) {
				if (window.sessionStorage) sessionStorage.jbClientLocation = resultStr;
				jBart.clientLocation = JSON.parse(resultStr);
			};
			$.getScript('//jbartdb.appspot.com/jbart_db.js?op=proxy&url=http://freegeoip.net/json/'+jBart.clientIP+'&callback=jbClientLocationCB');
		}
	} catch(e) {
		ajaxart.logException(e,'get client location failed');
	}
}

function aa_jbartdb_isSameDomain(serverName) {
	var host = (serverName.indexOf('//') == -1) ? serverName : serverName.split('//')[1];
	if ( window.location.hostname == host ) return true;
	return false;
}

function aa_proxyGetCall(settings) {
	var deferred = $.Deferred();

	settings = aa_defaults(settings,{
		baseUrl: '//jbartdb.appspot.com/jbart_db.js?op=proxy'
	});
	window.jbJBartDBCallbackCounter = window.jbJBartDBCallbackCounter || 0;
	
	var callback = 'jbartdb_' + (++jbJBartDBCallbackCounter);
	window[callback] = function(result) {
		delete window[callback];
		deferred.resolve(result);
	};

	var url = settings.url;
	if (url.indexOf('http') != 0) {
		url = window.location.protocol + url;
	}
	$.getScript(settings.baseUrl + '&callback=' + callback + '&url=' + encodeURIComponent(url)).fail(deferred.reject);

	return deferred.promise();
}


aa_gcs("mobile", {
	IsMobilePhone: function (profile,data,context) {
	  var visualCntr = aa_findVisualContainer(null,context);
	  var width = visualCntr.width;
	  if (window.orientation == 90 || window.orientation == -90)
	  	width = visualCntr.height;

	  if (width < 600) return ["true"];
	},
	WidthOfMobilePhone: function (profile,data,context) {
		var visualCntr = aa_findVisualContainer(aa_var_first(context,'ControlElement'),context);
		return aa_frombool(visualCntr.width <= 350);
	},
	MobileDefaultFeatures: function (profile,data,context) 
	{
		if (aa_bool(data,profile,'DisableScaling',context)) {
		  var metatag =document.createElement("meta");
		  metatag.setAttribute("name", "viewport");
		  metatag.setAttribute("content", "initial-scale=1,maximum-scale=1,user-scalable=no");
		  document.getElementsByTagName("head")[0].appendChild(metatag);
		}
		if (aa_bool(data,profile,'AutoHideAddressBar',context)) {
			function hide_address_bar() {
				document.body.style.height = "2000px";	// The max height for all devices
				function restore() {
					setTimeout( function() { 	// Use timeout because in some Androids the onscroll is called before the address bar hides
						window.removeEventListener("scroll", restore);
						jQuery("body").find(".aa_window_resize_listener").each(function(i,elem) { jBart.trigger(elem,'WindowResize'); });
						document.body.style.height = "100%";
					},1);
				}
				window.addEventListener("scroll", restore);
				window.scrollTo(0, 1);
			}
			hide_address_bar();

			window.addEventListener("orientationchange", function() {
				if (window.scrollY <= 2)	// new size may be smaller, and address bar will aprear again
					hide_address_bar();
			});
		}
		if (aa_bool(data,profile,'DisableTextAdjustionOnOrientation',context)) {
			jQuery('body').css("-webkit-text-size-adjust","none");
		}
		if (aa_bool(data,profile,'EliminateMarginsFromHtmlBody',context))
			jQuery('body').css('margin','0').css('padding','0');
		return [];
	},
	MobileBottomPosition: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx) {
			var elem = cell.firstChild;
			aa_addOnAttach(elem, function() {
//				if (false) {
				if (ajaxart.isiPhone && !navigator.userAgent.match(/OS 5(_\d)+ like Mac OS X/i)) {	// iphone <5 dosent have position:fixed
					var elem_height = elem.offsetHeight;
					var fix_top = function(height) { elem.style.top = window.innerHeight + window.scrollY - elem_height + "px"; };
					elem.jbFixTop = fix_top;
					fix_top(elem_height);
					jQuery(elem).addClass(aa_attach_global_css(aa_text(data,profile,'PositionAbsoluteCss',context)));
					jQuery(elem).show();
					jQuery(document).bind('scroll', function() { fix_top(elem.offsetHeight) } );
				    window.addEventListener("resize", function() { fix_top(elem.offsetHeight) }, false);
				} else if (jQuery('.studio_simulator').length > 0 && jQuery('.studio_simulator')[0].className.indexOf(' ') > -1) {	// in studio, use simulator window height
					var simulator = jQuery('.studio_simulator')[0];
					var elem_height = elem.offsetHeight;
					jQuery(elem).hide();
					var fix_top = function(height) { elem.style.top = simulator.clientHeight + simulator.scrollTop - elem_height + "px"; };
					fix_top(elem_height);
					jQuery(elem).addClass(aa_attach_global_css(aa_text(data,profile,'PositionAbsoluteCss',context)));
					jQuery(elem).show();
					jQuery('.studio_simulator').bind('scroll', function() { fix_top(elem.offsetHeight) } );
				} else {	// Android and other supporting position fixed browsers
					jQuery(elem).addClass(aa_attach_global_css(aa_text(data,profile,'PositionFixedCss',context)));
				}
				jQuery(cell).append(jQuery("<div class='aa_mobile_bottom_padding'/>").css("height", elem.offsetHeight + "px"));	// keep space in bottom for not hiding anything
			});
		});
	},
	MobileTopPosition:function (profile,data,context)
	{
		var field = context.vars._Field[0];
		aa_field_handler(field,'ModifyControl',function(cell,field_data,cell_presentation,ctx) {
			var elem = cell.firstChild;
			aa_addOnAttach(elem, function() {
				if (ajaxart.isiPhone && navigator.userAgent.match(/OS 4(_\d)+/i) || navigator.userAgent.match(/OS 3(_\d)+/i)) {	// iphone <5 dosent have position:fixed
					if (!aa_bool(data,profile,'UseAbsoluteWhenNoPositionFixed')) return;
					var fix_top = function() { elem.style.top = window.scrollY + "px"; };
					elem.jbFixTop = fix_top;
					fix_top();
					jQuery(elem).addClass(aa_attach_global_css(aa_text(data,profile,'PositionAbsoluteCss',context)));
					jQuery(elem).show();
					jQuery(document).bind('scroll', fix_top );
				    window.addEventListener("resize", fix_top, false);
				} else if (jQuery('.studio_simulator').length > 0 && jQuery('.studio_simulator')[0].className.indexOf(' ') > -1) {	// in studio, use simulator window height
					var simulator = jQuery('.studio_simulator')[0];
					jQuery(elem).hide();
					var fix_top = function() { elem.style.top = simulator.scrollTop + "px"; };
					fix_top();
					jQuery(elem).addClass(aa_attach_global_css(aa_text(data,profile,'SimulatorCss',context)));
					jQuery(elem).show();
					jQuery('.studio_simulator').bind('scroll', fix_top );
				} else {	// Devices that sopports position fixed, like Android and iPhone 5 and above
					jQuery(elem).addClass(aa_attach_global_css(aa_text(data,profile,'PositionFixedCss',context)));
					if (ajaxart.isIDevice) {	// iphone 5 BUG, when keyboard is open, it stucks as an absolute position
						setTimeout(function() {
							jQuery("input,textarea").focus(function() { elem.style.position = 'absolute'; })
								.blur(function() { elem.style.position = 'fixed'; }); }
						, 1000);
					}
				}
				jQuery(elem).addClass('aa_mobile_top_position');
				jQuery(cell).find('.aa_mobile_top_padding').remove();	// cleans previous calls
				jQuery(cell).append(jQuery("<div class='aa_mobile_top_padding'/>").css("height", elem.offsetHeight + "px"));	// keep space in bottom for not hiding anything
			});
		});
	},
	SimpleMobileVerticalScroll:function (profile,data,context)
	{
		return [{ 
			isObject: true,
			Prepare: function(data1,ctx) {
				var wrapper = jQuery("<DIV/>").addClass("aa_mobile_scroll_wrapper")[0];
				var elem = ctx.vars.ControlElement[0];
				elem.ScrollElement = wrapper;
		        elem.parentNode.appendChild(wrapper);
				wrapper.appendChild(elem);
				wrapper.jbScrolledElem = elem;
				jQuery(wrapper).css('overflow','hidden'); 
			},
			Activate : function(data1,ctx) {
				var wrapper = ctx.vars.ControlElement[0];
				var elem = wrapper.jbScrolledElem;
				elem.scrollPos = 0;	// starting with no scroll
				elem.maxOffset = 0; // used to fix virtual keyboard issue
				elem.MaxHeight = wrapper.offsetHeight;
				var scrollPosInRange = function(pos) {
					return Math.min(Math.max(pos,elem.MaxHeight-elem.offsetHeight),elem.maxOffset);
				}
				var ondown = function(e) {
					elem.start = {
					  // get touch coordinates for delta calculations in onTouchMove
					  pageX: e.touches ? e.touches[0].pageX : e.pageX,
					  pageY: e.touches ? e.touches[0].pageY : e.pageY,
					  // set initial timestamp of touch sequence
					  time: Number( new Date() )
					};
					elem.isVScrolling = undefined;
					elem.deltaX = elem.deltaY = elem.startScrollPos = elem.scrollPos;
					elem.style.MozTransitionDuration = elem.style.webkitTransitionDuration = 0;
					if (!ajaxart.isTouch)
						ajaxart_disableSelection(elem);
				};
				var onmove = function(e) {
				  var pageX = e.touches ? e.touches[0].pageX : e.pageX;
				  var pageY = e.touches ? e.touches[0].pageY : e.pageY;
				  if (!elem.start) return;
				  elem.deltaX = pageX - elem.start.pageX;
				  elem.deltaY = pageY - elem.start.pageY;
	
				  // determine if scrolling test has run - one time test
				  if ( typeof elem.isVScrolling == 'undefined') {
				 	elem.isVScrolling = !!( elem.isVScrolling || Math.abs(elem.deltaX) < Math.abs(pageY - elem.start.pageY) );
				  }
				  e.preventDefault();
				  // if user is trying to scroll vertically
				  if (elem.isVScrolling) {
						// translate immediately 1-to-1
						elem.scrollPos = scrollPosInRange(elem.startScrollPos + elem.deltaY);
						if (elem.scrollPos != elem.startScrollPos + elem.deltaY) {	// out of rance: resistance
							var not_allowed_diff = elem.startScrollPos + elem.deltaY - elem.scrollPos;
							elem.scrollPos += not_allowed_diff / ( (Math.abs(not_allowed_diff)/elem.MaxHeight) + 1 )
						}
						elem.style.MozTransform = elem.style.webkitTransform = 'translate3d(0,' + elem.scrollPos + 'px,0)';
					}
				};
				var onup = function(e) {
				  if (!elem.start) return;
					// determine if slide attempt triggers next/prev slide
					var duration = Number(new Date()) - elem.start.time;
					if (duration < 300 || elem.scrollPos != scrollPosInRange(elem.scrollPos) ) {	// use speed or go back after resistance
						var deceleration = 0.0006;
						var speed = Math.abs(elem.deltaY) / duration;
						var dist = (speed * speed) / (2 * deceleration);
						var add = dist * ((elem.deltaY > 0) ? 1 : -1);
						elem.scrollPos = scrollPosInRange(elem.scrollPos + add);
						var style = elem.style;
						// set duration speed (0 represents 1-to-1 scrolling)
						style.webkitTransitionDuration = style.MozTransitionDuration = style.msTransitionDuration = style.OTransitionDuration = style.transitionDuration = 500 + 'ms';
						// translate to given index position
						style.MozTransform = style.webkitTransform = 'translate3d(0,' + elem.scrollPos + 'px,0)';
					}
				  elem.start = null;
				  if (!ajaxart.isTouch)
					  ajaxart_restoreSelection(elem);
				}
				if (ajaxart.isTouchDevice()) {
					wrapper.ontouchmove = onmove;
					wrapper.ontouchend = onup;
					wrapper.ontouchstart = ondown;
				} else {
					jQuery(wrapper).mousemove(onmove).mouseup(onup).mousedown(ondown);
				}
				elem.FixKeyboard = function() {
					if (aa_absTop(wrapper) < window.scrollY) {	// top is not visible, we fix it
						var offset = window.scrollY - aa_absTop(wrapper,true);
						if (elem.maxOffset != offset) {
							elem.maxOffset = offset;
							elem.scrollPos = scrollPosInRange(elem.scrollPos);// + elem.maxOffset);
							elem.style.webkitTransitionDuration = '150ms';
							elem.style.webkitTransform = 'translate3d(0,' + elem.scrollPos + 'px,0)';
						}
					} else if (elem.maxOffset) {	// go back to normal
						var offset = elem.maxOffset;
						elem.maxOffset = 0;
						elem.scrollPos = scrollPosInRange(elem.scrollPos - offset);
						elem.style.webkitTransitionDuration = '150ms';
						elem.style.webkitTransform = 'translate3d(0,' + elem.scrollPos + 'px,0)';
					}
				}
				if (ajaxart.isIDevice)
					jQuery("input,textarea").focus(function() { setTimeout(function() { elem.FixKeyboard(); },1)}).blur(elem.FixKeyboard);
				else
					window.addEventListener("resize", function(){ elem.FixKeyboard(); });
				this.SizeChanged = function() {
					elem.MaxHeight = wrapper.offsetHeight;
					if (elem.scrollPos != scrollPosInRange(elem.scrollPos)) {
						elem.scrollPos = scrollPosInRange(elem.scrollPos);
						elem.style.webkitTransform = 'translate3d(0,' + elem.scrollPos + 'px,0)';
					}
				}
				this.ScrollToTop = function(duration) {
					if (elem.scrollPos != scrollPosInRange(elem.maxOffset)) {
						elem.scrollPos = scrollPosInRange(elem.maxOffset);
						elem.style.webkitTransitionDuration = duration ? duration : '150ms';
						elem.style.webkitTransform = 'translate3d(0,' + elem.scrollPos + 'px,0)';
					}					
				}
				this.ScrollToBottom = function(duration) {
					if (elem.scrollPos != scrollPosInRange(-elem.offsetHeight)) {
						elem.scrollPos = scrollPosInRange(-elem.offsetHeight);
						elem.style.webkitTransitionDuration = duration ? duration : '150ms';
						elem.style.webkitTransform = 'translate3d(0,' + elem.scrollPos + 'px,0)';
					}					
				}
			}
		}];
	},
	HorizontalCurtain: function(profile,data,context) {
		var field = { isObject : true };
		field.Id = aa_text(data,profile,'ID',context);
		field.ID = [field.Id];
		field.FieldData = function(data1) { return data1; }
		field.CellPresentation = ["control"];
		field.HideTitle = true;
		field.Control = function(field_data,ctx) {
			var curtain = jQuery("<DIV class='aa_curtain'/>")[0];
			curtain.style.cssText = 'position:' + (aa_has_simulator() ? 'absolute' : 'fixed') + '; background:transparent; z-index:1; top:0px; left:0px';
			var page = ajaxart.runNativeHelper(field_data,profile,'Page',context)[0];
			jQuery(curtain).append(page)
				.append(aa_renderStyleObject(aa_first(data,profile,'HandlersStyle',context),{},ctx));
			curtain.open = aa_bool(data,profile,'StartAsOpen',context);
			var on_width_change = function() {
				curtain.width = aa_screen_size(true).width;
				curtain.style.webkitTransform = 'translate3d(' + -(curtain.open ? 0 : curtain.width) + 'px,0,0)';
			}
			on_width_change();
			window.addEventListener("resize", on_width_change);
			var ondown = function(e) {
				curtain.start = {
				  // get touch coordinates for delta calculations in onTouchMove
				  pageX: e.touches ? e.touches[0].pageX : e.pageX,
				  pageY: e.touches ? e.touches[0].pageY : e.pageY,
				  // set initial timestamp of touch sequence
				  time: Number( new Date() )
				};
				curtain.isVScrolling = undefined;
				curtain.deltaX = curtain.deltaY = 0;
				curtain.style.MozTransitionDuration = curtain.style.webkitTransitionDuration = 0;
			}
			var onmove = function(e) {
			  if (!curtain.start) return;
			  var pageX = e.touches ? e.touches[0].pageX : e.pageX;
			  var pageY = e.touches ? e.touches[0].pageY : e.pageY;
			  curtain.deltaX = pageX - curtain.start.pageX;
				if ( typeof curtain.isVScrolling == 'undefined') {
				  curtain.isVScrolling = !!( curtain.isVScrolling || Math.abs(curtain.deltaX) < Math.abs(pageY - curtain.start.pageY) );
				}
				if (curtain.isVScrolling) {
					curtain.start = null;
					return;
				}
				  // prevent native scrolling 
				e.preventDefault();

				if (curtain.open && curtain.deltaX > 0)	// cannot slide leftwards to curtain
					curtain.deltaX = 0;
//				if ((curtain.open && curtain.deltaX > 0 || !curtain.open && curtain.deltaX < 0))	// resistance
//			      curtain.deltaX = curtain.deltaX / ( Math.abs(curtain.deltaX) / curtain.width + 1 );

				curtain.style.MozTransform = curtain.style.webkitTransform = 'translate3d(' + (curtain.deltaX - (curtain.open ? 0 :curtain.width)) + 'px,0,0)';
			};
			var onup = function(e) {
			  	if (e.ctrlKey) { // simulate slide with mouse
			  		curtain.Move(true);
			  		return;
			  	}
			  	if (!curtain.start) return;
				// determine if slide attempt triggers next/prev slide
				var isValidSlide = 
					  ((Number(new Date()) - curtain.start.time < 250      // if slide duration is less than 250ms
					  && Math.abs(curtain.deltaX) > 20                   // and if slide amt is greater than 20px
					  || Math.abs(curtain.deltaX) > curtain.width/2)        // or if slide amt is greater than half the width
						&& ((curtain.deltaX > 0 && !curtain.open) || (curtain.deltaX<0  && curtain.open)));

				curtain.Move(isValidSlide);
			}
			curtain.start = null;
			if (ajaxart.isTouch) {
				document.body.ontouchmove = onmove;
				document.body.ontouchend = onup;
				document.body.ontouchstart = ondown;
			} else {	// simulator
				jQuery(aa_body()).unbind("mousemove").unbind("mouseup").unbind("mousedown").mousemove(onmove).mouseup(onup).mousedown(ondown);
			}
			curtain.Move = function(slide) {
				if (slide) {			// openning/closing curtain
					curtain.open = !curtain.open;
					var onTransitionEnd = function() {
						ajaxart.run(data,profile,curtain.open ? 'OnOpen' : 'OnClose',context);
						curtain.removeEventListener('webkitTransitionEnd', onTransitionEnd);
						curtain.removeEventListener('transitionend', onTransitionEnd);
					}
					curtain.addEventListener('webkitTransitionEnd', onTransitionEnd);
					curtain.addEventListener('transitionend', onTransitionEnd);
				}
				var style = curtain.style;
				style.webkitTransitionDuration = style.MozTransitionDuration = style.msTransitionDuration = style.OTransitionDuration = style.transitionDuration = 300 + 'ms';
				style.MozTransform = style.webkitTransform = style.transform = 'translate3d(' + -(curtain.open ? 0 : curtain.width) + 'px,0,0)';
				curtain.start = null;
			}
/*			if (aa_bool(data,profile,'AutoMoveWithVerticalScroll',context))
				jQuery(aa_has_simulator() ? aa_body() : document).bind('scroll', function() { 
					curtain.style.top = aa_window_scroll().Y + "px"; } );
*/
			return [curtain];
		};
	    return [field];		
	},
	IsMobileCurtainOpen: function(profile,data,context)
	{
		var out = [];
		jQuery(aad_find_field(aa_text(data,profile,'CurtainId',context),'aa_curtain')).each(function(index,curtain) {
			if (curtain.open) out = ["true"];
		});
		return out;
	},
	SlideMobileCurtain: function(profile,data,context)
	{
		var slide_to = aa_text(data,profile,'SlideTo',context);

		jQuery(aad_find_field(aa_text(data,profile,'CurtainId',context),'aa_curtain')).each(function(index,curtain) {
			if (curtain.Move)
				if (slide_to == 'toggle' || curtain.open && slide_to == 'close' || !curtain.open && slide_to == 'open')
						curtain.Move(true);
		});
		return [];
	},
	MobileDetailsReplacingAll: function(profile,data,context)
	{
		var cntr = context.vars._Cntr[0]; 
		var control = context.vars.DetailsControl;
		if (control == null || control.length == 0) return [];

		var details_background = aa_text(data,profile,'DetailsBackground',context);
		var details_control = jQuery(control).appendTo("<DIV/>").parent().appendTo("<DIV/>").parent().appendTo("<DIV class='aa_mobile_replacing_all'/>").parent()[0];
		// DIV1: android fix position:fixed cannot work with transform
		// DIV2: animation and scroll fix may colllide
		// details_control.style.cssText = 'position:' + (aa_has_simulator() ? 'absolute' : 'fixed') + '; z-index:1; top:0px; left:0px;';
		details_control.style.cssText = 'position:absolute; z-index:1; top:0px; left:0px;';
		details_control.firstChild.style.cssText = 'background:' + details_background + ";display: inline-block;";
		details_control.firstChild.style.minWidth = aa_screen_size(true).width + "px";
		details_control.firstChild.style.minHeight = Math.max(aa_screen_size(true).height + 70, aa_document_height()) + "px";	// 50: http://stackoverflow.com/questions/9678194/cross-platform-method-for-removing-the-address-bar-in-a-mobile-web-app
		var original_scroll = aa_window_scroll().Y;
		var animation = aa_first(data,profile,'DetailsAnimation',context);
		var original_control = cntr.Ctrl;
		// cntr.Ctrl.parentNode.style.position = 'relative';
		cntr.Ctrl.parentNode.appendChild(details_control);
		animation.animate(details_control, function() {
			setTimeout(function() {
				if (original_scroll > 1)	// scroll to top
					jQuery(aa_body()).animate({ scrollTop: navigator.userAgent.toLowerCase().match(/android/) ? 1 : 0 }, 200 );
			},1);
//			document.body.style.minHeight = aa_screen_size(true).height + 70 + "px";
//			aa_window_scroll_to(0,1);
//			jQuery(original_control).hide();
			cntr.Ctrl = details_control;
//			details_control.style.cssText = 'position:none; z-index:0; top:0px;';
//			document.body.style.minHeight = "none";
//			if (cntr.AfterDetailsReplacingAll) {
//				cntr.AfterDetailsReplacingAll();
				// document size may have changed (when canceling search)
//				details_control.firstChild.style.minHeight = Math.max(aa_screen_size(true).height + 70, aa_document_height()) + "px";	// 50: http://stackoverflow.com/questions/9678194/cross-platform-method-for-removing-the-address-bar-in-a-mobile-web-app
//			}
		});

		context.vars._ItemDetailsObject[0].HideDetails = function(data2,ctx2) {
			var list_animation = aa_first(data,profile,'ListAnimation',context);
			list_animation.hide(details_control, function() {
				aa_remove(details_control);
//				jQuery(aa_body()).animate({ scrollTop: original_control }, 500 );
				cntr.Ctrl = original_control;
			});
		};
		context.vars._ItemDetailsObject[0].HideDetails1 = function(data2,ctx2) {
			var list_animation = aa_first(data,profile,'ListAnimation',context);
			var list_background = aa_text(data,profile,'ListBackground',context);
			cntr.Ctrl.parentNode.removeChild(original_control);
			var original_control_wrapped = jQuery(original_control).appendTo("<DIV/>").parent().appendTo("<DIV/>").parent().appendTo("<DIV class='aa_mobile_original_control'/>").parent()[0];
			cntr.Ctrl.parentNode.appendChild(original_control_wrapped);
			original_control_wrapped.style.cssText = 'position:' + (aa_has_simulator() ? 'absolute' : 'fixed') +  ';z-index:1; top:0px; left:0px; ';
			original_control_wrapped.firstChild.style.cssText = 'background:' + list_background + ";display: inline-block;";
			original_control_wrapped.firstChild.style.width = aa_screen_size(true).width + "px";
			original_control_wrapped.firstChild.style.minHeight = aa_screen_size(true).height + "px";	// 50: http://stackoverflow.com/questions/9678194/cross-platform-method-for-removing-the-address-bar-in-a-mobile-web-app
			if (aa_has_simulator()) original_control_wrapped.style.top = aa_window_scroll().Y + "px";	//simulator scroll fix
			// scroll fix
			jQuery(original_control_wrapped.firstChild.firstChild).css("-webkit-transform",'translateY(-' + original_scroll + 'px)').css("transform",'translateY(-' + original_scroll + 'px)');
			jQuery(original_control).show();
			list_animation.animate(original_control_wrapped.firstChild,function() {
				aa_window_scroll_to(0,original_scroll);
				jQuery(original_control_wrapped.firstChild.firstChild).css("-webkit-transform",'none').css("transform",'none');
				original_control.style.cssText = 'z-index:1';
				cntr.Ctrl.parentNode.appendChild(original_control);
				cntr.Ctrl.parentNode.removeChild(original_control_wrapped);
				original_control.style.cssText = 'z-index:none';
				aa_remove(details_control);
				cntr.Ctrl = original_control;
			});
		}
		return [];
	}
});
function aa_has_simulator(elem) {
	if (!elem)
		return (ajaxart.jbart_studio && jQuery('.studio_simulator').length > 0 && jQuery('.studio_simulator')[0].className.indexOf(' ') > -1);
	else // studio shuld be parent of elem
		return (ajaxart.jbart_studio && jQuery(elem).parents('.studio_simulator').length > 0 && jQuery(elem).parents('.studio_simulator')[0].className.indexOf(' ') > -1);

}
function aa_window_scroll() {
	if (aa_has_simulator())
		return { Y:jQuery('.studio_simulator')[0].scrollTop, X:jQuery('.studio_simulator')[0].scrollLeft};
	else
		return { Y:window.scrollY, X:window.scrollX };
}
function aa_window_scroll_to(x,y) {
	if (aa_has_simulator())
		jQuery('.studio_simulator').scrollTop(y).scrollLeft(x);
	else
		window.scrollTo(x,y);
}
function aa_document_height() {
	if (aa_has_simulator())
		return jQuery('.studio_simulator').children().height();
	else return Math.max(
        jQuery(document).height(),
        jQuery(window).height(),
        /* For opera: */
        document.documentElement.clientHeight);
}

function aa_mobile_slide_transition(settings,slideToLeft,time) {
	settings = aa_defaults(settings, { scrollDuration: 200 });
	var transition = settings.transition;
	var directionClass = settings.direction == 'From Right' ? "slide_from_right" : "slide_from_left";
	// var device_width = aa_screen_width(transition.context);
	// var margin = slideToLeft ? device_width : -device_width;

	aa_body().scrollTop = navigator.userAgent.toLowerCase().match(/android/) ? 1 : 0;
	transition.$elNew.addClass("aa_new");
	// aa_alert('adding aa_new to son of ' + cssClass);
  	var cssClass = aa_attach_global_css(transition.css);
	transition.$elOriginal.parent().addClass(cssClass).addClass(directionClass);
	transition.elOriginal.parentNode.appendChild(transition.elNew);
  	aa_element_attached(transition.elNew);  	
	transition.onBeforeTransitionBegin();

	var _transitionEndEvents = "animationend animationend webkitAnimationEnd oanimationend MSAnimationEnd";
	transition.$elNew.on( _transitionEndEvents, onTransitionEnd );

	function onTransitionEnd() {
		// aa_alert('removing aa_new from son of ' + cssClass);
		transition.$elOriginal.parent().removeClass(cssClass).removeClass(directionClass);;
	    transition.removeOriginal(transition.elOriginal);
	    transition.$elNew.removeClass('aa_new');
		transition.onTransitionEnd();
	}
}



aa_gcs("fld_type",{
  MultiplePicklist: function (profile,data,context)
  {
    var field = context.vars._Field[0];
  
    field.RefreshOptions = function(data1,ctx) {
      field.Options = ajaxart.run(data1,profile,'Options',aa_ctx(context,ctx));
    };
    field.RefreshOptions(data,context);
    field.Style = aa_first(data,profile,'Style',context);
    field.AllowValueNotInOptions = aa_bool(data,profile,'AllowValueNotInOptions',context);
    
    field.Control = function(field_data,ctx) {
      ctx = aa_merge_ctx(context,ctx);
      var mpicklist = aa_initMultiPicklistObject(field,field_data,ctx);
      var out = [aa_renderStyleObject2(field.Style,mpicklist,field_data,field,ctx)];  
      return out;
    };
  }
});

function aa_multi_picklist(mpicklist,settings) {
  settings = aa_defaults(settings,{
    baseElement: mpicklist.$el.firstOfClass('aa_mpicklist_div'),
    itemElement: mpicklist.$el.firstOfClass('aa_mpicklist_item'),
    searchElement: mpicklist.$el.firstOfClass('aa_mpicklist_search'),
    maxItemsToShow: 50,
    popupElement: mpicklist.$el.firstOfClass('aa_mpicklist_popup'),
    popupItemElement: mpicklist.$el.firstOfClass('aa_picklist_item'),
    popupItemSettings: function(itemElement) {
      return {
        itemTextElement: $(itemElement).firstOfClass('aa_picklist_item_text'),
        itemImageElement: $(itemElement).firstOfClass('aa_picklist_item_image')
      };
    },
    itemInnerElements: function(item) {
      return {
        itemTextElement: $(item).firstOfClass('aa_mpicklist_item_text'),
        itemCloseElement: $(item).firstOfClass('aa_mpicklist_item_del')
      }
    } 
  });
  settings.search = settings.search || aa_searchbox_search; // for Compress: aa_searchbox_search()

  var $popupItemParent = $(settings.popupItemElement).parent();
  var $popupItemTemplate = $(settings.popupItemElement).remove();
  var disableSelectionOnHover = false;
  var itemsParent = $(settings.itemElement)[0].parentNode;
  $(settings.itemElement).remove();
  var $input = $(settings.searchElement);
  var searchValue = '';

  initPopup();
  bindInputEvents();
  aa_addOnAttach($input[0],function() { fixInputSize(); });

  refreshPicklistBase();
  dragNDrop();

  function refreshPicklistBase() {
    aa_empty(itemsParent,true);
    var values = mpicklist.getValues();
    for(var i=0;i<values.length;i++) {
       var option = aa_picklist_optionByCode(mpicklist.field.Options,values[i]) || { code: values[i], text: values[i] };
       
       var itemElement = $(settings.itemElement)[0].cloneNode(true);
       itemElement.jbOption = option;
       
       var innerElements = settings.itemInnerElements(itemElement);
       $(innerElements.itemTextElement).html(option.text);
       $(innerElements.itemCloseElement)[0].jbItemElement = itemElement;
       $(innerElements.itemCloseElement).click(function() {
         mpicklist.removeValue(this.jbItemElement.jbOption.code);
         
         aa_remove(this.jbItemElement,true);
         fixInputSize();
       });
       itemsParent.appendChild(itemElement);
    }
    if (ajaxart.isattached($input[0])) fixInputSize();
  }

  function findLastElement() {
    var nodes = itemsParent.childNodes;
    return nodes[nodes.length-1];
  }
  function fixInputSize() {
    setTimeout(function() {
      var totalWidth = $(settings.baseElement).width();
      var lastElement = findLastElement();

      var left =0;
      if (lastElement) 
          left = aa_absLeft(lastElement) + $(lastElement).outerWidth() - aa_absLeft($(settings.baseElement)[0]);

      var newWidth = totalWidth - left;

      if (settings.rtl && lastElement) 
        newWidth = aa_absLeft(lastElement) - aa_absLeft($(settings.baseElement)[0]) - 5;
      
      
      if (newWidth < 10) newWidth = totalWidth;
      $input.width(newWidth-8);
    },ajaxart.isIE ? 300 : 0);
  }

  function initPopup() {
    mpicklist.selectorPopup = aa_createLightPopup({
      el: $(settings.popupElement)[0],
      launchingElement: $(settings.baseElement)[0],
      location:  aa_popupNearLauncherLocation({ minWidthOfLaunchingElement: true }),
      features: [
        aa_popup_feature_closeOnEsc()
      ],
      apiObject: mpicklist,
      type: 'mpicklist',
      popupSettings: {
        closeWhenClickingOutside: 'except launching element',
        reusablePopup: true
      }
    });

    if (aa_isStudioRefreshAndPopupIsOpen('mpicklist',mpicklist)) {
      setTimeout(openPopup,100);
    }

    $(settings.popupNoResultsElement).text(mpicklist.field.TextForNoResults || 'No results match your search');
    $(settings.popupShowAllElement).text(mpicklist.field.TextForShowAll || 'Show All');
  } 

  function syncPopup() {
    if (mpicklist.selectorPopup.isOpen)
      refreshPopupOptions();
    else
      openPopup();
  }

  function openPopup() {
    if (mpicklist.field.OnOpenPopup) {
      mpicklist.field.OnOpenPopup(mpicklist.field_data,mpicklist.context);
    }
    if (mpicklist.field.CustomPopupContents) {
      showPicklistCustomContents();
    } else {
      refreshPopupOptions();
    }
    mpicklist.selectorPopup.show();
  }

  function showPicklistCustomContents() {
    var obj = {
      SelectAndClose: function(data1) {
        var code = aa_totext(data1);
        mpicklist.selectorPopup.close();
        mpicklist.setValue(code);
        refreshPicklistBase();
      }
    };
    aa_empty(mpicklist.selectorPopup.el.firstChild);
    aa_fieldControl({ 
      Field: mpicklist.field.CustomPopupContents, 
      Wrapper: mpicklist.selectorPopup.el.firstChild,
      FieldData: [],
      Context: aa_ctx(mpicklist.context,{ _Picklist: [obj]})
    });
  }
  function bindInputEvents() {
    $input.click(function() {
      if (!ajaxart.isattached(mpicklist.selectorPopup.el)) {
        searchValue = $input.val();
        openPopup();
      } else
        mpicklist.selectorPopup.close();
    });
    $input.focus(function() {
      mpicklist.$el.addClass('aa_focus');
    });
    $input.blur(function() {
      mpicklist.$el.removeClass('aa_focus');
    });
    $input.keydown(function(e) {
      this.jbValueForKeyDown = $(this).val();
      if (e.keyCode == 27 && mpicklist.selectorPopup)  // esc
        mpicklist.selectorPopup.close();
      
      if (e.keyCode == 13) {
        var selected = $popupItemParent.find('>.selected')[0];
        if (selected) {
          selectItem(selected);
          return;
        }
      }
      if (e.keyCode == 40) { // arrow down
        var selected = $popupItemParent.find('>.selected')[0];
        if (selected && selected.nextSibling) {
          $(selected).removeClass('selected');
          $(selected.nextSibling).addClass('selected');
          selected.nextSibling.scrollIntoView();
          
          return;
        }
      }
      if (e.keyCode == 38) { // arrow up
        var selected = $popupItemParent.find('>.selected')[0];
        if (selected && selected.previousSibling) {
          $(selected).removeClass('selected');
          $(selected.previousSibling).addClass('selected');
          selected.previousSibling.scrollIntoView();
          return;
        }
      }     
    });

    $input.keyup(function(e) {
      if (this.jbValueForKeyDown == $(this).val()) return;
      if (!ajaxart.isattached(mpicklist.selectorPopup.el)) {
        searchValue = $input.val();
        openPopup();
      }     
      refreshPopupOptions();
    });
  }

  function refreshPopupOptions(showAll) {
    while ($popupItemParent[0].firstChild)
      aa_remove($popupItemParent[0].firstChild,true);

    var items = mpicklist.OptionsLeft();
    settings.search($input.val(),items);

    var added = 0;
  if (mpicklist.field.AllowValueNotInOptions && $input.val()) {
      items = items.concat([{ code: $input.val(), text: $input.val(), passed: true }]);
    }

    if (mpicklist.field && mpicklist.field.SortPicklistOptions) 
      items = mpicklist.field.SortPicklistOptions(items,mpicklist.context,picklist);

    for(var i=0;i<items.length;i++) {
      if (!items[i].passed) continue;
      var $item = $popupItemTemplate.clone().appendTo($popupItemParent);
      $item[0].jbItem = items[i];

      var innerSettings = settings.popupItemSettings($item[0]);
      $(innerSettings.itemTextElement).text(items[i].text);
      highlightText($(innerSettings.itemTextElement),$input.val());

      aa_trigger(mpicklist.field,'picklistRenderOption',{ 
        optionTextEl: $(innerSettings.itemTextElement)[0], 
        context: mpicklist.context, 
        option: items[i], 
        picklist: mpicklist
     });

      var imageObject = aa_create_static_image_object(items[i].image);
      if (imageObject && imageObject.url) {
        imageObject.keepImageProportions = imageObject.fillImage = imageObject.centerImage =  true;
        imageObject.height = settings.imageHeight;
        imageObject.width = settings.imageWidth;        
      }
      aa_setImage($(innerSettings.itemImageElement)[0],imageObject);

      try {
        if (settings.onRenderOption) settings.onRenderOption($item[0],items[i]);
      } catch(e) {
        ajaxart.logException('error calling onRenderOption',e);
      }

      if (added === 0) $item.addClass('selected');
      if (++added >= settings.maxItemsToShow && !showAll) {
        addShowAll();
        break;
      }
    }
    $popupItemParent.children().click(function() {
      if (this == $(settings.popupShowAllElement)[0]) return;

      selectItem(this);
    });
    $popupItemParent.children().mouseover(function() {
        if (this == $(settings.popupShowAllElement)[0] || disableSelectionOnHover) return;

        if ( $(this).hasClass('selected') ) return;
        $popupItemParent.children().removeClass('selected');
        $(this).addClass('selected');
    });
    if (!added) {
      $(settings.popupNoResultsElement).appendTo($popupItemParent);
    }
  }

  function selectItem(itemElement) {
    var code = itemElement.jbItem.code;
    mpicklist.selectorPopup.close();
    mpicklist.addValue(code);
    $input.val('');
    refreshPicklistBase();
  }

  function addShowAll() {
    $(settings.popupShowAllElement).appendTo($popupItemParent);
    $(settings.popupShowAllElement).click(function() {
      var lastItem = this.previousSibling && this.previousSibling.jbItem;
      refreshPopupOptions(true);

      var children = $popupItemParent.children();
      for(var i=0;i<children.length;i++)
        if (children[i].jbItem == lastItem) {
          if (children[i].tabIndex == -1) children[i].tabIndex = 0;
          children[i].focus();
          children[i].tabIndex = -1;
        }
    });
  }

  function highlightText($elem,searchtext) {
    $elem.html( ajaxart_field_highlight_text($elem.text(),searchtext,'.aa_highlight') );
  }

  function makeItemVisible(element,direction) {
    if (!element) return;

    var frame = picklist.selectorPopup.frameElement;
    var top = aa_relTop(element,frame);
    var bottom = top + $(element).outerHeight();
    var scrollY = $(frame).scrollTop();
    var frameHeight = $(frame).height();

    disableSelectionOnHover = true;

    if (direction == 'down') {
      if (bottom > scrollY + frameHeight ) {
        $(frame).scrollTop(bottom-frameHeight);  
      }
    }
    if (direction == 'up') {
      if (top < scrollY) {
        $(frame).scrollTop(top);
      }
    }

    setTimeout(function() {     // to prevent the selection to go to the mouse
      disableSelectionOnHover = false;
    },100);
  }

  function dragNDrop() {
    aa_dragDropItems({
      parent:itemsParent,
      isItemElement: function(elem) { return $(elem).hasClass('aa_mpicklist_item'); },
      moveBefore: function(elem,beforeElem) {
        var code = elem.jbOption.code;
        var beforeCode = beforeElem.jbOption.code;
        mpicklist.removeValue(code,true);
        var values = aa_totext(mpicklist.field_data).split(',');
        var startIndex = values.indexOf(beforeCode);
        if (startIndex<0) startIndex=0;
        values = values.slice(0,startIndex).concat([code]).concat(values.slice(startIndex));

        mpicklist.updateValue(values.join(','));
      },
      moveToEnd: function(elem) {
        var code = elem.jbOption.code;
        mpicklist.removeValue(code,true);
        mpicklist.addValue(code);
      },
      draggedSpaceCssClass: 'draggedItem',
      draggedCssClass: 'draggedItemSpace',
      canStartDrag: function(mouseX,mouseY) {
          return true;
      }     
    });
  }

}


/********************* old **************************/
aa_gcs("multiple_picklist",{
  MultiPicklistBaseArea: function (profile,data,context)
  {
    var field = {
      Id: aa_text(data,profile,'ID',context),
      Title: aa_multilang_text(data,profile,'Title',context),
      Style: aa_first(data,profile,'Style',context),
      MultiPicklistApiObject: aa_first(data,profile,'MultiPicklistApiObject',context)
    };

    field.Control = function(field_data,ctx) {
      var multipicklistBase = aa_initMultiPicklistBaseObject(field,field_data,ctx);
      multipicklistBase.OpenPopup = function() {
        ajaxart.runNativeHelper(data,profile,'OpenPopup',aa_ctx(context,{ _MultiPicklistBase: [multipicklistBase], ControlElement: [this.SearchInput] }));
      }
      multipicklistBase.FilterType = aa_first(data,profile,'SearchFilterType',context);
      
      return [ aa_renderStyleObject(field.Style,multipicklistBase,ctx,true)];
    }
    return [field];
  },
  PicklistSelect: function (profile,data,context)
  {
    var option = aa_first(data,profile,'Option',context);
    var multipicklistBase = context.vars._MultiPicklistBase[0];
    var multiPicklist = multipicklistBase.multiPicklist;
    
    var code = option.code;
    multiPicklist.addValue(code);
    if (multipicklistBase.SearchInput.jbPopup) multipicklistBase.SearchInput.jbPopup.close();

    aa_refresh_cell(multiPicklist.wrapperForStyleByField,context);
  }
});

function aa_initMultiPicklistObject(field,field_data,context)
{
  var multi_picklist = {
    Multiple: true,
    Field: field, FieldData: field_data, data: field_data[0], Context: context,
    getValues: function() {
      return aa_split(aa_totext(field_data),',',true);
    },
    addValue: function(code) {
      var val = aa_totext(field_data);
      if (val) val += ',';
      val += code;

      this.updateValue(val);
    },
    updateValue: function(val,noUpdateEvent) {
      ajaxart.writevalue(field_data,val);
      if (!noUpdateEvent) {
        var content = this.el;
        aa_invoke_field_handlers(field.OnUpdate,content,null,field,field_data,{});
        aa_trigger(field,'update',{ FieldData: field_data, wrapper: content.parentNode });
      }
    },
    removeValue: function(code,noUpdateEvent) {
      var vals = aa_totext( field_data ).split(',');
      for(var i=0;i<vals.length;i++) {
        if (vals[i] == code) {
          vals.splice(i,1);
          break;
        }
      }
      var newval = vals.join(',');
      this.updateValue(newval,noUpdateEvent);
      aa_trigger(this,'removeItem',{ });
    },
    OptionsLeft: function() {
      var values = this.getValues();
      var options = field.Options;
      var optionsLeft = [];
      for(var i=0;i<options.length;i++) {
        var optionCode = options[i].code;
        var added=false;
        for(var j=0;j<values.length;j++)
          if (values[j]==optionCode) added = true;
        if (!added) optionsLeft.push(options[i]);
      }
      return optionsLeft;
    }
  };
  return multi_picklist;
}

function aa_initMultiPicklistBaseObject(field,field_data,context)
{
  var multipicklistBase = {
    Field: field,
    multiPicklist: field.MultiPicklistApiObject,
    context: context,
    SearchValue: '',
    PopupFeatures: [ {
      init: function(popup) {
        multipicklistBase.Popup = popup;
        aa_bind(popup,'show',function() {
          var cntr = multipicklistBase.GetItemListCntr();
          aa_initContainerFilters(cntr);
          cntr.AddFilter({
            Id: 'search',
            FieldData: function(item) { return [item.text]; },
            FilterType: multipicklistBase.FilterType
          });
          
          cntr.RunQuery(multipicklistBase.QueryXml());
        });
      }
    }],
    GetItemListCntr: function() {
      var elem = jQuery(this.Popup.frameElement).find('.fld_Picklist_options')[0];
      return elem.jbContext.vars.ItemListCntr[0];
    },
    SyncPopup: function() {
      if (!this.Popup || !ajaxart.isattached(this.Popup.frameElement)) {
        this.OpenPopup();
      } else {
        // just update the filter
        var cntr = this.GetItemListCntr();
        cntr.RunQuery(this.QueryXml());
      }
    },
    QueryXml: function() {
      var xml = aa_parsexml('<query/>');
      xml.setAttribute('search',this.SearchValue);
      return xml;
    }
  };
  return multipicklistBase;
}

function aa_multipicklistbase(multipicklistBase,settings)
{
  var itemTemplate = settings.itemElement;
  multipicklistBase.jbItemsParent = itemTemplate.parentNode;
  
  var multiPicklist = multipicklistBase.multiPicklist;
  
  var values = multiPicklist.getValues();
  for(var i=0;i<values.length;i++) {
     var option = aa_picklist_optionByCode(multiPicklist.Field.Options,values[i]) || { code: values[i], text: values[i] };
     
     var itemElement = itemTemplate.cloneNode(true);
     itemElement.jbOption = option;
     
     var innerElements = settings.itemInnerElements(itemElement);
     innerElements.itemTextElement.innerHTML = option.text;
     innerElements.itemCloseElement.jbItemElement = itemElement;
     innerElements.itemCloseElement.onclick = function() {
       var itemElement = this.jbItemElement;
       var option = itemElement.jbOption;
       multiPicklist.removeValue(option.code);
       
       aa_remove(itemElement,true);
       fixInputSize();
     }   
     jQuery(itemTemplate).before(itemElement);
  }
  var jInput = jQuery(settings.searchElement);
  multipicklistBase.SearchInput = jInput[0];
  jInput[0].onkeyup = jInput[0].onclick = function() {
    multipicklistBase.SearchValue = jInput.val();
    multipicklistBase.SyncPopup([],multipicklistBase.context);
  }
  aa_remove(itemTemplate,true);

  function findLastElement() {
    var last = null;
    for(var iter=multipicklistBase.jbItemsParent.firstChild;iter;iter=iter.nextSibling) {
      if (iter.jbOption) last = iter;
    }
    return last;
  }
  function fixInputSize() {
    var totalWidth = multipicklistBase.$el.width();
    var lastElement = findLastElement();
    if (lastElement)
      var left = aa_absLeft(lastElement) + jQuery(lastElement).width() - aa_absLeft(multipicklistBase.el);
    else 
      var left = 0;
      
    var padding = (jInput.outerWidth() - jInput.width())*2; 
    jInput.width(totalWidth - left - padding - 5);
  }
  
  aa_addOnAttach(jInput[0],function() {fixInputSize();});
}
function aa_picklist_checkboxes(multi_picklist,settings)
{
  settings = aa_defaults(settings,{
    OptionElement: multi_picklist.$el.find('.aa_option')[0],
    OptionInnerElements: function(optionEl) {
      return {
        CheckBoxElement: jQuery(optionEl).find('.aa_option_checkbox')[0],
        TextElement: jQuery(optionEl).find('.aa_option_text')[0]
      }
    }    
  });
  
  var optionTemplate = settings.OptionElement;
  var templateParent = optionTemplate.parentNode;
  var values = multi_picklist.getValues();  
  var options = multi_picklist.Field.Options;
  for(var i=0;i<options.length;i++) {
    var option = options[i];
    var optionElem = optionTemplate.cloneNode(true);
    var optionSettings = settings.OptionInnerElements(optionElem);
    optionElem.jbOption = option;
    if (optionSettings.TextElement) { 
      optionSettings.TextElement.innerHTML = option.text; 
      optionSettings.TextElement.jbCheckbox = optionSettings.CheckBoxElement; 
      optionSettings.TextElement.jbOption = option;
      optionSettings.TextElement.onclick = function() {
        $(this.jbCheckbox).click();
      };
    }
    if (optionSettings.CheckBoxElement) {
      optionSettings.CheckBoxElement.jbOption = option;
      var checked = false;
      for (var j in values) {
        if (values[j] == option.code)
          checked = true;
      }
      if (checked) 
        optionSettings.CheckBoxElement.checked = true;
      optionSettings.CheckBoxElement.onchange = function() {
        if (this.checked) 
          multi_picklist.addValue(this.jbOption.code);
        else
          multi_picklist.removeValue(this.jbOption.code);
      };
    }   
    $(optionTemplate).before(optionElem);
  } 
  templateParent.removeChild(optionTemplate);
}

aa_gcs("fld_type",{
	Number: function (profile,data,context) {
		var field = context.vars._Field[0];
		field.Style = aa_first(data,profile,'Style',context);
		field.FieldType = 'number';
		
		field.NumberFormat = aa_first(data,profile,'Format',context);

		field.Control = function(field_data,ctx) {
			var number = {
				value: aa_totext(field_data),
				format: field.NumberFormat,
				field: field,	context: context, field_data: field_data
			};
			return [aa_renderStyleObject(field.Style,number,ctx,true)];
		} 
		ajaxart.runNativeHelper(data,profile,'SortType',context);

		if (aa_bool(data,profile,'AlignToRightOnTables',context))	{
			ajaxart.runNativeHelper(data,profile,'AlignToRight',context);
		}
	},
	EditableNumber: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		field.Style = aa_first(data,profile,'Style',context);
		field.NumberFormat = aa_first(data,profile,'Format',context);

		aa_init_class_EditableNumber();

		field.Control = function(field_data,ctx) {			
			var numberApiObject = new ajaxart.classes.EditableNumber({
				value: aa_totext(field_data), 
				field: field, field_data: field_data,
				format: field.NumberFormat,
				allowEmptyValue: field.AllowEmptyValue,
				data: field_data, profile: profile, context: context
			});
			return [aa_renderStyleObject(field.Style,numberApiObject,ctx,true)];
		}

		if (aa_bool(data,profile,'NumberValidation',context)) {
			ajaxart.runNativeHelper(data,profile,'DefaultValidation',context);
		}
	}	
});
aa_gcs("number",{	
	Format: function (profile,data,context)
	{
		aa_init_class_NumberFormat();

		var format = new ajaxart.classes.NumberFormat({
			profile: profile, context: context,

			name: aa_text(data,profile,'Name',context),
			symbol: aa_text(data,profile,'Symbol',context),
			useDynamicSymbol: aa_bool(data,profile,'UseDynamicSymbol',context),
			min: parseFloat(aa_text(data,profile,'Min',context)), // do not use aa_float to avoid default 0
			max: parseFloat(aa_text(data,profile,'Max',context)),
			step: 1,
			initialPixelsPerUnit: 1
		});

		var ctx = aa_ctx(context,{_NumberFormat: [format]});
		ajaxart.run(data,profile,'UIHints',ctx);

		return [format];
	},
	FormatUIHints: function (profile,data,context) {
		var format = context.vars._NumberFormat[0];
		format.step = aa_float(data,profile,'Step',context) || 1;
		format.initialPixelsPerUnit = aa_float(data,profile,'InitialPixelsPerUnit',context);
	},
	FormatMoney: function (profile,data,context) {
		var value = aa_accounting().formatMoney(
			parseFloat(data[0].Value),
			'',
			aa_text(data,profile,'Precision',context),
			aa_text(data,profile,'Thousand',context),
			aa_text(data,profile,'Decimal',context),
			'%v'
		);

		var input = {
			Value: value,
			Symbol: data[0].Symbol
		}
		return aa_text([input],profile,'Format',context);
	}
});

function aa_init_class_NumberFormat() {
	
	if (ajaxart.classes.NumberFormat) return;

	ajaxart.classes.NumberFormat = function(settings) {	
		aa_extend(this,settings);
	};
	ajaxart.classes.NumberFormat.prototype.parse = function(dataString) {
		if (!dataString) return NaN;
		var parts = (''+dataString).match(/([^0-9\.\-]*)([0-9\.\-]+)([^0-9\.\-]*)/); // remove prefix string
		if (this.useDynamicSymbol && parts)
			this.symbol = parts[1] || parts[3] || this.symbol;
		var value = parts && parts[2];
		var v = parseFloat(value);
		return v;
	};
	ajaxart.classes.NumberFormat.prototype.getDisplayString = function(number) {
		if (isNaN(number)) return [(this.field && this.field.TextForEmptyValue) || ''];
		var data = [ { Value: number, Symbol: this.symbol }];
		return ajaxart.run(data,this.profile,'DisplayString',this.context);
	};

	ajaxart.classes.NumberFormat.prototype.getDataString = function(number) {
		if (isNaN(number)) return '';
		if (typeof number === 'number') number = '' + number;
		var data = [ { Value: number, Symbol: this.symbol }];
		return aa_text(data,this.profile,'DataString',this.context);
	};

}

function aa_number(number,settings) {
	settings = settings || {};
	settings.textElement = settings.textElement || number.el;

	var format = number.format;

	var num = format.parse(number.value);
	var text = format.getDisplayString(num);

	$(settings.textElement).text(text);
}


aa_gcs("prefstorage", {
	UrlFragmentKey: function(profile,data,context) {
		var separator = aa_text(data,profile,'Separator',context);
		var keyPrefix = aa_text(data,profile,'KeyPrefix',context);
		var regSeparator = separator == '?' ? '\\?' : separator;
		return [{
			get: function(key) {
				var keyToUse = keyPrefix + key;
				return aa_urlHashValue(keyToUse);
			},
			set: function(key,value) {
				var keyToUse = keyPrefix + key;
				aa_setUrlHashValue(keyToUse,value);
			}
		}];
	},
	LocalStorage: function(profile,data,context) {
		var keyPrefix = aa_text(data,profile,'KeyPrefix',context);
		var browserSupport = 'localStorage' in window && window['localStorage'] !== null;
		return [{
			get: function(key) {
				if (!browserSupport) { ajaxart.log("cannot read '" + key + "' from local storage, no browser support","error"); return ""; }
				return localStorage.getItem(keyPrefix + key);
			},
			set: function(key,value) {
				if (!browserSupport) { ajaxart.log("cannot write '" + key + "'='" + value + "' to local storage, no browser support","error"); return; }
				if (value)
					localStorage.setItem(keyPrefix + key, value);
				else
					localStorage.removeItem(keyPrefix + key);
			}
		}];
	},
	SessionStorage: function(profile,data,context) {
		var keyPrefix = aa_text(data,profile,'KeyPrefix',context);
		var browserSupport = 'sessionStorage' in window && window['sessionStorage'] !== null;
		return [{
			get: function(key) {
				if (!browserSupport) { ajaxart.log("cannot read '" + key + "' from local storage, no browser support","error"); return ""; }
				return sessionStorage.getItem(keyPrefix + key);
			},
			set: function(key,value) {
				if (!browserSupport) { ajaxart.log("cannot write '" + key + "'='" + value + "' to local storage, no browser support","error"); return; }
				if (value)
					sessionStorage.setItem(keyPrefix + key, value);
				else
					sessionStorage.removeItem(keyPrefix + key);
			}
		}];
	},
	Cookie: function(profile,data,context) {
		var keyPrefix = aa_text(data,profile,'KeyPrefix',context);
		return [{
			get: function(key) {
				return aa_valueFromCookie(keyPrefix + key);
			},
			set: function(key,value) {
				aa_writeCookie(keyPrefix + key,value);				
			}
		}];
	},
	GetPreferenceValue: function(profile,data,context) {
		var storage = aa_first(data,profile,'Storage',context);
		var key = aa_text(data,profile,'Key',context);
		return [ "" + storage.get(key) ];
	},
	SetPreferenceValue: function(profile,data,context) {
		var storage = aa_first(data,profile,'Storage',context);
		var key = aa_text(data,profile,'Key',context);
		var value = aa_text(data,profile,'Value',context);
		storage.set(key,value);
		return [];
	}
});
function aa_roundabout(imagegallery, settings) {
  settings = aa_defaults(settings, {
    autoPlayAfter: 5000,
    roundDuration: 600
  })
  var baseUrl = imagegallery.BaseUrl || aa_base_lib() + '/roundabout/';
  aa_loadRequiresJSFiles({
    jsFiles: [{
      url: baseUrl + 'jquery.roundabout.js',
      jsVariable: 'jQuery.fn.roundabout'
    }, {
      url: baseUrl + 'jquery.roundabout-shapes.js',
      jsVariable: 'jQuery.roundaboutShapes.waterWheel'
    }],
    onload: function() {
      var ul = imagegallery.$el.find("ul");
      var images = imagegallery.images;
      if (images.length < 4 && images.length > 1) { // works well with at-least 4 items
        images = [];
        for (i = 0; i < imagegallery.images.length * 4; i++)
        images.push(imagegallery.images[i % imagegallery.images.length]);
      }
      for (i in images) {
        var imageObj = images[i];
        var li = jQuery('<li><a href="javascript:;"><img class="roundabout_image"/></a></li>');
        li.find("img").attr("src", imageObj.url).attr("title", imageObj.title)[0].jbImageObject = imageObj;
        if (imageObj.link) li.find("a").attr("href", imageObj.link).attr("target", "_blank");
        li.appendTo(ul);
      }
      aa_addOnAttach(imagegallery.el, function() {
        if (images.length == 1) {
          ul.addClass("roundabout-holder single-image");
          ul.find("li").addClass("roundabout-moveable-item");
        } else {
          ul.roundabout({
            shape: 'waterWheel',
            minOpacity: 0,
            duration: settings.roundDuration
          });
          // fix image positions on every move
          $('ul').bind('childrenUpdated', {}, function() {
            $('ul').children('.li').each(function() {
              fixImagePosition($(this).find('.roundabout_image')[0], this);
            });
          });
          ul.inHover = false;
          imagegallery.$el.mousemove(function() {
            ul.inHover = true;
          }).mouseout(function() {
            ul.inHover = false;
          });

          function autoPlay() {
            if (!ajaxart.isattached(ul)) return;
            if (!ul.inHover) ul.roundabout('animateToNextChild');
            setTimeout(autoPlay, settings.autoPlayAfter);
          }
          setTimeout(autoPlay, settings.autoPlayAfter);
        }
        // fix initial image positions
        $('ul').find('.roundabout_image').each(function(index, image) {
          function fix() {
            fixImagePosition(image, $(image).parents('li')[0]);
          }
          if (this.width) fix(); // already loaded
          else {
            $(this).css('width', $(this).parent().width() + 'px');
            this.onload = fix;
          }
        });
      });
    }
  });

  function fixImagePosition(img, li) {
    var imageObject = img.jbImageObject;
    var boxHeight = settings.height;
    var boxWidth = settings.width;

    if (imageObject.originalHeight) {
      $(img).height(boxHeight);
      var width = boxHeight * imageObject.originalWidth / imageObject.originalHeight;
      var marginLeft = Math.max(parseInt((boxWidth - width) / 2),0);
      $(img).width(parseInt(width)).css('margin-left', marginLeft + 'px');
    } else {
      $(img).css('width', '');
      var imageRatio = img.naturalWidth / img.naturalHeight;
      var desiredRatio = boxWidth / boxHeight;
      var $img = jQuery(img);
      if (imageRatio == desiredRatio) {
        $img.css('width', '100%').css('height', '100%;');
      } else if (imageRatio < desiredRatio) {
        $img.css('width', '100%').css('height', 'none');
        var marginTop = ((imageRatio - desiredRatio) * boxHeight) * 0.5;
        $img.css('margin-top', marginTop + 'px');
      } else {
        $img.css('height', '100%').css('width', 'none');
        var marginLeft = ((desiredRatio - imageRatio) * boxWidth) * 0.5;
        $img.css('margin-left', marginLeft + 'px');
      }
    }
  }

}


function aa_ImageWithNextPrevButtons(imagegallery,settings) {
  if (!imagegallery.images.length) imagegallery.$el.css('opacity', 0);

  $find(".visible").width(settings.width + "px");
  if (imagegallery.images.length == 0) return;
  var current = 0;
  var max_circles = 10;
  for (i = 0; i < imagegallery.images.length; i++) {
    var imageObject = imagegallery.images[i];

    var td = $('<td><div/></td>').appendTo($find('tr'));
    var div = td.find('div');
    if (imagegallery.images[i].originalHeight) {
      var width = settings.height * imageObject.originalWidth / imageObject.originalHeight;
      aa_setImage(div[0], {
        url: imageObject.url,
        height: settings.height,
        width: width,
        keepImageProportions: false
      });
      var marginLeft = Math.max(parseInt((settings.width - width) / 2),0);
      div.find('img').css('margin-left',marginLeft + 'px');
      $(div).width(settings.width).css('overflow','hidden');
    } else {
      aa_setImage(div[0], {
        url: imageObject.url,
        height: settings.height,
        width: settings.width,
        keepImageProportions: true,
        fillImage: true,
        centerImage: true
      });
    }
    if (i < max_circles) {
      var circle = jQuery("<div class='circle'></div>").appendTo($find('.circles'));
      circle.click(function() {
        current = $(this).index();
        show();
      });
    }
  }
  if (imagegallery.images.length < 2) $find('.circles').hide();
  $find('.button').css('top', settings.height / 2);
  show();

  function show() {
    $find('.images').css('margin-left', "-" + $find('.visible').width() * current + "px");
    $find('.prev').removeClass('disable').addClass(current == 0 ? 'disable' : '');
    $find('.next').removeClass('disable').addClass(current >= imagegallery.images.length - 1 ? 'disable' : '');
    $find('.circles').children().removeClass("current");
    $find('.circles').children(":nth-child(" + (current + 1) + ")").addClass("current");
  }
  $find('.next').click(function() {
    if (current < imagegallery.images.length - 1) {
      current++;
      show();
    }
  });
  $find('.prev').click(function() {
    if (current > 0) {
      current--;
      show();
    }
  });

  function $find(selector) {
    return imagegallery.$el.find(selector);
  }

}


function aa_replace_transition(settings,context)
{	/* settings must have: transition, elOriginal, elNew 
	   optional: onTransitionEnd, removeOriginal, onBeforeTransitionBegin
	*/
	aa_defaults(settings, {
		$elOriginal: 	$(settings.elOriginal),
		$elNew: 		$(settings.elNew),
		css: 			settings.transition.Css,
		onTransitionEnd:function() {},
		removeOriginal: function(original) { aa_remove(settings.elOriginal); },
		onBeforeTransitionBegin: function() {},
		context: context,
		params: settings.transition.params
	});
	aa_apply_style_js(settings,settings.transition,context,'animate');
}

function aa_fade_transition(transition, duration) {
	  function onTransitionEnd() {
	    transition.$elOriginal.css( { opacity: 1 } );
	    transition.$elOriginal.removeClass('aa_original');
	    transition.removeOriginal(transition.elOriginal);
	    transition.$elNew.removeClass('aa_new');
	    transition.$elOriginal.parent().removeClass(cssClass);
	    transition.onTransitionEnd();
	  }
	  transition.$elOriginal.addClass('aa_original');
	  transition.$elNew.addClass('aa_new');
	  transition.$elNew.css("height",transition.$elOriginal.height());		// To keep original size before attaching
	  transition.$elNew.css("width",transition.$elOriginal.width());
	  transition.$elOriginal.css("height",transition.$elOriginal.height());	// To keep the size after detaching it
	  transition.$elOriginal.css("width",transition.$elOriginal.width());
	  transition.elOriginal.parentNode.appendChild(transition.elNew);
	  aa_element_attached(transition.elNew);
	  var cssClass = aa_attach_global_css(transition.css);
	  transition.$elOriginal.parent().addClass(cssClass);
	  transition.$elNew.css({opacity:0});
	  transition.onBeforeTransitionBegin();
	  transition.$elOriginal.animate({ opacity:0 },duration, "swing");
	  transition.$elNew.animate({ opacity:1 },duration, "swing", onTransitionEnd);
}



aa_gcs("field_aspect",{
	ValidationStyle: function(profile,data,context) {
		var field = context.vars._Field[0];
		field.ValidationStyle = aa_first(data,profile,'Style',context);

		aa_bind(field,'ModifyCell', function(args) {
			var validationStyle = aa_renderStyleObject(field.ValidationStyle,{},context,true,{
				funcName: 'init'
			}).jbApiObject;
			$(args.Wrapper).addClass(validationStyle.elem_class + ' aa_validation_style');
			validationStyle.$el.removeClass(validationStyle.elem_class);
			args.Wrapper.jbValidationStyle = validationStyle;
		});
	},
	Validation: function (profile,data,context)
	{
		var field = context.vars._Field[0];
		if (! field.Validations ) field.Validations = [];
		var obj = {};
		obj.CheckValidation = aa_text(data,profile,'CheckValidation',context);
		aa_setMethod(obj,'Validation',profile,'ValidationLogic',context);
		aa_setMethod(obj,'ErrorMessage',profile,'ErrorMessage',context);
		obj.AddTitleToErrorMessage = aa_bool(data,profile,'AddTitleToErrorMessage',context);
		obj.HideErrorMessage = ! aa_bool(data,profile,'ShowErrorMessageNextToField',context);
		field.Validations.push(obj);

		aa_bind(field,'ModifyControl',function(args){
			var contentElement = $(args.Wrapper).find('input')[0] || args.Wrapper.firstChild;
			if (!contentElement) return;
			$(contentElement).addClass('aa_has_validations');
			aa_bind(contentElement,'validation',function(validationObject) {
				if (aa_bool(args.FieldData,profile,'ValidationLogic',context)) {
					validationObject.passed = false;
					validationObject.errorMessage = aa_text(args.FieldData,profile,'ErrorMessage',context);
				}
			},'');
		},'');	
	}
});

aa_gcs("app_feature",{
	ValidationStyle: function(profile,data,context) {
		var bctx = context.vars._AppContext[0];

		var style = aa_first(data,profile,'Style',context);
	
		var validationStyle = aa_renderStyleObject(style,{},context,true,{
				funcName: 'init'
		}).jbApiObject;

		validationStyle.$el.removeClass(validationStyle.elem_class);
		bctx.ValidationStyle2 = validationStyle;

		aa_bind(bctx,'showPage',function(args) {
			$(args.el).addClass(validationStyle.elem_class);
		});
	}
});

function aa_checkValidations(topElement,noMandatoryChecks)
{
	// https://docs.google.com/a/artwaresoft.com/document/d/1o6Uv_k3rlnm-Wp_Z7-oRVaAbfAYHcbecHzr39_0gNbU/edit#heading=h.bgjp8atg2ug5

	var validationStyle = aa_findValidationStyle(topElement);
	validationStyle.clearErrors(validationStyle,topElement);

	var scrollToMargins = validationStyle.scrollMargins || { top: 30, bottom: 30 };

	var firstTime = true;
	var elems = $(topElement).find('.aa_has_validations');
	
	var passed = true;
	var errors = [];

	for(var i=0;i<elems.length;i++) {
		var elem = elems[i];
		var errorObject = {
			passed: true,
			element: elem
		};
		aa_trigger(elem,'validation',errorObject);
		if (noMandatoryChecks && errorObject.mandatoryFailure) errorObject.passed = true;
		
		if (!errorObject.passed) {
			if (firstTime) {
				aa_scrollToShowElement(elem,'',scrollToMargins);
				firstTime = false;
			}
			validationStyle.showValidationError(validationStyle,topElement,errorObject);
			passed = false;
			errors.push(errorObject);
		}
	}
	if (!passed) {
		validationStyle.showErrorSummary(validationStyle,topElement,errors);
	}
	return passed;
}

function aa_findValidationStyle(elem) {
	if ($(elem).hasClass('aa_validation_style')) return elem.jbValidationStyle;
	var parent = $(elem).closest('.aa_validation_style')[0];
	if (parent) return parent.jbValidationStyle;

	var bctx = aa_find_bart_context(elem);
	if (bctx && bctx.ValidationStyle2) return bctx.ValidationStyle2;

	if (!ajaxart.defaultValidationStyle) {
		var el = $('<div/>')[0];
		ajaxart.defaultValidationStyle = {
			el: el,
			$el: $(el)
		};
		aa_initValidationStyle(ajaxart.defaultValidationStyle,{});	
	}
	
	return ajaxart.defaultValidationStyle;
}

function aa_initValidationStyle(validationStyle,settings) {
	settings = aa_defaults(settings,{
		clearErrors: function(validationStyle,topElement) {
			$(topElement).find('.aa_error').removeClass('aa_error');
			$(topElement).find('.aa_error_message').remove();			
			$(topElement).find('.aa_validation_error').remove();			
		},
		showValidationError: function(validationStyle,topElement,errorObject) {
			var elem = errorObject.element;
			if (aa_isArray(elem)) {
				for(var i=0;i<elem.length;i++)
					this.showValidationError(validationStyle,topElement,$.extend({},errorObject,{element: elem[i]}))
				return;
			}
			var messageDiv = $(validationStyle.el.cloneNode(true)).addClass('aa_error_message').text(errorObject.errorMessage);
			elem.parentNode.appendChild(messageDiv[0]);

			elem.jbValidationMessage = messageDiv;
			$(elem).addClass('aa_error');

			if (!elem.jbValidationFocusEventBound) {
				elem.jbValidationFocusEventBound = true;
				if (elem.tabIndex == -1) elem.tabIndex = 1;

				$(elem).add($(elem).find("input")).add($(elem).find("textarea")).add($(elem).find(".aa_picklist_div")).focus(function() {
					$(elem).removeClass('aa_error');
					if (elem.jbValidationMessage)
						aa_remove(elem.jbValidationMessage,true);
					validationStyle.clearErrorSummary(validationStyle,topElement);
				});
			}
		},
		clearErrorSummary: function(validationStyle,topElement) {
		},
		showErrorSummary: function(validationStyle,topElement,errors) {			
		}
	});

	validationStyle.clearErrors = settings.clearErrors;
	validationStyle.showValidationError = settings.showValidationError;
	validationStyle.showErrorSummary = settings.showErrorSummary;
	validationStyle.clearErrorSummary = settings.clearErrorSummary;
	validationStyle.scrollMargins = settings.scrollMargins;	
}





aa_gcs("parser", {
	RemoveSection: function (profile,data,context) {
		var begin = aa_text(data,profile,'BeginPattern',context);
		var end = aa_text(data,profile,'EndPattern',context);
		
		function removeOneSection(html) {
			var lowerCase = html.toLowerCase();
			var from = lowerCase.indexOf(begin);
			var to = lowerCase.indexOf(end,from);
			if (from == -1 || to == -1) return html;
			return html.substring(0,from) + html.substring(to + end.length);
		}
		
		var result = aa_text(data,profile,'Html',context);
		var next = removeOneSection(result);
		while (next.length < result.length) {
			result = next;
			next = removeOneSection(result);
		}
		return [result];
	},
	ExtractBody: function (profile,data,context) {
		var result = aa_text(data,profile,'Html',context);
		var lowerCase = result.toLowerCase();
		var from = lowerCase.indexOf('<body');
		if (from != -1) from = lowerCase.indexOf('>',from);
		var to = lowerCase.indexOf('</body');
		if (from != -1 && to != -1)
			result = '<div' + result.substring(from,to) + '</div>';
		return [result];
	}
});



/*********************** UI For Preview Html *************************************/

aa_gcs("parser",{
	PreviewHtml: function(profile, data, context) {
		var field = aa_create_base_field(data, profile, context);
		var style = aa_first(data, profile, 'Style', context);

		field.Control = function(field_data, ctx) {
			var ctx2 = aa_merge_ctx(context,ctx);
			var htmlPreview = { 
				html_text: aa_text(field_data,profile,'Html',context) 
			};
			return [aa_renderStyleObject2(style,htmlPreview,field_data,field,ctx2,{})];
		};
		return [field];
	}
});


function aa_htmlPreview(htmlPreview) {
	var iframe = $('<iframe src="about:black" />')[0];
	htmlPreview.el.appendChild(iframe);

	aa_addOnAttachMultiple(htmlPreview.el,function() {
		var doc = iframe.contentDocument;
		doc.open();
	  doc.write(htmlPreview.html_text);
	  doc.close();
	});
}



aa_gcs("popup", {
	OpenPopup: function (profile, data, context) {
		var style = aa_first(data,profile,'Style',context);

		aa_init_class_Popup();

		var popup = new ajaxart.classes.Popup({
			title: aa_text(data,profile,'PopupTitle',context),
			data: data, context: context, profile: profile,
			launchingElement: aa_var_first(context,'ControlElement'),
			base_features: ajaxart.runsubprofiles(data,profile,'Feature',context)
		});

		aa_renderStyleObject(style,popup,context,true,{
			jsFunctionName: 'show'
		});
		return [popup];
	},
	CloseContainingPopup: function (profile, data, context) {
		var exitMode = aa_text(data,profile,'ExitMode',context);
		var control = aa_var_first(context,'ControlElement');
		aa_close_containing_popup(control,function() {
			ajaxart.run(data,profile,'DoOnExit',context);
		},exitMode);
	},
	CloseUniquePopup: function (profile, data, context) {
		var uniqueID = aa_text(data,profile,'UniqueID',context);
		var openPopups = aa_open_popups();
		for(var i=0;i<openPopups.length;i++) {
			if (openPopups[i].uniqueID && openPopups[i].uniqueID == uniqueID)
				openPopups[i].close();
		}
	},
	RunAsyncActionAndCloseContainingPopup: function (profile, data, context) {
		var deferred = $.Deferred();
		var control = aa_var_first(context,'ControlElement');
		var top = control && $(control).closest('.aa_popup')[0];
		if (!top || !top.jbPopup || !aa_checkValidations(top.jbPopup.frameElement)) return;

		var promise = aa_first(data,profile,'Action',context);
		$.when(promise).then(function() {
			top.jbPopup.close();
			deferred.resolve();
		},function() {
		});
		return [deferred.promise()];
	},
	RunOnPopup: function (profile, data, context) {
		var openPopups = aa_open_popups();
		if (openPopups.length>0) {
			var popup = openPopups[openPopups.length-1];
			ajaxart.run(data,profile,'Action',aa_ctx(context,{ControlElement: [popup.el]}));
		}
	},
	ZIndex: function (profile, data, context) {
		return [aa_popup_feature_zindex({
			zindex: aa_int(data,profile,'ZIndex',context)
		})];
	},
	UniquePopup: function (profile, data, context) {
		return [aa_popup_feature_UniquePopup({
			uniqueID: aa_text(data,profile,'UniqueID',context)
		})];
	},
	TitleDragAndDrop: function (profile, data, context) {
		return [aa_popup_title_dragAndDrop()];
	},
	CloseOnEnter: function (profile, data, context) {
		return [aa_popup_closeOnEnter()];
	},
	CloseOnBrowserBackButton: function (profile, data, context) {
		return [aa_popup_feature_closeOnBackButton()];
	},
	AutoFocusOnFirstInput: function (profile, data, context) {
		return [aa_popup_feature_autoFocus()];
	},
	StudioPopupFeature: function (profile, data, context) {
		return [{
			init: function(popup) {
				popup.jbStudio = true;
			}
		}];
	}, 
	PopupSize: function (profile, data, context) {
		return [aa_popup_feature_size({ 
			width: aa_text(data,profile,'Width',context),
			height: aa_text(data,profile,'Height',context)
		})];
	},
	FloatingPopup: function (profile, data, context) {
		return [aa_popup_feature_floating_popup({ 
			identifier: aa_text(data,profile,'Identifier',context),
			autoBringToFront: aa_bool(data,profile,'AutoBringToFront',context),
			rememberLocations: aa_bool(data,profile,'RememberPopupLocations',context),
			fieldsToRefresh: aa_text(data,profile,'FieldIdsToRefreshWhenOpenOrClosed',context),
			location: aa_first(data,profile,'Location',context),
			closeCondition: function() {
				return aa_bool(data,profile,'CloseCondition',context)
			}
		})];
	},
	IsFloatingPopupOpen: function (profile, data, context) {
		var popups = aa_open_popups();
		var id = aa_text(data,profile,'Identifier',context);
		if (!id) return [];
		
		for(var i=0;i<popups.length;i++)
			if (popups[i].identifier == id) return ['true'];
	},
	HandleEvent: function (profile, data, context) {
		return [{
			init: function(popup) {
				var eventAction = {
					run: function(data1, ctx) {
						var ctx2 = aa_merge_ctx(context, ctx);
						if (ctx2.vars.EventAction) delete ctx2.vars.EventAction;
						ajaxart.run(data1, profile, 'Action', ctx2);
					}
				};
				ajaxart.run(data, profile, 'Event', aa_ctx(context, {
					EventAction: [eventAction], 
					_Popup: [popup]
				}));
			}
		}];
	},
	CloseFloatingPopup: function (profile, data, context) {
		var id = aa_text(data,profile,'Identifier',context);

		var openPopups = aa_open_popups();
		for(var i=openPopups.length-1;i>=0;i--) {
			if (openPopups[i].identifier == id) 
				openPopups[i].close();
		}
	},
	CheckFloatingPopupsCloseCondition: function (profile, data, context) {
		var openPopups = aa_open_popups();
		for(var i=openPopups.length-1;i>=0;i--) {
			var popup = openPopups[i];
			if (popup.identifier && popup.closeCondition && popup.closeCondition() )
				popup.close();
		}
	},
	RestoreFloatingPopup: function (profile, data, context) {
		var id = aa_text(data,profile,'Identifier',context);
		if (sessionStorage['jbFloatingPopupIsOpen_'+id] != 'true') return;

		var openPopups = aa_open_popups();
		for(var i=openPopups.length-1;i>=0;i--) {
			if (openPopups[i].identifier == id) return; // already open
		}

		ajaxart.run(data,profile,'OpenPopup',context);
	}
});

aa_gcs("popup_event", {
	Close: function(profile, data, context) {
		var popup = context.vars._Popup[0];
		aa_bind(popup,'close',function() {
			context.vars.EventAction[0].run([], context);
		});
	},
	Show: function(profile, data, context) {
		var popup = context.vars._Popup[0];
		aa_bind(popup,'show',function() {
			context.vars.EventAction[0].run([], context);
		});
	}
});

aa_gcs("popup_field_aspect", {
  PopupOnHover: function (profile, data, context) {
      var field = context.vars._Field[0];
      var popupStrategy = aa_first(data,profile,'OpenPopup',context);

      aa_bind(field,'ModifyControl',function(args) {
        var ctx2 = aa_ctx(context,{ControlElement: [args.Wrapper]});

        var popupAdapter = {
          wrapper: args.Wrapper,
          $wrapper: $(args.Wrapper),
          openPopup: function() {
            this.popup = ajaxart.runNativeHelper(args.FieldData,profile,'OpenPopup',ctx2)[0];
          },
          closePopup: function() {
            if (this.popup) {
            	this.popup.close();
            	this.popup = null;
            }
          }
        };
        aa_renderStyleObject(popupStrategy,popupAdapter,ctx2,true,{ funcName: 'attach'});
        aa_apply_style_js(popupAdapter,popupStrategy,ctx2,'attach');
      },'Popup');
  },
	ToolbarPopup: function(profile, data, context) {
		var field = context.vars._Field[0];
		field.PopupToolbarID = aa_text(data,profile,'ToolbarID',context);
		field.ToolBarPopupStyle = aa_first(data,profile,'PopupStyle',context);

		aa_init_class_Popup();

		aa_bind(field,'ModifyControl',function(args) {
			var contentElement = args.Wrapper.firstChild;
			contentElement.onclick = function() {
				if (contentElement.jbPopup && ajaxart.isattached(contentElement.jbPopup.frameElement)) {
					contentElement.jbPopup.close();
				}
				else 
					openPopup(contentElement,args.FieldData);
			};
			contentElement.onmouseover = function() {
				if (hasPopupOfToolbar(contentElement)) {
					openPopup(contentElement,args.FieldData);	
				};
			}
		});

		function openPopup(launchingElement,field_data) {
			var features = ajaxart.runsubprofiles(data,profile,'PopupFeature',context);
			features.push(aa_popup_feature_toolbar_popup({ toolbarID: field.PopupToolbarID }));

			var popup = new ajaxart.classes.Popup({
				title: '',
				data: data, context: context, profile: profile,
				launchingElement: launchingElement,
				base_features: features
			});
			aa_bind(popup,'close',function() {
				$(launchingElement).removeClass('toolbarPopupOpen');
			});
			// close other popups
			var openPopups = aa_open_popups();
			for(var i=openPopups.length-1;i>=0;i--) {
				if (openPopups[i].toolbarID == field.PopupToolbarID) {
					openPopups[i].close();
				}
			}

			launchingElement.jbPopup = popup;
			$(launchingElement).addClass('toolbarPopupOpen');

			aa_renderStyleObject(field.ToolBarPopupStyle,popup,context,true,{
				jsFunctionName: 'show'
			});
		}

		function hasPopupOfToolbar(contentElement) {
			var openPopups = aa_open_popups();
			for(var i=openPopups.length-1;i>=0;i--) {
				if (openPopups[i].toolbarID == field.PopupToolbarID && openPopups[i] != contentElement.jbPopup) {
					return true;
				}
			}
			return false;
		}
	},
	CascadingMenuPopup: function(profile,data,context) {
		var field = context.vars._Field[0];
		field.ToolBarPopupStyle = aa_first(data,profile,'PopupStyle',context);
		field.CascadingMenuPopup = true;
		aa_init_class_Popup();

		aa_bind(field,'ModifyControl',function(args) {
			aa_addOnAttach(args.Wrapper,function() {
				var containingPopup = getContainingPopup(args.Wrapper);
				if (!containingPopup) return;

				var contentElement = args.Wrapper.firstChild;
				contentElement.onmouseover = function() {
					openPopup(containingPopup,contentElement,args.FieldData);	
				};				
			});
		});

		function getContainingPopup(elem) {
			var top = elem && $(elem).closest('.aa_popup')[0];			
			var containingPopup = top && top.jbPopup;
			if (!containingPopup) return;
			if (!containingPopup.innerCascadingPopupInitialized) {
				containingPopup.innerCascadingPopupInitialized = true;

				var elems = $(elem).siblings('.aa_cell_element');
				for(var i=0;i<elems.length;i++) {
					if (elems[i].Field && !elems[i].Field.CascadingMenuPopup) {
						elems[i].onmouseover = function() {
							containingPopup.closeInnerPopups();			
						};
					}
				}

			}
			return containingPopup;
		}
		function openPopup(containingPopup,launchingElement,field_data) {
			containingPopup.closeInnerPopups();

			var features = ajaxart.runsubprofiles(data,profile,'PopupFeature',context);

			var popup = new ajaxart.classes.Popup({
				title: '',
				data: data, context: context, profile: profile,
				launchingElement: launchingElement,
				base_features: features
			});
			aa_bind(popup,'close',function() {
				if (!popup.closedByParent) containingPopup.close();
				$(launchingElement).removeClass('cascadingPopupOpen');
			});

			containingPopup.innerPopups = [popup];
			launchingElement.jbPopup = popup;
			$(launchingElement).addClass('cascadingPopupOpen');

			aa_renderStyleObject(field.ToolBarPopupStyle,popup,context,true,{
				jsFunctionName: 'show'
			});
		}

		function hasPopupOfToolbar(contentElement) {
			var openPopups = aa_open_popups();
			for(var i=openPopups.length-1;i>=0;i--) {
				if (openPopups[i].toolbarID == field.PopupToolbarID && openPopups[i] != contentElement.jbPopup) {
					return true;
				}
			}
			return false;
		}
	}
});

aa_gcs("popup_confirmation",{
	OpenConfirmationPopup: function(profile,data,context) {
		var confirmationPopup = {
			title: aa_text(data,profile,'Title',context),
			question: aa_text(data,profile,'Question',context),
			labelForYes: aa_text(data,profile,'LabelForYes',context),
			labelForNo: aa_text(data,profile,'LabelForNo',context),
			launchingElement: aa_var_first(context,'ControlElement'),
			features: ajaxart.runsubprofiles(data,profile,'Feature',context),
			action: function() {
				return ajaxart.run(data,profile,'Action',context);
			}
		};

		var style = aa_first(data,profile,'Style',context);

		aa_renderStyleObject(style,confirmationPopup,context,true,{
			jsFunctionName: 'show'
		});
	}
});

function aa_init_class_Popup() {	
	if (ajaxart.classes.Popup) return;

	ajaxart.classes.Popup = function(settings) {	
		aa_extend(this,settings);
		this.intest = window.aa_intest;
		this.timeOpened = new Date();
		this.base_features = this.base_features || [];
	};
	
	ajaxart.classes.Popup.prototype.appendContents = function(contentsTop) {
		if (!contentsTop) return;
		var ctx2 = aa_ctx(this.context,{ PopupLaunchingElement: [this.launchingElement]});
		this.field = aa_first(this.data,this.profile,'Contents',ctx2);
		if (this.field)
			aa_fieldControl({ Field: this.field, Item: this.data, Wrapper: contentsTop, Context: ctx2 });
	};

	ajaxart.classes.Popup.prototype.RefreshPreview = function(contentsTop) {
		this.close();
		ajaxart.gcs.popup.OpenPopup(this.profile,this.data,this.context);
	};
}

function aa_createLightPopup(settings) {
	aa_init_class('LightPopup',{
		_ctor: function() {
			this.intest = window.aa_intest;
			this.timeOpened = new Date();
			this.base_features = this.features || [];
			this.$el = $(this.el);
			if (this.el.parentNode) this.el.parentNode.removeChild(this.el);
			this.$el.css('visibility','none');
			if (this.apiObject.elem_class)
				this.$el.addClass(this.apiObject.elem_class+'_popup');
		},
		appendContents: function() {},
		show: function() {
			this.zindex = null;
			aa_popup(this,this.popupSettings);
		}
	});
	return new ajaxart.classes.LightPopup(settings);
}

function aa_popupDefaultSettings(popup,more) {
	return aa_extend({
		frameElement: popup.$el.find('.aa_popup_frame'),
		titleElement: popup.$el.find('.aa_popup_title'),
		contentsElement: popup.$el.find('.aa_popup_contents'),
		closeElement: popup.$el.find('.aa_popup_close'),
		defaultLocation: aa_popupCenterLocation()
	},more);	
}

function aa_popup(popup,settings) {
	settings = aa_popupDefaultSettings(popup,settings || {});
	if (popup.intest) popup.$el.css('display','block');
	popup.frameElement = $(settings.frameElement)[0] || popup.el;
	$(popup.frameElement).addClass('aa_popup').addClass(ajaxart.deviceCssClass);

	if (settings.features) 
		popup.features = [].concat(popup.base_features,settings.features);
	else
		popup.features = popup.base_features;

	popup.contentsEl = $(settings.contentsElement)[0];

	for(var i=0;i<popup.features.length;i++) {
		try {
			popup.features[i].init(popup);
		} catch(e) {
			if (window.ajaxart) ajaxart.logException('error initialing popup feature',e);
		}
	}

	if (popup.PreventOpen && popup.PreventOpen()) return;

	// add it to body
	var popupsTop = $('body').children('.jbart_popups');
	if (!popupsTop.length)
		popupsTop = $('<div class="jbart_popups" />').appendTo( $('body') );

	// notify previous popups (some of them might close themselves)
	var openPopups = popupsTop.children();
	for(i=0;i<openPopups.length;i++) {
		var prevPopup = openPopups[i];
		if (prevPopup.jbPopup != popup)
			aa_trigger(prevPopup.jbPopup,'anotherPopupOpened',{ popup: popup });
	}

	popup.el.jbPopup = popup.frameElement.jbPopup = popup;

	$(settings.titleElement).text(popup.title);
	if (popup.contentsEl)
		popup.appendContents(popup.contentsEl);

	popup.close = function(closeType) {
		popup.preventClose = false;
		var closeArgs = { closeType: closeType};
		aa_trigger(popup,'beforeClose',closeArgs);		
		if (closeArgs.preventClose) return false; // allow beforeClose to prevent the closing of the popup
		
		aa_remove(this.el,!settings.reusablePopup);

		if (popup.launchingElement) {
			popup.launchingElement.jbPopup = null;
			$(popup.launchingElement).removeClass('aa_opened_popup');
		}
		aa_trigger(popup,'close',{ closeType: closeType });

		this.closeInnerPopups();
		return true;
	};
	popup.dispose = function() {		
		aa_remove(this.el,true);
	};

	popup.closeInnerPopups = function() {
		if (this.innerPopups) {
			for(var i=0;i<this.innerPopups.length;i++) {
				this.innerPopups[i].closedByParent = true;
				this.innerPopups[i].close();
				this.innerPopups[i].closedByParent = false;
			}
	  }
	};
	popup.isOpen = function() {
		return ajaxart.isattached(this.el);
	}

	var $close = $(settings.closeElement);
	$close.click(function() {
		popup.close(false);
	});

	doOpen();
	if (popup.reusablePopup) {
		aa_addOnDetach(popup.launchingElement,function() {
			popup.dispose();
		});
	}

	function doOpen() {
		popupsTop[0].appendChild(popup.el);

		if (settings.closeWhenClickingOutside) closeWhenClickingOutside();	
		aa_popup_setMaxZIndex(popup);

		positionPopup();
		markLaunchingElement();
		addValidationChecks();
		aa_element_attached(popup.el);
	}

	function addValidationChecks() {
		aa_bind(popup,'beforeClose',function(args) {
			if (args.closeType == 'OK') {
				var passed = aa_checkValidations(popup.frameElement);
				if (!passed) args.preventClose = true;
			}
		});
	}
	function markLaunchingElement() {
		if (popup.launchingElement) {
			popup.launchingElement.jbPopup = popup;
			$(popup.launchingElement).addClass('aa_opened_popup');
		}		
	}
	function positionPopup() {
		try {
			popup.location = popup.location || settings.defaultLocation || aa_popupCenterLocation();
			popup.location.setPopupLocation(popup);
			aa_trigger(popup,'show');
		} catch(e) {
			ajaxart.logException('error positioning popup',e);
		}	
	}

	function closeWhenClickingOutside() {
		popup.origMousedown = (window.captureEvents) ? window.onmousedown : document.onmousedown;
		var ignoreLaunchingElement = (settings.closeWhenClickingOutside == 'except launching element') && (popup.launchingElement);
		
		function isDescendant(child,parent) {
			if (!child) return false;
			if (child == parent) return true;
			return isDescendant(child.parentNode,parent);  
		}
		function captureClick(e) {
		    var $elem = $( (typeof(event)== 'undefined')? e.target : event.srcElement );

		    if ($elem.parents('html').length === 0 && $elem[0].tagName.toLowerCase() != 'html') return; // detached
		    if (isDescendant($elem[0],popup.el)) return;  // inside the popup
		    ignoreLaunchingElement = ignoreLaunchingElement || popup.ignoreCloseOnLaunchingElementClick;
		    if (ignoreLaunchingElement && isDescendant($elem[0],popup.launchingElement)) return; // from the launching element
				
				var clickedPopup = $elem.closest('.aa_popup')[0];
				if (clickedPopup && isDescendant(clickedPopup.jbPopup.launchingElement,popup.el)) return;  // clicked from an inner popup opened by us

				if (popup.innerPopups) {
					for(var i=0;i<popup.innerPopups.length;i++) {
						if ( isDescendant($elem[0],popup.innerPopups[0].frameElement) )
							return;
					}
			  }

		    popup.close('cancel');
	    }		
		
		aa_bindBodyMouseDown(captureClick);
		
		aa_bind(popup,'close',function() {
			aa_unbindBodyMouseDown(captureClick);
		},'clicking outside');
	}
}

function aa_open_popups() {
	var out = [];
	var openPopups = $('body').children('.jbart_popups').children();
	for(var i=0;i<openPopups.length;i++) {
		out.push(openPopups[i].jbPopup);
	}
	return out;
}

function aa_bindBodyMouseDown(callback) {
	var obj = window.captureEvents ? window : document;
	if (obj.addEventListener) 
		obj.addEventListener('mousedown',callback,true);
	else 
		obj.attachEvent('onmousedown',callback,true);
}
function aa_unbindBodyMouseDown(callback) {
	var obj = window.captureEvents ? window : document;
	if (obj.removeEventListener) 
		obj.removeEventListener('mousedown',callback,true);
	else 
		obj.detachEvent('onmousedown',callback);
}

function aa_popup_setMaxZIndex(popup) {
	var max = 20;

	if (!popup.zindex) {
		if (popup.launchingElement && $(popup.launchingElement).closest('.jbstudio_dlg').length > 0 || popup.jbStudio) {
			max = 2000;
			// we should also be jbstudio_dlg
			var otherStudioPopups = $('.jbstudio_dlg');
			for(var i=0;i<otherStudioPopups.length;i++) {
				if (otherStudioPopups[i].jbPopup == popup) continue;
				var zindex = parseInt($(otherStudioPopups[i])[0].style.zIndex || '0') || 0;
				if (!isInnerOldPopup(otherStudioPopups[i]))
					max = Math.max(max,zindex+2);
			}
			$(popup.el).addClass('jbstudio_dlg');
		} else {
			var openPopups = aa_open_popups();
			for(var i=0;i<openPopups.length;i++) {
				if (openPopups[i] != popup && !openPopups[i].jbStudio)
					max = Math.max(max,openPopups[i].zindex+2);
			}
			if (ajaxart.jbart_studio) {
				// make it the heightest z-index if ctrl+click
				$(popup.frameElement).click(function (e) {
					if (e.ctrlKey) {
						popup.jbStudio = true;
						popup.zindex = null;
						aa_popup_setMaxZIndex(popup);
					}
				});
			}
		}

		popup.zindex = max+1;
	} else {
		max = popup.zindex-1;
	}
	popup.$el.css('z-index',max);
	popup.$el.children().css('z-index',max);
	$(popup.frameElement).css('z-index',max+1);	

	function isInnerOldPopup(otherElem) {
		if (otherElem.Dialog && otherElem.Dialog.Mode == 'popup' && otherElem.Dialog.onElem && aa_isParent(otherElem.Dialog.onElem,popup.frameElement))

			return true;

		return false;
	}
}

function aa_new_popup_feature(settings,className,prototypeFunctions) {
	aa_init_class(className,prototypeFunctions);
	return new ajaxart.classes[className](settings || {});
}
function aa_popup_title_dragAndDrop() {
	return aa_new_popup_feature({},'PopupFeatureTitleDragNDrop',{
		init: function(popup) {
			var draggable_area = popup.$el.find('.aa_popup_title')[0];
			var draggable_frame = popup.frameElement;
			aa_enable_move_by_dragging(draggable_frame,draggable_area,this.onstartdrag,function() {
				aa_trigger(popup,'endDrag');
			});
		},
		onstartdrag: function() {},
		onenddrag: function() {}
	});
}

function aa_popup_feature_autoFocus() {
	return aa_new_popup_feature({},'PopupFeatureAutoFocus',{
		init: function(popup) {
			aa_bind(popup,'show',function() {
				setTimeout(function() {					
					var inp = $(popup.frameElement).find('input');
					if (!inp[0]) inp = $(popup.frameElement).find('textarea');
					if (inp[0]) inp[0].focus();
				},1);
			});
		}
	});
}

function aa_popup_feature_zindex(settings) {
	return aa_new_popup_feature(settings,'PopupFeatureZIndex',{
		init: function(popup) {
			popup.zindex = this.zindex
		}
	});
}
function aa_popup_feature_UniquePopup(settings) {
	return aa_new_popup_feature(settings,'UniquePopup',{
		init: function(popup) {
			popup.uniqueID = this.uniqueID;
			aa_bind(popup,'anotherPopupOpened',function(args) {
				var otherpopup = args.popup;
				if (otherpopup.uniqueID && otherpopup.uniqueID == popup.uniqueID) {
					popup.close();
				}
			});			
		}
	});
}
function aa_popup_feature_size(settings) {	
	return aa_new_popup_feature(settings,'PopupFeatureSize',{
		init: function(popup) {
			if (this.width) $(popup.contentsEl).width(this.width).css('overflow-x','auto');
			if (this.height) $(popup.contentsEl).height(this.height).css('overflow-y','auto');
		}
	});
}
function aa_popup_feature_floating_popup(settings) {
	return aa_new_popup_feature(settings,'PopupFeatureFloatingPopup',{
		init: function(popup) {
			var feature = this;
			popup.floatingPopup = true;
			popup.identifier = this.identifier;
			popup.closeCondition = this.closeCondition;
			// close others with the same identifier
			aa_bind(popup,'anotherPopupOpened',function(args) {
				var otherpopup = args.popup;
				if (otherpopup.floatingPopup && otherpopup.identifier == popup.identifier)
					popup.close();
			});

			aa_bind(popup,'show',refreshFields);
			aa_bind(popup,'close',refreshFields);

			if (feature.autoBringToFront) {
				$(popup.frameElement).mousedown(function() {
					var startZindex = popup.zindex;
					popup.zindex = null;
					aa_popup_setMaxZIndex(popup);
					if (popup.zindex < startZindex) {
						popup.zindex = startZindex;
						popup.$el.css('z-index',startZindex);
						$(popup.frameElement).css('z-index',startZindex+1);
					}
					$('.jbFloatingPopupActive').removeClass('jbFloatingPopupActive');
					$(popup.frameElement).addClass('jbFloatingPopupActive');
				});
			}

			if (feature.rememberLocations) {
				aa_bind(popup,'show',function() {
					sessionStorage['jbFloatingPopupIsOpen_'+popup.identifier] = 'true';
					if (feature.autoBringToFront) {
						$('.jbFloatingPopupActive').removeClass('jbFloatingPopupActive');
						$(popup.frameElement).addClass('jbFloatingPopupActive');
					}
				});

				aa_bind(popup,'endDrag',function() {
					var left = $(popup.frameElement).css('left').split('px')[0];
					var top = $(popup.frameElement).css('top').split('px')[0];

					sessionStorage['jbFloatingPopupLeft_'+popup.identifier] = left;
					sessionStorage['jbFloatingPopupTop_'+popup.identifier] = top;
				});

				aa_bind(popup,'beforeClose',function() {
					sessionStorage['jbFloatingPopupIsOpen_'+popup.identifier] = 'false';
				});
			}
			if (this.location) popup.location = this.location;
			popup.previousLocation = popup.location;
			popup.location = {
				setPopupLocation: function(popup) {
					var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
					var screenHeight = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);
					var usePrevLocation;

					var top = 20,left=0;
					if (feature.rememberLocations && sessionStorage['jbFloatingPopupLeft_'+popup.identifier]) {
						left = sessionStorage['jbFloatingPopupLeft_'+popup.identifier];
						top = sessionStorage['jbFloatingPopupTop_'+popup.identifier];
						left = Math.min(Math.max(0,left),screenWidth-50);
						top = Math.min(Math.max(0,top),screenHeight-50);
					} else {
						if (popup.previousLocation) {
						 popup.previousLocation.setPopupLocation(popup);
						 usePrevLocation = true;
						} else {
							// auto location
							$(popup.frameElement).css('display','inline-block'); // so that width() will work

							var popupWidth = $(popup.frameElement).outerWidth();
							left = screenWidth - popupWidth - 30;

							var openPopups = aa_open_popups();
							for(var i=0;i<openPopups.length;i++) {
								if (openPopups[i].floatingPopup) {
									top += 30;
									left -= 30;
								}
							}							
						}
					}
					var maxWidth = $(popup.frameElement).css('max-width');
					if (!maxWidth || maxWidth == 'none')
						$(popup.frameElement).css('max-width',parseInt(screenWidth * 0.9)+'px');
					
					var $popupContents = $(popup.frameElement).find('.aa_popup_contents');
					var maxHeight = $popupContents.css('max-height');
					if (!maxHeight || maxHeight == 'none')
						$popupContents.css('max-height',parseInt(screenHeight * 0.9)+'px');
					
					if (!usePrevLocation)
						$(popup.frameElement).css('position','fixed').css('left',left+'px').css('top',top+'px');						
				}
			};

			aa_bind(popup,'beforeResizer',function() {
				if (window.sessionStorage && sessionStorage['jbUniquePopupWidth_'+popup.identifier]) {
					$(popup.contentsEl).width(sessionStorage['jbUniquePopupWidth_'+popup.identifier]);
					$(popup.contentsEl).height(sessionStorage['jbUniquePopupHeight_'+popup.identifier]);				
				}
			});

			aa_bind(popup,'resize',function(args) {
				if (window.sessionStorage) {
					sessionStorage['jbUniquePopupWidth_'+popup.identifier] = args.width + 'px';
					sessionStorage['jbUniquePopupHeight_'+popup.identifier] = args.height + 'px';
				}
			});

			function refreshFields() {
				var fields = aa_split(feature.fieldsToRefresh,',',true);
				aa_refresh_field(fields,'screen',false,null,popup.context);
			}
		}
	});
}
function aa_popup_feature_toolbar_popup(settings) {
	return aa_new_popup_feature(settings,'PopupFeatureToolbar',{
		init: function(popup) {
			popup.toolbarID = this.toolbarID;
		}
	});
}
function aa_closePopupsInTest() {
	var openPopups = aa_open_popups();
	for(var i=openPopups.length-1;i>=0;i--) {
		if (openPopups[i].intest) {
			aa_remove(openPopups[i].el,true);
		}
	}
}

function aa_popupElementForTests() {
	var openPopups = aa_open_popups();
	for(var i=openPopups.length-1;i>=0;i--) {
		if (openPopups[i].intest) {
			return [openPopups[i].el];
		}
	}
	return null;
}
function aa_popupsForPreview() {
	var out = [];
	var openPopups = aa_open_popups();
	for(var i=openPopups.length-1;i>=0;i--) {
		if (openPopups[i].RefreshPreview) {
			out.push(openPopups[i]);
		}
	}
	return out;
}

function aa_popup_closeOnEnter() {
	return aa_new_popup_feature({},'PopupFeatureCloseOnEnter',{
		init: function(popup) {
			$(popup.frameElement).attr('tabindex','0').keydown(function(e) {
				if(e.keyCode == 13) popup.close();
			});
		}
	});
}
function aa_popup_feature_closeOnBackButton() {
	return aa_new_popup_feature({},'PopupFeatureCloseOnBackButton',{
		init: function(popup) {
			aa_bind(popup,'show',function() {
				jBart.popupToClose = popup;
				aa_setUrlHashValue('openDialog','true');
			});
			aa_bind(popup,'close',function() {
				jBart.popupToClose = null;
				aa_setUrlHashValue('openDialog','');
			});

			if (!jBart.hashValueChangedClosePopup) {
				jBart.hashValueChangedClosePopup = function() {
					if (aa_urlHashValue('openDialog') != 'true' && jBart.popupToClose) {
						jBart.popupToClose.close();
					}
				};
				$(window).bind('hashchange',jBart.hashValueChangedClosePopup);
			}
		}
	});
}
function aa_popup_feature_closeOnEsc(settings) {
	return aa_new_popup_feature(settings,'PopupFeatureCloseOnEsc',{
		init: function(popup) {
			$(popup.frameElement).attr('tabindex','0').keydown(function(e) {
				if(e.keyCode == 27) popup.close();
			});
		}
	});
}

function aa_popup_feature_hoverPopup(settings) {
	return aa_new_popup_feature(settings,'PopupFeatureHoverPopup',{
		init: function(popup) {
			var isInside,hasFocus;
			popup.isHoverPopup = true;

			aa_bind(popup,'anotherPopupOpened',function(otherPopup) {
				if (otherPopup.isHoverPopup) popup.close();
			});

			$(popup.launchingElement).mouseout(mouseOut);
			$(popup.frameElement).mouseout(mouseOut);
			$(popup.launchingElement).mouseover(mouseOver);
			$(popup.frameElement).mouseover(mouseOver);
			$(popup.frameElement).focus(function() {
				hasFocus = true;
			});
			$(popup.frameElement).blur(function() {
				hasFocus = false;
			});

			function mouseOut() {
				isInside = false;
				if (!hasFocus) startClosingPopup();				
			}
			function mouseOver() {
				isInside = true;
			}
			function startClosingPopup() {
				setTimeout(function() { 
					if (ajaxart.isattached(popup.frameElement) && !isInside) { popup.close(); }
				},200);
			}
		}
	});
}


function aa_isStudioRefreshAndPopupIsOpen(type,apiObject) {
	if (ajaxart.inStudioRefresh) {
		var field = apiObject && (apiObject.Field || apiObject.field);
		var openPopups = aa_open_popups();
		for(var i=openPopups.length-1;i>=0;i--) {
			var popup = openPopups[i];
			var popupField = popup.apiObject && (popup.apiObject.Field || popup.apiObject.field);
			if (popup.type == type && popupField && field && field.Id == popupField.Id) {
				popup.close();
				return true;			
			}
		}
	}
	return false;
}

function aa_close_containing_popup(elem,doOnExitCallback,exitMode) {
	exitMode = exitMode || null;
	doOnExitCallback = doOnExitCallback || function() {};

	var top = elem && $(elem).closest('.aa_popup')[0];
	if (top && top.jbPopup) {
		var closeReturn = top.jbPopup.close(exitMode);
		if (closeReturn) { // closed properly without failing validations
			doOnExitCallback();			
		}
	}
}

function aa_confirmation_popup(confirmationPopup,settings) {
	settings = aa_defaults(settings,{
		yesButtonElement: confirmationPopup.$el.firstOfClass('aa_popup_yes'),
		noButtonElement: confirmationPopup.$el.firstOfClass('aa_popup_no'),
		questionElement: confirmationPopup.$el.firstOfClass('aa_popup_question'),
		location: aa_popupCenterLocation(),
		features: []
	});

	$(settings.questionElement).text(confirmationPopup.question);
	$(settings.yesButtonElement).text(confirmationPopup.labelForYes);
	$(settings.noButtonElement).text(confirmationPopup.labelForNo);

	var features = (confirmationPopup.features || []).concat(settings.features);

	var popup = aa_createLightPopup({
		el: confirmationPopup.el,
		launchingElement: confirmationPopup.launchingElement,
		location: settings.location,
		apiObject: confirmationPopup,
		type: 'confirmation',
		features: features,
		title: confirmationPopup.title,
		popupSettings: {
			closeWhenClickingOutside: settings.closeWhenClickingOutside
		}
	});

	$(settings.yesButtonElement).click(function() {
		popup.close();
		confirmationPopup.action();
	});

	$(settings.noButtonElement).click(function() {
		popup.close();
	});

	popup.show();
}

function aa_hasPositionFixedParent(elem) {
	for(var iter=elem;iter && iter.nodeType ==1;iter=iter.parentNode) {
		if ($(iter).css('position') == 'fixed') return true;
	}
	return false;
}

function aa_windowHeight() {
	var height = $(window).height();
	if (jBart.footerHeight) height -= jBart.footerHeight;
	return height;
}

function aa_popup_strategy_onhover(popupAdapterObject,settings) {
	settings = aa_defaults(settings,{ delay: 1000 });
	var isInside,timerID = false;

	popupAdapterObject.$wrapper.mouseover(function() {
		if (isInside || !ajaxart.isattached(popupAdapterObject.$wrapper[0])) return;
		if (timerID) clearTimeout(timerID);
		timerID = setTimeout(function() {
			if (isInside && ajaxart.isattached(popupAdapterObject.$wrapper[0])) popupAdapterObject.openPopup();
			timerID = null;
		},settings.delay);
		isInside = true;
	});
	popupAdapterObject.$wrapper.mouseout(function() { 
		isInside = false;
	});
	if (settings.alsoOpenOnClick) {
		popupAdapterObject.$wrapper.click(function() {
			if (timerID) { clearTimeout(timerID); timerID=null; }
			popupAdapterObject.openPopup();
		});
	}

	aa_addOnDetach(popupAdapterObject.$wrapper[0],function() {
		popupAdapterObject.closePopup();
	});
}

aa_gcs("popup_feature",{
	RunOnClose: function(profile,data,context) {
		var closeTypeFilter = aa_text(data,profile,'CloseType',context);
		return [{
			init: function(popup) {
				aa_bind(popup,'close',function(closeType) {
					if (closeTypeFilter && closeType != closeTypeFilter) return;
					ajaxart.run(data,profile,'Action',context);
				});				
			}			
		}];
	}
});

//******************* popup resizer ************************/

aa_gcs("popup_feature",{
	Variable: function(profile,data,context) {
		return [{
			init: function(popup) {
				popup.context.vars[aa_text(data,profile,'VarName',context)] = aa_run(data,profile,'Value',context);
			}
		}];
	},
	PopupData: function(profile,data,context) {
		return [{
			init: function(popup) {
				popup.data = aa_run(data,profile,'Value',context);
			}
		}];
	},
	Resizer: function(profile,data,context) {
		return [{
			init: function(popup) {
				var style = aa_first(data,profile,'Style',context);
				var resizerObj = {
					popup: popup
				};
				aa_renderStyleObject2(style,resizerObj,data,null,context,{ funcName: 'add' });
			}
		}];
	}
});

function aa_popup_resizer(resizerObj,settings) {
	var popup = resizerObj.popup;
	aa_bind(popup,'show',function() {		
		var resizeCover = $('<div id="aa_resize_cover" style="height:100%; width: 100%; background:pink;z-index:10000; opacity:0; filter: alpha(opacity=0);position:fixed;top:0;left:0;top:0;bottom:0"/>');
		var contentsEl = popup.contentsEl;
		contentsEl.parentNode.appendChild(resizerObj.el);
		var props = null;
		if (resizerObj.minWidth) $(contentsEl).css('min-width',resizerObj.minWidth+'px');
		if (resizerObj.minHeight) $(contentsEl).css('min-height',resizerObj.minHeight+'px');

		aa_trigger(popup,'beforeResizer');

		resizerObj.$el.css('z-index',popup.zIndex+1);

		resizerObj.$el.mousedown(function(e) {
			if (! props) {
				var width = $(contentsEl).width();
				var height = $(contentsEl).height();
				props = { mouse_x: (e.clientX || e.pageX), mouse_y: (e.clientY || e.pageY), width: width, height: height };
				jBart.disableSelections();

				$('body').append(resizeCover);
			}
			var mouse_move = function(e) {
				  e = e || event;
				  var mouse_x = (e.clientX || e.pageX), mouse_y = (e.clientY || e.pageY);
				  var newWidth = props.width + (mouse_x - props.mouse_x);
				  var newHeight = props.height + (mouse_y - props.mouse_y);
				  $(contentsEl).width(newWidth).height(newHeight);				  
				  aa_trigger(popup,'resize',{ width: newWidth, height: newHeight });
		  };
			var mouse_up = function(e) {
				  e = e || event;
				  props = null;
				  window.onmousemove = null; window.onmouseup =null;  document.onmouseup=null; document.onmousemove=null; 
					jBart.restoreSelections();
					$('#aa_resize_cover').remove();
			  }
			  if (window.captureEvents){ window.onmousemove = mouse_move;window.onmouseup = mouse_up; }
			  else { document.onmouseup=mouse_up; document.onmousemove=mouse_move; }
	    });
	},'resizer');	
}

/******************************** features *******************************************************/

aa_gcs("popup_feature",{
	TogglePopup: function(profile,data,context) {
		var identifier =  aa_text(data,profile,'PopupIdentifier',context);

		return [{
			init: function(popup) {
				popup.identifier = identifier;
				popup.ignoreCloseOnLaunchingElementClick = true;
				popup.PreventOpen = function() {
					var openPopups = aa_open_popups();
					for(var i=openPopups.length-1;i>=0;i--) {
						if (openPopups[i].identifier == identifier) {
							openPopups[i].close();
							return true;
						}
					}
				};
			}
		}];
	}
});


function aa_popup_feature_closeButton(settings) {
	return aa_new_popup_feature(settings,'PopupFeatureCloseButton',{
		init: function(popup) {
			var $btn = $(popup.frameElement).find('.aa_popup_close_button');
			$btn.text(settings.text);
			$(popup.frameElement).find('.aa_popup_close').click(function() {
				popup.close();
			});
		}		
	});	
}

function aa_popup_feature_autoClose(settings) {
	return aa_new_popup_feature(settings,'AutoClose',{
		init: function(popup) {
			if (window.jbDoNotAutoClosePopups) return; // for debugging
			setTimeout(function(){
				$(popup.frameElement).fadeOut("slow",function() {
					popup.close();	
				});				
			},this.closeTimeout || 1000);
		}		
	});	
}


/************************ locations *************************/

aa_gcs("popup",{
	PopupLocation: function (profile, data, context) {
		return [{
			init: function(popup) {
				popup.location = aa_first(data,profile,'Location',context);
			}
		}];
	},
	ScreenCenter: function (profile, data, context) {
		return [aa_popupCenterLocation()];
	},
	ScreenTopRight: function (profile, data, context) {
		return [aa_popupScreenTopRightLocation({
			marginTop: aa_int(data,profile,'MarginTop',context),
			marginRight: aa_int(data,profile,'MarginRight',context)
		})];
	},
	NearLauncher: function (profile, data, context) {
		return [aa_popupNearLauncherLocation({
			minWidthOfLaunchingElement: aa_bool(data,profile,'MinWidthAsLaunchingElement',context),
			location: aa_text(data,profile,'Location',context)
		})];
	}	
});


function aa_popupCenterLocation(settings) {
	jBart.footerHeight = jBart.footerHeight || 0;
	return aa_new_popup_feature(settings,'PopupCenterLocation',{
		setPopupLocation: function(popup) {
			var hasHeaderHeight = jBart.headerHeight && !popup.$el.hasClass('jbstudio_dlg');
			var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
			var screenHeight = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);
			if (hasHeaderHeight) screenHeight -= (jBart.headerHeight+jBart.footerHeight);

			$(popup.frameElement).css('display','inline-block'); // so that width() will work
			
			var popupWidth = $(popup.frameElement).outerWidth();
			var popupHeight = $(popup.frameElement).outerHeight();

			$(popup.frameElement).css('max-width',parseInt(screenWidth * 0.9)+'px');

			if (popupWidth > screenWidth) {
				// can be relevant in mobile scenarios
				popupWidth = parseInt(screenWidth * 0.85);
				$(popup.frameElement).css('max-width',popupWidth+'px');
			}
			var $popupContents = $(popup.frameElement).find('.aa_popup_contents');
			// var maxHeight = $popupContents.css('max-height');
			// if (!maxHeight || maxHeight == 'none')
			// 	$popupContents.css('max-height',parseInt(screenHeight * 0.8)+'px');

			var left = parseInt( (screenWidth - popupWidth)/2 );
			var top = parseInt( (screenHeight - popupHeight)/2 );
			if (top<0) top = 0;
			if (left<0) left = 0;
			if (hasHeaderHeight) top += jBart.headerHeight;

			$(popup.frameElement).css('position','fixed').css('left',left+'px').css('top',top+'px');
		}
	});
}

function aa_popupScreenTopRightLocation(settings) {
	return aa_new_popup_feature(settings,'PopupScreenTopRightLocation',{
		setPopupLocation: function(popup) {
			var hasHeaderHeight = jBart.headerHeight && !popup.$el.hasClass('jbstudio_dlg');
			var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);

			$(popup.frameElement).css('display','inline-block'); // so that width() will work
			
			var popupWidth = $(popup.frameElement).outerWidth();

			var left = screenWidth - popupWidth - this.marginRight;
			var top = this.marginTop;
			if (hasHeaderHeight) top += jBart.headerHeight;

			$(popup.frameElement).css('position','fixed').css('left',left+'px').css('top',top+'px');
		}
	});
}

function aa_popupStackingNotificationLocation(settings) {
	settings = aa_defaults(settings,{
		marginBottom: 0,
		marginLeft: 0,
		marginTop: 0
	});
	return aa_new_popup_feature(settings,'StackingNotificationLocation',{
		setPopupLocation: function(popup) {
			popup.isStackingNotificationLocation = true;
			this.marginBottom = this.marginBottom || 0;
			this.marginRight = this.marginRight || 0;

			$(popup.frameElement).css('display','inline-block'); // so that width() will work
			
			var popupHeight = $(popup.frameElement).outerHeight();

			var bottom = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);

			var openPopups = aa_open_popups();
			for(var i=0;i<openPopups.length;i++) {
				if (openPopups[i].isStackingNotificationLocation && openPopups[i] != popup)
					$(openPopups[i].frameElement).animate({top: '-='+ (popupHeight+this.marginBottom) },'slow');
			}

			var right = this.marginRight;
			var top = bottom - popupHeight - this.marginBottom;
			popup.stackingTop = top;

			$(popup.frameElement).css('position','fixed').css('right',right+'px').css('top',top+popupHeight+'px');
			$(popup.frameElement).animate({top: '-='+ popupHeight },'slow');
		}
	});
}

function aa_popupNearLauncherLocation(settings) {
	settings = aa_defaults(settings,{ 
		location: 'bottom',
		marginFromWindowTop: 10,
		marginFromWindowBottom: 10,
		marginFromWindowRight: 10,
		marginFromWindowLeft: 10
	});

	return aa_new_popup_feature(settings,'PopupNearLauncherLocation',{
		setPopupLocation: function(popup) {
			var feature = this;
			//  See Sample: http://localhost/ajaxart/gstudio.html?widget=features/PopupLauncherLocations
			var position = 'absolute';
			if (aa_hasPositionFixedParent(popup.launchingElement)) position = 'fixed';

			$(popup.frameElement).css('position',position);
			if (!popup.launchingElement) return;

			var top = aa_absTop(popup.launchingElement);
			var left = aa_absLeft(popup.launchingElement);
			var width = $(popup.launchingElement).outerWidth();
			var height = $(popup.frameElement).outerHeight();
			var popupTop = top + $(popup.launchingElement).outerHeight();
			var popupLeft = left;
			var windowHeight = aa_windowHeight();
			var windowWidth = $(window).width();
			var windowTop = (position == 'fixed' ? 0 : window.pageYOffset);
			var windowLeft = (position == 'fixed' ? 0 : window.pageXOffset);
			// if (ajaxart.jbart_studio) {
			// 	var studio_header_pos = $(".fld_gstudio_widget_wrapper").children().position();
			// 	windowTop += studio_header_pos.top;
			// 	windowHeight -= studio_header_pos.top;
			// 	windowLeft += studio_header_pos.left
			// 	windowWidth -= studio_header_pos.left;
			// }

			// Vertical Positioning
			if (popupTop+height-windowTop + this.marginFromWindowBottom > windowHeight) // going up instead of down (no room enough down)
				popupTop = top - height;

			if (popupTop < windowTop + this.marginFromWindowTop)
				popupTop = top - $(popup.launchingElement).outerHeight()/2 -height/2; // try centering it

			if (popupTop+height+this.marginFromWindowBottom > windowHeight + windowTop ||	// overflowing to bottom
					 popupTop < windowTop + this.marginFromWindowTop)						// overflowing to top
				popupTop = windowTop + this.marginFromWindowTop;	// Overflowing to top or to bottom, try adjusting it to top

			if (popupTop+height+this.marginFromWindowBottom > windowHeight + windowTop)	// too high: make the popup shorter
				$(popup.frameElement).css("max-height",windowHeight - this.marginFromWindowTop - this.marginFromWindowBottom).css("overflow-y","auto");

			if (this.minWidthOfLaunchingElement)
				$(popup.frameElement).css('min-width',width+'px');

			// Horizontal Positioning
			var popupWidth = $(popup.frameElement).outerWidth();
			if (popupLeft + popupWidth + this.marginFromWindowRight > windowLeft + windowWidth)	// try going left instead of right
				popupLeft -= popupWidth - $(popup.launchingElement).outerWidth();
			if (popupLeft < windowLeft + this.marginFromWindowRight)	// too left, align to window left
				popupLeft = windowLeft + this.marginFromWindowRight;
			if (popupLeft + popupWidth + this.marginFromWindowRight > windowLeft + windowWidth)	// too wide, make the popup narrower
				$(popup.frameElement).css("max-width",windowWidth - this.marginFromWindowRight - this.marginFromWindowLeft).css("overflow-x","auto");

			if (feature.location == 'right') {	// TODO: handle going too right or too low
				popupTop = top;
				popupLeft = left + width + 2;				
			}
			if (feature.location == 'above center') {	
				popupTop = top - height;
				popupLeft = parseInt(left + (width/2) - (popupWidth/2));
				if (settings.topMargin) popupTop -= settings.topMargin;
			}

			$(popup.frameElement).css('top',popupTop+'px').css('left',popupLeft+'px').css("box-sizing","border-box");

		}
	});
};


/******************************  async popup ***************************************/

aa_gcs("popup_async", {
	OpenPopupAsync: function (profile, data, context) {
		var deferred = $.Deferred();

		var style = aa_first(data,profile,'Style',context);

		aa_init_class_Popup();
		var base_features = ajaxart.runsubprofiles(data,profile,'Feature',context);
		base_features.push(aa_popup_feature_asyncPopupResult({
			deferred: deferred
		}));

		var popup = new ajaxart.classes.Popup({
			title: aa_text(data,profile,'PopupTitle',context),
			data: data, context: context, profile: profile,
			launchingElement: aa_var_first(context,'ControlElement'),
			base_features: base_features
		});

		aa_renderStyleObject(style,popup,context,true,{	jsFunctionName: 'show' });

		return [deferred.promise()];
	}
});

function aa_popup_feature_asyncPopupResult(settings) {
	return aa_new_popup_feature(settings,'PopupFeatureAsyncPopupResult',{
		init: function(popup) {
			var feature = this;
			aa_bind(popup,'close',function(args) {
				if (args.closeType == 'OK')
					feature.deferred.resolve();
				else
					feature.deferred.reject();
			});				
		}
	});
}


aa_gcs("text", {
  FirstSucceeding: function (profile,data,context)
  {
    var itemProfiles = ajaxart.subprofiles(profile,'Item');

    for(var i=0;i<itemProfiles.length;i++)
    {
    	var subresult = ajaxart.run(data,itemProfiles[i],"",context);
   		for(var j=0;j<subresult.length;j++)
   		{
   			if (ajaxart.totext_item(subresult[j]).length > 0)
   				return subresult;
    	}
    }
  	return [];  	
  },
  NormalizeNewLines: function(profile,data,context) {
	  var result = aa_text(data,profile,'Text',context).replace(/\r\n/g,'\n'); 
	  return [result];
  },
  Extract: function (profile,data,context)
  {
	  var startMarkers = ajaxart.runsubprofiles(data,profile,'StartMarker',context);
	  if (startMarkers.length == 0) // backward compatible
		  startMarkers = ajaxart.run(data,profile,'StartMarker',context);
	  var endMarker = aa_text(data,profile,'EndMarker',context);
	  var includingStartMarker = aa_bool(data,profile,'IncludingStartMarker',context);
	  var includingEndMarker = aa_bool(data,profile,'IncludingEndMarker',context);
	  var onlyFirst = aa_bool(data,profile,'OnlyFirstResult',context);
	  var trim = aa_bool(data,profile,'Trim',context);
	  var str = aa_text(data,profile,'From',context);;
	  if (startMarkers.length == 0) return data;

	  var index = 0, out = [], prev_index=-1;
	  var string_start =0;
	  var position = function(str, marker, startpos) { return { pos: str.indexOf(marker,startpos), length: marker.length } } 
	  if (aa_bool(data,profile,'Regex',context)) 
		  position = function(str, marker, startpos) {
	  		var len = 0;
	    	var pos = -1;
	  		try {
		  		startpos = startpos || 0;
		  		var str = str.substring(startpos);
		  		var marker_regex = new RegExp(marker,'m');
		    	pos = str.search(marker_regex);
		    	if (pos > -1) { // get the length of the regex
		    		pos = (pos >= 0) ? pos + startpos : pos;
		    		var match = str.match(marker_regex)[0];
		    		len = match ? match.length : 0;
		    	}
	  		} catch(e) {} // probably regex exception
		    return { pos: pos , length: len };
	  	  	}
	  while (1) {
	  	  if (prev_index == index) break;	// prevent infinitive loop
	  	  prev_index = index;
		  var cut_previous_index;
		  for(var i=0; i<startMarkers.length; i++)
		  {
			  var marker = startMarkers[i];
			  var markerPos = position(str,marker,index);
			  index = markerPos.pos;
			  if (i==0)
				  cut_previous_index = markerPos.pos - string_start;
			  if (markerPos.pos == -1) return out;
			  string_start = markerPos.pos;
			  if (!includingStartMarker)
				  string_start += markerPos.length;
			  index += markerPos.length;
		  }
		  if (out.length>0 && endMarker == ''){  // cutting previous item
			  out[out.length-1] = out[out.length-1].substring(0,cut_previous_index);
		  }
		  var endPos = position(str,endMarker,index);
		  var out_item;
		  if (endMarker == '')
			  out_item = str.substring(string_start);
		  else if (endPos.pos == -1)
			  return out;
		  else if (includingEndMarker)
			  out_item = str.substring(string_start,endPos.pos+endPos.length);
		  else
			  out_item = str.substring(string_start,endPos.pos);
		  if (trim)
			  out_item = aa_text_trim(out_item);
		  if (out_item)
			  out.push(out_item);
		  if (onlyFirst) 
			  return out;
		  if (endMarker != '') 
		  	index = endPos.pos+endPos.length;
	  }
	  return out;
  },
  MomentTimeFormat: function (profile,data,context) {
  	var timeInt = aa_int(data,profile,'Time',context);
  	if (!timeInt && ajaxart.inPreviewMode) timeInt = new Date().getTime();

  	var format_str = aa_text(data,profile,'Format',context);
  	return timeInt ? [aa_moment(timeInt).format(format_str)] : [];
  },
  TimeDurationAsHumanText: function(profile, data, context) {
  	var fromTime = aa_int(data,profile,'FromTimeInMillis',context);
  	var toTime = aa_int(data,profile,'ToTimeInMillis',context);
  	if (!fromTime || !toTime) return [];
  	return [aa_moment().duration({ seconds: (fromTime-toTime)/1000 }).humanize(true)];
  },
  TimeFromNow: function (profile,data,context) {
  	var timeInt = aa_int(data,profile,'Time',context);
  	if (isNaN(timeInt)) return '';
  	
  	var now = new Date().getTime();
  	if (now < timeInt) return ['0 seconds ago']; // do not allow negative time
  	var seconds = parseInt((now - timeInt) / 1000);
  	if (seconds < 60) return [seconds + ' seconds ago'];
  	return timeInt ? [aa_moment(timeInt).fromNow(true) + ' ago'] : ['now'];
  },
  MultiLang: function (profile,data,context)
  {
  	return ajaxart_multilang_run(data,profile,'Pattern',context);
  },  
  Split: function (profile,data,context)
  {
    var sep = aa_text(data,profile,'Separator',context);
    var part = aa_text(data,profile,'Part',context);
    var index_num = aa_int(data,profile,'Index',context);
    var str = aa_text(data,profile,'Text',context);
    
    if (aa_bool(data,profile,'Regex',context))
    	sep = new RegExp(sep);
    var result = '';
	if (str == '') return [];

	var items = str.split(sep);
	if (aa_bool(data,profile,'NoEmptyValues',context)) {
		for(var i=items.length-1;i>=0;i--)
			if (items[i] == "") items.splice(i,1);
	}
	switch(part)
	{
	case "ButFirst" : if (items.length >= 1) return items.slice(1); break;
	case "First" : if (items.length >= 1) result = items[0]; break;
	case "Second" : if (items.length >= 2) result = items[1]; break;
	case "Third" : if (items.length >= 3) result = items[2]; break;
	case "All but Last" :
		var out = [];
		for (var i=0; i<items.length-1; i++)
			out.push(items[i]);
		return out;
	case "All but First" :
		var out = [];
		for (var i=1; i<items.length; i++)
			out.push(items[i]);
		return out;
	case "All but First and Last" :
		var out = [];
		for (var i=1; i<items.length-1; i++)
			out.push(items[i]);
		return out;
	case "Second" : if (items.length >= 2) result = items[1]; break;
	case "All" :
		if (index_num && items.length >= index_num) 
			result = items[index_num-1];
		else
			return items;
		break;	
	case "By index" : 
		if (index_num && items.length >= index_num) 
			result = items[index_num-1];
		else
			return items;
		break;
	case "Last" : if (items.length > 0) result = items[items.length-1]; break;
	};

	if (result == '')
		result = aa_text(data,profile,'Default',context);
	return [result];
  },
  Text: function (profile,data,context)
  {
    var pattern = aa_text(data,profile,'Text',context);
    
    var result = ajaxart.dynamicText(data,pattern,context);
    var text_result = ajaxart.totext_array(result);
    if (aa_bool(data,profile,'RemoveEmptyParenthesis',context))
    	test_result = text_result.replace('\(\)','').replace(/^\s*/, '').replace(/\s*$/, '');
    return [ text_result ];
  },
  StartsWith: function (profile,data,context)
  {
	  var text = aa_text(data,profile,'Text',context);
	  var _with = aa_text(data,profile,'With',context);
	  
	  if ( text.indexOf(_with) == 0 ) return ["true"];
	  return [];
  },
  EndsWith: function (profile,data,context)
  {
	  var text = aa_text(data,profile,'Text',context);
	  var _with = aa_text(data,profile,'With',context);
	  
	  if ( text.lastIndexOf(_with) != -1 && text.lastIndexOf(_with) + _with.length == text.length ) return ["true"];
	  return [];
  },
  Length: function (profile,data,context)
  {
	  var str = ajaxart.totext_array(data);
	  var length = str.length;
	  return [length];
  },
  ToChars: function (profile,data,context)
  {
	  var str = ajaxart.totext_array(data);
	  var length = str.length;
	  var result = [];
	  for(var i=0;i<str.length;i++)
		  result.push(str.charAt(i));
	  return result;
  },
  Truncate: function (profile,data,context)
  {
	  var text = aa_text(data,profile,'Text',context);
	  var length = aa_int(data,profile,'Length',context);
	  if (text.length <= length) return [text];
	  var newtext = text.substring(0,length) + aa_text(data,profile,'Suffix',context);
	  return [newtext];
  },
  NumberFormat: function (profile,data,context)
  {
	  var number = ajaxart.totext_array(data);
	  var symbol = aa_text(data,profile,'Symbol',context);
	  var symbolLeft = ! aa_bool(data,profile,'SymbolAtRight',context);
	  var noCommaSeparator = aa_bool(data,profile,'NoCommaSeparator',context);
	  var use_cents = aa_bool(data,profile,'Cents',context);

	  var num = number.split('.')[0];
	  if (!noCommaSeparator)
		  for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
			  num = num.substring(0, num.length - (4 * i + 3)) + ',' + num.substring(num.length - (4 * i + 3)); 
	 
	  if (use_cents)
	  {
		  var cents = '00';
		  if (number.split('.').length > 1)
			  cents = number.split('.')[1];
		  cents = (cents + '00').substring(0,2);
		  num = num + '.' + cents;
	  }
	  if (num[0] == '-' && aa_bool(data,profile,'MinusInParenthesis',context))
		  num = symbolLeft ? '(' + symbol + num.substring(1) + ')' : '(' + num.substring(1) + symbol  + ')';
	  else
		  num = symbolLeft ? symbol + num : num + symbol;

	  return [num];
  },
  Concat: function (profile,data,context)
  {
    var prefix = aa_text(data,profile,'Prefix',context);
    var suffix = aa_text(data,profile,'Suffix',context);
    var sep = aa_text(data,profile,'Separator',context);
    var items = ajaxart.run(data,profile,'Items',context);
    var lastSeparator = aa_text(data,profile,'LastSeparator',context);
    var maxLength = aa_int(data,profile,'MaxLength',context);
    
    if (lastSeparator == "")
    	lastSeparator = sep;
    var out = prefix;

	var compiledItemText = ajaxart.compile(profile,'ItemText',context);
    
    for(var i=0;i<items.length;i++) {
    	var item = items[i];
    	var current = "";
    	
    	if (compiledItemText == "same") current = ajaxart.totext_item(item);
    	else if (compiledItemText == null) current = aa_text([item],profile,'ItemText',context);
    	else current = ajaxart.totext_array(compiledItemText([item],context));
    	
//    	if (current != "") {
	    	if (i!=0 && i+1<items.length) out += sep;
	    	if (i!=0 && i+1 == items.length) out += lastSeparator;
	    	out += current;
//    	}

  		if (out.length > maxLength && maxLength > 0) {
  			var overmaxtext = aa_text(data,profile,'SuffixForMax',context);
  			out = out.substring(0,maxLength) + overmaxtext;
  			return [out + suffix];
  		}
    }
  	var items_array = ajaxart.subprofiles(profile,'Item');
  	for(var i=0;i<items_array.length;i++) {
  		var current = aa_text(data,items_array[i],"",context);
  		if (current != "") {
	    	if (i!=0 && i+1<items_array.length) out += sep;
	    	if (i!=0 && i+1 == items_array.length) out += lastSeparator;
	    	out += current;
  		}
  	}

    out += suffix;
    return [out];
  },
  Capitalize: function (profile,data,context)
  {
	  var str = ajaxart.totext_array(data);
	  var mode = aa_text(data,profile,'Mode',context);
	  if (mode == "capital to separate words")
		  return [aa_text_capitalizeToSeperateWords(str)];
	  if (mode == "upper to separate capital")
	  {
		  var out = "";
		  str = str.toLowerCase();
		  var begin_of_word=true;
		  var counter=0;
		  while (counter < str.length)
		  {
			  var ch = str.charAt(counter);
			  var ch_str = "" +ch;

			  if (ch == '_')
			  {
				  begin_of_word= true;
				  out = out + " ";
				  counter++;
				  continue;
			  }

			  if (begin_of_word)
				  out = out + ch_str.toUpperCase();
			  else 
				  out = out + ch_str;

			  begin_of_word= false;
			  counter++;
		  }
		  return [out];
	  }
	  if (mode == "split and capitalize words")
	  {
		  var out = "";
		  //str = str.toLowerCase();
		  var begin_of_word=true;
		  var counter=0;
		  while (counter < str.length)
		  {
			  var ch = str.charAt(counter);
			  var ch_str = "" +ch;

			  if (ch == '_')
			  {
				  begin_of_word= true;
				  out = out + " ";
				  counter++;
				  continue;
			  }

			  if (ch >= 'A' && ch <= 'Z' && counter != 0)
			  {
				  begin_of_word= true;
				  out = out + " ";
			  }

			  if (begin_of_word)
				  out = out + ch_str.toUpperCase();
			  else 
				  out = out + ch_str;

			  begin_of_word= false;
			  counter++;
		  }
		  return [out];
	  }
	  if (mode == "separate words to capital")
	  {
		  var out = "";
		  var counter=0;
		  while (counter < str.length)
		  {
			  var ch = str.charAt(counter);
			  if (counter == 0) out += str.charAt(counter).toUpperCase();
			  else if (' !@#$%^&*()./'.indexOf(ch) != -1) {
				 if (counter+1 < str.length)  {
					 out += str.charAt(counter+1).toUpperCase();
					 counter++;
				 }
			  }
			  else out += str.charAt(counter);
			  
			  counter++;
		  }
		  str = out;
	  }
	  if (mode == "capital each word")
	  {
		  var out = "";
		  var counter=0;
		  while (counter < str.length)
		  {
			  if (counter == 0) out += str.charAt(counter).toUpperCase();
			  else if (str.charAt(counter) == " ") {
				 if (counter+1 < str.length)  {
					 out += " " + str.charAt(counter+1).toUpperCase();
					 counter++;
				 }
			  }
			  else out += str.charAt(counter);
			  
			  counter++;
		  }
		  str = out;
	  }
	  return [str];
  },
  Replace: function (profile,data,params)
  {
    var find = aa_text(data,profile,'Find',params);
    var replaceWith = aa_text(data,profile,'ReplaceWith',params);
    var useRegex = aa_bool(data,profile,'UseRegex',params);
    var replaceAll = aa_bool(data,profile,'ReplaceAll',params);
    var str = aa_text(data,profile,'Text',params);
    
	var result = "";
//	  		if (useRegex) {
		if (replaceAll)
			var reg = new RegExp(find, "g");
		else
			var reg = new RegExp(find);
		result = str.replace(reg, replaceWith);
//	  		}
	return [ result ];
  },
  ToIdText: function (profile,data,context)
  {
	return [aa_string2id(aa_totext(data))];
  },
  ToId: function (profile,data,context)
  {
	  var result = aa_string2id(aa_text(data,profile,'Text',context));
	  var usedArr = ajaxart.run(data,profile,'UsedIDs',context),usedIds=",";
	  
	  if (usedArr.length == 0) return [result];
	  for (var i=0;i<usedArr.length;i++) usedIds += aa_totext([usedArr[i]]) + ',';
	  
	  while ( usedIds.indexOf(','+result+',') > -1 ) {
		  var lastDigit = result.charAt(result.length-1);
		  if (lastDigit > '0' && lastDigit < '8')
		    result = result.substring(0,result.length-1) + (parseInt(lastDigit)+1);
		  else if (lastDigit == '9')
		    result = result.substring(0,result.length-1) + '10';
		  else 
			result = result + '1';
	  }
	  return [result];  
  },
  Translate: function (profile,data,context)
  {
	  var text = aa_text(data,profile,'Text',context);
	  var out = ajaxart_multilang_text(text,context);
	  return [out];
  },
  TranslatePattern: function (profile,data,context)
  {
	  return ajaxart_multilang_run(data,profile,'Pattern',context);
  },
  ReplaceWithRegex: function (profile,data,params)
  {
	  var pattern = aa_text(data,profile,'Pattern',params);
	  var replaceWith = aa_text(data,profile,'ReplaceWith',params);
	  var flags = aa_text(data,profile,'Flags',params);
	  var str = aa_text(data,profile,'Text',params);
	  try
	  {
		  return [ str.replace(new RegExp(pattern,flags),replaceWith) ];
	  }
	  catch(e) {}
	  return [];
  },
  ReplaceMulti: function (profile,data,params)
  {
	  var find = ajaxart.run(data,profile,'Find',params);
	  var replaceWith = ajaxart.run(data,profile,'ReplaceWith',params);
	  var replaceAll = aa_bool(data,profile,'ReplaceAll',params);
	  var str = aa_text(data,profile,'Text',params);
	  
	  if (find.length != replaceWith.length) return data;
	  for (var i=0; i<find.length; i++) {
			if (replaceAll)
				var reg = new RegExp(find[i], "g");
			else
				var reg = new RegExp(find[i]);
			str = str.replace(reg, replaceWith[i]);
	  }
	  return [ str ];
  },
  MultiLangSuite: function (profile,data,context)
  {
	 var lang = aa_text(data,profile,'Language',context);

	 aa_mlTable = typeof(aa_mlTable) == 'undefined' ? {} : aa_mlTable;
	 aa_mlTable[lang] = aa_mlTable[lang] || {};
	 var trList = aa_mlTable[lang];
	 
	 var items = aa_xpath(profile,'Pattern');
	 for(var k=0;k<items.length;k++) {
		trList[items[k].getAttribute('Original')] = items[k].getAttribute('T') || items[k].getAttribute('Tranlation');
	 }
	 
	 var items = aa_xpath(profile,'item');
	 for(var i=0;i<items.length;i++) {
		 var v = items[i].getAttribute('v') || '';
		 if (v != '')
		   trList[items[i].getAttribute('k')] = v;
	 }
  },
  Between: function (profile,data,params)
  {
    var from = aa_text(data,profile,'From',params);
    var to = aa_text(data,profile,'To',params);
    var includeFrom = aa_bool(data,profile,'IncludeFrom',params);
    var includeTo = aa_bool(data,profile,'IncludeTo',params);

	var str = ajaxart.totext_array(data);
	var index_from = str.indexOf(from);
	if (index_from != -1)
	{
		if (includeFrom)
			str = str.substring(index_from);
		else
			str = str.substring(index_from+from.length);
	}
		
	var index_to = str.indexOf(to);
	if (index_to != -1)
	{
		if (includeTo)
			str = str.substring(0,index_to+to.length);
		else
			str = str.substring(0,index_to);
	}
    return [str];
  },
  PromoteStartingWith: function (profile,data,context)
  {
	  var with1 = aa_text(data,profile,'StartsWith',context);
	  if (with1 == '') return [];
	  var out = [];
	  var out2 = [];
	  
	  for(var i=0;i<data.length;i++) {
		  var text = ajaxart.totext_item(data[i]);
		  if (text.indexOf(with1) == 0) out.push(data[i]); else out2.push(data[i]);
	  }
	  for (var i=0;i<out2.length;i++)
		  out.push(out2[i]);
	  
	  return out;
  },
  SplitByCommas: function (profile,data,context)
  {
	  var text = aa_text(data,profile,'Text',context);
	  var spl = text.split(',');
	  var out = [];
	  for(var i=0;i<spl.length;i++)
		  if (spl[i].length > 0) out.push(spl[i]);
	  
	  return out;
  },
  Pad: function (profile,data,context)
  {
	    var length = aa_text(data,profile,'Length',context);
	    var filler = aa_int(data,profile,'Filler',context);
	    var str = aa_text(data,profile,'Text',context);
	
	    while (str.length < length)
	        str = filler + str;
	   
	    return [str];
  },
  AddToCommaText: function (profile,data,context)
  {
	var text = ajaxart.run(data,profile,'Text',context);
	var toadd = aa_text(data,profile,'ToAdd',context);
	var text_str = aa_totext(text);
	if ((','+text_str+',').indexOf(','+toadd+',') == -1) {
		var val = (text_str == "") ? toadd : text_str + ',' + toadd;
		ajaxart.writevalue(text,[val]);
	}
  },
  RemoveFromCommaText: function (profile,data,context)
  {
	  var text = ajaxart.run(data,profile,'Text',context);
	  var toremove = aa_text(data,profile,'ToRemove',context);
	  var text_str = aa_totext(text);
	  var pos = (','+text_str+',').indexOf(','+toremove+','); 
	  if (pos > -1) {
		  var val = text_str.substring(0,pos-1) + text_str.substring(pos+toremove.length+1);  
		  ajaxart.writevalue(text,[val]);
	  }
  },
  RemoveSuffix: function (profile,data,context)
  {
    var sep = aa_text(data,profile,'Separator',context);
    var suffix = aa_text(data,profile,'Suffix',context);
    var emptyIfNoSeparator = aa_bool(data,profile,'EmptyIfNoSeparator',context);
    var text = ajaxart.totext_array(data);
    
    if (suffix.length > 0)
    {
    	var pos = text.lastIndexOf(suffix);
    	if (pos == text.length - suffix.length)
    		return [text.substring(0,pos)];
    }
    
    var index = text.lastIndexOf(sep);
    if (index == -1) 
   		if (emptyIfNoSeparator) 
   			return [""];
    	else 
    		return [text];
    return [text.substring(0,index)];
  },
  ToLowerCase: function (profile,data,context)
  {
	  return [ ajaxart.totext_array(data).toLowerCase() ];
  },
  ToUpperCase: function (profile,data,context)
  {
	  return [ ajaxart.totext_array(data).toUpperCase() ];
  },
  ExtractPrefix: function (profile,data,context)
  {
	 var sep = aa_text(data,profile,'Separator',context);
	 var useRegex = aa_bool(data,profile,'UseRegex',context);
	 var text = ajaxart.totext_array(data);
	 
	 if (useRegex)
		 var index = text.search(sep);
	 else
		 var index = text.indexOf(sep);
	 
	 if (index == -1) return [];
	 var result = '';
	 if (aa_bool(data,profile,'KeepSeparator',context))
		 result = text.substring(0,index+sep.length);
	 else
		 result = text.substring(0,index);
	 if (result.length == 0)
		 result = aa_text(data,profile,'Default',context);
	 return [result];
  },
  RemovePrefix: function (profile,data,context)
  {
    var sep = aa_text(data,profile,'Separator',context);
    var prefix = aa_text(data,profile,'Prefix',context);
    var text = ajaxart.totext_array(data);
    if (prefix != "") {
    	if (text.indexOf(prefix) == 0)
    		return [text.substring(prefix.length)];
    }
    if (sep == "") return [text];
    var index = text.indexOf(sep);
    if (index == -1) return [text];
    return [text.substring(index+sep.length)];
  },
  CountOfSubtext: function (profile,data,params)
  {
    var subtext = aa_text(data,profile,'Text',params);
    var text = ajaxart.totext_array(data);
    if (subtext.length == 0) return ["0"];
    
    var arr = text.split(subtext);
    return ["" + (arr.length-1)];
  },
  Encode: function (profile,data,params)
  {
    var text = ajaxart.totext_array(data);
    var result = unescape( encodeURIComponent(text));
    return [result];
  },
  MatchesRegex: function (profile,data,context)
  {
    var pattern = '^' + aa_text(data,profile,'Expression',context) + '$';
    var text = aa_text(data,profile,'Text',context);
    
    return text.match(pattern) ? ['true'] : [];
  },
  FindInText: function (profile,data,context)
  {
    var pattern = aa_text(data,profile,'Pattern',context);
    var useRegex = aa_bool(data,profile,'UseRegex',context);
    var text = ajaxart.totext_array(data);
    var result = -1;
    if (useRegex)
    	result = text.search(pattern);
    else
    	result = text.indexOf(pattern);
    return [ result != -1 ];
  },
  UrlEncoding: function (profile,data,context)
  {
	  var urlpart = ajaxart.totext_array(data);
	  var type = aa_text(data,profile,'Type',context);
	  if (type == "encode")
		  return [ encodeURIComponent( urlpart ) ];
	  else
		  return [ decodeURIComponent( urlpart )];
  },
  Substring: function (profile,data,context)
  {	
	  var start = aa_int(data,profile,'Start',context);
	  var stop = aa_int(data,profile,'Stop',context);
	  var text = aa_text(data,profile,'Text',context);
	  if (stop != null && stop != "" && !isNaN(stop) )
		  return [ text.substring(start-1,stop-1) ];
	  else
		  return [ text.substring(start-1) ];
  },
  Reverse: function (profile,data,context)
  {
	  var text = aa_text(data,profile,'Text',context);
	  var reverse = "";
	  for (i=0;i<text.length;i++)
		  reverse = reverse + text.charAt(text.length-i-1);
	  return [reverse];
  },
  DecodeMimeType: function (profile,data,context)
  {
	  var win1255Lookup = ['00','01','02','03','04','05','06','07','08','09','0a','0b','0c','0d','0e','0f','10','11','12','13','14','15','16','17','18','19','1a','1b','1c','1d','1e','1f','20','21','22','23','24','25','26','27','28','29','2a','2b','2c','2d','2e','2f','30','31','32','33','34','35','36','37','38','39','3a','3b','3c','3d','3e','3f','40','41','42','43','44','45','46','47','48','49','4a','4b','4c','4d','4e','4f','50','51','52','53','54','55','56','57','58','59','5a','5b','5c','5d','5e','5f','60','61','62','63','64','65','66','67','68','69','6a','6b','6c','6d','6e','6f','70','71','72','73','74','75','76','77','78','79','7a','7b','7c','7d','7e','7f','20ac','81','201a','0192','201e','2026','2020','2021','02c6','2030','8a','2039','8c','8d','8e','8f','90','2018','2019','201c','201d','2022','2013','2014','02dc','2122','9a','203a','9c','9d','9e','9f','a0','a1','a2','a3','20aa','a5','a6','a7','a8','a9','d7','ab','ac','ad','ae','af','b0','b1','b2','b3','b4','b5','b6','b7','b8','b9','f7','bb','bc','bd','be','bf','05b0','05b1','05b2','05b3','05b4','05b5','05b6','05b7','05b8','05b9','05ba','05bb','05bc','05bd','05be','05bf','05c0','05c1','05c2','05c3','05f0','05f1','05f2','05f3','05f4','f88d','f88e','f88f','f890','f891','f892','f893','05d0','05d1','05d2','05d3','05d4','05d5','05d6','05d7','05d8','05d9','05da','05db','05dc','05dd','05de','05df','05e0','05e1','05e2','05e3','05e4','05e5','05e6','05e7','05e8','05e9','05ea','f894','f895','200e','200f','f896' ];
	  function uTF8DecodeOfWin1255(input) {
		  var result = '';
		  for(var i=0;i<input.length;i++)
		  {
			  c = input.charCodeAt(i);
			  if (c < 256)
			  result += String.fromCharCode(parseInt(win1255Lookup[c],16));
		  }
		  return result;
	  }
		function uTF8Decode(input,charset) {
			if (charset=='windows-1255') 
				return uTF8DecodeOfWin1255(input);
			var string = "";
			var i = 0;
			var c = c1 = c2 = 0;
			while ( i < input.length ) {
				c = input.charCodeAt(i);
				if (c < 128) {
					string += String.fromCharCode(c);
					i++;
				} else if ((c > 191) && (c < 224)) {
					c2 = input.charCodeAt(i+1);
					string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
					i += 2;
				} else {
					c2 = input.charCodeAt(i+1);
					c3 = input.charCodeAt(i+2);
					string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
					i += 3;
				}
			}
			return string;
		}

//		function uTF8Decode(input,charset) {
//			var string = "";
//			var i = 0;
//			var c = c1 = c2 = 0;
//			while ( i < input.length ) {
//				c = input.charCodeAt(i);
//				if (c >= 32 && c < 128) {
//					string += String.fromCharCode(c);
//					i++;
//				} else if ((c >= 224) && (c < 256) && (charset=='windows-1255')) {
//					string += String.fromCharCode(c+1488-224);
//					i++;
//				} else if (c == 0) { 
//					i++;string += ' ';
//				} else if (c == 10 || c == 13) { 
//					string += '\n'; i++;
//				} else {
//					string += '?' + c + '?';
//					i++;
//				}
//			}
//			return string;
//		}
		var keyString = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
		function base64Decode(input,charset) {
			var output = "";
			var chr1, chr2, chr3;
			var enc1, enc2, enc3, enc4;
			var i = 0;
			input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
			while (i < input.length) {
				enc1 = keyString.indexOf(input.charAt(i++));
				enc2 = keyString.indexOf(input.charAt(i++));
				enc3 = keyString.indexOf(input.charAt(i++));
				enc4 = keyString.indexOf(input.charAt(i++));
				chr1 = (enc1 << 2) | (enc2 >> 4);
				chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
				chr3 = ((enc3 & 3) << 6) | enc4;
				output = output + String.fromCharCode(chr1);
				if (enc3 != 64) {
					output = output + String.fromCharCode(chr2);
				}
				if (enc4 != 64) {
					output = output + String.fromCharCode(chr3);
				}
			}
			output = uTF8Decode(output,charset);
			return output;
		}

		function QTDecode(input,charset) {
			var output = "";
			var i = 0;
			while (i < input.length)
			{
				if (input.charAt(i) != '=')
				{
					output += input.charAt(i);
					i++;
				}
				else
				{
					var code = parseInt("0x"+input.charAt(i+1)+input.charAt(i+2));
					i += 3;
					output += String.fromCharCode(code);
				}
			}
			output = uTF8Decode(output,charset);
			return output;
		}


	  var text = aa_text(data,profile,'Text',context);
	  var encoding = aa_text(data,profile,'Encoding',context);
	  var charset = aa_text(data,profile,'Charset',context);
	  var result = [text];
	  if (encoding == "auto" && text.indexOf('=?') == 0)
	  {
		  var parts = text.split('?');
		  var charset = parts[1] || charset;
		  var type = parts[2];
		  var content = parts[3];
		  content = content.replace(/ =[\n\r]+/mg,'')
		  if (type == 'B') 
			  result = [base64Decode(content,charset)];
		  if (type == 'Q')
			  result = [QTDecode(content,charset)];
	  }
	  else if (encoding == "Base64")
		  result = [base64Decode(text,charset)];
	  else if (encoding == "Quoted Printable")
		  result = [QTDecode(text.replace(/ =[\n\r]+/mg,''),charset)];
	  return result;
  },
  SplitLines: function (profile,data,context)
  {
	  var text = aa_text(data,profile,'Text',context);
	  var newLineChars = aa_text(data,profile,'NewLineChars',context);
	  
	  return text.split(newLineChars);
  }
});
function aa_text_trim(str) {
    return str.replace(/^\s*/, "").replace(/\s*$/, "");
}

function aa_text_comma_seperate(text) // ignore \,
{
	var out = [];
	var last_index = 0;
	for (var i=0; i<text.length; i++) {
		if (text[i] == ',') {
			if (i == 0)
				last_index++;
			else if (text[i-1] != '\\') {
				var t = text.substring(last_index,i);
				if (t.indexOf('\\,') != -1)
					t = t.replace('\\,',','); 
				out.push(t);
				last_index = i+1;
			}
		}
	}
	if (last_index < text.length) {
		var t = text.substring(last_index);
		if (t.indexOf('\\,') != -1)
			t = t.replace('\\,',','); 
		out.push(t);
	}
	return out;
}
function aa_strreverse(str)
{
  return str.split('').reverse().join('');
}

function aa_base64ArrayBuffer(arrayBuffer) {
	  var base64    = ''
	  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

	  var bytes         = new Uint8Array(arrayBuffer)
	  var byteLength    = bytes.byteLength
	  var byteRemainder = byteLength % 3
	  var mainLength    = byteLength - byteRemainder

	  var a, b, c, d
	  var chunk

	  // Main loop deals with bytes in chunks of 3
	  for (var i = 0; i < mainLength; i = i + 3) {
	    // Combine the three bytes into a single integer
	    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]

	    // Use bitmasks to extract 6-bit segments from the triplet
	    a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18
	    b = (chunk & 258048)   >> 12 // 258048   = (2^6 - 1) << 12
	    c = (chunk & 4032)     >>  6 // 4032     = (2^6 - 1) << 6
	    d = chunk & 63               // 63       = 2^6 - 1

	    // Convert the raw binary segments to the appropriate ASCII encoding
	    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]
	  }

	  // Deal with the remaining bytes and padding
	  if (byteRemainder == 1) {
	    chunk = bytes[mainLength]

	    a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2

	    // Set the 4 least significant bits to zero
	    b = (chunk & 3)   << 4 // 3   = 2^2 - 1

	    base64 += encodings[a] + encodings[b] + '=='
	  } else if (byteRemainder == 2) {
	    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]

	    a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10
	    b = (chunk & 1008)  >>  4 // 1008  = (2^6 - 1) << 4

	    // Set the 2 least significant bits to zero
	    c = (chunk & 15)    <<  2 // 15    = 2^4 - 1

	    base64 += encodings[a] + encodings[b] + encodings[c] + '='
	  }

	  return base64
}

function aa_capitalize_each_word(str)
{
	  var out = "";
	  var counter=0;
	  while (counter < str.length)
	  {
		  if (counter == 0) out += str.charAt(counter).toUpperCase();
		  else if (str.charAt(counter) == " ") {
			 if (counter+1 < str.length)  {
				 out += " " + str.charAt(counter+1).toUpperCase();
				 counter++;
			 }
		  }
		  else out += str.charAt(counter);
		  
		  counter++;
	  }
	  return out;
}

function aa_text_capitalizeToSeperateWords(str)
{
	  var out = "";
	  var start=0; var counter=1;
	  while (counter < str.length)
	  {
		  if (str.charAt(counter) >= 'A' && str.charAt(counter) <= 'Z')
		  {
			  if (counter+1 < str.length && ( str.charAt(counter-1) < 'A' || str.charAt(counter-1) > 'Z') )
			  {
			    out = out + str.substring(start,counter) + " " + str.charAt(counter);
			    start = counter+1;
			  }
		  }
		  counter++;
	  }
	  out = out + str.substring(start);
	  return out;
}
function ajaxart_language(context)
{
	if (context.vars.Language == null || context.vars.Language.length == 0) return "";
	return ajaxart.totext( context.vars.Language[0] );
}

function aa_multilang_text(data,script,field,context)
{
	return ajaxart_multilang_run(data,script,field,context)[0] || '';
}
function ajaxart_multilang_run(data,script,field,context)
{
	var fieldscript = ajaxart.fieldscript(script,field,true);
	if (fieldscript == null) return [""];
	var result = null;
	if (fieldscript.nodeType == 2) {
		if (fieldscript.nodeValue.indexOf('%') != -1) {
		  result = ajaxart.dynamicText(data,ajaxart_multilang_text(fieldscript.nodeValue,context),context);

		  if (ajaxart.xtmls_to_trace.length > 0) {
		    if (field == "") { field = script.nodeName; script = aa_xpath(script,'..')[0]; }
	        if (script.getAttribute("Trace") == field) ajaxart.trace(script,data,result,context,field);
		    aa_try_probe_test_attribute(script,field,data,result,context,data);
		  }
		}
	}
	if (result == null)
	  result = ajaxart.run(data,script,field,context);
	
	if (result.length > 0) result = [ajaxart_multilang_text(ajaxart.totext_array(result),context)];
	return result;
}
function ajaxart_multilang_text(text,context)
{
	if (context.vars.Language && context.vars.Language.length > 0 && text)
	{
		if (!window.aa_mlTable) ajaxart_fill_mlTable();
		var lang = aa_totext(context.vars.Language);
		if ( aa_mlTable[lang] && aa_mlTable[lang][text]) 
			return aa_mlTable[lang][text];
		if (typeof(aa_mlDefaultLanguage) != 'undefined' && aa_mlTable[aa_mlDefaultLanguage] && aa_mlTable[aa_mlDefaultLanguage][text])
			return aa_mlTable[aa_mlDefaultLanguage][text];
		var text_lc = text.toLowerCase();
		if ( aa_mlTable[lang] && aa_mlTable[lang][text_lc]) 
			return aa_mlTable[lang][text_lc];
	}
	return text; //text.split('__')[0];
}

function ajaxart_fill_mlTable() 
{
	window.aa_mlTable = window.aa_mlTable || {};
	for(ns in ajaxart.components)
	{
		if (!ajaxart.components.hasOwnProperty(ns)) continue;
		var list = ajaxart.components[ns];
		for(var j in list) {
			if (!list.hasOwnProperty(j)) continue;
			var comp = list[j];
			if (comp.getAttribute('type') == "text.MultiLangSuite") {
			  ajaxart.run([],aa_xpath(comp,'xtml')[0],'',ajaxart.newContext());
			}
		}
	}
}

function aa_textAutoLinks(text,target) {
	target = target || '_blank';
	// replaces links with <a href
	return text.replace(/[^"'](http[s]?[^\s]*)/g,'<a href="$1" target="'+target+'">$1</a>');
}

function aa_toValidFileName(str) {
	return str.replace(/[:*<>?\[\]#]*/g,'');
}

ajaxart.load_usage_plugin("text");

function ajaxart_field_highlight_text(text,highlight,highlight_class)
{
	if (!text) return '';
	if (!highlight) return text;

	var result = text;
  	var lCaseTxt = text.toLowerCase();
  	var found_at = lCaseTxt.indexOf(highlight);
  	var endTag = lCaseTxt.indexOf('>');
  	if (found_at != -1 && found_at > endTag)
  	{
  		var to_replace = text.substring(found_at,found_at + highlight.length);
  		result = text.replace(to_replace,'####' + to_replace + '~~~~');
  	}
  	result = result.replace(/####/g,'<span class="aa_highlight ' + highlight_class + '">');
  	result = result.replace(/~~~~/g,'</span>');
  	return result;
}
function aa_replaceElement(element,newControl,cleanMemoryLeaks,transition)
{
	if (element.ParentObject != null) { 
		aa_defineElemProperties(newControl,'ParentObject');
		newControl.ParentObject = element.ParentObject; 
		newControl.ParentObject[0].ControlHolder = [newControl];
	}
	if (newControl) {
		if (transition) {
			element.parentNode.appendChild(newControl);
			transition.replace(element,newControl);
		}
		else
			ajaxart.replaceXmlElement(element,newControl,true,cleanMemoryLeaks);
		aa_clear_virtual_inner_element(element);
		aa_element_attached(newControl);
		aa_element_detached(element);
	}
	return newControl;
}
function aa_set_element_size(element,text,prefix) // prefix can be empty, min-,max-
{
	prefix = prefix || '';
	var arr = text.split(',');
	var width = aa_size_to_pixels(arr[0],"width");	// fix percentages
	var height = aa_size_to_pixels(arr[1] || '',"height");
	if (width) $(element).css(prefix + "width",width);
	if (height) $(element).css(prefix + "height",height);
}
function aa_size_to_pixels(value,type)
{
	if (!value) return null;
	if (value.match(/^[0-9 ]+$/)) return value + "px";
	if (value.indexOf("%") == -1) return value;
	var num = parseInt(value);
	if (isNaN(num)) return null;
	return Math.floor(aa_screen_size()[type] * num / 100) + "px";
}
function aa_ensure_visible(elem, padding) 	// auto scroll parents to ensure elem is visible (only vertical scroll)
{
	return;	// todo: fix this function, sometimes it scrolls with no need.
//	if ($(elem).is(':visible')) return;
	
    var elem_height = elem.offsetHeight;

    var curr = elem;
    var top = 0;
    if (!padding) padding = 10;

    while (true) {
    	var parent = curr.parentNode;
    	if (!parent) return;
    	top += curr.offsetTop;
    	if (parent.offsetParent == curr.offsetParent)
    		 top -= parent.offsetTop;	// offsetTop is relative to offsetParent and not to parent
    	if (top + elem_height + padding > parent.offsetHeight + parent.scrollTop)	// need to scroll down
    		parent.scrollTop = elem_height + top + padding - parent.offsetHeight;
    	if (top - padding < parent.scrollTop)	// need to scroll up
    		parent.scrollTop = Math.max(top - padding,0);
    	top -= parent.scrollTop;

    	curr = parent;
    }
}
function aa_addDescriptionForEmptyText(cell,emptyTextDescription,emptyTextClass)
{
	var field = cell.Field;
	var input = $(cell).find('input')[0] || $(cell).find('textarea')[0];
	if (input)
	{
		if (ajaxart.isChrome || ajaxart.isFireFox || ajaxart.isSafari) {
			input.setAttribute('placeholder',emptyTextDescription);
			return;
		}
		aa_defineElemProperties(input,'getValue','RefreshDescriptionForEmptyText');
		input.getValue = function() {
			var input = this;
			if ($(input).hasClass('empty_text_description') && input.value == emptyTextDescription) return '';
			return input.value;
		}
		input.RefreshDescriptionForEmptyText = function() {
			var input = this;
			if (input.value == '')
			{
				$(input).addClass('empty_text_description').addClass(emptyTextClass);
				input.value = emptyTextDescription;
				input.setAttribute('value',emptyTextDescription); // for tests
			} else {
				$(input).removeClass('empty_text_description').removeClass(emptyTextClass);
			}
		}
		input.RefreshDescriptionForEmptyText();
	}
	else {
		var textDiv = $(cell).find('.text');
		if (textDiv[0] && textDiv.text() == '') textDiv.text(emptyTextDescription).addClass(emptyTextClass);
	}
}

function aa_run_delayed_action(action_id,callback,delay,postpone_callback)
{
	window.jbDelayed_actions = window.jbDelayed_actions || {};

	delay = delay || 100;
	var time_to_delay = delay;
	var first_call_time = jbDelayed_actions[action_id] ? jbDelayed_actions[action_id].first_call_time : new Date().getTime();

	if (jbDelayed_actions[action_id]) {
		clearTimeout(jbDelayed_actions[action_id].timeoutid);
		if (!postpone_callback) 	// make sure the call is invoked exactly with the delay after the first call
			time_to_delay = delay - (new Date().getTime() - first_call_time);		
	}
	jbDelayed_actions[action_id] = {
		first_call_time: first_call_time,
		timeoutid: setTimeout(function() {
			jbDelayed_actions[action_id] = null;
			callback();
		},time_to_delay),
		callback: callback
	};
}
function aa_run_existing_delayed_action(action_id) {
	if (!window.jbDelayed_actions) return;
	if (jbDelayed_actions[action_id]) {
		clearTimeout(jbDelayed_actions[action_id].timeoutid);
		var callback = jbDelayed_actions[action_id].callback;
		jbDelayed_actions[action_id] = null;		
		callback();
	}
}
function aa_cancel_delayed_action(action_id)
{
	window.jbDelayed_actions = window.jbDelayed_actions || {};
	if (jbDelayed_actions[action_id]) {
		clearTimeout(jbDelayed_actions[action_id].timeoutid);
		jbDelayed_actions[action_id] = null;
	}
}
function aa_attach_window_resize(func, elem)
{
	if (!elem || !func) return;
	if (ajaxart.aa_windowresize == null) {
		ajaxart.aa_windowresize = 0; 
		ajaxart.window_size = { height: window.innerHeight, width:window.innerWidth};
		function onresize() {
			if (ajaxart.window_size && window.innerHeight == ajaxart.window_size.height && window.innerWidth == ajaxart.window_size.width)
				return;
			if (ajaxart.aa_windowresize != 0)
				clearTimeout(ajaxart.aa_windowresize);
			if (ajaxart.window_size.width == window.innerWidth &&
				Math.abs(ajaxart.window_size.height - window.innerHeight) > 100) return;  // Android fix: openning the keyboard should not call on resize.	
																						// Notive that when address bar is hiding, we need resize event. Address bar size is about 40-60 pixels.
			 ajaxart.window_size = { height: window.innerHeight, width:window.innerWidth};																		
			 aa_windowresize = setTimeout(function() {
				var listeners = $(".aa_window_resize_listener");
				for(var i=0;i<listeners.length;i++)
					aa_trigger(listeners[i],'WindowResize');

				 aa_windowresize = 0;
				}, 100);
		}
		window.addEventListener('resize', onresize,false);
		window.addEventListener('orientationchange', onresize,false);	// sometimes orientationchange is fired and sometimes resize, http://blog.blazingcloud.net/2012/05/08/orientationchange-and-resize-events-on-the-iphone/
		window.addEventListener('scroll', onresize,false);	// sometimes orientationchange is fired and sometimes resize, http://blog.blazingcloud.net/2012/05/08/orientationchange-and-resize-events-on-the-iphone/
	}
	$(elem).addClass('aa_window_resize_listener');
	aa_bind(elem,'WindowResize',func);
}



ajaxart.gcs.gchart =
{
	GoogleChart: function (profile,data,context)
	{
		var graph = aa_generic_graph(data,profile,context);
		graph.OnClick =  function(selection) 
		{
   			var wrapper  = this.items[selection[0].row];
   			var item = wrapper.__item || wrapper;
   			var ctx = aa_ctx(context,{_ItemsOfOperation: [item]})
   			ajaxart.run([item],profile,'OnClick',ctx);
   		}
		graph.PrepareGraphData= function(gdata) {
		  var cntr = context.vars._Cntr[0];
		  var dataholder_cntr = context.vars.DataHolderCntr && context.vars.DataHolderCntr[0];
		  if (!dataholder_cntr) return [];
		  var fields = dataholder_cntr.DataHolder.Fields;

		  var type = aa_text(data,profile,'Type',context);
		  var requiresNumericLabel = type == 'ScatterChart';
		  var dateAsObject = aa_text(data,profile,'Type',context) == 'AnnotatedTimeLine';
		  //this.dataview = context.vars.DataView ? context.vars.DataView[0] : cntr.DataHolder.UserDataView;
		  var items = this.items = aa_items(cntr);
		  var labelField = aa_fieldById(aa_text(data,profile,'LabelField',context),fields);
		  var amountField = aa_fieldById(aa_text(data,profile,'AmountField',context),fields);
		  var amount2Field = aa_fieldById(aa_text(data,profile,'Amount2Field',context),fields);
		  var amount3Field = aa_fieldById(aa_text(data,profile,'Amount3Field',context),fields);
		  if (labelField == null) // look for label
			  labelField = aa_fieldById('Name',fields) || aa_fieldById('Id',fields) || aa_fieldById('Label',fields);
		  if (labelField == null) // look for first date
			  for(var i in fields)
				  if (fields[i].IsDate)
				  {
					  labelField = fields[i];
					  break;
				  }
		  if (amountField == null) // look for first numeric
			  for(var i in fields)
				  if (fields[i].FieldType == 'number')
				  {
					  amountField = fields[i];
					  break;
				  }
		  if (amountField == null || labelField == null) return;
		  this.Params.hAxis = {title: labelField.Title};
		  if (!amount2Field)
			  this.Params.vAxis = {title: amountField.Title};

		  if (dateAsObject && labelField.IsDate)
			  gdata.addColumn('date', labelField.Title);
		  else if (labelField.IsNumber && requiresNumericLabel)
			  gdata.addColumn('number', labelField.Title);
		  else
			  gdata.addColumn('string', labelField.Title);
		  gdata.addColumn('number', amountField.Title);
		  if (amount2Field) gdata.addColumn('number', amount2Field.Title);
		  if (amount3Field) gdata.addColumn('number', amount3Field.Title);
		  
		  gdata.addRows(items.length);
		  for(var i=0;i<items.length;i++) {
        	var item = items[i];
        	var label = ajaxart.totext_array(ajaxart_field_calc_field_data(labelField,[item],context));
        	var amount = parseFloat(ajaxart.totext_array(ajaxart_field_calc_field_data(amountField,[item],context))) || 0;
			if (dateAsObject && labelField.IsDate)
				gdata.setValue(i, 1, new Date(amount));
			else if (requiresNumericLabel) 
				gdata.setValue(i, 0, parseFloat(label) || 0);
			else
				gdata.setValue(i, 0, label || '');
			gdata.setValue(i, 1, amount);
			if (amount2Field) gdata.setValue(i, 2, parseFloat(ajaxart.totext_array(ajaxart_field_calc_field_data(amount2Field,[item],context))) || 0);
			if (amount3Field) gdata.setValue(i, 3, parseFloat(ajaxart.totext_array(ajaxart_field_calc_field_data(amount3Field,[item],context))) || 0);
		  }
	   }
	   var out = aa_create_graph_div(graph);
	   // for tests
	   var test_string = '';
	   var cntr = context.vars._Cntr[0];
	   var items = aa_items(cntr);
 	   var dataholder_cntr = context.vars.DataHolderCntr && context.vars.DataHolderCntr[0];
	   var fields = dataholder_cntr.DataHolder.Fields;
	   var labelField = aa_fieldById(aa_text(data,profile,'LabelField',context),fields);
	   var amountField = aa_fieldById(aa_text(data,profile,'AmountField',context),fields);
	   for(var i=0;i<items.length;i++)
		   test_string += ajaxart.totext_array(ajaxart_field_calc_field_data(labelField,[items[i]],context)) + ' - ' +  
		                  ajaxart.totext_array(ajaxart_field_calc_field_data(amountField,[items[i]],context));
	   var test_div = document.createElement('div');
	   test_div.className= 'aa_test';
	   test_div.setAttribute('test_string',test_string);
	   out.appendChild(test_div);
	   
	   return [out];
	},
	PieChart: function (profile,data,context) // depricated
	{
		var chartObj = { isObject: true, Items: ajaxart.run(data,profile,'Items',context) }
		chartObj.Title = aa_text(data,profile,'Title',context);
		chartObj.ChartClass = 'google.visualization.PieChart';
		chartObj.FrameWidth = chartObj.FrameHeight = "400px"; 
			
		aa_addMethod(chartObj,'ItemText',profile,'ItemText',context);
		aa_addMethod(chartObj,'ItemAmount',profile,'ItemAmount',context);
		aa_addMethod(chartObj,'OnItemClick',profile,'OnItemClick',context);
		
		return [ aa_piechart(chartObj,context) ];
	},		
	TimelineChart: function (profile,data,context) // depricated
	{
		var chartObj = { isObject: true, Items: ajaxart.run(data,profile,'Items',context).reverse() }
		
		chartObj.Title = aa_text(data,profile,'Title',context);
		chartObj.ChartClass = 'google.visualization.AreaChart';
		chartObj.GoogleParams = aa_text(data,profile,'GoogleParams',context);
		chartObj.FrameWidth = aa_text(data,profile,'FrameWidth',context);
		chartObj.FrameHeight = aa_text(data,profile,'FrameHeight',context);
			
		aa_addMethod(chartObj,'ItemText',profile,'Date',context);
		aa_addMethod(chartObj,'ItemAmount',profile,'ItemAmount',context);
		aa_addMethod(chartObj,'OnItemClick',profile,'OnItemClick',context);
		
		return [ aa_piechart(chartObj,context) ];
	}
}

function aa_piechart(chartObj,context)  // depricated
{
	var out = jQuery('<iframe src="lib/googlechart.html?ver='+ajaxart.build_version+'" style=" border-width:0 " width="'+chartObj.FrameWidth+'" height="'+chartObj.FrameHeight+'" frameborder="0" scrolling="no"/>')[0];
	out.info = { width: 450, height: 300 , chartClass: chartObj.ChartClass, title: chartObj.Title, googleParams: chartObj.GoogleParams};
	//out.info.googleParams = "width: '" + chartObj.Width + "', height: '" + chartObj.Height + "'";
	out.info.googleParams = '';
	if (chartObj.GoogleParams != "") out.info.googleParams = chartObj.GoogleParams;
	
	out.info.data = [];
	for(var i=0;i<chartObj.Items.length;i++) {
		var item = [ chartObj.Items[i] ], obj = {item: item};
		obj.text = aa_totext(aa_runMethod(item,chartObj,'ItemText',context));
		obj.amount = aa_toint(aa_runMethod(item,chartObj,'ItemAmount',context));
		obj.onclick = function(obj) { aa_runMethod(obj.item,chartObj,'OnItemClick',context); }
		out.info.data.push(obj);
	}
	return out;
}
function aa_load_googlegraph() {
	if (window.loading_googlegraphs) return;
	   window.loading_googlegraphs = true;
	   jQuery.ajax({
		   url: (window.location.host1 == 'localhost') ? 'lib/googlechart.js' : 'https://www.google.com/jsapi',  
		   dataType: 'script',
		   success: function(){
		   		jQuery('.aa_waiting_for_ggraph_load').each(function() { this.LoadGraph();});
		 	}
	   });
}
function aa_generic_graph(data,profile,context)
{
	   var graph = {
		   isObject: true,
		   Packages: ["corechart"],
		   Params: {
				width: aa_int(data,profile,'FrameWidth',context), 
				height: aa_int(data,profile,'FrameHeight',context), 
				title: aa_text(data,profile,'Title',context),
				isStacked: aa_bool(data,profile,'Stacked',context),
				legend: aa_text(data,profile,'Legend',context)
				},
		   Class: 'google.visualization.' + aa_text(data,profile,'Type',context),
		   drawChart: function() {
			        var data = new google.visualization.DataTable();
			        this.PrepareGraphData(data);
			        var chart;
			        var out = this.div;
			        var newChart = "new "+this.Class+"(out)"; // should be called without eval
			        try {
			        	chart = eval(newChart);
			        } catch(e) {}
			        chart.draw(data, this.Params);
			        google.visualization.events.addListener(chart, 'select', function(graph) { return function(e) {
			            var selection = this.getSelection();
			            if (!selection) return;
			            if (graph.OnClick)
			            	graph.OnClick(selection);
			        }}(graph));
			}
	   }
	   return graph;
}
function aa_create_graph_div(graph)
{
	   var out = document.createElement('div');
	   out.graph= graph;
	   graph.div = out;
 	   function ChartFactory(div) { return function() 
 	  	   { 
 		   		jQuery(div).removeClass("aa_waiting_for_ggraph_load");
 		   		div.graph.drawChart();
 	  	   }
 	   };

	   if (!window.google)
	   {
		   out.className="aa_waiting_for_ggraph_load";
		   out.LoadGraph = function()
		   {
			   google.load("visualization", "1", {packages:graph.Packages, callback: ChartFactory(this)});
		   }
		   aa_load_googlegraph();
	   }
	   else
	   {
		   google.load("visualization", "1", {packages:graph.Packages, callback: ChartFactory(out)});
	   }
	   return out;
}

// fusion charts
ajaxart.gcs.fusion_chart =
{
	FusionChart: function (profile,data,context)
	{
	   function load(out)
	   {
		   var xml = ajaxart.runNativeHelper(out.Items,profile,'GraphXml',aa_ctx(context,{ChartId: [out.getAttribute('id')], Items: out.Items}));
		   var swf = '/ajaxart/lib/chart/charts_library/FCF_' + (aa_bool(data,profile,'Stacked',context) ? 'Stacked' : 'MS') + aa_text(data,profile,'Type',context) + ".swf";
		   var myChart = new FusionCharts(swf, "myChartId", aa_text(data,profile,'Width',context), aa_text(data,profile,'Height',context)); 
		   var xmlAsText = ajaxart.xml2text(xml);
		   myChart.setDataXML(xmlAsText);
		   myChart.render(out);
	   }

	   if (! window.aa_FusionChartId) aa_FusionChartId =0;
	   aa_FusionChartId++;
	   var out = document.createElement('div');
	   out.setAttribute('id','aa_fusion_chart_' + aa_FusionChartId);
	   var items = out.Items = aa_items(context.vars._Cntr[0]);
	   
	   out.Profile = profile;
	   out.Context = context;
	   
	   // add index to items
	   for(var i=0;i<items.length;i++)
		   items[i].__Index = i;

	   if (!window.infosoftglobal)
	   {
		   out.className="aa_waiting_for_fusion_chart_load";
		   out.LoadGraph = function() 
		   {
			   load(this);
		   }
		   aa_load_fusion_chart();
	   }
	   else
		   load(out);

	   return [out];
	}
}

function aa_fusion_eventHandler(chartId,labelField,amountFieldId,index)
{
	var out = jQuery().find('#' + chartId)[0];
	if (!out) return;
	var item = out.Items[parseInt(index)+1];
	ajaxart.run([item],out.Profile,'OnClick',out.Context);
}
function aa_load_fusion_chart() {
	if (window.loading_fusion_chart) return;
	   window.loading_fusion_chart = true;
	   jQuery.ajax({
		   url: 'lib/chart/charts_library/FusionCharts.js', 
		   dataType: 'script',
		   success: function(){
		   		jQuery('.aa_waiting_for_fusion_chart_load').each(function() { this.LoadGraph();});
		 	}
	   });
}




aa_gcs("operation", {
  RunActionInJavascript: function(profile, data, context) {
    var result = aa_apply_style_js(data,{
      Javascript: aa_text(data,profile,'Code',context)
    },context,'run');
    return aa_isArray(result) ? result : [];
  },
  RunInOperationContext: function (profile,data,context)
    {
      var jElem = $(context.vars.ControlElement);
      var itemElem = null;
      while (jElem.length > 0) {
        if (jElem.hasClass('aa_item') && !itemElem) itemElem = jElem[0];
        if (jElem.hasClass('aa_layoutgroup') ) itemElem = null; // try the next one
        if (jElem.hasClass('aa_container') && itemElem ) break; // all found
        
        jElem = jElem.parent();
      }
      if (itemElem == null) var ctx = context;
      else var ctx = aa_ctx(context,{_ElemsOfOperation: [itemElem] , _ItemsOfOperation: itemElem.ItemData , _Items: context.vars._Cntr[0].Items });
      
      return ajaxart.run(data,profile,'Action',ctx);
    },
    OpenSecondaryItemDetails: function (profile,data,context)
    {
      var dataitems = context.vars._Cntr[0].Items[0];
      var newContext = aa_ctx(context,{ _Transactional: ajaxart.run(data,profile,'Transactional',context), 
        _InnerItem: context.vars._ItemsOfOperation });
      var subset = newContext.vars._InnerItems = aa_runMethod(data,dataitems,'Subset',newContext);
      if (subset.length == 0) {
        var subsetObj = { isObject: true , Items: newContext.vars._InnerItem };
        subsetObj.Save = function(data1,ctx) {
          var info = aa_getXmlInfo(this.Items[0],context);
          if (info.Save) return info.Save(data1,ctx);
        }
        subset = newContext.vars._InnerItems = [subsetObj];
      }
      if (subset.length == 0) return []; 
      if (aa_bool(data,profile,'ReadOnly',context))
        subset[0].ReadOnly = ["true"];

      var openCtrl_func = function(subset) { return function() 
      {
        var cntr = context.vars._Cntr[0];
        var item = [subset.Items[0]];
        ajaxart.run(item,profile,'ChangeItemBeforeOpen',context);
        var page_params = {isObject:true, DataItems: subset};
        var newContext = aa_ctx(context,{ _InnerItems: [subset], _PageParams: [page_params], _Transactional: ajaxart.run(data,profile,'Transactional',context) });
        var page = aa_first(item,profile,'ItemPage',context);
        var itemDetailsObj = { isObject: true }

        var info = aa_getXmlInfo(subset.Items[0],context);
        if (info && info.PrepareForEdit) info.PrepareForEdit([],newContext);
        
        aa_init_itemdetails_object(itemDetailsObj,item,info,subset,page,context);
        newContext.vars._ItemDetailsObject = [ itemDetailsObj ];
        newContext.vars.DetailsControl = aa_runMethod(item,page,'Control',newContext);
        newContext.vars.ItemPage = [page];
        
        return ajaxart.run(item,profile,'OpenIn',newContext);
      }};
      
      ajaxart_RunAsync(data,subset[0].Prepare,context, openCtrl_func(subset[0]));
      return ["true"];
    },
    RunOperationFromParent: function (profile,data,context)
    {
      var parentCntr = context.vars._ItemDetailsObject[0].ParentCntr;
      var opid = aa_text(data,profile,'Operation',context);
      var ops = aa_runMethod([],parentCntr,'Operations',context)
      var op = aad_object_byid(ops,opid);
      if (op != null) {
        var newContext = aa_ctx(context,{_ElemsOfOperation: context.vars._ItemDetailsObject[0].ElemsOfOperation , _Cntr: [parentCntr]});
        aa_runMethod(data,op,'Action',newContext);
      }
    },
    ChangeTab: function (profile,data,context)
    {
      var moveto = aa_text(data,profile,'MoveTo',context);
      var movetotab = aa_text(data,profile,'TabToMoveTo',context);
      var tabcontrol = aa_text(data,profile,'TabControl',context);
      var animation = aa_first(data,profile,'Animation',context);
      
      // new tab control
      var controlElement = aa_var_first(context,'ControlElement');
      var root = (controlElement && (ajaxart.isattached(controlElement) || aa_intest) ) ? ajaxart.xml.root(controlElement) : document.body;
      var tabcontrols = $(root).find('.aa_tabcontrol').get();
      if (!tabcontrols[0] && root != document.body) tabcontrols = $('body').find('.aa_tabcontrol').get();
      var closestTab = (controlElement && (ajaxart.isattached(controlElement) || aa_intest) ) ? $(controlElement).closest('.aa_tabcontrol.fld_'+tabcontrol) : $([]);
      if (closestTab[0]) tabcontrols.unshift(closestTab[0]);
       
      for(var i=0;i<tabcontrols.length;i++) { 
        var tabID = '';
        if (tabcontrols[i].Field) tabID = tabcontrols[i].Field.Id || aa_totext(tabcontrols[i].Field.ID);
        if (tabcontrols[i].Cntr) tabID = aa_totext(tabcontrols[i].Cntr.ID); 
        if (tabID == tabcontrol) {
          if (tabcontrols[i].jbChangeTab) {
            tabcontrols[i].jbChangeTab(moveto,movetotab);
            return;
          }
          if (tabcontrols[i].jbContext)
            if (tabcontrols[i].jbContext.vars._AppContext[0] != context.vars._AppContext[0]) continue;
          
          var tabs = tabcontrols[i].TabControl.Tabs;
          if (tabcontrols[i].RefreshTabsHead)
            tabcontrols[i].RefreshTabsHead();
          if (moveto == 'specific tab') {
            for(var j=0;j<tabs.length;j++)
              if (tabs[j].Field.Id == movetotab) { 
                if (tabs[j].Select) tabs[j].Select(null,animation);
                else if (tabs[j].onmousedown) tabs[j].onmousedown(); 
                return; 
              }
          } else {
            var selected = $(tabs).filter('.aa_selected_tab')[0];
            if (moveto == "refresh current tab") selected.Select(null,animation);
            if (moveto == "next tab" && selected.nextSibling) selected.nextSibling.Select(null,animation);
            if (moveto == "previous tab" && selected.previousSibling) selected.previousSibling.Select(null,animation);
          } 
          return;
        }
      }
      return;
    },
    Copy: function (profile,data,context)
    {
      var op = { isObject : true, isOperation : true };
      op.Id = aa_text(data,profile,'Copy',context);
      
      var copy = function(data1,ctx)
      {
        var cntr = ctx.vars._Cntr[0]; 
        var selected = ctx.vars._ItemsOfOperation;
        if (selected.length > 0)
        {
          document.aa_clipboard = selected[0];
          document.aa_cut = false;
        }
        return [];
      };

      ajaxart_addScriptParam_js(op,'Action',copy ,context);

      op.Shortcut = aa_text(data,profile,'Shortcut',context);
      aa_addMethod(op,'Icon',profile,'Icon',context);
      aa_addMethod(op,'Title',profile,'Title',context);
      op.Disabled = function(data1,ctx) { return aa_bool(data1,profile,'Disabled',aa_merge_ctx(context,ctx)) };

      var newContext = aa_ctx(context,{_Operation: [op]} );
      ajaxart.runsubprofiles(data,profile,'Aspect',newContext);

      return [op];
    },
    Cut: function (profile,data,context)
    {
      var op = { isObject : true, isOperation : true };
      op.Id = aa_text(data,profile,'Cut',context);
      
      var cut = function(data1,ctx)
      {
        var cntr = ctx.vars._Cntr[0]; 
        var selected = ctx.vars._ItemsOfOperation;
        if (selected.length > 0)
        {
          document.aa_clipboard = selected[0];
          document.aa_cut = true;
        }
        return [];
      };
      ajaxart_addScriptParam_js(op,'Action',cut ,context);

      op.Shortcut = aa_text(data,profile,'Shortcut',context);
      aa_addMethod(op,'Icon',profile,'Icon',context);
      aa_addMethod(op,'Title',profile,'Title',context);
      op.Disabled = function(data1,ctx) { return aa_bool(data1,profile,'Disabled',aa_merge_ctx(context,ctx)); };

      var newContext = aa_ctx(context,{_Operation: [op]} );
      ajaxart.runsubprofiles(data,profile,'Aspect',newContext);
      
      return [op];
    },
    Paste: function (profile,data,context)
    {
      var op = { isObject : true, isOperation : true };
      op.Id = aa_text(data,profile,'Paste',context);
      
      var paste = function(data1,ctx)
      {
        var cntr = ctx.vars._Cntr[0]; 
        var selected = ctx.vars._ItemsOfOperation;
        if (selected.length > 0)
        {
          var newcontext = aa_ctx(context,{Clipboard: document.aa_clipboard} );
          ajaxart.run(selected,profile,document.aa_cut ? 'CutPasteAction' : 'CopyPasteAction',newcontext);
        }
        return [];
      };
      ajaxart_addScriptParam_js(op,'Action',paste ,context);

      op.Shortcut = aa_text(data,profile,'Shortcut',context);
      aa_addMethod(op,'Icon',profile,'Icon',context);
      aa_addMethod(op,'Title',profile,'Title',context);
      op.Disabled = function(data1,ctx) { return aa_bool(data1,profile,'Disabled',aa_merge_ctx(context,ctx)) };

      var newContext = aa_ctx(context,{_Operation: [op]} );
      ajaxart.runsubprofiles(data,profile,'Aspect',newContext);

      return [op];
    },
    ContextMenu: function (profile,data,context)
    {
      var menu = { isObject : true,  Items : [], IncludeOperationsFromParent: true };
      menu.Presentation = function(data1, ctx) { return aa_run_component("ui.ButtonAsHyperlink",data1,ctx); };
      var cntr = context.vars._Cntr[0];
      var newContext = aa_ctx(context,{_Menu: [menu], _ElemsOfOperation: cntr.ElemsOfOperation() , _ItemsOfOperation: cntr.ItemsOfOperation() } );
      var aspects = ajaxart.runsubprofiles(data,profile,'MenuAspect',newContext);
      for(var i=0;i<aspects.length;i++)
        if (aspects[i].addOperations) aspects[i].addOperations();
      
      return [menu];
    },
    OperationsByIDs: function (profile,data,context)
    {
      return [{ isObject: true, addOperations: function()
        {
      var menu = context.vars._Menu[0];
      var cntr = context.vars._Cntr[0];
      var operations = aa_text(data,profile,'OperationIDs',context).split(',');
      var result = [];
      for(var i=0;i<operations.length;i++)
      {
        op = aad_object_byid(menu.Items,operations[i]); 
        if (op != null)
          result.push(op);
      }

      menu.Items = result;
      return [];
      }}];
    },
    Validate: function (profile,data,context)
    {
      var groupID = aa_text(data,profile,'Group',context);
      var controls = [];
      
        var top = aa_intest ? aa_intest_topControl : document;
      var controls = groupID ? $(top).find('.fld_'+groupID).get() : [];
      
      for(var i=0;i<controls.length;i++) {
        if (!aa_passing_validations(controls[i])) return;
      }
      
      return ajaxart.run(data,profile,'WhenValid',context);
    },
    IncludeItemOperationsFromParent: function (profile,data,context)
    {
      var menu = context.vars._Menu[0];
      menu.IncludeOperationsFromParent = aa_bool(data,profile,'Include',context);
      return [];
    },
    Presentation: function (profile,data,context)
    {
      var menu = context.vars._Menu[0];
      aa_addMethod(menu,'Presentation',profile,'Style',context);
      return [];
    },
    ExportItemlistTableToExcel: function (profile,data,context)
    {
      var control = aa_find_field_controls({ fieldID: aa_text(data,profile,'Itemlist',context) , context: context })[0];
      if (!control || !control.jbItemList) return;
      var itemlist = control.jbItemList;
      
      var csv='';

      var fields = itemlist.VisibleFields;
      for(var i=0;i<fields.length;i++) {
        var title = aa_fieldTitle(fields[i],itemlist.InputData,itemlist.Context);
        csv += fixCsvCell(title);
        if (i < fields.length-1) csv += ',';
      }

      var items = itemlist.itemlistCntr.Items;
      for(var i=0;i<items.length;i++) {
        csv += '\n';
        for (var j=0; j<fields.length; j++) {
          var item = [items[i]];
          var cell = $('<td/>')[0];
          itemlist.CreateFieldControl(item,cell,fields[j],i+1);
          var val = $(cell).text();
          csv += fixCsvCell(val);

          if (j < fields.length-1) csv += ',';
        }
      }

      var fileName = aa_text(data,profile,'FileName',context);
      // var url = aa_text(data,profile,'ServerBaseUrl','context') + '&fileName=' + encodeURIComponent(fileName);
      // url += '&fileData=' + encodeURIComponent(csv) + '&_' + new Date().getTime();

      // var $link = $('<a/>').attr('href',url).attr('target','_new').attr('download',fileName);
      // $link[0].click();

      var url = aa_text(data,profile,'ServerBaseUrl','context');
      var $form = $('<form />').attr('action',url).attr('method','post').attr('target','_new');
      $('<input/>').attr('type','hidden').attr('name','fileData').val(csv).attr('value',csv).appendTo($form);
      $('<input/>').attr('type','hidden').attr('name','fileName').val(fileName).attr('value',fileName).appendTo($form);
      $form[0].submit();

      function fixCsvCell(cell) {
        if (cell.indexOf(',') > -1)
          return '"'+cell.replace(/"/,'""')+'"';
        return cell;
      }
    },
    Search: function(profile,data,context)
    {
      var cntr = (context.vars.HeaderFooterCntr || context.vars._Cntr)[0];
      if (cntr == null) return;
      
      aa_recalc_filters_and_refresh(cntr,context.vars._Item,context);
      var pagesToRefresh = aa_text(data,profile,'MorePagesToRefresh',context).split(',');
      for(var i in pagesToRefresh)
      {
        var page = pagesToRefresh[i];
        var top = aa_intest ? $(cntr.Ctrl).parents().slice(-1) : $();
        var cntr_ctrl = top.find('.aa_container').filter(function() { return this.Cntr.ID[0] == page })[0];
        if (cntr_ctrl)
        {
          var target_cntr = cntr_ctrl.Cntr; 
          target_cntr.FilteredWrappers = cntr.FilteredWrappers;
          aa_refresh_itemlist(target_cntr,context);
        }
      }
      return [];
    },
    RunJavascript :function(profile,data,context)
    {
      aa_run_js_code(aa_text(data,profile,'Code',context),data,context);
      return [];
    }
});


aa_gcs("action",{
  Validate: function(profile,data,context) {
    var groupID = aa_text(data,profile,'Group',context);
    var controls = [];
    
    var top = aa_intest ? aa_intest_topControl : document;
    var control = groupID ? $(top).find('.fld_'+groupID)[0] : null;
    if (!control) return;

    if (!aa_checkValidations(control)) {
      ajaxart.run(data,profile,'WhenError',context);
      return;
    }

    return ajaxart.run(data,profile,'WhenValid',context);
  }
});
// TODO: make it all function aa_suggestbox_...
ajaxart.suggestbox = {};
ajaxart.contextWithControlToRunOn = function(context,control) {
	  var newContext = ajaxart.clone_context(context);
	  newContext.vars['ControlElement'] = control;
	  return newContext;
	}

ajaxart.suggestbox.attachToTextbox = function(data,profile,context,textbox)
{
  if (data.length == 0) return ;
	  
  ajaxart.suggestbox.setTextBoxValue(data,profile,context,textbox);
  var max = aa_text(data,profile,'MaxItems',context);
  
  jQuery(textbox).addClass('suggestion_box_input');
  
  jQuery(textbox).blur(function(e) {
	  var element = (typeof(e.target)== 'undefined')? e.srcElement : e.target;
	  if (jQuery(element).parents(".suggestionpopup").length > 0 )	// event from the popup
		  return;
//	  ajaxart.suggestbox.setValue(data,profile,context,textbox,false);
	  setTimeout(function() { 
		  ajaxart.suggestbox.setValue(data,profile,context,textbox,false);
	  },300);
  });

  jQuery(textbox).click(function(e) {
	  if (this.value == "")
		  ajaxart.suggestbox.openPopup(data,profile,context,textbox,true);
  });

  jQuery(textbox).focus(function(e) {
	  if (this.value == "") {
		  var options = ajaxart.run(data,profile,'Options',context);
		  if (options.length > 0 && options.length <= max)
			  ajaxart.suggestbox.openPopup(data,profile,context,textbox,true);
	  }
  });
  
  jQuery(textbox).keydown(function(e) {
	  if (e.keyCode == 27) {
		  if ( ajaxart.suggestbox.isPopupOpen()  ) {
			  jQuery(ajaxart.ui.suggestBoxPopup).hide();
			  ajaxart_stop_event_propogation(e);
		  }
	  }
	  if (e.keyCode == 13 && ajaxart.suggestbox.isPopupOpen())
		  ajaxart_stop_event_propogation(e);
  });
  jQuery(textbox).keyup(function(e) {
	  if (e.keyCode == 27) {
		  if ( ajaxart.suggestbox.isPopupOpen()  )
			  ajaxart_stop_event_propogation(e);
		  return;
	  }
	  if (e.keyCode == 9) {
		  ajaxart_stop_event_propogation(e);
		  return;
	  }
	  if (e.keyCode == 13 ) {
		  if (ajaxart.suggestbox.isPopupOpen()) {
			  ajaxart.suggestbox.setValue(data,profile,context,textbox,true);
			  ajaxart_stop_event_propogation(e);
		  }
		  return;
	  }
	  if (e.keyCode == 38 || e.keyCode == 40) { // arrows up/down
		  var jSelected = jQuery(ajaxart.ui.suggestBoxPopup).find('.selected:visible');
		  if (jSelected.length == 0) {
			  if (ajaxart.ui.suggestBoxPopup.allowTextNotInOptions) {
				  var items = jQuery(ajaxart.ui.suggestBoxPopup).find('.suggestion_item');
				  if (items.length > 0) jQuery(items[0]).addClass('selected');
			  }
			  return;
		  }
		  var nextItem = null;
		  if (e.keyCode == 38) {
			  nextItem = jSelected[0].previousSibling;
			  while (nextItem != null && nextItem.style.display == 'none')
				  nextItem = nextItem.previousSibling;
		  }
		  if (e.keyCode == 40) { 
			  nextItem = jSelected[0].nextSibling;
			  while (nextItem != null && nextItem.style.display == 'none')
				  nextItem = nextItem.nextSibling;
		  }
		  if (nextItem != null) {
			  jSelected.removeClass('selected');
			  jQuery(nextItem).addClass('selected');
		  }
		  return;
	  }
	  ajaxart.suggestbox.openPopup(data,profile,context,textbox,false);
  });
}
ajaxart.suggestbox.setValue = function(data,profile,context,textbox,clickOnSelected)
{
	  var allowNotInCombo = aa_bool(data,profile,'AllowTextNotInOptions',context);
	  if (ajaxart.ui.suggestBoxPopupInput != textbox) return;
	  
	  var jPopup = jQuery(ajaxart.ui.suggestBoxPopup);
	  var sel = jPopup.find('.selected:visible');
	  if (sel.length > 0 && sel[0].ajaxart_menu != null && clickOnSelected) {
		  var newContext = ajaxart.clone_context(context);
		  newContext.vars['ControlElement'] = [textbox];
		  newContext.vars['SuggestionBoxText'] = [ textbox.value ];
		  ajaxart.run_xtml_object(data,sel[0].ajaxart_menu['Action'],newContext);
		  return;
	  }
	  var newval = "";
	  if (allowNotInCombo) newval = textbox.value;
	  if (sel.length > 0 && sel[0].ajaxart_menu == null)
		  var newval = sel[0].ajaxart_value;
	  
	  if (textbox.value == "" && !clickOnSelected)
		  newval = "";
	  
	  if (sel.length == 0 && !allowNotInCombo && !clickOnSelected) {
		  ajaxart.suggestbox.setTextBoxValue(data,profile,context,textbox);
		  return;
	  } else if (allowNotInCombo && !clickOnSelected) 
		  newval = textbox.value;
	  else 
		  ajaxart.suggestbox.setTextBoxValue([newval],profile,context,textbox);
	  
	  ajaxart.writevalue(data,[newval]);
	  ajaxart.run(data,profile,'OnUpdate',ajaxart.contextWithControlToRunOn(context,[textbox]));
	  
	  jPopup.hide();
}
ajaxart.suggestbox.setTextBoxValue = function(value,profile,context,textbox)
{
  jQuery(textbox).removeClass('suggetion_text_for_empty');
  
  var label = aa_text(value,profile,'OptionLabelInTextbox',context);
  if (label == "") label = ajaxart.totext(value);
  if (label == "") { 
	  label = aa_text(value,profile,'TextForEmpty',context);
	  if (label != "")
		  jQuery(textbox).addClass('suggetion_text_for_empty');
  }
  if (label.indexOf('_') == 0)
	  label = label.substring(1);
  textbox.value = label;
}
ajaxart.suggestbox.openPopup = function(data,profile,context,textbox,showAll)
{
	  var max =  aa_text(data,profile,'MaxItems',context);

	  var searchAnywhere = true; //aa_bool(value,profile,'SearchAnywhere',context);
	  if (ajaxart.ui.suggestBoxPopupInput != textbox) {
		  var popup = ajaxart.ui.suggestBoxPopup;
		  if(popup != null && popup.parentNode != null)
			  aa_remove(popup,true);
		  
		  ajaxart.ui.suggestBoxPopup = document.createElement('div');
		  jQuery(ajaxart.ui.suggestBoxPopup).addClass('aapopup suggestionpopup');
		  var hasDescription = true, hasImage = true, hasOptionText = false;
		  if (profile.getAttribute('OptionLabel') != null || aa_xpath(profile,'OptionLabel').length > 0)
			  hasOptionText = true;
		  
		  var optionDivs = [];
		  var options = ajaxart.run(data,profile,'Options',context);
		  var hasMore = false;
		  
		  for(var i=0;i<options.length;i++) {
			  var option = options[i];
			  var optionText = "";
			  if (hasOptionText)
				  optionText = aa_text([option],profile,'OptionLabel',context); 
			    else optionText = ajaxart.totext(option);
			  
			  var optionDescription = "",optionImage="";
			  if (hasDescription) optionDescription = aa_text([option],profile,'OptionDescription',context);
			  if (hasImage) optionImage = aa_text([option],profile,'OptionImage',context);
			  
			  var itemDiv = document.createElement('div');
			  jQuery(itemDiv).addClass('suggestion_item');
			  itemDiv.ajaxart_value = option;
			  itemDiv.ajaxart_text = optionText.toLowerCase();
			  var itemText = document.createElement('div'); itemText.innerHTML = optionText; itemDiv.appendChild(itemText);
			  if (hasImage) {
				  itemText.style.backgroundImage = 'url(' + optionImage + ')';
				  jQuery(itemText).addClass('suggestion_withimage');
			  }
			  if (optionDescription != null) {
				  var itemDescDiv = document.createElement('div'); jQuery(itemDescDiv).addClass('suggestion_description'); itemDescDiv.innerHTML = optionDescription; itemDiv.appendChild(itemDescDiv);
			  }
			  ajaxart.ui.suggestBoxPopup.appendChild(itemDiv);
			  optionDivs.push(itemDiv);
			  if (i >= max) { itemDiv.style.display = 'none'; hasMore = true; }
		  }
		  ajaxart.ui.suggestBoxPopup.aaitems = optionDivs;	  
		  
		  var moreDiv = jQuery('<div class="suggestion_item suggestion_menuitem suggestion_more">more</div>')[0];
		  ajaxart.ui.suggestBoxPopup.appendChild(moreDiv);
		  ajaxart.ui.suggestBoxPopup.aamore = moreDiv;
		  
		  ajaxart.ui.suggestBoxPopup.aamore.style.display = (hasMore) ? 'block' : 'none';
		  
		  var menuItems = ajaxart.runsubprofiles(data,profile,'AdditionalMenuItem',context);
		  for(var i=0;i<menuItems.length;i++) {
			  var itemDiv = document.createElement('div');
			  jQuery(itemDiv).addClass('suggestion_item suggestion_menuitem');
			  itemDiv.ajaxart_menu = menuItems[i];
			  var itemText = document.createElement('div'); itemText.innerHTML = ajaxart.totext(itemDiv.ajaxart_menu['Text']); itemDiv.appendChild(itemText);
			  var itemImage = itemDiv.ajaxart_menu['Image'];
			  if (itemImage != null && itemImage != "") {
				  itemText.style.backgroundImage = 'url(' + itemImage + ')';
				  jQuery(itemText).addClass('suggestion_withimage');
			  }
			  ajaxart.ui.suggestBoxPopup.appendChild(itemDiv);
			  ajaxart.ui.suggestBoxPopup.aaitems.push(itemDiv);
		  }

		  ajaxart.ui.suggestBoxPopup.allowTextNotInOptions = aa_bool(data,profile,'AllowTextNotInOptions',context);
		  
		  jQuery(ajaxart.ui.suggestBoxPopup.aaitems).hover(
				    function() { jQuery(this.parentNode).find('.selected:visible').removeClass('selected'); jQuery(this).addClass('selected'); },
				    function() {}
		  );

		  ajaxart.ui.suggestBoxPopupInput = textbox;
		  
		  jQuery(ajaxart.ui.suggestBoxPopup).click(function(event) {
			  var element = (typeof(event.target)== 'undefined')? event.srcElement : event.target;
			  if (!jQuery(element.parentNode).hasClass("suggestion_item") || jQuery(element.parentNode).hasClass("suggestion_more"))
				  return;
			  var jPopup = jQuery(ajaxart.ui.suggestBoxPopup);
			  jPopup.find('.selected').removeClass('selected');
			  jQuery(element).parent().addClass('selected');
			  ajaxart.suggestbox.setValue(data,profile,context,textbox,true);
		  });
		  
		  jQuery('body').append(jQuery(ajaxart.ui.suggestBoxPopup));
	  }
	  var jPopup = jQuery(ajaxart.ui.suggestBoxPopup);
//	  var left = aa_absLeft(textbox);
//	  var top = aa_absTop(textbox) + jQuery(textbox).height()+5;
	  
	  jQuery(ajaxart.ui.suggestBoxPopup).width(jQuery(textbox).width()-5);
	  ajaxart.ui.suggestBoxPopup.style.display = 'block';
	  ajaxart.dialog.positionPopup(jQuery(ajaxart.ui.suggestBoxPopup), textbox);

//	  var width = jQuery(textbox).width()-5;
//	  jPopup.css("left",left).css('top',top).css('min-width',""+width+"px").find('.selected').removeClass('selected');
	  var text = textbox.value.toLowerCase();
	  var count=0; var items = ajaxart.ui.suggestBoxPopup.aaitems; var hasSelected=false; var hasMore = false;
	  if ( ajaxart.ui.suggestBoxPopup.allowTextNotInOptions ) hasSelected = true;
	  
	  for(var i=0;i<items.length;i++) {
		  if (items[i].ajaxart_menu != null) { if (! hasSelected) { jQuery(items[i]).addClass('selected'); hasSelected=true;} continue;  }
		  if (count >=max) { items[i].style.display = 'none'; hasMore = true; }
		  else {
			  var found_at = items[i].ajaxart_text.indexOf(text);
			  var found = (searchAnywhere && found_at != -1) || (!searchAnywhere && found_at == 0);
			  if (!showAll && !found ) items[i].style.display = 'none';
			  else {
				  items[i].style.display = 'block';
				  count++;
				  if (! hasSelected) { jQuery(items[i]).addClass('selected'); hasSelected=true;}
				  else
					  jQuery(items[i]).removeClass('selected');
			  }
		  }
	  }
	  ajaxart.ui.suggestBoxPopup.aamore.style.display = (hasMore) ? 'block' : 'none';
	  if (count == 0)
		  ajaxart.suggestbox.closePopup();
}
ajaxart.suggestbox.closePopup = function()
{
	jQuery(ajaxart.ui.suggestBoxPopup).hide();
}
ajaxart.suggestbox.isPopupOpen = function()
{
	return (ajaxart.ui.suggestBoxPopup != null && jQuery(ajaxart.ui.suggestBoxPopup).css("display") == 'block');
}
ajaxart.customsuggestbox = {};
ajaxart.customsuggestbox.init = function(field,data,profile,context)
{
	aa_field_handler(field,'ModifyControl', function(cell,field_data,cell_presentation,ctx,item) {
		if (ajaxart_field_is_readOnly(ctx.vars._Cntr[0],cell.Field,ctx)) return; 
		var input = jQuery(cell).find('.field_control')[0];
		  input["profile"] = profile;
		  input["context"] = context;
		  input["data"] = field_data;
		  jQuery(input).keypress(function(e) {
			  if (e.charCode == 32 && e.ctrlKey) { // ctrl + space
				  ajaxart.run(data,profile,'OnCtrlSpace',ajaxart.ui.contextWithCurrentControl(context, this)); 
				  return false;
			  }
			  return true;
		  });
		  // dirty
		  jQuery(input).focus(function(e) {
			  if (ajaxart.getVariable(context,"_Context").length == 0 && input["context_calculated"] == null) {
				  var obj = ajaxart.getVariable(context,"_XtmlDt");
				  if (obj == null || obj.length == 0) return;
				  var scriptParam = obj[0]["Context"];
				  ajaxart.setVariable(context,"_Context", ajaxart.runScriptParam(data,scriptParam,aa_ctx(context,{_FieldData: field_data})) );
				  input["context_calculated"] = true;
			  }
		  });
		  jQuery(input).change(function(e) {
			  var prev_value = ajaxart.totext(data);
			  ajaxart.writevalue(data,this.value);
			  ajaxart.run(data,profile,'OnUpdate',ajaxart.ui.contextWithCurrentControl(context, this));
		  });
	});
	aa_field_handler(field,'OnKeydown',function(field,field_data,input,e) {
		  if (e.keyCode == 27) { //escape
			  if ( ajaxart.suggestbox.isPopupOpen()  ) {
				  jQuery(ajaxart.ui.suggestBoxPopup).hide();
				  ajaxart_stop_event_propogation(e);
			  }
		  }
		  if (e.keyCode == 13 && ajaxart.suggestbox.isPopupOpen())
			  ajaxart_stop_event_propogation(e);
	  });
	aa_field_handler(field,'OnKeyup',function(field,field_data,input,e) {
		  if (e.keyCode == 27) {
			  if ( ajaxart.suggestbox.isPopupOpen()  )
				  ajaxart_stop_event_propogation(e);
			  return;
		  }
		  if (e.keyCode == 13) { //enter
			  if ( ajaxart.suggestbox.isPopupOpen()  ) {
				  var selected = jQuery(ajaxart.ui.suggestBoxPopup).find('.selected:visible');
				  if (selected.length > 0) {
					  jQuery(ajaxart.ui.suggestBoxPopup).hide();
					  var textToAdd = selected[0].ajaxart_text;
					  if (input.openedWithTrigger)
					  	  textToAdd = aa_text( [textToAdd], input.triggerProfile, "TextPatternToAdd", input.triggerContext );
					  input.value = input.value + textToAdd;
					  ajaxart.writevalue(field_data,input.value);
					  aa_runMethod([selected[0].ajaxart_value],ajaxart.ui.suggestBoxPopup,"OnSelect",context);
					  input["openedWithTrigger"] = false;
					  ajaxart.run(field_data,profile,'OnAfterTextAdded',ajaxart.ui.contextWithCurrentControl(context, input) );
					  ajaxart.run(field_data,profile,'OnUpdate',ajaxart.ui.contextWithCurrentControl(context, input) );
					  ajaxart_stop_event_propogation(e);
				  }
			  }
			  return;
		  }
		  var prev_value = ajaxart.totext(field_data);
		  ajaxart.writevalue(field_data,input.value);
		  if (prev_value != input.value)
			  ajaxart.run(field_data,profile,'OnUpdate',ajaxart.ui.contextWithCurrentControl(context, input));
		  var lastChar = "";
		  if (e.keyCode == 9)
			  ajaxart_stop_event_propogation(e);
		  else if (e.keyCode == 38 || e.keyCode == 40) { // arrows up/down
			  var jSelected = jQuery(ajaxart.ui.suggestBoxPopup).find('.selected:visible');
			  var nextItem = null;
			  if (e.keyCode == 38)  // up
				  nextItem = jSelected[0].previousSibling;
			  if (e.keyCode == 40)  // arrow down
				  nextItem = jSelected[0].nextSibling;
			  if (nextItem != null) {
				  jSelected.removeClass('selected');
				  jQuery(nextItem).addClass('selected');
			  }
			  ajaxart_stop_event_propogation(e);
		  }
		  else {
			  if (prev_value != input.value && ajaxart.ui.suggestBoxPopup != null) // not for non-function keys like shift
				  jQuery(ajaxart.ui.suggestBoxPopup).hide();
			  var selEnd = input.selectionEnd;
//			  if ((input.value.length == prev_value.length+1 && prev_value == input.value.substring(0,input.value.length-1)) ||  
//					  (input.value.length == prev_value.length-1 && input.value == prev_value.substring(0,prev_value.length-1)) ) {// todo: fix
			  if ( selEnd == null || selEnd == input.value.length ) {	// at end of text or IE and 
				  if (!(e.keyCode == 32 && e.ctrlKey) && e.keyCode != 17 && e.keyCode != 16)  {// not clicking Ctrl+Space or loosing the Ctrl
					  input["openedWithTrigger"] = false;
					  ajaxart.run(field_data,profile,'OnChangeAtEndOfText',ajaxart.ui.contextWithCurrentControl(context,input) );
				  }
			  }
		  }
	  });
}
ajaxart.customsuggestbox.openSuggestionBoxList = function(profile,data,context)
{
	var textbox = ajaxart.getControlElement(context,true);
	if (textbox == null) return [];
	
	  var popup = document.createElement('table');
	  popup.setAttribute("cellpadding","0");
	  popup.setAttribute("cellspacing","0");
	  var halfWrittenPart = aa_text(data,profile,'HalfWrittenPart',context);
	  var halfWrittenAlwaysOnStart = aa_bool(data,profile,'HalfWrittenAlwaysOnStart',context);
	  var filterItemsDifferantThanHalfWrittern = aa_bool(data,profile,'FilterItemsDifferantThanHalfWrittern',context);
	  var halfWrittenPartLower = halfWrittenPart.toLowerCase();
	  aa_addMethod(popup,"OnSelect",profile,"OnSelect",context);
	  var label_compiled = ajaxart.compile(profile,'OptionLabel',context);
	  
	  var options = ajaxart.run(data,profile,'Options',context);
	  var empty = true;
	  for(var i=0;i<options.length;i++) {
		  var option = options[i];
		  var optionText = ajaxart_runcompiled_text(label_compiled, [option], profile, "OptionLabel" ,context);
		  if (optionText.indexOf('__') == 0) continue;
		  if (halfWrittenPart != "" && optionText.indexOf(halfWrittenPart) != 0 && halfWrittenAlwaysOnStart) continue;
		  if (filterItemsDifferantThanHalfWrittern && halfWrittenPart != "" && optionText.toLowerCase().indexOf(halfWrittenPartLower) == -1) continue;
		  if (filterItemsDifferantThanHalfWrittern && halfWrittenPart != "" && optionText.length == halfWrittenPart.length) continue;
		  var optionDescription = aa_text([option],profile,'OptionDescription',context);
		  var optionImage = aa_text([option],profile,'OptionImage',context);
		  var itemDiv = document.createElement('tr');
		  jQuery(itemDiv).addClass('suggestion_item');
		  if (empty) {
			  empty = false;
			  jQuery(itemDiv).addClass('selected');
		  }
		  itemDiv.ajaxart_value = option;
		  itemDiv["ajaxart_text"] = optionText;
		  var td =  document.createElement('td'); itemDiv.appendChild(td); //itemDiv.className="suggestion_item";
		  var itemText;
		  if (halfWrittenPart != "" && halfWrittenAlwaysOnStart) {
			  var halfWrittenSpan = document.createElement('span'); halfWrittenSpan.className="half_written"; jQuery(halfWrittenSpan).text(halfWrittenPart); td.appendChild(halfWrittenSpan);
			  var restText = optionText.substring(halfWrittenPart.length);
			  var rest = document.createElement('span'); jQuery(rest).text(restText ); td.appendChild(rest);
			  rest.className = "suggestion_text";
			  itemText = halfWrittenSpan;
			  itemDiv["ajaxart_text"] = restText;
		  } else if (halfWrittenPart != "" && !halfWrittenAlwaysOnStart) {
			  var index = optionText.toLowerCase().indexOf(halfWrittenPartLower);
			  if (index == -1) {itemText = document.createElement('span'); jQuery(itemText).text(optionText); td.appendChild(itemText); itemText.className = "suggestion_text"; }
			  else {
				  var start = document.createElement('span'); jQuery(start).text(optionText.substring(0,index)); td.appendChild(start);
				  var highlighted_text = optionText.substring(index, index+halfWrittenPart.length);
				  var halfWrittenSpan = document.createElement('span'); halfWrittenSpan.className="half_written"; jQuery(halfWrittenSpan).text(highlighted_text); td.appendChild(halfWrittenSpan);
				  var restText = optionText.substring(index+halfWrittenPart.length);
				  var rest = document.createElement('span'); jQuery(rest).text(restText ); td.appendChild(rest);
				  rest.className = "suggestion_text";
				  itemText = start;
				  itemDiv["ajaxart_text"] = restText;
			  }
		  }	else {
			  itemText = document.createElement('span'); jQuery(itemText).text(optionText); td.appendChild(itemText); itemText.className = "suggestion_text";
		  }
		  if (optionImage != null) {
			  itemText.style.backgroundImage = 'url(' + optionImage + ')';
			  jQuery(itemText).addClass('suggestion_withimage');
		  }
		  if (optionDescription != null) {
			  var itemDescDiv = document.createElement('span'); jQuery(itemDescDiv).addClass('suggestion_description');
			  if (optionDescription.length > 30) optionDescription = optionDescription.substring(0,30)+"..."; 
			  ajaxart_set_text(itemDescDiv,optionDescription); itemDiv.appendChild(itemDescDiv);
			  var td =  document.createElement('td'); td.style.width="100%"; td.appendChild(itemDescDiv); itemDiv.appendChild(td);
		  }
		  popup.appendChild(itemDiv);
		  jQuery(itemDiv).hover(
				    function() { jQuery(this.parentNode).find('.selected:visible').removeClass('selected'); jQuery(this).addClass('selected'); },
				    function() {}
		  );
		  jQuery(itemDiv).click(function(event) {
			  var element = (typeof(event.target)== 'undefined') ? event.srcElement : event.target;
			  var parent = jQuery(element).parents(".suggestion_item");
			  if (parent.length == 0) return;
			  var jPopup = jQuery(ajaxart.ui.suggestBoxPopup);
			  jQuery(ajaxart.ui.suggestBoxPopup).hide();
			  var textToAdd = parent[0].ajaxart_text;
			  if (textbox.openedWithTrigger)
			    textToAdd = aa_text( [textToAdd], textbox.triggerProfile, "TextPatternToAdd", textbox.triggerContext );
			  textbox.value = textbox.value + textToAdd;
			  ajaxart.writevalue(ajaxart.ui.suggestBoxPopup.textbox.ajaxart.data,textbox.value);
			  aa_runMethod([parent[0].ajaxart_value],ajaxart.ui.suggestBoxPopup,"OnSelect",context);
			  textbox["openedWithTrigger"] = false;
			  ajaxart.run(textbox.data,textbox.profile,'OnAfterTextAdded', ajaxart.ui.contextWithCurrentControl(textbox.context,textbox) );
			  ajaxart.run(textbox.data,textbox.profile,'OnUpdate', ajaxart.ui.contextWithCurrentControl(textbox.context,textbox) );
			  ajaxart.ui.suggestBoxPopup.textbox.focus();
		  });
	  }
	  if (!empty)
		  ajaxart.customsuggestbox.openPopup(popup,textbox);
		else
		  if (ajaxart.ui.suggestBoxPopup) jQuery(ajaxart.ui.suggestBoxPopup).hide();
}
ajaxart.customsuggestbox.openSuggestionBoxPopup = function(profile,data,context)
{
	var textbox = ajaxart.getControlElement(context,true);
	if (textbox == null) return [];
	  var control = aa_first(data,profile,'Control',context);
	  if (control != null)
		  ajaxart.customsuggestbox.openPopup(control,textbox);
	  return [];
}
ajaxart.customsuggestbox.openPopup = function(element, textbox)
{
	  var popup = ajaxart.ui.suggestBoxPopup;
	  if (popup != null && popup.parentNode != null)
		  popup.parentNode.removeChild(popup);
	  
	  ajaxart.ui.suggestBoxPopup = element;
	  ajaxart.ui.suggestBoxPopup.textbox = textbox;
	  jQuery(ajaxart.ui.suggestBoxPopup).addClass('aapopup suggestionpopup customsuggestionpopup');
	  
	  var close_button = jQuery('<IMG src="' + aa_base_images() + '/close2.png" class="suggestionpopup_close_button"></IMG>');
	  close_button.click(function(e) {
			ajaxart_stop_event_propogation(e);
			jQuery(ajaxart.ui.suggestBoxPopup).hide();
			textbox.focus();
	  });
	  ajaxart.ui.suggestBoxPopup.appendChild(close_button[0]);

	  jQuery('body').append(jQuery(ajaxart.ui.suggestBoxPopup));
	  var width = jQuery(textbox).width()-5;
	  if (width < 300) width = 300;
	  jQuery(ajaxart.ui.suggestBoxPopup).width(width);
	  ajaxart.ui.suggestBoxPopup.style.display = 'block';
	  ajaxart.dialog.positionPopup(jQuery(ajaxart.ui.suggestBoxPopup), textbox);
//	  var left = aa_absLeft(textbox);
//	  var top = aa_absTop(textbox) + jQuery(textbox).height()+5;
	  
//	  jPopup.css("left",left).css('top',top);//.css('min-width',""+width+"px");
}
ajaxart.customsuggestbox.addTextToSuggestionBox = function(profile, data,context)
{
	var textToAdd = aa_text(data,profile,'Text',context);
	var textbox = ajaxart.getControlElement(context,true);
	if (ajaxart.ui.suggestBoxPopup != null && ajaxart.ui.suggestBoxPopup.textbox != null)
		textbox = ajaxart.ui.suggestBoxPopup.textbox;
    if (textbox.openedWithTrigger)
	  textToAdd = aa_text( [textToAdd], textbox.triggerProfile, "TextPatternToAdd", textbox.triggerContext );
	textbox.value = textbox.value + textToAdd;
	ajaxart.writevalue(textbox.data,textbox.value);
	textbox.focus();
	if (ajaxart.ui.suggestBoxPopup != null)
		jQuery(ajaxart.ui.suggestBoxPopup).hide();
	 textbox["openedWithTrigger"] = false;
	var textboxCtx = textbox.context || textbox.jbContext;
	if ( aa_bool(data,profile,'TriggerOnAfterTextAdded',context) )
		ajaxart.run(textbox.data,textbox.profile,'OnAfterTextAdded', ajaxart.ui.contextWithCurrentControl(textboxCtx,textbox) );
	ajaxart.run(textbox.data,textbox.profile,'OnUpdate', ajaxart.ui.contextWithCurrentControl(textboxCtx,textbox) );
	if ( aa_bool(data,profile,'TriggerPopup',context) )
		ajaxart.run(data,textbox.profile,'OnChangeAtEndOfText', ajaxart.ui.contextWithCurrentControl(textboxCtx,textbox) );
}
ajaxart.customsuggestbox.triggerSuggestionBoxPopup = function(profile, data,context)
{
	var textbox = ajaxart.getControlElement(context,true);
	if (textbox == null) return [];
	var textToSimulate = ajaxart.run(data,profile,'TextToSimulate',context);
	textbox["openedWithTrigger"] = true;
	textbox["triggerProfile"] = profile;
	textbox["triggerContext"] = context;
	ajaxart.run(textToSimulate,textbox.profile,'OnChangeAtEndOfText', ajaxart.ui.contextWithCurrentControl(textbox.context,textbox) );
}








aa_gcs("ui", {
	ControlUsage: function (profile,data,context)
	{
		window.aa_intest_topControl = null;
		aa_intest = true;
		try
		{
			ajaxart.run(data,profile,'RunBefore',context);
			var control = ajaxart.run(data,profile,'Control',context);
			if (control.length == 0) return ["no control"];	
			window.aa_intest_topControl = control[0];
		
			var newContext = aa_ctx(context,{ControlElement: control, TopControlForTest: control, TopControlElement: control, InTest: ['true']});

			if (context.vars._TestOutput) {
				if (context.vars._TestOutput[0].OutputControl) {
					context.vars._TestOutput[0].OutputControl[0].appendChild(control[0]);
					aa_fixTopDialogPosition();
				}
				else
					context.vars._TestOutput[0].OutputControl = control[0];
			}
			
			ajaxart.run(data,profile,'RunOnControl',newContext);
		
			if (aa_text(data,profile,'ResultType',context) == 'Data')
				var result = data;
			else 
				var result = newContext.vars.TopControlElement;
		
			var passed = aa_bool(result,profile,'ExpectedResult',newContext);
			ajaxart.run(data,profile,'CleanAfter',newContext);
			window.aa_intest_topControl = null;
		
		  if (openDialogs.length > 0) { // close dialogs
		      var dlg = openDialogs[openDialogs.length-1];
		      if ( ! jQuery(dlg.dialogContent).hasClass('aaeditor') )
		        aa_remove(ajaxart.dialog.closeDialog(dlg),true);
		  }
		  aa_closePopupsInTest();
	}
	catch (e) { 
		aa_intest = false; 
		ajaxart.logException(e); 
	}
	aa_intest = false;
	if (passed == false)
		return result;//ajaxart.usage.resultAsText(result);
	return [];
  },
  ControlUsage_Result: function (profile,data,context)
  {
	  ajaxart.run(data,profile,'RunBefore',context);
	  return ajaxart.run(data,profile,'Control',context);
  },  
  ControlData: function (profile,data,context)
  {
	 var type = aa_text(data,profile,'Type',context);
	 var control = ajaxart.run(data,profile,'Control',context);
	 if (! ajaxart.ishtml(control)) return [];
	 
     var context1 = control[0]["ajaxart"];
     if (typeof(context1) == "undefined")
    	 return control[0].ItemData;
     if (type == "data") return context1.data;
     if (type == "original_data") {
    	 if (context1.origData == null) return context1.data;
    	 else return context1.origData;
     }
     if (type == "script") return [context1.script];
     if (type == "context") return [context1.params];
     if (type == "all")
     { 
   	    var out = { isObject: true };
  	    out.input = context1.data;
  	    if (context1.origData != null) out.input = context1.origData;
  	    out.script = context1.script;
  	    out.context = context1.params;
    	 
    	return [out];
     }
     return [];
  },
  ControlInObject: function (profile,data,context)
  {
	  var obj = aa_first(data,profile,'Object',context);
	  obj.ControlHolder = ajaxart.run(data,profile,'Control',context);
	  if (!obj.ControlHolder[0]) obj.ControlHolder = [ document.createElement('div') ];
	  obj.ControlHolder[0].ParentObject = [obj];
	  return obj.ControlHolder;
  },
  AttachGlobalCss: function(profile,data,context)
  {
	  return [ aa_attach_global_css(aa_text(data,profile,'Css',context),null,aa_text(data,profile,'Name',context) )];
  },
  UseDataBoundParams: function(profile,data,params)
  {
	  if (! ajaxart.ishtml(data)) return data;
	  for(var i=0;i<data.length;i++) {
		  var dataitem = data[i];
		  if (typeof(dataitem["ajaxart"]) != "undefined")
		  {
			  var controlParams = dataitem["ajaxart"].params;
			  ajaxart.setVariable(controlParams,"InputForChanges",dataitem["ajaxart"].data);
			  ajaxart.run([ dataitem ],profile,'Change',controlParams);
		  }
	  }
	  return data;
  },
  LoadCssFile: function(profile,data,context)
  {
      var url = aa_text(data,profile,'Url',context);
      var media = aa_text(data,profile,'Media',context);
	  
      if (url == "") return [];
      
      var fileref=document.createElement("link");
      fileref.setAttribute("rel", "stylesheet");
      fileref.setAttribute("type", "text/css");
      fileref.setAttribute("href", url);
      if (media)
        fileref.setAttribute("media", media);
      document.getElementsByTagName("head")[0].appendChild(fileref)
      
	  return ["true"];
  },
  SetCssText: function(profile,data,params)
  {
 	 var style = aa_text(data,profile,'Style',params);
 	 if (style == "") return;
 	 ajaxart.each(data, function(item) {
 		 try {
 	 		 item.style.cssText = style;
 		 }
 		 catch (e) { ajaxart.log("failed to change css text: "+ style +" :" +e.message,"error"); }
 	 });
  },
  UrlParameter: function(profile,data,context)
  {
    var strParamName = aa_text(data,profile,'Param',context);
    return [ajaxart.urlparam(strParamName)];
  },
  CurrentUrlWithChangedParam: function(profile,data,context)
  {
	var param = aa_text(data,profile,'Param',context);
	var val = aa_text(data,profile,'Value',context);
	var strHref= aa_text(data,profile,'Url',context);
	
	var params = [];
    if (strHref.indexOf('#') > -1) strHref = strHref.substr(0,strHref.indexOf("#"));
	var baseUrl = strHref;
    if ( strHref.indexOf("?") > -1 ) {
      baseUrl = strHref.substr(0,strHref.indexOf("?"));
      var strQueryString = strHref.substr(strHref.indexOf("?")+1);
      var aQueryString = strQueryString.split("&");
      for ( var iParam = 0; iParam < aQueryString.length; iParam++ ){
        var aParam = aQueryString[iParam].split("=");
        if (aParam[0] != param)
          params.push( {name:aParam[0],value:aParam[1] } );
      }
    }
    params.push( {name:param,value:val } );
    var newUrl = baseUrl + "?";
    for (var i=0;i<params.length;i++)
    {
    	if (i > 0) newUrl += "&";
    	newUrl += params[i].name + "=" + params[i].value; 
    }
	return [newUrl];
  },
  SetCssProperty: function(profile,data,params)
  {
 	 var property = aa_text(data,profile,'Property',params);
 	 var value = aa_text(data,profile,'Value',params);
 	 if (property == "" || !ajaxart.ishtml(data[0]) ) return data;
 	 jQuery(data[0]).css(property,value);
 	 return data;
// 	 data[0].style[property] = value;
  },
  ExecJQuery: function(profile,data,params)
  {
		var expression = aa_text(data,profile,'Expression',params);
		var controls = data;
		if (controls.length == 0 || !ajaxart.ishtml(controls[0]))
			controls = ajaxart.getControlElement(params);

		ajaxart.each(controls, function(item) {
			if (!ajaxart.ishtml(item)) return;
			var exp = "jQuery(item)" + expression + ";";
			try {
				var $ = jQuery;
				eval(exp);
			}
			catch (e) { ajaxart.log("failed to run jQuery exp: "+ exp +" :" +e.message,"error"); }
		});
		return ["true"];
  },
  DayOfWeek: function(profile,data,context)
  {
	  var value = ajaxart.totext_array(data);
	  var d = jQuery.datepicker.parseDate("dd/mm/yy",value);
	  var weekday=new Array(7);
	  weekday[0]="Sunday";
	  weekday[1]="Monday";
	  weekday[2]="Tuesday";
	  weekday[3]="Wednesday";
	  weekday[4]="Thursday";
	  weekday[5]="Friday";
	  weekday[6]="Saturday";

	  var out = weekday[d.getDay()];
	  return [out];
  },
  TextboxValue: function(profile,data,context)
  {
	  var out= [];
		var elements = ajaxart.getControlElement(context);
		ajaxart.each(elements, function(element) {
			if (typeof(element.value) != "undefined")
				out.push("" + element.value);
		});
		return out;
  },
  DataFromJavaScript: function(profile,_data,context)
  {
		if (_data.length == 0) _data = [null];
		var expression = aa_text(_data,profile,'Expression',context);
		var _element = ajaxart.getControlElement(context);
		var element = null;
		if (_element.length>0) element = _element[0];
		var control = element;
		var data = _data[0];
		var result = null;
		try { var $ = jQuery; result = eval(expression); }
		catch(e) { 
			ajaxart.log("Failed to run JS expression:" + expression + ", " + e.message,"error"); 
		}
		if (typeof(result) == "number")
			return ["" + result];
		if (typeof(result) == "object" && !(ajaxart.isxml))//number in FF
			return ["" + result];
		if (result == null || typeof(result) == "undefined")
			return [];
		if (result["jquery"] != null) {
			return result.get();
		}
		return [result];
  },
  RunJavaScript: function(profile, data, params) {
  	var out = ajaxart.gcs.ui.DataFromJavaScript(profile, data, params);
  	return ['true'];
  },
  TextToHtml: function(profile, data, params) {
		if (ajaxart.ishtml(data[0])) return data[0];
		var text = ajaxart.totext(data[0]);
		if (text == "") return [];
		return [jQuery(text)[0]];
  },
  Switch: function (profile,data,params)
  {
	  return aa_switch(profile,data,params);
  },
  IsHtml: function (profile,data,context)
  {
	  if (ajaxart.ishtml(data)) return ["true"];
	  return [];
  },
  FirstSucceeding: function (profile,data,context)
  {
    var itemProfiles = ajaxart.subprofiles(profile,'Control');

    for(var i=0;i<itemProfiles.length;i++)
    {
    	var subresult = ajaxart.run(data,itemProfiles[i],"",context);
    	if (subresult.length > 0) 
    		return subresult;
    }
  	
  	return [];  	
  },
  OnKeyDown: function (profile,data,context)
  {
	  var control = context.vars.ControlElement[0];
	  control.onkeydown = function(e) {
		e = e || event;
        var newContext = ajaxart.clone_context(context);
    	ajaxart.ui.applyKeyboardEvent(e,newContext);
    	var elem = jQuery( (typeof(event)== 'undefined')? e.target : event.srcElement  );
    	if (elem[0] && elem[0].tagName.toLowerCase() == 'textarea')
    	  newContext.vars.EventTargetIsTextArea = ["true"];
    	else 
    	  newContext.vars.EventTargetIsTextArea = [];
    	
    	ajaxart.run(data,profile,'Action',newContext);
    	return true;
	  }
	  return ["true"];
  },
  BindEvent: function (profile,data,context)
  {
  	if (data.length == 0) return;
	var newData = ajaxart.getVariable(context,"InputForChanges");
	var element = data;
	ajaxart.databind(element,newData,context,null);

	  var event = aa_text(data,profile,'Event',context);
	  var action = function(e) {
    	if (typeof(ajaxart_captured_element) != "undefined" && ajaxart_captured_element.length > 0) return [];
        var element = data[0];
    	
        var newContext = ajaxart.clone_context(context);
        
        if (!aa_bool(data,profile,'KeepOriginalRunOnControl',newContext))
          ajaxart.setVariable(newContext,"ControlElement",data);
        
    	ajaxart.ui.applyKeyboardEvent(e,newContext);
        
	  	var input = []; 
	  	if ('ajaxart' in element)
	  	  input = element.ajaxart.data;
	  	
  		ajaxart.run(input,profile,'Action',newContext);
	  };
	  aa_bind_ui_event(data[0],event,action);
	  return ["true"];
  },
  StandardButton: function (profile,data,context)
  {
	  var buttonContext = context.vars.ButtonContext[0];

	  var text = ajaxart.totext_array(buttonContext.Text);
		  
	  var str = '<span class="button_wrapper" tabindex="1"><span class="button_outer">'
		   + '<span class="button_inner" >' + text + '</span></span><br/></span>';
	  var btn = $(str)[0];
	  $(btn).find('.button_outer').css('background','url('+aa_base_images()+'/css/button.png) no-repeat left top');
	  $(btn).find('.button_inner').css('background','url('+aa_base_images()+'/css/button.png) no-repeat right top');

	  ajaxart_disableSelection(btn);
	  ajaxart.databind([btn],data,context,profile);
	  
	  var click = function(btn)
	  {
		  var jbtn = jQuery(btn);
		  try {
		  if (ajaxart.isattached(btn))
			  btn.focus();
		  } catch(e) { }
		  var buttonContext = context.vars.ButtonContext[0];
    	  var newContext = aa_ctx(context,{ControlElement: [btn]} );
		  ajaxart.runScriptParam(data,buttonContext.OnClick,newContext);
		  jbtn.removeClass('pressed').removeClass('pressing');
	  }

	  var mouseHandlers = function(btn) { 
	  jQuery(btn).mousedown( function() {
		  var jbtn = jQuery(btn);
		  if (jbtn.attr('pressed_src') != "")
		  {
			  jbtn.attr('src',jbtn.attr('pressed_src'));
		  	  jbtn.addClass('pressed').addClass('pressing');
		  }
	  }).mouseout( function() {
		  var jbtn = jQuery(btn);
		  jbtn.removeClass('pressed');
		  jbtn.attr('src',jbtn.attr('original_src'));
	  }).mouseover( function() {
		  var jbtn = jQuery(btn);
		  if (jbtn.hasClass('pressing')) {
				  jbtn.addClass('pressed').removeClass('pressing');
				  jbtn.attr('src',jbtn.attr('pressed_src'));
		  }
	  }).keydown( function(e) {
			e = e || event;
			if (e.keyCode == 13) // enter
			{
				ajaxart_stop_event_propogation(e);
				click(btn);
				return false;
			}
	  }).mouseup( function() {
		  if (window.aa_incapture) return;
		  var jbtn = jQuery(btn);
		  if (jbtn.hasClass('pressed'))
			  click(btn);
	  });
	  };
	  
	  mouseHandlers(btn);
	  
	  return [btn];
  },
  SuggestionBox: function (profile,data,context)
  {
	  var out = document.createElement('input');
	  ajaxart.suggestbox.attachToTextbox(data,profile,context,out);
	  return [out]; 
  },
  CustomSuggestionBox: function (profile,data,context)
  {
	  var out = document.createElement('input');
	  ajaxart.customsuggestbox.attachToTextbox(data,profile,context,out);
	  return [out]; 
  },
  AddTextToSuggestionBox: function (profile, data,context)
  {
	  ajaxart.customsuggestbox.addTextToSuggestionBox(profile, data,context);  
	  return [];
  },
  CloseSuggestionBox: function (profile, data,context)
  {
	  ajaxart.suggestbox.closePopup();
	  return [];
  },
  OpenSuggestionBoxPopup: function (profile, data,context)
  {
	  ajaxart.customsuggestbox.openSuggestionBoxPopup(profile, data,context);
	  return [];
  },
  OpenSuggestionBoxList: function (profile, data,context)
  {
	  ajaxart.customsuggestbox.openSuggestionBoxList(profile, data,context);
	  return [];
  },
  TriggerSuggestionBoxPopup: function (profile, data,context)
  {
	  ajaxart.customsuggestbox.triggerSuggestionBoxPopup(profile, data,context);
	  return [];
  },
  UrlFragmentAttribute: function (profile,data,context)
  {
		var url = aa_text(data,profile,'Url',context);
		var attr = aa_text(data,profile,'Attribute',context);
		return [ aa_url_attribute(url,attr) ];
  },  
  RunInControlContext: function (profile,data,context)
  {
  	var elements = ajaxart.getVariable(context,"ControlElement");
  	var mode = aa_text(data,profile,'Mode',context);
  	var out = [];
  	ajaxart.each(elements,function(element) {
   	  var elem_context = element["ajaxart"];
	  if (elem_context == null) {
//		  ajaxart.log("RunInControlContext - control has no databind","warning")
		  return [];
	  }
	  var newContext = elem_context.params;
	  if (mode == 'copy control variables')
	  {
		  newContext = ajaxart.clone_context(context);
		  for(i in elem_context.params.vars)
			  newContext.vars[i] = elem_context.params.vars[i]; 
	  }
	  ajaxart.setVariable(newContext,"ControlElement",[element]);
	  ajaxart.concat(out,ajaxart.run(elem_context.data,profile,'Item',newContext));
 	});
  	return out;
  },
  DisableTextSelection: function(profile, data, context)
  {
	if (! ajaxart.ishtml(data)) return [];
	control = jQuery(data[0]);
	
	if( ajaxart.isFirefox ) { control.css({ 'MozUserSelect' : 'none' });
	} else if( ajaxart.isIE ) {
		control.each( function() { jQuery(this).bind('selectstart.disableTextSelect', function() { return false; }); });
	} else {
		control.each(function() { jQuery(this).bind('mousedown.disableTextSelect', function() { return false; }); });
	}
	return ["true"];
  },
  AddMousePressedEffect: function (profile,data,context)
  {
	  if (! ajaxart.ishtml(data) ) return data;
	  
	  var control = data[0];
	  jQuery(control).mousedown( function() {
		  if (jQuery(this).attr('pressed_src') != "")
			  jQuery(this).attr('src',jQuery(this).attr('pressed_src'));
		  jQuery(this).addClass('pressed').addClass('pressing');
	  }).mouseout( function() {
		  jQuery(this).removeClass('pressed');
		  jQuery(this).attr('src',jQuery(this).attr('original_src'));
	  }).mouseover( function() {
		  if (jQuery(this).hasClass('pressing')) {
			  jQuery(this).addClass('pressed').removeClass('pressing');
			  jQuery(this).attr('src',jQuery(this).attr('pressed_src'));
		  }
	  }).mouseup( function() {
		  jQuery(this).attr('src',jQuery(this).attr('original_src'));
		  jQuery(this).removeClass('pressed').removeClass('pressing');
	  });
	  return data;
  },
  InternalRefreshToAddItem: function (profile,data,context)
  {
	  var parent = aa_first(data,profile,'ParentControl',context);
	  var newItems = ajaxart.run(data,profile,'NewItems',context);
	  var controlForContext = aa_first(data,profile,'ControlForNewItemControlContext',context);
	  var jqPath = aa_text(data,profile,'JQPathForItems',context);
	  
	  if (parent == null || controlForContext == null || controlForContext.ajaxart == null) return [];
	  var controlContext = controlForContext.ajaxart.params;
	  
	  var currentControls = jQuery(parent).find(jqPath);
	  for(var i=0;i<newItems.length;i++)
	  {
		if (currentControls.length <=i) // adding at the end
		{
			var newControl = aa_first([newItems[i]],profile,'NewItemControl',controlContext);
			if (newControl != null)
			{
				aa_xml_appendChild(parent,newControl);
				ajaxart.run([newControl],profile,'OnNewItem',context);
			}
		}
	  }
  },  
  CheckboxesList: function (profile,data,context)
  {
	controls = ajaxart.getControlElement(context);
	if (controls.length == 0) return [];
	var elem = controls[0];
    var timeout = 1;
    if (ajaxart.isSafari) timeout = 100;
    
    var try_run_onload = function(count,timeout) {
    	if (count == 0) return;
	    if (jQuery(elem).parents("body").length == 0)  //detached
	    	setTimeout(function() { try_run_onload(count-1,timeout); } ,timeout); 
    else
    	ajaxart.run(data,profile,'OnLoad',context);	
    }
    try_run_onload(5,timeout);
  },  
	IsChrome: function (profile,data,context)
	{
		if (ajaxart.isChrome)
			return [ "true" ];
		else
			return [];
	},
	HtmlUnderElement: function(profile, data, context) {
		if (! ajaxart.isxml(data)) return [];

		var text = "";
		var node = data[0].firstChild;
		while (node != null) {
			if (node.nodeType == 3 || node.nodeType == 4) text += node.nodeValue;
			if (node.nodeType == 1) text += ajaxart.xml2text(node);
			node=node.nextSibling;
		}
		return [text];
	},
 	ValidationList: function (profile,data,context)
 	{
	    var itemProfiles = ajaxart.subprofiles(profile,'Validation');
	    for(var i=0;i<itemProfiles.length;i++)
	    	ajaxart.run(data,itemProfiles[itemProfiles.length - i -1],"",context);
	    return [];
 	},
	HorizontalSplitter: function (profile,data,context)
	{
		var idForCookie = aa_text(data,profile,'IdForCookie',context);
		var height = aa_text(data,profile,'Height',context);
		var totalWidth = aa_text(data,profile,'TotalWidth',context);
		var sections = ajaxart.dynamicText(data,"%$SectionsContext/Sections%",context);

		var widths = aa_valueFromCookie(idForCookie + "_splitterwidths");
		var keepTotalWidth = aa_bool(data,profile,'KeepTotalWidth',context);
		if (widths == null || widths == "")
			widths = ajaxart.run(data,profile,'DefaultWidths',context);
		else
			widths = widths.split(",");
		if (totalWidth != "" && widths.length+1 >= sections.length) {	// setting last column width
			var width_sum = 0;
			for (var j=0; j<sections.length-1; j++)
				width_sum += ajaxart.ui.width_as_num(widths[j]) + 15;// 15 is one splitter width
			widths[sections.length-1] = (ajaxart.ui.width_as_num(totalWidth) - width_sum) + "px";
		}
		var middle_splitter_height = ajaxart.ui.width_as_num(height) - 22 - 47 - 43;//22 - title, 47,43 - top & bottom splitters
		var sections_height = ajaxart.ui.width_as_num(height) - 22;
		var table = jQuery('<table cellpading="0" cellspacing="0" />')[0];
		var tr = document.createElement("TR"); table.appendChild(tr);
		for (var i=0; i<sections.length; i++) {
			var section = sections[i];
			var td1 = document.createElement("TD"); tr.appendChild(td1); td1.className="horizontal_section_td";
			var width = (widths.length > i) ? widths[i] : "200px";
			var div1 = jQuery("<div class='horizontal_section' style='width:"+ width+";height:" + sections_height + "px' />")[0]; td1.appendChild(div1);
			var title = ajaxart.totext(ajaxart.dynamicText([section],"%Title%",context));
			if (title != "")
				jQuery(div1).append(jQuery('<div class="horizontal_section_title">').text(title));
			var control = ajaxart.runNativeHelper([section],profile,'Control',context);
			if (control.length > 0)
				div1.appendChild(control[0]);
			
			// splitter
			if (i+1 < sections.length) {	//not last
				var splitter = $('<td class="splitter" > <div class="splitter_top" /><div class="splitter_middle" style="height:' + middle_splitter_height + 'px" /><div class="splitter_bottom" /></td>');
				splitter.find('.splitter_top').css('background','url('+aa_base_images()+'/css/splitter_top.png)');
				splitter.mousedown(function(e) {
					var mousepos = aa_mousePos(e);
					var splitter = jQuery( (typeof(event)== 'undefined')? e.target : event.srcElement  ); 
					table["section"] = jQuery(splitter).parents(".splitter").prev().find(".horizontal_section")[0];
					table["diff"] = mousepos.x - jQuery(table["section"]).width();
					table["last_section"] = jQuery(splitter).parents(".splitter").siblings(":last").find(".horizontal_section")[0];
					table["last_section_diff"] = jQuery(table["last_section"]).width() + mousepos.x;
					table["moving"] = true;
				} );
				jQuery(tr).append( splitter );
			}
		}
		jQuery(table).mouseup(function(e) {
			if (table["moving"]) {	// write widths to cookie
				var widths = "";
				var sections = jQuery(table).find(".horizontal_section");
				for (i=0; i<sections.length; i++)
					widths += jQuery(sections[i]).width() + "px,";
				aa_writeCookie(idForCookie + "_splitterwidths", widths);
			}
			table["moving"] = false;
		} );
		jQuery(table).mousemove(function(e) {
			if (!table["moving"] || table["section"]==null) return;
			var mousepos = aa_mousePos(e);
			jQuery(table["section"]).width(mousepos.x - table["diff"]);
			if (keepTotalWidth)
				jQuery(table["last_section"]).width(table["last_section_diff"] - mousepos.x);
		} );
		return [table];
	},
	IsMobileDevice: function (profile,data,context)
	{
		var checkInSimulator = aa_bool(data,profile,'SimulatorSupport',context);
		if (aa_screen_size(checkInSimulator).width < 450) 
			return ['true'];
		return [];
	},
	  ScreenSize: function (profile,data,context)
	  {
		  var axis = aa_text(data,profile,'Axis',context);
		  var margin = aa_int(data,profile,'Margin',context);
		  
		  var visualCntr = aa_findVisualContainer(null,context);

		  var num=0;
		  if (axis == 'height')
				num = visualCntr.height;
		  else
				num = visualCntr.width;

		  num -= margin;
		  
		  if (axis == 'height' && aa_bool(data,profile,'ReduceStudioHeaderFooter',context) && ajaxart.jbart_studio) {
		  	num -= jBart.footerHeight + jBart.headerHeight;
		  }
		  if ( aa_bool(data,profile,'AsHtmlString',context))
			  return ["" + num + "px"];
		  
		  return [num];
	  },
	ScreenPercentage: function (profile,data,context)
	{
			var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
			var screenHeight = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);

			var axis = aa_text(data,profile,'Axis',context);
			var total = (axis == 'width') ? screenWidth : screenHeight;
			var percent = aa_int(data,profile,'Percent',context);
			var value = parseInt( (total * percent)/100 );

			if (aa_bool(data,profile,'AddPxSuffix',context)) value = value + 'px';
			return [value];
	},
	CssClassesInControl: function (profile,data,context)
	{
		var control = aa_first(data,profile,'Control',context);
		var classes = {}
		var obj = {};
		obj.find = function(elem) {
			var cls = elem.className.split(' ');
			for(var i=0;i<cls.length;i++) classes[cls[i]] = true;
			var children = jQuery(elem).children();
			for(var i=0;i<children.length;i++) obj.find(children[i]);
		}
		
		if (control != null) obj.find(control);
		var out = [];
		for(var i in classes)
			out.push("."+i);
		return out;
	}
});

function aa_tinyMCE(textbox,settings) {
    var tinyID = "tinymce" + (ajaxart.unique_number++);

	settings = aa_defaults(settings,{
		textareaElement: textbox.el
	});
	$(settings.textareaElement).val(textbox.value);

	var jsList = [ '//tinymce.cachefly.net/4.0/tinymce.min.js' ];
	$.when( aa_loadLib("tinymce", [] , jsList) ).then( init );

    function init() {
		aa_addOnAttach(settings.textareaElement, function() {
			  	settings.textareaElement.setAttribute('id',tinyID);
				tinymce.init({
					width: parseInt(settings.width),
					height: parseInt(settings.height) - 110, // 110 px is the height of menu+toolbat+footer
					plugins: "code",
					selector: "#" + tinyID,
					setup : function(ed) {
						ed.on('change',function() {
							if (textbox.setValue) textbox.setValue(ed.getContent()	);
						});
					}
		    });
		});
    }
}
function aa_nicEdit(textbox,settings) {
	aa_defaults(settings, { autoUpdateFrequency: 700 } );
	var cssList = [];
	var jsList = [ aa_base_lib() + '/nicedit/nicEdit.js'];
	$.when( aa_loadLib("nicedit", cssList , jsList) ).then( init );
	textbox.$el.find("textarea").val( textbox.value ).css({height: settings.height +"px", width: settings.width + "px"});

	function init() {
		aa_addOnAttachMultiple(textbox.el, function() {
			var buttonList = settings.buttons ? settings.buttons.split(",") : [];
			var nicOptions = { 
				iconsPath: aa_base_lib() + '/nicedit/nicEditorIcons.gif',
				buttonList: buttonList,
				maxHeight: parseInt(settings.height - 30) // Reducing the header & footer
			};
			textbox.$el.find("textarea").css({height: settings.height-40 +"px"});	// Reducing the header & footer and some more to avoid scroll
			var editor = new nicEditor(nicOptions).panelInstance(textbox.$el.find("textarea")[0]);
			nicEditors.editors.push(editor);
			textbox.el.jbNicEditorInstance = editor.nicInstances[0];
			textbox.el.jbNicEditor = editor;
			autoUpdate();
		});
	}

	function autoUpdate() {
		if (textbox.el.jbNicEditorInstance && textbox.el.jbNicEditorInstance.getContent() != textbox.value)
			textbox.setValue(textbox.el.jbNicEditorInstance.getContent());
		if (ajaxart.isattached(textbox.el))
			setTimeout( autoUpdate, settings.autoUpdateFrequency );
	}
	textbox.el.jbAddTextAtCursor = function(text) {
		textbox.$el.find('.nicEdit-main').focus(); // Without focus it wont work!
    textbox.el.jbNicEditorInstance.nicCommand('InsertHTML', text); 		
	}
}
function aa_loadLib(loadId, cssList, jsList) {
	var deferred = $.Deferred();

	function doLoad() {
		var loadDeferred = $.Deferred();
		var jsLoadedCount = 0;
		function done() {
			jsLoadedCount++;
			if (jsLoadedCount == jsList.length)
				loadDeferred.resolve();
		}
		for (var i=0; i<cssList.length; i++)
			aa_load_js_css(cssList[i],'css');
		for (var i=0; i<jsList.length; i++)
			$.getScript(jsList[i], done);
		if (!jsList.length)
			loadDeferred.resolve();
		return loadDeferred;
	}
	if (!jBart.singleLoadItems) jBart.singleLoadItems = {};
	if (jBart.singleLoadItems[loadId] && jBart.singleLoadItems[loadId].loaded)	// already loaded
		deferred.resolve();
	else {
		if (!jBart.singleLoadItems[loadId]) 
			jBart.singleLoadItems[loadId] = { waiting: [] };
		jBart.singleLoadItems[loadId].waiting.push( deferred );
		if (jBart.singleLoadItems[loadId].waiting.length > 1) return deferred; // someone else is already loading it

		$.when( doLoad() ).then( function() { 
			for (var i=0; i<jBart.singleLoadItems[loadId].waiting.length; i++)
				jBart.singleLoadItems[loadId].waiting[i].resolve();
			jBart.singleLoadItems[loadId].loaded = true;
			jBart.singleLoadItems[loadId].waiting = [];
		});
	}
	return deferred;
}
if (!ajaxart.ui ) ajaxart.ui = {}
ajaxart_condition = function(element,actionContext,actionToRun,controlData)
{
	var result = ajaxart_runevent(element,actionContext,actionToRun,controlData);
	return (typeof(result) != "undefined" && result.length == 1 && (result[0] == true || result[0] == "true") );
}
ajaxart_delay_counter=0;

aa_tinymce_handleEvent = function(e,obj)
{
	if (e.type != 'keyup') return;
   
   var elem = jQuery('#'+obj.id);
   if(elem.length > 0 && elem[0].aa_update)
       elem[0].aa_update();
}
ajaxart_delayrunevent = function(element,actionContext,actionToRun,controlData,_event,delay)
{
  if (! ajaxart.isattached(element)) {
	  ajaxart_runevent(element,actionContext,actionToRun,controlData,_event);
	  return;
  }
  
  if (typeof(delay) == "undefined") delay = 200;
  
  var counter1 = ++ajaxart_delay_counter;
  
  var func = function(counter)
  {
	  setTimeout(function() { 
		  if (ajaxart_delay_counter != counter) return;
		  ajaxart_runevent(element,actionContext,actionToRun,controlData,_event); 
	  } ,delay);
  }
  func(counter1);
}
ajaxart_selectionchanged = function(element)
{
	ajaxart_runevent(element,'MasterDetailContext','SelectionChanged');
}
ajaxart_css_selection = function(element,topElementByCss)
{ 
	var top = jQuery(element).parents("." + topElementByCss);
	var mosttop = top.parents(".ajaxart_single_selection_top");
	if (mosttop.length > 0) top = mosttop;
	top.find(".selected").removeClass("selected");
	
	jQuery(element).addClass('selected');	
}
ajaxart_container_event = function(event,topElementCls,itemCls,actionContext)
{
    var element = (typeof(event.target)== 'undefined')? event.srcElement : event.target;
    if (ajaxart.isSafari && ajaxart_source_elem_in_test != null)
    	element = ajaxart_source_elem_in_test;
    
    if (event.type == 'keydown') {
    	var selectedItems = jQuery(element).parents("."+topElementCls).find('.selected');
    	if (selectedItems.length > 0)
    		element = selectedItems[0];
    }
    	
    var dataElem = ajaxart_container_find_databound_elem(element,itemCls);
    
    if (dataElem != null)
    {
    	if (event.type == 'click') {
    		ajaxart_css_selection(dataElem,topElementCls);
    		ajaxart_selectionchanged(dataElem);
    		ajaxart_runevent(dataElem,actionContext,'OnSelect');
    	}
    	else if (event.type == 'dblclick')
    		ajaxart_runevent(dataElem,actionContext,'OnDoubleClick');
    	else if (event.type == 'keydown')
    	{
    		if (event.keyCode == "13") // enter
        	  ajaxart_runevent(dataElem,actionContext,'OnDoubleClick');
  	        if (event.keyCode == 40)  // down  
			  ajaxart_container_move_cursor(dataElem,1);
	  	    if (event.keyCode == 38)  // up  
  			  ajaxart_container_move_cursor(dataElem,-1);
    	}
    }
    
	if ( jQuery(element).find("#key_sink").focus().length == 0)
		jQuery(element).parents("."+topElementCls).find("#key_sink").focus();
}


ajaxart_container_find_databound_elem = function(element,itemCls)
{
	if ( jQuery(element).hasClass(itemCls) ) return element;
	var result = jQuery(element).parents("."+itemCls);
	if (result.length == 0) return null;
	return result[0];
}

ajaxart_container_move_cursor = function(element,delta)
{
}

ajaxart.ui.lastEvent = null;

function aa_is_fixed_position(elem) 
{
	for (var curr=elem; curr && curr != document.body; curr=curr.parentNode)
	  if ( (curr.currentStyle && curr.currentStyle['position'] == 'fixed') ||
	  	(window.getComputedStyle && window.getComputedStyle(curr, null)['position'] == 'fixed'))
	  		return true;
	return false;
}

function aa_widthToWindowRight(control,delta,applyOn)
{
	if (!ajaxart.isattached(control) ) return;
	if (!applyOn) applyOn="width";

	if (typeof(delta) == "undefined" || isNaN(delta)) delta=0;

	if (jQuery(control).parents('.studio_simulator').length > 0) {	// in studio, use simulator window height
		  var simulator = jQuery(control).parents('.studio_simulator')[0];
		  if (simulator.className.indexOf(' ') > -1) { // only when a view is on
			  screenWidth = simulator.clientWidth;
		  	  var controlLeft = aa_absLeft(control) - aa_absLeft(simulator.firstChild);
		  	  var newWidth = screenWidth-controlLeft- delta; 
			  if (newWidth < 50) newWidth = 0;
			  jQuery(control).css(applyOn,newWidth + 'px');
		  }
	} else {
		var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
		var controlLeft = aa_absLeft(control);
	  	if (!aa_is_fixed_position(control))
	  	  controlLeft -= window.pageXOffset;
		jQuery(control).css(applyOn,(screenWidth - controlLeft-delta) + 'px');
	}
}

ajaxart.ui.HeightToWindowBottom = function (control,delta,applyOn)
{
	if (!ajaxart.isattached(control) ) return;
	if (!applyOn) applyOn="height";
	if (typeof(delta) == "undefined" || isNaN(delta)) delta=0;
	var newHeight = 0;
	
	// see if control is in a dialog
	if (control.jbInDialog == null)
		control.jbInDialog = jQuery(control).parents('.dialog_box').length > 0;
	if (control.jbInDialog)
	{
		var dlg = jQuery(control).parents('.dialog_box');
		if (dlg[0].dialogHeight == null) dlg[0].dialogHeight = dlg.height();
		
		var dlgBottom = dlg[0].dialogHeight + aa_absTop(dlg[0]);
	  	var controlTop = jQuery(control).position().top;
	  	if (dlgBottom - controlTop - delta > 50) {
	  		newHeight = dlgBottom - controlTop - delta;
	  	}
	}
	else if (aa_has_simulator(control)) {	// in studio, use simulator window height
		  var simulator = jQuery(control).parents('.studio_simulator')[0];
	  	  var controlTop = aa_absTop(control,true) - aa_absTop(simulator.firstChild,true);
	  	  newHeight = simulator.clientHeight -controlTop- delta; 
	} else {// normal mode
	  var screenHeight = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);
  	  var controlTop = aa_absTop(control,true);
  	  if (!aa_is_fixed_position(control))
  	  	controlTop -= window.scrollY;
  	  newHeight = screenHeight - controlTop- delta; 
	}
	if (newHeight < 50) newHeight = 0; // ???
	if (newHeight > 0) {
	  if (control.jbPrevHeight != newHeight)
	  	height_changed = true;
	  control.jbPrevHeight = newHeight;
	  jQuery(control).css(applyOn, newHeight+'px');
	  if (height_changed && control.jbSizeChanged)
	  	control.jbSizeChanged();
	}
	return newHeight;
}

ajaxart_update = function(element,value,expression)
{
	var dataBoundElem = jQuery(element);
	if (! dataBoundElem.hasClass("aa_custom_control"))
		dataBoundElem = jQuery(element).parents(".aa_custom_control");
	if (dataBoundElem.length == 0) return;
	ajaxart_runevent(dataBoundElem[0], '_CustomControlContext', 'UpdateData', value);
}
ajaxart_data = function(element)
{
	var context = ajaxart_get_context(element);
	if (context == null) return null;
    if (context.data.length > 0)
    	return context.data[0];
}
ajaxart_param = function(element,param_name)
{
	var context = ajaxart_get_context(element);
	if (context == null) return null;
	var param = context.params.componentContext.params[param_name];
	if (param == null) {
		ajaxart.log("Param " + param_name + " does not exist", "warning");
		return null;
	}
	if (param.length == 0) return "";
	var as_text = ajaxart.totext(param);
	if (as_text != "")
		return as_text;
	else
		return param[0];
}
ajaxart_get_context = function(element)
{
	var dataBoundElem = jQuery(element);
	if (! dataBoundElem.hasClass("aa_custom_control"))
		dataBoundElem = jQuery(element).parents(".aa_custom_control");
	if (dataBoundElem.length == 0) return;
    var context = dataBoundElem[0]["ajaxart"];
    if (typeof(context) == "undefined") {
    	ajaxart.log("control does not contain ajaxart data","warning");
    	return null;
    }
    return context;
}

ajaxart.ui.getScriptParamContext = function(scriptObject)
{
	if (typeof(scriptObject.objectForMethod) == undefined) 
		return scriptObject.context;

	var newContext = ajaxart.clone_context(scriptObject.context);
    newContext.vars['_This'] = scriptObject.objectForMethod;
    return newContext;
}

ajaxart_ui_imposeMaxLength = function(event, element, maxLen)
{
	return (element.value.length < maxLen) || ajaxart_ui_isbackwards(event);
}

ajaxart_ui_isbackwards = function(event)
{
	return (event.keyCode == 8 || event.keyCode==46 ||(event.keyCode>=35 && event.keyCode<=40));
}

ajaxart_ui_validate = function(event, element)
{
	var elem_context = element["ajaxart"];
	if (typeof(elem_context) == "undefined") 
		return true;
	
	var params = elem_context.params;
	var actionToRunPack = { script: ajaxart.getVariable(params,'KeyPressValidator')[0] , context: params};
	
	var keyCode = event.charCode;
	if (keyCode == undefined)
		keyCode = event.keyCode;
	var validation = ajaxart.run([String.fromCharCode(keyCode)],actionToRunPack.script,"",elem_context);
	var result = (validation[0] == 'true') || ajaxart_ui_isbackwards(event); 
	return result;
}
ajaxart_capture_onclick = function(f)
{
    if (window.captureEvents)
    	window.onclick = f;
	else  // IE
		document.onclick = f;
}
ajaxart_ui_capture_mousemove = function(f)
{
    if (window.captureEvents)
    	window.onmousemove = f;
	else  // IE
		document.onmousemove = f;
}
function ajaxart_stop_event_propogation(e)
{
	if (!e) return;
	if (e.stopPropagation) e.stopPropagation();
    if (e.preventDefault) e.preventDefault();
	e.cancelBubble = true;
	return false;
}

ajaxart_set_text = function(element,text)
{
	  text = text.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;");
	  element.innerHTML = text;
}

function ajaxart_disableSelection(target){
	function makeUnselectable(node) {
	    if (node.nodeType == 1)
	        jQuery(node).addClass('unselectable');
	    var child = node.firstChild;
	    while (child) {
	        makeUnselectable(child);
	        child = child.nextSibling;
	    }
	}
	if (target) makeUnselectable(target);
}

function ajaxart_restoreSelection(target)
{
	function unmakeUnselectable(node) {
	    if (node.nodeType == 1)
	        jQuery(node).removeClass('unselectable');
	    var child = node.firstChild;
	    while (child) {
	        unmakeUnselectable(child);
	        child = child.nextSibling;
	    }
	}
	if (target) unmakeUnselectable(target);
}
ajaxart.ui.contextWithCurrentControl = function(context, control)
{
	  var newcontext = ajaxart.clone_context(context);
	  ajaxart.setVariable(newcontext,"ControlElement",[control]);
	  return newcontext;
}
ajaxart.ui.width_as_num = function(width)
{
	var out;
	if (width.indexOf("px") > 0)
		out = Number(width.split("px")[0]);
	else
		out = Number(width);
	if (isNaN(out)) return 0;
	return out;
} 
ajaxart.ui.page_dimensions = function()
{
	var d = {};
	if( window.innerHeight ) {
		d.pageYOffset = window.pageYOffset;
		d.pageXOffset = window.pageXOffset;
		d.innerHeight = window.innerHeight;
		d.innerWidth = window.innerWidth;
	} else if( document.documentElement && document.documentElement.clientHeight ) {
		d.pageYOffset = document.documentElement.scrollTop;
		d.pageXOffset = document.documentElement.scrollLeft;
		d.innerHeight = document.documentElement.clientHeight;
		d.innerWidth = document.documentElement.clientWidth;
	} else if( document.body ) {
		d.pageYOffset = document.body.scrollTop;
		d.pageXOffset = document.body.scrollLeft;
		d.innerHeight = document.body.clientHeight;
		d.innerWidth = document.body.clientWidth;
	}
	return d;
}

function aa_find_field(context,field_id)
{
	var class_to_find = "fld_" + field_id;
	if (!context || !field_id) return;
	if (context.vars.ControlElement) {
		var out = $(context.vars.ControlElement).find('.'+class_to_find);
		if (out[0]) return out.get();
	}
	var root = aa_intest ? aa_intest_topControl : document;
	var out = $(root).find('.'+class_to_find);
	if (out.length == 0) return [];
	if (out.length == 1) return out.get();
	if (out.length > 1) {
		// todo - try finding siblings to get the right one
		return out.get();
	}
}


function ajaxart_shortcut_matchs_event() 
{
	//Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken
	var shift_nums = {"`":"~","1":"!","2":"@","3":"#","4":"$","5":"%","6":"^","7":"&","8":"*","9":"(","0":")","-":"_","=":"+",";":":","'":"\"",",":"<",".":">","/":"?","\\":"|"
	}
	//Special Keys - and their codes
	var special_keys = {'esc':27,'escape':27,'tab':9,'space':32,'return':13,'enter':13,'backspace':8,
'scrolllock':145,'scroll_lock':145,'scroll':145,'capslock':20,'caps_lock':20,'caps':20,'numlock':144,'num_lock':144,'num':144,'pause':19,'break':19,'insert':45,'home':36,'delete':46,'end':35,'pageup':33,'page_up':33,'pu':33,
'pagedown':34,'page_down':34,'pd':34,
'left':37,'up':38,'right':39,'down':40,
'f1':112,'f2':113,'f3':114,'f4':115,'f5':116,'f6':117,'f7':118,'f8':119,'f9':120,'f10':121,'f11':122,'f12':123
	}

	return function(shortcut_combination,e) {
		shortcut_combination = shortcut_combination.toLowerCase();
		e = e || window.event;
		
		//Find Which key is pressed
		if (e.keyCode) code = e.keyCode;
		else if (e.which) code = e.which;
		var character = String.fromCharCode(code).toLowerCase();
		
		if(code == 188) character=","; //If the user presses , when the type is onkeydown
		if(code == 190) character="."; //If the user presses , when the type is onkeydown

		var keys = shortcut_combination.split("+");
		//Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked
		var kp = 0;
		
		var modifiers = { 
			shift: { wanted:false, pressed:false},
			ctrl : { wanted:false, pressed:false},
			alt  : { wanted:false, pressed:false},
			meta : { wanted:false, pressed:false}	//Meta is Mac specific
		};
                    
		if(e.ctrlKey)	modifiers.ctrl.pressed = true;
		if(e.shiftKey)	modifiers.shift.pressed = true;
		if(e.altKey)	modifiers.alt.pressed = true;
		if(e.metaKey)   modifiers.meta.pressed = true;
                    
		for(var i=0; k=keys[i],i<keys.length; i++) {
			//Modifiers
			if(k == 'ctrl' || k == 'control') {
				kp++;
				modifiers.ctrl.wanted = true;

			} else if(k == 'shift') {
				kp++;
				modifiers.shift.wanted = true;

			} else if(k == 'alt') {
				kp++;
				modifiers.alt.wanted = true;
			} else if(k == 'meta') {
				kp++;
				modifiers.meta.wanted = true;
			} else if(k.length > 1) { //If it is a special key
				if(special_keys[k] == code) kp++;
				
			} else { //The special keys did not match
				if(character == k) kp++;
				else {
					if(shift_nums[character] && e.shiftKey) { //Stupid Shift key bug created by using lowercase
						character = shift_nums[character]; 
						if(character == k) kp++;
					}
				}
			}
		}
		
		if(kp == keys.length && 
					modifiers.ctrl.pressed == modifiers.ctrl.wanted &&
					modifiers.shift.pressed == modifiers.shift.wanted &&
					modifiers.alt.pressed == modifiers.alt.wanted &&
					modifiers.meta.pressed == modifiers.meta.wanted) {
			return true;
		}
	}
	return false;
}

jQuery.extend(jQuery.fn, {
	disableTextSelect: function() {
		this.each( function () { ajaxart_disableSelection(this); } );
		return this;
	}
});

function aa_add_virtual_inner_element(elem,inner)
{
	if (!elem.virtual_inner_elements) elem.virtual_inner_elements = [];
	elem.virtual_inner_elements.push(inner);
}
function aa_addClassNoCheck(element,cls)
{
	if (element.className == "") element.className = cls;
	else element.className += " " + cls;
}
function aa_addClass(element,cls)
{
	if (element.className.indexOf(cls) == -1) {
		if (element.className == "") element.className = cls;
		else element.className += " " + cls;
	}
	else jQuery(element).addClass(cls);
}
function aa_hide(elem)
{
  elem.style.display = 'none'; elem.display = 'none';
}

function aa_urlHashValue(url,attr)
{
	if (url.indexOf('#') > -1) url = url.substring(url.indexOf('#'));
	var pos = url.indexOf('?'+attr+'='); 
	if (pos == -1) return "";
	var out = url.substring(pos+1);
	out = out.substring(out.indexOf('=')+1);
	if (out.indexOf('?') > -1) out = out.substring(0,out.indexOf('?'));
	if (out != "" && out.charAt(out.length-1) ==';' ) out = out.substring(0,out.length-1);
	return out;
}
aa_DateIframe = null;
function aa_fixStretchOnElem(elem)
{
	if (elem.fixStretchBottom) elem.fixStretchBottom();
	if (elem.fixStretchRight) elem.fixStretchRight();
}
function aa_fixstretch()
{
	var elems = jQuery('body').find('.aa_stretch');
	for(var i=0;i<elems.length;i++) 
	  aa_fixStretchOnElem(elems[i]);
}
function aa_init_onresize()
{
	window.aa_windowresize_timer = window.aa_windowresize_timer || 0; 
	window.onresize = function() {
		if (aa_windowresize_timer != 0)  clearTimeout(aa_windowresize_timer);
		aa_windowresize_timer = setTimeout(function() {
			aa_fixstretch();
			jBart.trigger(jBart,'windowResize',{});
			aa_windowresize_timer = 0;
		},100);
	}
}
function aa_stretchToRight(elem,margin,doNotAddOverflow)
{
	jQuery(elem).addClass('aa_stretch');
	if (!doNotAddOverflow) jQuery(elem).css('overflow','auto');
	elem.fixStretchRight = function () { aa_widthToWindowRight(this,margin); aa_htmlContentChanged(this); }
	aa_addOnAttach(elem,function() { aa_fixStretchOnElem(this); });
	aa_init_onresize();
}
function aa_stretchToBottom(elem,margin,doNotAddOverflow)
{
	jQuery(elem).addClass('aa_stretch');
	if (!doNotAddOverflow) jQuery(elem).css('overflow','auto');
	elem.fixStretchBottom = function () { ajaxart.ui.HeightToWindowBottom(this,margin); aa_htmlContentChanged(this); }
	aa_addOnAttach(elem,function() { aa_fixStretchOnElem(this); });
	aa_init_onresize();
}
function aa_init_horiz_resizer(elem,resizer)
{
	resizer.onmousedown = function(e) {
		document.onmouseup = function(e1) {
			document.onmouseup = null;
			document.onmousemove = null;
			ajaxart_disableSelection(jQuery('body')[0]);
			return false;
		}
		document.onmousemove = function(e1) {
			var mousepos = aa_mousePos(e1);
			var elemX = aa_absLeft(elem,false);
			if (mousepos.x < elemX+5) return;
			var newWidth = mousepos.x - elemX;
			jQuery(elem).width(newWidth+"px");
			aa_fixstretch();
			aa_stop_prop(e1);
			ajaxart_restoreSelection(jQuery('body')[0]);
			return false;
		}
	}
	return false;
}
function aa_load_js_css(filename, filetype) {
	filetype = filetype || 'js';
	if (ajaxart.loaded_js == null) ajaxart.loaded_js = {};
	if (ajaxart.loaded_js[filename] != null) return;
	ajaxart.loaded_js[filename] = "loaded";

	if (filetype=="js"){ //if filename is a external JavaScript file
		  var fileref=document.createElement('script');
		  fileref.setAttribute("type","text/javascript");
		  fileref.setAttribute("src", filename);
	}
	else if (filetype=="css"){ //if filename is an external CSS file
		  var fileref=document.createElement("link");
		  fileref.setAttribute("rel", "stylesheet");
		  fileref.setAttribute("type", "text/css");
		  fileref.setAttribute("href", filename);
	}
	if (fileref)
	    document.body.appendChild(fileref);
}
function aa_run_when_js_is_loaded(expression_to_check, to_run) {
	var again = function() {
		aa_run_when_js_is_loaded(expression_to_check, to_run);
	};
	if (typeof(eval(expression_to_check)) == "undefined") {
		setTimeout( again , 500 );
		return;
	}
	to_run();
}
function aa_run_when_attahced(elem, to_run)
{
	var again = function() {
		aa_run_when_attahced(elem,to_run);
	}
	if (! ajaxart.isattached(elem)) {
		  setTimeout( again , 100 );
		  return;
	  }
	to_run();
}
function aa_text_val(exp,data,context) {
	return ajaxart.totext_array(ajaxart.dynamicText(data,exp,context));
}

function aa_findByClass(elem,className) {
	var $el = jQuery(elem);
	var out = $el.find('.'+className).get();
	if ($el.hasClass(className)) out.unshift(elem);
	return jQuery(out);
}



function aa_urlHashValue(param) {
	var hash = location.hash || '#';
	if (!hash) return '';

	var pos = hash.indexOf('?'+param+'='); 
	if (pos == -1) return "";
	var out = hash.substring(pos+1);
	out = out.substring(out.indexOf('=')+1);
	if (out.indexOf('?') > -1) out = out.substring(0,out.indexOf('?'));
	if (out != "" && out.charAt(out.length-1) ==';' ) out = out.substring(0,out.length-1);
	return out;
}

aa_gcs("ui",{
	SetUrlHashValue: function(profile,data,context) {
		aa_setUrlHashValue(aa_text(data,profile,'Attribute',context),aa_text(data,profile,'Value',context))
	},
	UrlHashValue: function(profile,data,context) {
		return [aa_urlHashValue(aa_text(data,profile,'Attribute',context))];
	}	
});

function aa_setUrlHashValue(param,value) {
	var hash = location.href.split('#')[1] || '';

	var entries = aa_split(hash,'?',true);
	var value_set=false;

	for(var i=0;i<entries.length;i++) {
		if (entries[i].indexOf(param+'=') == 0) {
			entries[i] = param+'=' + value;
			value_set = true;
			if (!value) { entries.splice(i,1); i--; }
		}
	}
	if (!value_set && value)
		entries.push(param+'=' + value);

	var newhash = entries.length > 0 ? '?' + entries.join('?') : '';
	window.jbHashChangeFromJS = true;
	location.hash = '#'+newhash;
	setTimeout(function() {
		window.jbHashChangeFromJS = false;
	},50);
}

function aa_removeUrlHashValue(param) {
	var hash = location.href.split('#')[1] || '';

	var entries = aa_split(hash,'?',true);

	for(var i=0;i<entries.length;i++) {
		if (entries[i].indexOf(param+'=') == 0) {
			entries.splice(i,1);
			break;
		}
	}

	var newhash = entries.length > 0 ? '?' + entries.join('?') : '';
	location.hash = '#'+newhash;	
}

if (!ajaxart.ui) ajaxart.ui = {};
ajaxart.ui.applyKeyboardEvent = function(_event,context)
{
	if (_event != null && _event.keyCode != null) {
		var codeAsString = "";
		switch (_event.keyCode) {
		case 40: codeAsString = "down arrow"; break;
		case 38: codeAsString = "up arrow"; break;
		case 13: codeAsString = "enter"; break;
		case 32: codeAsString = " "; break;		
		}
		if (_event.keyCode >= 48 && _event.keyCode <= 126)
			codeAsString = String.fromCharCode(_event.keyCode).toUpperCase();
		if (_event.ctrlKey == true && codeAsString != null)
			codeAsString = 'Ctrl+' + codeAsString; 
		if (_event.altKey == true && codeAsString != null)
			codeAsString = 'Alt+' + codeAsString;
		ajaxart.setVariable(context, "KeyPressed",[codeAsString]);
	}
}
aa_incapture = false;
function ajaxart_runevent(element,actionContext,actionToRun,controlData,_event)
{
	if (typeof(ajaxart_captured_element) != "undefined" && ajaxart_captured_element.length > 0) return [];
	var elem_context = element["ajaxart"];
	if (typeof(elem_context) == "undefined") 
		return [];
	
	var params = elem_context.params;
	
	if (actionContext.length > 0)
	{
		var actionContextPack = params.vars[actionContext];
		if (actionContextPack == null || actionContextPack.length == 0) return [];
		var actionToRunPack = actionContextPack[0][actionToRun];
		if (actionToRunPack == null || typeof(actionToRunPack) == "undefined") return [];
	}
	else {
		var actionToRunPack = { script: ajaxart.getVariable(params,actionToRun) , context: params};
	}
	var newContext = ajaxart.clone_context(actionToRunPack.context);
	for(var i in elem_context.params.vars)
		newContext.vars[i] = elem_context.params.vars[i];
	
	if (typeof(controlData) != "undefined")
		ajaxart.setVariable(newContext,"ControlData",[controlData]);
	ajaxart.setVariable(newContext,"ControlElement",[element]);

	ajaxart.ui.applyKeyboardEvent(_event,newContext);
	if (aa_isArray(actionToRunPack.script)) return [];
	return ajaxart.run(elem_context.data,actionToRunPack.script,"",newContext);
}
function aa_stop_prop(e) 
{
	if (!e) return;
	
	if (e.stopPropagation)
		e.stopPropagation();
    if(e.preventDefault)
        e.preventDefault();

	e.cancelBubble = true;
	return false;
}

function aa_center_position_absolute(el) {
	el.style.position = 'absolute';
	el.style.top = '50%';
	aa_addOnAttachMultiple(el,function() {
		var height = $(el).height();
		el.style.marginTop = '-'+parseInt(height/2)+'px';
		if (!height) el.style.top = '40%';
	});	
}


function aa_addActionOnWindowResize(el,callback,identifier) {
	if (!el) return;
	$(el).addClass('aa_resize_listener');
	el.jbOnWindowResize = function() {
		for(var i=0;i<el.jbWindowResizeCallbacks.length;i++)
			el.jbWindowResizeCallbacks[i].callback();
	}
	el.jbWindowResizeCallbacks = el.jbWindowResizeCallbacks || [];
	if (identifier) {
		for(var i=0;i<el.jbWindowResizeCallbacks.length;i++)
			if (el.jbWindowResizeCallbacks[i].identifier == identifier) {
				el.jbWindowResizeCallbacks[i].callback = callback;
				return;
			}
	}
	el.jbWindowResizeCallbacks.push({ identifier: identifier, callback: callback});

	if (!window.jbWindowResizeListener) {
		jBart.windowResizeListenerTimeout = 0;
		window.jbWindowResizeListener = function() {
			if (jBart.windowResizeListenerTimeout) clearTimeout(jBart.windowResizeListenerTimeout);
			jBart.windowResizeListenerTimeout = setTimeout(doOnResize,200);
		};
		$(window).resize(jbWindowResizeListener);
	}

	function doOnResize() {
		jBart.windowResizeListenerTimeout = 0;
		var elems = $('.aa_resize_listener');
		for(var i=0;i<elems.length;i++) {
			try {
				elems[i].jbOnWindowResize();
			} catch(e) {
				ajaxart.logException('error in window resize callback',e);
			}
		}		
	}
}

function aa_screen_size(consider_design_time_simulator_view)
{
	if (consider_design_time_simulator_view) {
		var elem = aa_body();
		if (elem != document.body)
			return { width: $(elem).width(), height: $(elem).height()	};
	}
	var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
	var screenHeight = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);
	return { width:screenWidth, height:screenHeight };
}

function aa_body() {
	return document.body;
}

/******************************************* Visual Container *********************************************************************/

aa_gcs('field_aspect',{
	VisualContainer: function (profile,data,context) {	
		var field = context.vars._Field[0];
		field.SectionStyle = aa_first(data,profile,'Style',context);
		var heightByCss = aa_bool(data,profile,'HeightByCss',context);
		var doNotPutWidthInElement = aa_bool(data,profile,'DoNotPutWidthInElement',context);
		var useMinHeight = aa_bool(data,profile,'SetHeightAsMinHeight',context);

		aa_bind(field,'ModifyInstanceContext',function(args) {
			var visualCntr = {
				ID: aa_text(data,profile,'ID',context),
				type: 'div',
				heightByCss: heightByCss,
				init: function(top) {
					this.el = top;
					top.jbVisualContainer = this;
					$(top).addClass('aa_visual_container').addClass(aa_text(data,profile,'CssClass',context));
					$(top).css('position','relative');
					if (this.width && !doNotPutWidthInElement) {
						$(top).width(this.width).css('overflow-x','hidden');
					}
					if (! aa_bool(data,profile,'IsDesktop',context))
						this.el.className += ' mobile';

					if (this.originalHeight) {
						$(top).css('overflow-y','auto');
						if (useMinHeight)	
							$(top).css('min-height',this.height+'px')
						else
							$(top).height(this.height);

					} else if (this.width && !heightByCss) {
						$(top).css('overflow-y','hidden');
					}
					if (this.originalHeight || heightByCss) {
						$(top).scroll(function() {
							aa_handleScroll(visualCntr,top);
						});						
					}
			
					aa_trigger(field,'initVisualContainer',{ visualContainer: this });
				},
				ForceWidth: function(width) { 
					this.width = this.forceWidth = width; 
					$(this.el).width(width);
					this.fireResize();
				},
				ForceHeight: function(height) { 
					this.height = this.forceHeight = height; 
					if (useMinHeight)	
						$(this.el).css('min-height',height+'px')
					else
						$(this.el).height(height);
					this.fireResize();
				},
				fireResize: function() {
					if (!this.el) return;
					var elems = $(this.el).find('.aa_resize_listener');
					for(var i=0;i<elems.length;i++) {
						try {
							elems[i].jbOnWindowResize();
						} catch(e) {
							ajaxart.logException('error in visual container resize callback',e);
						}
					}		
				},
				recalc: function() {
					var widthObj = aa_first(data,profile,'Width',context);
					var heightObj = aa_first(data,profile,'Height',context);
					this.width = widthObj ? widthObj.val : 0;
					this.originalHeight = heightObj ? heightObj.val : 0;
					this.height = this.originalHeight || aa_windowVisualContainer().height;
					if (heightByCss && !this.originalHeight) this.height = 0;

					if (this.forceWidth) this.width = this.forceWidth;
					if (this.forceHeight) this.height = this.forceHeight;
				},
				scrollY: function() {
					return (this.originalHeight  || heightByCss) ? this.el.scrollTop : window.pageYOffset;
				},
				scrollTop: function(y) {
					if (this.originalHeight || heightByCss)
						$(this.el).scrollTop(y);
					else
						$(window).scrollTop(y);
				},
				absTop: function() {
					return aa_absTop(this.el,true);
				}
			}
			visualCntr.recalc();

	    args.Context.vars.VisualContainer = [visualCntr];
	  });

		aa_bind(field,'beforeWrapWithSection',function(args) {
			args.sectionObject.VisualContainer = args.context.vars.VisualContainer[0];
		});

	}	

});

function aa_visualContainerStyle(section,settings) {
	settings = aa_defaults(settings,{
		sectionBody: section.$el.firstOfClass('section_body')
	});
	var visualCntr = aa_var_first(section.context,'VisualContainer');
	if (visualCntr)
		visualCntr.init($(settings.sectionBody)[0]);
	section.addSectionBody($(settings.sectionBody)[0]);	
}

function aa_windowVisualContainer() {
	if (!ajaxart.jbWindowVisualContainer) {

		var screenWidth = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
		var screenHeight = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);

		ajaxart.jbWindowVisualContainer = {
			type: 'window',
			el: document.body,
			init: function(top) {			
				$(window).scroll(function() {
					aa_handleScroll(ajaxart.jbWindowVisualContainer,document.body);					
				});
			},
			recalc: function() {
				this.width = window.innerWidth || (document.documentElement.clientWidth || document.body.clientWidth);
				this.height = window.innerHeight || (document.documentElement.clientHeight || document.body.clientHeight);
			},
			scrollY: function() {
				return window.pageYOffset;
			},
			scrollTop: function(y) {
				$(window).scrollTop(y);
			},
			absTop: function() { 
				return 0;
			},
			supportsFixedPosition: true
		}
		ajaxart.jbWindowVisualContainer.init(document.body);
	}
	ajaxart.jbWindowVisualContainer.recalc();
	return ajaxart.jbWindowVisualContainer;
}

function aa_handleScroll(visualCntr,top,delayedAction) {
	aa_run_delayed_action('scroll',function() { 
		var elems = $(top).find('.aa_scroll_listener');
		if ($(top).hasClass('aa_scroll_listener')) elems.push(top);

		for(var i=0;i<elems.length;i++) {
			try {
				var cntr2 = aa_findVisualContainer(elems[i]);
				if (visualCntr == cntr2 || !cntr2.originalHeight)
					elems[i].jbWindowScrollCallbacks();
			} catch(e) {
				ajaxart.logException('error in window scroll callback',e);
			}
		}
	},3);
}
function aa_findVisualCntrByID(id) {
	var elems = $('.aa_visual_container');
	for(var i=0;i<elems.length;i++)
		if (elems[i].jbVisualContainer && elems[i].jbVisualContainer.ID == id) 
			return elems[i].jbVisualContainer;
}

function aa_findVisualContainer(elem,context) {
	var out;
	if (context && context.vars.VisualContainer) out = context.vars.VisualContainer[0];
	else if (elem) {
		var top = $(elem).closest('.aa_visual_container')[0];
		if (top && top.jbVisualContainer) out = top.jbVisualContainer;
	}
	out = out || aa_windowVisualContainer();

	out.recalc();
	return out;
}

function aa_positionFixed(el,settings) {
	settings = aa_defaults(settings,{
		addMarginToParent: false
	});
	var ctx = settings.object && settings.object.context;

	var visualCntr = aa_findVisualContainer(el,ctx);
	if (visualCntr.supportsFixedPosition && !ajaxart.isAndroid) {
		$(el).css('position','fixed');
		if (typeof settings.bottom != 'undefined') $(el).css('bottom',settings.bottom+'px');
		if (typeof settings.top != 'undefined') $(el).css('top',settings.top+'px');

		aa_addOnAttach(el,fixParentMargin);
	} else {
		$(el).css('position','absolute');
		aa_addOnAttach(el,appear);
		aa_addActionOnScroll(el,appear,'position_fixed');
	}

	function fixParentMargin() {
		if (!settings.addMarginToParent) return;
		
		var parent = el.parentNode;
		if (parent && !parent.jbMarginFixed) {
			var height = $(el).height();
			parent.jbMarginFixed = true;
			var marginType = (typeof settings.top != 'undefined') ? 'padding-top' : 'padding-bottom';
			$(parent).css(marginType,height+'px');
		}
	}

	function appear() {
		visualCntr.recalc();
		var top = visualCntr.scrollY();
		if (!visualCntr.originalHeight && !visualCntr.heightByCss) {
			top -= visualCntr.absTop();
			if (top<0) top=0;
		}
		if (ajaxart.jbart_studio && !visualCntr.originalHeight && !visualCntr.heightByCss && top>0) {
			top += $('.studio_collapsed')[0] ? 34 : 93;
		}
		fixParentMargin();

		if (typeof settings.bottom != 'undefined') {
			var cntrHeight = visualCntr.height;
			var height = $(el).height();
			top += cntrHeight - height - settings.bottom;
		}

		$(el).css('top',top+'px');

			// if (!settings.disableZoom && screen.width) {
			// 	var inverseZoom = ((window.innerWidth)/(screen.width));
			//   el.style.zoom = inverseZoom;			
			// }
	}

}

function aa_addActionOnScroll(el,callback) {
	if (el) {
		$(el).addClass('aa_scroll_listener');
		el.jbWindowScrollCallbacks = callback;
	}
}

function aa_url_attribute(url,attr)
{
	if (url.indexOf('#') > -1) url = url.substring(url.indexOf('#'));
	var pos = url.indexOf('?'+attr+'='); 
	if (pos == -1) return "";
	var out = url.substring(pos+1);
	out = out.substring(out.indexOf('=')+1);
	if (out.indexOf('?') > -1) out = out.substring(0,out.indexOf('?'));
	if (out != "" && out.charAt(out.length-1) ==';' ) out = out.substring(0,out.length-1);
	return out;
}

function aa_setEventExtraVariables(vars) {
	jBart.eventExtraVars = null;
	if (!vars || !vars.length) return;
	jBart.eventExtraVars = {};
	for(var i=0;i<vars.length;i++)
		jBart.eventExtraVars[vars[i].Name] = vars[i].Value;
}

function aa_removeEventExtraVariables(vars) {
	jBart.eventExtraVars = null;
}

function aa_contextWithEventExtraVars(ctx) {
	if (!jBart.eventExtraVars) return ctx;
	return aa_ctx(ctx,jBart.eventExtraVars);
}
function aa_addEventListener(object,evt,callback,useCapture,wantsUntrusted ) {
	if (!object) return
	if (object.addEventListener) 
		object.addEventListener(evt,callback,useCapture,wantsUntrusted );
	else if (object.attachEvent) 
		object.attachEvent('on'+evt,callback,useCapture,wantsUntrusted );
	
	if (ajaxart.isIE) {
		// jbEvents is used for memmory cleanup (IE)
	  object.jbEvents = object.jbEvents || [];
	  object.jbEvents.push({ event: "on" + evt, callback: callback });
	}
}
function aa_removeEventListener(object,evt,callback) {
	if (!object) return
	if (object.removeEventListener) 
		object.removeEventListener(evt,callback);
	else if (object.attachEvent) 
		object.detachEvent('on'+evt,callback);

	if (object.jbEvents) {
		for(var i=0;i<object.jbEvents.length;i++)
			if (object.jbEvents[i].event == 'on'+evt && object.jbEvents[i].callback == callback)
				object.jbEvents.splice(i+1);
	}
}


function aa_register_handler(obj,event,handler,id,phase)
{
	if (obj[event] == null) obj[event] = [];
	handler.phase = phase || 0;
	var replaced = false;
	if (id)
	{
		// replace the handler if exists
		handler.Id = id;
		for(var i=0;i<obj[event].length;i++)
			if (obj[event][i].Id == id)
			{
				obj[event][i] = handler;
				replaced = true;
			}
	}
	if (! replaced)
		obj[event].push(handler);
	obj[event].sort(function(a,b) { return a.phase > b.phase ? 1 : -1; });
}


// aa_create_static_image_object converts an old image object to the new imageObject
function aa_create_static_image_object(imageObject)
{
	if (!imageObject) return null;
	if (typeof(imageObject) == 'string') return { url: imageObject};
	if (imageObject && imageObject.css3Image) return imageObject;
	
	var width = imageObject.width, height = imageObject.height;
	if (imageObject.Size) {
		var sizeArr = aa_split(imageObject.Size,',',false);
		width = sizeArr[0] ? parseInt(sizeArr[0]) : null;
		height = sizeArr[1] ? parseInt(sizeArr[1]) : null;
	}

	return {
		url: imageObject.StaticUrl,
		width: width,
		height: height,
		inSprite: imageObject.inSprite,
		x: imageObject.x,
		y: imageObject.y,
		keepImageProportions: imageObject.KeepImageProportions,
		fillImage: imageObject.FillImage,
		zoomAndOffet: imageObject.ZoomAndOffet,
		offsetY: imageObject.OffsetY,
		offsetX: imageObject.OffsetX,
		zoom: imageObject.Zoom,
		centerImage: imageObject.CenterImage,
		baseImageObject: imageObject,
		marginTop: imageObject.MarginTop,
		marginLeft: imageObject.MarginLeft,
		boxWidth: imageObject.boxWidth,
		boxHeight: imageObject.boxHeight
	};
}




aa_gcs("ui_async", {
  LoadingControl: function (profile,data,context)
  {
	  var id = aa_text(data,profile,'DivID',context);
	  var div = jQuery('#'+id);
	  if (div.length >0) { div[0].IsUsed = true; div.show(); return [div[0]]; }
	  return jQuery('<div>'+ajaxart_multilang_text("loading...",context)+"</div>").get();
  },
  ControlWithTimer: function (profile,data,context)
  {
	var out = jQuery('<div>')[0];
	setTimeout(function() {
		var contents = aa_first(data,profile,'Control',context);
		if (contents) out.appendChild(contents);
		aa_element_attached(contents);
	},20);
	return [out];
  },
  ControlUsage: function (profile,data,context)
  {
	  ajaxart_async_Mark(context);
	  aa_intest = true;
	  var control = aa_first(data,profile,'Control',context);
	  window.aa_intest_topControl = control;
	  if (control == null) { ajaxart_async_CallBack(["no control"],context); return }

      var listener = {};
      var listen = function(listener,control) {
    	  aa_async_finished_listeners.push(listener);
    	  listener.OnAsyncActionFinished = function() {
    		  if (jQuery(control).hasClass('aa_loading') || jQuery(control).find('.aa_loading').length > 0) return; // still have aa_loading. we'll wait for the next time
    		  aad_remove_async_finished_listener(listener);

    		  var newContext = aa_ctx(context,{ControlElement: [control], TopControlForTest: [control], InTest: ['true']});

    		  aa_intest = true;
    		  ajaxart_RunAsync(data,ajaxart.fieldscript(profile, 'RunOnControl',false),newContext,function() {
        		  aa_intest = true;
        		  var newContext = aa_ctx(context,{ControlElement: [control], TopControlForTest: [control], InTest: ['true']});
        		  
        		  if (context.vars._TestOutput) context.vars._TestOutput[0].OutputControl = control;

        		  var passed = aa_bool([control],profile,'ExpectedResult',newContext);
        		  ajaxart.run(data,profile,'CleanAfter',newContext);
        		  window.aa_intest_topControl = null;
        		  if (!ajaxart.inPreviewMode)
        			  ajaxart.runNativeHelper([],profile,'CloseDialogAndPopUp',context);
        		  var out= [];
        		  if (!passed) out = [control];
        		  
        		  aa_intest = false;
        		  ajaxart_async_CallBack(out,context); 
    		  });
    	  }
    	  listener.OnAsyncActionFinished();
      }
      listen(listener,control);
  },
  WaitForAsyncToFinish: function (profile,data,context)
  {
	  var jControl = jQuery(context.vars.TopControlForTest);
	  if (jControl.find('.aa_loading').length == 0) return;
      ajaxart_async_Mark(context);
      var listener = {};
      var listen = function(listener,jControl) {
    	  aa_async_finished_listeners.push(listener);
    	  listener.OnAsyncActionFinished = function() {
    		  if (jControl.find('.aa_loading').length > 0) return;	// still have aa_loading. we'll wait for the next time
    		  aad_remove_async_finished_listener(listener);
    		  ajaxart_async_CallBack(data,context);  
    	  }
      }
      listen(listener,jControl);
  }
});



ajaxart.load_usage_plugin("ui");




aa_gcs("uiaction", {
	ReloadPage: function(profile, data, context) {
		if (!ajaxart.inPreviewMode) location.reload(true);
	},
	ScrollIntoView: function(profile, data, context) {
	  	var field_id = aa_text(data,profile,'FieldID',context);
	    var control = aa_find_field_controls({ fieldID: field_id, context: context })[0];
	    if (control)
	    	control.scrollIntoView();
	},
	FireEvent: function(profile, data, context) {
		var event = aa_text(data,profile,'Event',context);
		var elements = ajaxart.getControlElement(context);
		for (var i=0;i<elements.length;i++) {
			if (i==1 && aa_bool(data,profile,'ForOnlyOneElement',context)) return ['true'];
			
			var item = elements[i];
			var props = {};
			var propButton = aa_text(data,profile,'MouseButton',context);
			var keyCode = aa_text(data,profile,'KeyCode',context);
			if (propButton == "right") { props.button = 2; };
			if (keyCode != "") { props.keyCode = keyCode; };
			aa_fire_event(item,event,context,props);
		}
		return ["true"];
	},
	ButtonClick: function(profile, data, context) 
	{
		var runOn = context.vars.ControlElement[0];
		if (!runOn) return;
		var jRunOn = jQuery(runOn);
		if (jRunOn.hasClass('aa_clickable') || jRunOn.hasClass('button_hyperlink_image') || jRunOn.hasClass('aa_button_clickable') && !runOn.jbart_click_behavior) 
			aa_fire_event(runOn,'click',context,{});
		else {
		  aa_fire_event(runOn,'mousedown',context,{});
		  aa_fire_event(runOn,'mouseup',context,{});
		}
	},
	PutInputValuesInHtmlForTests: function(profile, data, context) {
		var top = aa_var_first(context,'TopControlForTest');
		if (!top) return;
		var inputs = jQuery(top).find('input');
		for(var i=0;i<inputs.length;i++) {
			inputs[i].setAttribute('value',jQuery(inputs[i]).val());
		}
	},
	SimulateTreeDragBegin: function(profile, data, context) {
		var elem = ajaxart.getControlElement(context)[0];
		if (!elem) return;
		var cntr_ctrl = jQuery(elem).parents('.aa_container')[0];
		if (cntr_ctrl && cntr_ctrl.Cntr.TreeDragBegin)
		{
			var cntr = cntr_ctrl.Cntr;
			cntr.SuspectItemDrag = {elem: jQuery(elem), mousePos: {x:0,y:0}}
			cntr.TreeDragBegin(null,true);
		}
	},
	SimulateTreeDragEnd: function(profile, data, context) {
		var elem = ajaxart.getControlElement(context)[0];
		if (!elem) return;
		var cntr_ctrl = jQuery(elem).parents('.aa_container')[0];
		if (cntr_ctrl && cntr_ctrl.Cntr.TreeDragEnd)
		{
			var cntr = cntr_ctrl.Cntr;
			elem.appendChild( cntr.SpaceElem );
			cntr.TreeDragEnd(null,false,true);
		}
	},
	SimulateTreeDrop: function(profile, data, context) {
		var elements = ajaxart.getControlElement(context);
		return elements;
	},
	ControlElementToRunOn: function(profile, data, context) {
		var elements = ajaxart.getControlElement(context);
		return elements;
	},
	Refresh: function(profile, data, context) 
	{
		var elements = ajaxart.getControlElement(context);
		for(var i=0;i<elements.length;i++)
		{
			var newControl = jBart.utils.refresh(elements[i]);
		
			ajaxart.run(data,profile,'RunOnControl',aa_ctx(context,{ControlElement: [newControl]}));
		}
		return ["true"];
	},
	FilterContainer: function(profile, data, context)
	{
		var cntr_field_id = aa_text(data,profile,'Cntr',context),cntr=null;
		var xml = aa_first(data,profile,'FilterQueryXml',context);
		if (!ajaxart.isxml(xml)) return;
		
		if (cntr_field_id == '') 
			cntr = (context.vars.HeaderFooterCntr || context.vars._Cntr)[0];
		else if (cntr_field_id.indexOf('Page_') == 0) {
			var elem = jQuery('.'+cntr_field_id)[0];
			if (elem) cntr = elem.Cntr; 
		}
		else if (cntr_field_id.indexOf('fld_') == 0) {
			var elem = jQuery('.'+cntr_field_id)[0];
			if (elem) cntr = elem.Cntr; 
		}
		if (!cntr) return;
		
		cntr.DataHolder = cntr.DataHolder || aad_createDataHolderFromCntr(cntr,context);
		cntr.DataHolder.UserDataView.Filters = aad_cntr_filterXml2Objects(cntr,xml);
		aa_recalc_filters_and_refresh(cntr,data);
	},
	UpdateBrowserTitle: function(profile, data, context)
	{
		var title = aa_text(data,profile,'Title',context);
		document.title = title;
		return ["true"];
	},
	Hide: function(profile, data, context) 
	{
		var elem = ajaxart.getControlElement(context)[0];
		if (ajaxart.ishtml(elem))
		{
			elem.display = 'none';
			elem.style.display = 'none';
		}
		return ["true"];
	},
	SetBrowserIcon: function(profile, data, context)
	{
		var icon = aa_text(data,profile,'Icon',context);
		if (icon == "") return [];
		var link = jQuery('<link rel="shortcut icon" href="'+icon+'" type="image/x-icon">');
		$('head').append( link ) ; 
	},
	AddCssForBody: function(profile, data, context)
	{
		var cssClass = aa_cssClass(data,profile,'Css',context,'jbBody');
		if (ajaxart.jbart_studio) {
			setTimeout(function() {
				$('.gstudio_preview_top').addClass(cssClass);
			},50);
		} else {
			$('body').addClass(cssClass);
		}
	},
	FindFirstInput: function(profile, data, context)
	{
		var elements = ajaxart.getControlElement(context);
		if (elements.length == 0) return [];
		var inp = jQuery(elements[0]).find('input, textarea, .ok_button');
		if (inp.length > 0) return [ inp[0] ];
		return [];
	},
	Show: function(profile, data, context) 
	{
		var elements = ajaxart.getControlElement(context);
		
		for(var i=0;i<elements.length;i++) 
		  elements[i].style.display = 'block';
		return [];
	},
	RunEvent: function(profile, data, context)
	{
		var elements = ajaxart.getControlElement(context);
		var varname = aa_text(data,profile,'VarName',context);
		var action = aa_text(data,profile,'Action',context);
		
		for(i in elements)
			ajaxart_runevent(elements[i],varname,action);
		
		return ["true"];
	},
	Alert: function(profile, data, context)
	{
		var text = aa_text(data,profile,'Text',context);
		alert(text);
	},
	ElementByID: function(profile, data, params)
	{
		var startFrom = ajaxart.run(data,profile,'StartFrom',params);
	    var ID = aa_text(data,profile,'ID',params);
	    
	    var newparams = ajaxart.calcParamsForRunOn(params,ID,startFrom);
	    return ajaxart.getControlElement(newparams);
	},
	ElementByClass: function(profile, data, params)
	{
		var startFrom = aa_first(data,profile,'StartFrom',params);
	    var cls = aa_text(data,profile,'Cls',params);
	    if (startFrom == null || startFrom.length == 0) return [];
	    var jresult = jQuery(startFrom).find('.'+cls);
	    var out = [];
	    for (var i=0; i<jresult.length; i++)
	    	out.push(jresult[i]);
	    return out;
	},
	GoUp: function(profile, data, params)
	{
	    var topHtmlTag = aa_text(data,profile,'TopHtmlTag',params).toLowerCase();
	    var topId = aa_text(data,profile,'TopId',params);
	    topId = topId.replace(/ /g, "_");
	    var topClass = aa_text(data,profile,'TopClass',params);
	    
	    var elems = ajaxart.getControlElement(params);
	    if (! ajaxart.ishtml(elems)) return [];
	    var elem = elems[0];
	    while (elem != null && elem.nodeType != 4) {
	    	if (topClass != "" && jQuery(elem).hasClass(topClass)) return [elem];
	    	if (topId != "" && elem.id == topId) return [elem];
	    	if (typeof(elem.tagName) != "undefined" && elem.tagName.toLowerCase() == topHtmlTag) return [elem];
	    	elem = elem.parentNode;
	    }
	    
	    return [];
	},
 	RefreshItemElements: function (profile,data,context)
 	{
		var elems = ajaxart.run(data,profile,'ItemElements',context);
		ajaxart_uiaspects_refreshElements(elems);
	    
	    return ["true"];
 	},
 	SelectedItemElement: function (profile,data,context)
 	{
		var elem = ajaxart.getControlElement(context);
		if (elem.length == 0) return [];
		
		var selected = jQuery(elem[0]).find('.aa_selected_item');
		if (selected.length == 0) return [];
	    return [selected[0]];
 	},
	DeleteItemElements: function (profile,data,context)
	{
		var elems = ajaxart.run(data,profile,'ItemElements',context);
		for(var i in elems)
	  	{
			var elem = elems[i];
			if (jQuery(elem).hasClass('aa_selected_item'))
  			{
		  		 var newSel = elem.nextSibling;
		  		 if (newSel == null) newSel = elem.previousSibling; 
		  		 if (newSel == null) {
		  			 var parents = jQuery(elem).parents('.aa_item');
		  			 if (parents.length > 0) newSel = parents[0];
		  		 }
		  		 if (newSel != null)
	  	  	     {
		  			ajaxart_uiaspects_select(jQuery(newSel),jQuery(elem),"auto",context,true);
	  	  	     }
	  		 }
  			 elem.parentNode.removeChild(elem);
	  	}
	  	return ["true"];
	},
	AddItemElement: function (profile,data,context)
	{
		var item_data = ajaxart.run(data,profile,'Item',context);
		var parent_elem = aa_first(data,profile,'ParentElement',context);
		var cntr = ajaxart_uiaspects_container(context);
		var new_elem = ajaxart_uiaspects_addElement(item_data,cntr,parent_elem);
	    
		if (aa_bool(data,profile,'SelectIt',context))
			ajaxart_uiaspects_select(jQuery(new_elem),jQuery([]),"auto",context,true);
		
		ajaxart.run([new_elem],profile,'DoOnAddedElement',aa_ctx(context,{ControlElement: [new_elem]}));
	    return ["true"];
	},
	ExpandText: function (profile,data,context)
	{
		var elem = aa_first(data,profile,'ItemElement',context);
		var tds = jQuery(elem).find('>.aa_cell_element');
		for(var i=0;i<tds.length;i++)
			if (tds[i].expandableText)
				tds[i].expandableText.Build(tds[i].expandableText.States['control']);
	},
	CheckAll: function (profile,data,context)
	{
		var select = aa_bool(data,profile,'Select',context);
		var cntr = ajaxart_uiaspects_container(context);

		var elems = jQuery(cntr.Ctrl).find('.aa_item');
		for(var i=0;i<elems.length;i++)
		{
			var elem = jQuery(elems[i]);
		    var checkbox = elem.find('>.aacheckbox_value');
        	if (checkbox.length > 0 && ! elems[i].hidden && checkbox[0].checked != select )
        	{
        		if (checkbox[0].checked != select)
     			    cntr.ToogleCheckbox(cntr.Context,elem);
        		aa_checked(checkbox[0], select);
        	}
		}

	    return ["true"];
	},
	HasClass: function(profile, data, context)
	{
		var cls = aa_text(data,profile,'Cls',context);
		var elems = ajaxart.getControlElement(context);
		if (elems.length == 0) return [];
		if ( jQuery(elems[0]).hasClass(cls) ) return ["true"];
		return [];
	},	
	ReplaceControl: function(profile, data, params)
	{
		var newControl = ajaxart.run(data,profile,'NewControl',params);
		var origControl = ajaxart.getControlElement(params);
		
		if (origControl.length == 0) return [];
		if (newControl.length == 0)
			newControl = [ document.createElement('div') ];
		
		if (origControl[0].id.length > 0 && newControl[0].id.length == 0)
			newControl[0].id = origControl[0].id; 

		ajaxart.replaceXmlElement(origControl[0],newControl[0],true);
		
		return data;
	},
	Select: function(profile, data, context)
	{
		var jItems = jQuery(context.vars.ControlElement).find('.aa_item');
		for(var i=0;i<jItems.length;i++)
			if (jItems[i].ItemData && aa_bool(jItems[i].ItemData,profile,'FilterOnItem',context)) {
				ajaxart.runNativeHelper(jItems[i].ItemData,profile,'Click',aa_ctx(context,{ControlElement:[jItems[i]]}));
				return [];
			}
		
		return [];
	},
	MobileScrollToElement: function(profile, data, context)
	{
		var elem = aa_first(data,profile,'Element',context);
		var iter = elem;
		while (iter && iter.nodeType == 1)
		{
			if (iter.IScroll) {
				iter.IScroll.scrollToElement(elem,400);
				return;
			}
			iter = iter.parentNode;
		}
	},
	ItemElementByFilter: function(profile, data, context)
	{
		var jItems = jQuery(context.vars.ControlElement).find('.aa_item');
		for(var i=0;i<jItems.length;i++)
			if (aa_bool(jItems[i].ItemData,profile,'FilterOnItem',context)) 
				return [jItems[i]];
	},
	ElementByInnerFilter: function(profile, data, params)
	{
	    var elements = ajaxart.run(data,profile,'TopElement',params);
	    if (! ajaxart.ishtml(elements)) return [];
		var out = [];
		
		function _recursive_iteration(elem)
		{
			if (elem.nodeType != 1) return;
			
			if (elem.ajaxart)
				var itemdata = elem.ajaxart.data;
			else
				var itemdata = elem.ItemData;
			
			if (itemdata != null && aa_bool(itemdata,profile,'Filter',params))
				out.push(elem);
			
			var node = elem.firstChild;
			while (node != null)
			{
				if (node.nodeType == 1)
					_recursive_iteration(node);
				node=node.nextSibling;
			}
		}

		for(var i=0;i<elements.length;i++)
			_recursive_iteration(elements[i]);
		
		return out;
	},
	Focus: function(profile, data, context)
	{
	    var elems = ajaxart.getControlElement(context);
	    if (elems.length == 0) return [];
	    var elem = elems[0];
	    var timeout = 1;
	    if (ajaxart.isSafari) timeout = 100;
	    
	    function dofocus(elem) {
	    	if (!elem.tabIndex || elem.tabIndex == -1) elem.tabIndex=1;
	    	if (elem.SetFocus) return elem.SetFocus();
	    	if (aa_bool(data,profile,'OnFirstInput',context)) {
	    		if (elem.tagName.toLowerCase().indexOf('input,textarea') != -1)
	    			elem.focus();
	    		else {
	    			var e2 = jQuery(elem).find(':input')[0];
	    			if (e2) e2.focus();
	    		}
	    	}
	    	else 
	    		elem.focus();
	    }
	    
	    if (jQuery(elem).parents("body").length == 0) { //detached
	    	var set_focus = function(e) {  setTimeout(function() { 
	    		if(! ajaxart.isattached(e)) return;
	    		dofocus(e);
	    	} ,timeout); }
	    	set_focus(elem);
	    }
	    else{
    		dofocus(elem);
	    }
	    
	    return [];
   }, 
   MoveSelection : function(profile, data, params)
   {
  	 var direction = aa_text(data,profile,'Direction',params);
  	 var controls = ajaxart.getControlElement(params);
  	 if (controls.length == 0) return [];
  	 
  	 var selected = jQuery(controls[0]).find(".selected");
  	 var newSelected = [];
  	 switch (direction) {
  	 case 'One Up' 	: newSelected = selected.prev();break;
  	 case 'One Down': newSelected = selected.next();break;
  	 default : ajaxart.log("MoveSelection - no valid direction:" + direction);
  	 }
  	 if (newSelected.length > 0) {
  		 selected.removeClass("selected");
  		 newSelected.addClass("selected");
  		 
  		 ajaxart_selectionchanged(newSelected[0]);
  		 var context = controls[0]["ajaxart"];
  		 ajaxart.run( newSelected[0]["ajaxart"].data, context.script,'OnSelect', context.params );
//  		 ajaxart.run(nextData,aggProfile,'',context)
//  		 ajaxart_runevent( newSelected[0]["ajaxart"].data ,context,'OnSelect');
  	 }
   },
   RefreshAllItemsInItemList: function(profile, data, context)
   {
	   var cntr = context.vars._Cntr[0];
	   aa_recalc_filters_and_refresh(cntr,data,context);  
   },
   DataItemsOfItemInTree: function(profile, data, context)
   {
	  var elem = aa_first(data,profile,'ItemElement',context);
	  if (!elem || !elem.ItemData) return [];
	  elem = jQuery(elem).find('.aa_treenode')[0];
	  if (elem && elem._Items) return [elem._Items];
   },
   MouseRightClick: function(profile, data, context)
   {
     var elems = ajaxart.getControlElement(context);
     for(var i=0;i<elems.length;i++)
     {
       
     }
   },
   SetEnabling : function(profile, data, context)
   {
  	 var enable = aa_bool(data,profile,'Enable',context);
  	 var control = ajaxart.getControlElement(context);
  	 if (control.length == 0) return [];
  	 if (enable)
  		 control[0].removeAttribute("disabled");
     else
    	 control[0].setAttribute("disabled", "true");
   },
   GoToUrl: function(profile, data, context)
   {
	  var url = aa_text(data,profile,'Url',context);
	  if (window._gaq) // google analytics 
		  _gaq.push(['_trackPageview', '/' + url.split('/').pop()]);
      if (ajaxart.inPreviewMode == true) return [];
      var prev_loc = window.location + "_";	//make it string and not reference
	  if (url.length > 0 && window.location != url) window.location = url;
	  if (ajaxart.hash_change_by_js_count != null && prev_loc != window.location + "_")
		  ajaxart.hash_change_by_js_count++;	// for Back of browser handling
	  return ["true"];
   },
   JQueryFind: function(profile, data, context)
   {
	   var exp = aa_text(data,profile,'Expression',context);
	   var all = aa_bool(data,profile,'All',context);
	   var logOnEmptyResult = aa_bool(data,profile,'LogOnEmptyResult',context);
	   var runOnData = aa_bool(data,profile,'RunOnData',context);
	   var runOnScreen = aa_bool(data,profile,'RunOnScreen',context); 
	   var control = null;
	   if (!runOnData)
		   control = ajaxart.getControlElement(context,true);
	   else if (data.length > 0)
	  	 control = data[0];
	   if (control == null)
		   return [];
	   try {
	  	 var result = [];
	  	 if (runOnScreen) eval('result = jQuery("' + exp + '")');
	  	 else if (exp.length > 0 && exp.charAt(0) == '.' && exp.indexOf('(') != -1)
	  		 eval('result = jQuery(control)' + exp);
	  	 else
	  		 result = jQuery(control).find(exp);
		   if (result.length > 0 ) {
			   if (!all) return [ result[0] ];
			   var arr = [];
			   for(i=0;i<result.length;i++) arr.push(result[i]);
			   return arr;
		   }
		   else if (logOnEmptyResult) { ajaxart.log("JQueryFind - found nothing, expression :" + exp,"warning"); }
	   } catch(e) { ajaxart.log("JQueryFind failed, expression :" + exp,"error"); }
	   return [];
   },
   AddTextToTextboxCursor: function(profile, data, context) {
	  	var text = aa_text(data,profile,'Text',context);

	  	var field_id = aa_text(data,profile,'Textbox',context);
	    var control = aa_find_field_controls({ fieldID: field_id, context: context })[0];
    	if (control && control.jbAddTextAtCursor) return control.jbAddTextAtCursor(text);
	    if (control) {
	    	// add to text area
	    	var textarea = control.tagName.toLowerCase() == 'textarea' ? control : $(control).find('textarea')[0];

	    	textarea.value = textarea.value.substring(0,textarea.selectionStart) + text + textarea.value.substring(textarea.selectionStart);
	    }
   },
   RegisterOnPageClose: function(profile, data, context)
   {
	   window.onbeforeunload = function() { 
		   if (window.preventOnBeforeUnload) return;   // because of an ugly tinymce bug in a specific IE8 version
		   var cond = aa_bool(data,profile,'ShowMessageIf',context);
		   var message = aa_multilang_text(data,profile,'Message',context); 
		   if (cond) return message; 
	   }
	   return ["true"];
   },
   MakeCssInline : function(profile, data, context)
   {
	   	var control = aa_first(data,profile,'Control',context);
	   	var replacers_xml = aa_first(data,profile,'CssReplacer',context);
	   	var all_replacers = [];
	   	
		var replacers = aa_xpath(replacers_xml,"*",false);
		 
	    for(var i=0; i<replacers.length; i++) {
	    	var cond = replacers[i].getAttribute("Condition");
	    	var style = replacers[i].getAttribute("Css");
	    	var found = jQuery(control).find("" + cond);
	    	for (var j=0; j<found.length; j++)
	    		found[j].style.cssText = style;
	    }
	    return [control];
   },
   HideMessageBarOnUserClick: function(profile, data, context)
   {
	   var clean_message_bars = function() {
		   var messageBars = ajaxart.getControlElement(context);
		   for (i in messageBars)
			   jQuery(messageBars[i]).hide();
		   ajaxart_capture_onclick(null);
	   }
	   setTimeout(function() {ajaxart_capture_onclick(clean_message_bars)},1);
	   return ["true"];
   },
   RefreshAfterDataItemsChanged: function(profile, data, context)
   {
	   return aa_refreshAfterDataItemsChanged(context);
   },
   DownloadFile: function(profile, data, context)
   {
	   var iframe = document.createElement("IFRAME");
	   iframe.style.width = "0px";
	   iframe.style.height = "0px";
	   iframe.setAttribute("frameborder","0");
	   iframe.src = aa_text(data,profile,'Url',context);
	   jQuery(iframe).appendTo("body");
	   return [];
   },
   BindHashChangeEvent: function(profile, data, context)
   {
	   ajaxart.hash_change_func = function() { ajaxart.run(data,profile,'Action',context); }
	   ajaxart.hash_change_by_js_count = 0;
	   window.onhashchange = function ()
	   {
			// we use counter to make sure that event is not coming from js code
			if (ajaxart.hash_change_by_js_count > 0) {
				ajaxart.hash_change_by_js_count--;
				return;
			}
			if (ajaxart.hash_change_func != null)
				ajaxart.hash_change_func();
		};
	   return [];
   }
});


function aa_fire_event(item,event,context,props)
{
	if (typeof(props) == "undefined") props = {};
	
	if (! ajaxart.isSafari || ajaxart.isattached(item) )
		  aa_xFireEvent(item, event, props,context.vars.InTest != null);
	else {
		ajaxart_source_elem_in_test = item;
		while (item != null)
		{
			aa_xFireEvent(item, event,props,context.vars.InTest != null);
			item = item.parentNode;
		}
		ajaxart_source_elem_in_test = null;
	}
}

function aa_refreshAfterDataItemsChanged(context)
{
   var items = context.vars._Items[0];
   if (items == null) return [];
   if (context.vars._Cntr)
	   aa_invoke_cntr_handlers(context.vars._Cntr[0],context.vars._Cntr[0].DataItemsChange,[],context);

   var candidates = jQuery(document).find('.aa_items_listener');
   if (context.vars.ControlElement && context.vars.ControlElement[0] != null && ! ajaxart.isattached(context.vars.ControlElement[0])) {
	   var root = context.vars.ControlElement[0];
	   while (root.parentNode != null) root = root.parentNode;
	   var candidates2 = jQuery(root).find('.aa_items_listener');
	   if (candidates2.length > 0) candidates = candidates2;
   }
   var jBase = jQuery(context.vars.ControlElement);
   var substract = jBase.parents('.aa_items_listener').get();
   if (jBase.hasClass('aa_items_listener')) substract.push(jBase[0]);
   
   for(var i=0;i<candidates.length;i++) {
	   var item = candidates[i];
	   var found = false;
	   for(var j=0;j<substract.length;j++) if (item == substract[j]) found=true;
	   if (found) continue;
	   if (item._Items == items)
		   item.RefreshAfterItemsChanged.call(item);
	   else if (item._Items.EqualsToDataItems && item._Items.EqualsToDataItems(items) ) {  // used in document tree
		   item._Items.Refresh([],context);
		   item.RefreshAfterItemsChanged.call(item);
	   }
   }
   return [];
}
aa_inuiaction = false;

ajaxart.load_usage_plugin("uiaction");





var aa_intest;

ajaxart.gcs.usage = 
{
  DataUsage: function (profile,data,params)
  {
  	var user_agent = aa_text(data,profile,'UserAgent',params);
  	if (user_agent)	aa_determine_device(user_agent);
		return ajaxart.trycatch( function ()	{
//			if (ajaxart.getVariable(params, "GPXtml").length > 0) // only in aaeditor global preview
			
			ajaxart.run(data,profile,'RunBefore',params);
			var result = ajaxart.run(data,profile,'Result',params);
			var result = ajaxart.run(result,profile,'ResultTransformer',params);
			var passed = aa_bool(result,profile,'ExpectedResult',params);
//			var name = aa_text(data,profile,'Of',params) + " " + aa_text(data,profile,'Name',params);
			ajaxart.run(data,profile,'CleanAfter',params);

	 	    if (params.vars._TestOutput) {
	 	    	var out = jQuery("<span/>").text(ajaxart.usage.resultAsText(result)[0]);
	 	    	out.html(out.html().replace("\n","</br>"));
	 	    	if (params.vars._TestOutput[0].OutputControl) {
	 	    		params.vars._TestOutput[0].OutputControl[0].appendChild(out[0]);
	 	    		aa_fixTopDialogPosition();
	 	    	}
	 	    	else
		 	    	params.vars._TestOutput[0].OutputControl = out[0];
	 	    }
//	 	    if (params.vars._TestOutput) params.vars._TestOutput[0].OutputControl = ajaxart.usage.resultAsText(result);
			if (passed == false) {
				result = ajaxart.usage.resultAsText(result)[0];
				return result ? [result] : ["aa"];	// empty text means success
			}
			return [];
	}, function (e)	{ // catch
		return ["execption: " + e];
	});
  	if (user_agent)	aa_determine_device();	// put back user agent
  },
	JBartDataUsage: function (profile,data,context) {
		window.aa_intest = true;
		window.aa_intest_topControl = null;
  	var user_agent = aa_text(data,profile,'UserAgent',context);
  	if (user_agent)	aa_determine_device(user_agent);

		var ctx = aa_create_jbart_context({
			WidgetXml: context.vars._WidgetXml[0],
			Context: context
		});
		ctx = aa_merge_ctx(context,ctx);

		ajaxart.run(data,profile,'RunBefore',ctx);
		var result = aa_run(data,profile,'Result',ctx);
		var passed = aa_bool(result,profile,'ExpectedResult',ctx);

		aa_run(data, profile, 'CleanAfter', ctx);
		window.aa_intest = false;

    if (context.vars._TestOutput) {
    	var out = jQuery("<span/>").text(ajaxart.usage.resultAsText(result)[0]);
    	out.html(out.html().replace("\n","</br>"));
    	if (context.vars._TestOutput[0].OutputControl) {
    		context.vars._TestOutput[0].OutputControl[0].appendChild(out[0]);
    		aa_fixTopDialogPosition();
    	}
    	else
	    	context.vars._TestOutput[0].OutputControl = out[0];
    }
		if (user_agent)	aa_determine_device(); // put back user agent

		if (!passed) {
			result = ajaxart.usage.resultAsText(result)[0];
			return result ? [result] : ["aa"];	// empty text means success
		}
	},
	JBartActionUsage: function (profile,data,context) {			// async test!
		// Hasn't been tested yet!!!
		var deferred = $.Deferred();

		window.aa_intest = true;
		window.aa_intest_topControl = null;
  	var user_agent = aa_text(data,profile,'UserAgent',context);
  	if (user_agent)	aa_determine_device(user_agent);

		var ctx = aa_create_jbart_context({
			WidgetXml: context.vars._WidgetXml[0],
			Context: context
		});
		ctx = aa_merge_ctx(context,ctx);

		var prmoise = aa_first(data,profile,'Action',ctx);
		$.when(promise).then(function() {
			var result = aa_run(data,profile,'Result',ctx);
			var passed = aa_bool(result,profile,'ExpectedResult',ctx);

			aa_run(data, profile, 'CleanAfter', ctx);
			window.aa_intest = false;
			if (user_agent)	aa_determine_device(); // put back user agent

	    if (context.vars._TestOutput) {
	    	var out = jQuery("<span/>").text(ajaxart.usage.resultAsText(result)[0]);
	    	out.html(out.html().replace("\n","</br>"));
	    	if (context.vars._TestOutput[0].OutputControl) {
	    		context.vars._TestOutput[0].OutputControl[0].appendChild(out[0]);
	    	}
	    	else
		    	context.vars._TestOutput[0].OutputControl = out[0];
	    }

			deferred.resolve(passed ? [] : (result.length ? result : ['failed']) ); // empty means success
		});

		if (context.vars._AsyncPromiseHolder)
			context.vars._AsyncPromiseHolder[0].promise = deferred.promise();

		return [];
	},
  DataUsage_Result: function (profile,data,context)
  {
	  ajaxart.run(data,profile,'RunBefore',context);
	  return ajaxart.run(data,profile,'Result',context);
  },

  DataUsage_Data: function (profile,data,context)
  {
	  if (data.length == 0) return [""];
	  return data;
  },
  RunInTestMode: function (profile,data,context)
  {
		var intest = aa_intest;
		window.aa_intest = true;
		window.aa_intest_topControl = window.aa_intest_topControl || document;
		ajaxart.run(data,profile,'Action',context);
		window.aa_intest = intest;
  },
  RunSingleTest: function (profile,data,context)
  {
	  IsTest = true;
	  if (!ajaxart.isxml(data)) return [];
	  var usageProf = data[0];
	  
	  ajaxart.runTestLoop([usageProf],0);
	  return [];
  },
  ContainsText: function (profile,data,context)
  {
	  var look_in = aa_text(data,profile,'LookIn',context);
	  var input = data;
	  if (look_in == 'current dialog') {
		  input = [];
		  var topDialogNew = aa_top_dialog();
		  if (topDialogNew && topDialogNew.dialogContent) input = [topDialogNew.dialogContent];
		  if (!input[0] && topDialogNew) input = [topDialogNew];
		  if (!input[0]) {
  		    var dlg = openDialogs[openDialogs.length-1];
			if (dlg) input = [dlg];
		  }
	  } else if (look_in == 'current popup') {
	  	input = aa_popupElementForTests() || aa_contentsOfOpenPopup();
	  }
	  
	  if (aa_bool(data,profile,'RemoveHiddenElements',context) && ajaxart.ishtml(input[0]) ) {
	  	$(input).find('.aa_hidden_element').remove();
	  	
			var toRemove = [];
			function clear(node)
			{
				if (node.style && (node.style.display == 'none' || node.display == 'none' ))
					toRemove.push(node);
				else if (node.style && node.style.position.toLowerCase().indexOf('absolute') != -1)
					toRemove.push(node);
				else {
				  for(var i=0;i<node.childNodes.length;i++)
					clear(node.childNodes[node.childNodes.length-i-1]);
				}
			}
			clear(input[0]);
			for(var i in toRemove)
				if (toRemove[i].parentNode)
					toRemove[i].parentNode.removeChild(toRemove[i]);
	  }
		  
	  var ignoreCase = aa_bool(data,profile,'IgnoreCase',context);
	  var ignoreOrder = aa_bool(data,profile,'IgnoreOrder',context);
	  var oneOf = aa_bool(data,profile,'OneOf',context);

	  var data_text = "";
	  if (ajaxart.isxml(input))
	  	data_text = ajaxart.xml2text(input);
	  else
	  	data_text = ajaxart.totext(input);

  	  var text_items = ajaxart.runsubprofiles(data,profile,'Text',context);
  	  var startIndex = 0;
	  if (ignoreCase) data_text = data_text.toLowerCase();
	  var success = (text_items.length == 0);
	  
	  for(var i=0;i<text_items.length;i++) {
			var text = text_items[i];
	  		if (ignoreCase) text = text.toLowerCase();
	  		var new_index = data_text.indexOf(text,startIndex);
	  		if (!oneOf && new_index == -1) return [];
	  		success = true;
	  		startIndex = new_index + text.length;
	  		if (ignoreOrder || oneOf) startIndex=0;
	  };
	  if (!success) return [];

	  var notContainingText = aa_text(data,profile,'AndNotContainingText',context);
	  if (!notContainingText) return ['true'];
	  if (ignoreCase) notContainingText = notContainingText.toLowerCase();
	  
	  if (data_text.indexOf(notContainingText) > -1) return [];
	  
	  return ['true'];
  },
  And: function(profile,data,context) {
  	return ajaxart.gcs.yesno.And(profile,data,context);
  },
  Or: function(profile,data,context) {
  	return ajaxart.gcs.yesno.OR(profile,data,context);
  },
  HasFocus: function(profile,data,context) {
  	var cls = aa_text(data,profile,'CssClass',context);
  	if (jQuery(document.activeElement).hasClass(cls)) return ["true"];
  	if (jQuery(context.vars.TopControlForTest).find('.in_focus').hasClass(cls)) return ["true"];
  	if (jQuery('.in_focus').hasClass(cls)) return ["true"];
  	return [];
  }
}

ajaxart.usage = {};
ajaxart.usage.resultAsText = function(result)
{
	if (result.length == 0) 
		return ["false"];

	if (ajaxart.isxml(result))
		return [ ajaxart.xml2text(result) ];
//		return [ aa_xmlescape(ajaxart.xml2text(result)) ];

	if (ajaxart.isObject(result[0]))
		return [ajaxart.text4trace(result)];
	else
		return result;
	
	return result;
}



aa_gcs("xml", {
	XmlToText: function(profile, data, context) {
		if (!data[0]) return [''];
		if (!data[0].nodeType) {
			try {
			  return [JSON.stringify(data[0])];
			} catch(e) {
				return aa_totext(data);
			}
		}
//	    if (!data[0] || !data[0].nodeType) return [ aa_totext(data) ];
		var pretty_print = aa_bool(data,profile,'PrettyPrint',context);
		var escape = aa_bool(data,profile,'Escape',context);
		if (data.length == 0) return [];
		if (! ajaxart.isxml(data[0]))
			return data[0];
		
		if (pretty_print)
			return [ ajaxart.xml.prettyPrint(data[0]) ];
		else
			return [ ajaxart.xml2text(data[0]) ];	
	},
	TextToXml: function(profile, data, context) {
		var xml = data[0];
		if (xml && xml.nodeType == 1) return [xml];
		if (xml && xml.nodeType == 9 && xml.documentElement) return [xml.documentElement];
		return [aa_parsexml(ajaxart.totext(data),"TextToXml",null,true)];
	},
	ParseXmlCleanNamespaces: function(profile, data, context) {
		var text = aa_text(data,profile,'XmlAsText',context);
		var cleanXml = aa_clean_xml_namespaces(text);
		return [aa_parsexml(cleanXml)];
	},
	XmlToJson: function(profile, data, context) {
		var xml = aa_first(data,profile,'Xml',context);
		return [aa_xml2JSON(xml)];
	},
	JSONToXml: function(profile, data, context)
	{
		var tag = aa_text(data,profile, 'Tag', context);
		var obj = aa_first(data,profile, 'JSON', context);
		if (typeof obj == 'object') {
			obj = jQuery.extend({}, obj); // clone
			delete obj.XtmlSource;
		}
		if (typeof obj != 'object' && aa_text(data,profile, 'InputFormat', context) != 'Object')
			obj = ajaxart.totext_item(obj);
		var xml = obj && aa_JSON2Xml(obj,tag);
		return xml ? [xml] : [];
	},
	CSVToXml: function(profile, data, context)
	{
		var xml = aa_CSV2Xml(aa_text(data,profile, 'CSV', context));
		if (xml)
			return [xml];
		return [];
	},
	XPath: function(profile, original_data, context) {
		var xpath = aa_text(original_data,profile, 'XPath', context);
		var createIfNotExist = aa_bool(original_data,profile, 'CreateIfDoesNotExist', context);
		var def = aa_text(original_data,profile, 'DefaultValue', context);
		var data = ajaxart.run(original_data,profile, 'From', context);
		if (data == null) data = original_data;
		
		if (xpath == "") return data;
		
		if (! ajaxart.isxml(data) || xpath == "") return [];
		var result = aa_xpath(data[0],xpath,createIfNotExist,def);
		return result;
	},
	XPathFromList: function(profile, data, context) {
		var xpath = aa_text(data,profile,'XPath',context);
		var list = ajaxart.run(data,profile,'List',context);

		if (xpath == "") return list;
		
		var isAttr = (xpath.charAt(0) == '&');
		var attr = "";
		if (isAttr) attr = xpath.substring(1);
		
		var out = [];
		for(var i=0;i<list.length;i++) {
			var item = list[i];
			if (isAttr) {
				var nextItem = item.getAttribute(attr);
				if (aa_hasAttribute(item,attr)) out.push(nextItem);
			}
			else {
				var results = aa_xpath(item,xpath);
				ajaxart.concat(out,results);
			}
		}
		
		return out;
	},
	NextSibling: function(profile, data, context) {
		var xml = data[0];
		while (xml) {
			xml = aa_nextElementSibling(xml);
			if (!xml) return [];
			if (aa_bool([xml],profile,'Filter',context)) return [xml];
		}
	},
	PreviousSibling: function(profile, data, context) {
		var result = ajaxart.xml.PrevSibling(data[0],null);
		if (result != null)
			return [result];
		return [];
	},
	CloneNodeCleanNS: function(profile,data,context) {
		var xml = aa_first(data,profile,'Xml',context);
		return [aa_xml_cloneNodeCleanNS(xml)];
	},
    ChildAtPosition: function(profile,data,context)
    {
        var position = aa_int(data,profile,'Position',context);
        if (ajaxart.isxml(data) && data[0].nodeType == 1 )
        {
            var xml_item = data[0];
            var t=0;
            for (var i=0;i<xml_item.childNodes.length;i++)
            {
                if (xml_item.childNodes.item(i).nodeType == 1) t++;
                if (t == position)
                    return [xml_item.childNodes.item(i)];
            }
        }
        return [];
    },
	ToXmlElement: function(profile, data, context) {
		if (data.length == 0) return [];
		var xml = data[0];
		if (xml.nodeType == 1) return data;
		if (xml.nodeType == 2 || xml.nodeType == 3 || xml.nodeType == 4) 
			return aa_xpath(xml,'..');
		
		return [];
	},
	XPathOfNode: function(profile, data, context) {
		var id = aa_text(data,profile, 'StopAtIDAttribute', context);
		var specific = aa_bool(data,profile, 'Specific', context); 
		var top = aa_first(data,profile,'TopXml',context);
		
		if (data.length == 0) return [];
		return [ ajaxart.xml.xpath_of_node(data[0],id,specific,top) ];
	},
	XPathOfNodeWithTopTags: function(profile, data, context) {
		var tags = ajaxart.run(data,profile, 'TopTags', context);
		var top = aa_first(data,profile,'TopXml',context);
		if (! ajaxart.isxml(data)) return [];

		var tagsStr = "";
		for(var i=0;i<tags.length;i++) tagsStr += "," + ajaxart.totext(tags[i]) + ",";

		var out = "";
		var xml = data[0];
		var tag = "";
		
		while (xml != null && xml.nodeType != 9)
		{
			if (top != null && xml == top) break;
			if (xml.nodeType == 2) // atribute
			{
				out = "@" + xml.nodeName;
			}
			else // element
			{
				var tag = aa_tag(xml);
				if (tagsStr.indexOf(","+tag+",") > -1) {
					out = aa_text([tag],profile,'PrefixByTagToAdd',context)+ out;
					break;
				}
	
				if (out.length > 0) 
					out = xml.nodeName + "/" + out;
				else 
					out = xml.nodeName;
			}
			
			xml = ajaxart.xml.parentNode(xml);
		} 
		
		return [ out ];
	}, 
	ChangeXml : function(profile, data, context) 
	{
		var xml_src = aa_first(data,profile,'Xml',context);
		if (xml_src == null) return [];
		xml_src = [xml_src];
		if (! ajaxart.isxml(xml_src)) return [];
		var newContext = ajaxart.clone_context(context);
		ajaxart.setVariable(newContext,"InputForChanges",data);
		var changes = ajaxart.subprofiles(profile,'Change');
		
		ajaxart.each(xml_src, function(item) {
			ajaxart.each(changes,function(changeProfile) {
				ajaxart.run([item],changeProfile, "", newContext);
			});
		});
		return ["true"];		
	},
	ItemByID: function(profile, data, context) {
		var list = ajaxart.run(data,profile,'List',context);
		var id = aa_text(data,profile,'ID',context);
		
		for(var i=0;i<list.length;i++)
			if (typeof(list[i].getAttribute) != "undefined" && list[i].getAttribute('id') == id)
				return [ list[i] ];
		
		return [];
	},
	Delete: function(profile, data, context) {
		var xmls = ajaxart.run(data,profile,"Element",context);
		for(var i=0;i<xmls.length;i++) {
			var item = xmls[i];
			if (item.nodeType == 2) // attribute
			{
				var ownerElement = ajaxart.xml.parentNode(item);
				ownerElement.removeAttribute(item.nodeName);
			}
			var parent = item.parentNode;
			if (parent != null)
			{
				parent.removeChild(item);
				aa_triggerXmlChange(parent);
			}
		}
		return data;
	},
	RemoveMiddleElement: function(profile, data, context) {
		var elems = ajaxart.run(data,profile,'Element',context);
		for(var i in elems) {
			var elem = elems[i];
			if (!elem || elem.nodeType != 1) return;
			var parent = elem.parentNode;
			while (elem.firstChild) parent.appendChild(elem.firstChild);
			parent.removeChild(elem);
		}
	},
	DeleteChildren: function(profile, data, context) {
		var parent = ajaxart.run(data,profile,'ParentElement',context);
		if ( ! ajaxart.isxml(parent) ) return parent;
		var xml = parent[0];
		var hadChildren = !!xml.firstChild;
		while (xml.firstChild != null)
			xml.removeChild(xml.firstChild);
		
		if (hadChildren) aa_triggerXmlChange(xml);
		return data;
	},
	FindXmlByAttribute: function(profile, data, context) {
		var xml = aa_first(data,profile,'ParentXml',context);
		var attr = aa_text(data,profile,'Attribute',context);
		var value = aa_text(data,profile,'Value',context);
		var findAll = aa_bool(data,profile,'FindAll',context);
		
		var out = [];
		
		if (xml == null || xml.nodeType != 1 || attr == "") return [];
		var find = function(xml,attr,value,out,findAll) {
			if (xml.getAttribute(attr) == value) {
				out.push(xml);
				if (!findAll) return;
			}
			var child = xml.firstChild;
			while (child != null) {
				if (child.nodeType == 1) {
					find(child,attr,value,out,findAll);
					if (out.length > 0 && ! findAll) return;				
				}
				child = child.nextSibling;
			}
			return [];
		}
		find(xml,attr,value,out,findAll);
		return out;
	},
	DeleteAttributes: function(profile, data, context) {
		var parent = ajaxart.run(data,profile,'ParentElement',context);
		var exclude = ajaxart.run(data,profile,'Exclude',context);
		
		if ( ! ajaxart.isxml(parent) ) return parent;
		var xml = parent[0];
		if (xml.nodeType != 1) return data;
		
		var exclude_atts = {};
		for (var i=0; i<exclude.length; i++) {
			var exclude_att = ajaxart.totext(exclude[i]);
			if (exclude_att != "")
				exclude_atts[exclude_att] = true;
		}
		var names = [];
		for (var i=0; i<xml.attributes.length; i++)
			names.push(xml.attributes.item(i).name);
		for (var i=0; i<names.length; i++) {
			if (exclude_atts[names[i]] == null) 
				xml.removeAttribute(names[i]);
		}
		
		return data;
	},
	Update :function(profile, data, context) {
		var inputForChanges = ajaxart.getVariable(context,"InputForChanges");
		var newValue = ajaxart.run(inputForChanges,profile, 'NewValue', context);
		ajaxart.writevalue(data, newValue);
		return data;
	},
	ReplaceXmlElement: function(profile, data, context)
	{
		var elem = aa_first(data,profile, 'Element', context);
		var newElem = aa_first(data,profile, 'NewElement', context);
		var mode = aa_text(data,profile, 'Mode', context);

		if (newElem && typeof(newElem) == 'string') newElem = aa_parsexml(newElem);
		
		if (!elem || !newElem || elem == newElem || elem.nodeType != 1 || newElem.nodeType != 1) return;

	    if (mode == "keep original tag") {
			ajaxart.xml.copyElementContents(elem,newElem);
		} else if (mode == "replace tag") {
			ajaxart.replaceXmlElement(elem,newElem,false);
			elem = newElem;
		}
		aa_triggerXmlChange(elem);
		ajaxart.run([elem],profile,'RunOnNewElement',context);
	},
	ReplaceElement: function(profile, data, context)
	{
		var inputForChanges = ajaxart.getVariable(context,"InputForChanges");
		var elem = aa_first(data,profile, 'Element', context);
		var newElem = aa_first(inputForChanges,profile, 'NewElement', context);
		var mode = aa_text(inputForChanges,profile, 'Mode', context);
	
		if (! ajaxart.isxml(elem) ) return data;  
		if (newElem != null && ! ajaxart.isxml(newElem) ) return data;
		if (newElem == elem) return data;
		var parent = elem.parentNode;

		if (newElem != null) 
		{
		  if (mode == "keep original tag" || aa_tag(elem) == aa_tag(newElem) )
			ajaxart.xml.copyElementContents(elem,newElem);
		  else if (mode == "replace tag")
		  {
			ajaxart.replaceXmlElement(elem,newElem,false);
			elem = newElem;
		  }
		}
		else
			if (parent != null) parent.removeChild(elem);
		
		if (elem != null)
		{
			aa_triggerXmlChange(elem);
			ajaxart.run([elem],profile,'RunOnNewElement',context);
		}
		else
		{
			aa_triggerXmlChange(parent);
		}
		
		return data;
	},
	
	MoveElementAfterIndex: function(profile, data, context)
	{
		var elem = data[0];
		var after = aa_int(data,profile, 'Index', context);
	
		if (typeof(elem) == "undefined" || elem.nodeType != 1 ) return []; // Not Element  
				
		var parent = elem.parentNode;
		var tag = aa_tag(elem);

		var dest = ajaxart.xml.FirstChild(parent,tag);
		var last_of_tag = dest; // helper for last
	  	for(var i=0;i<after;i++)
	  	{
	  		last_of_tag = dest;
	  		dest = ajaxart.xml.NextSibling(dest,tag);
	  	}

		if (dest == elem) return data;
		var theElement = parent.removeChild(elem);
		if (dest == null) // last
		{
			if (last_of_tag == null || last_of_tag.nextSibling == null)
				parent.appendChild(theElement);
			else
				parent.insertBefore(theElement,last_of_tag.nextSibling);
		}
		else if (dest != null)
			parent.insertBefore(theElement,dest);
		
		return data;

	},

	MoveElement: function(profile, data, context)
	{
		var elem = data[0];
		var to = aa_text(data,profile, 'To', context);
	
		if (typeof(elem) == "undefined" || elem.nodeType != 1 ) return []; // Not Element  
		var parent = elem.parentNode;
		var tag = aa_tag(elem);

		var dest = null;
		if (to == "next")
		{
			dest = ajaxart.xml.NextSibling(elem,tag); 
			if (dest == null) return [];
			dest = ajaxart.xml.NextSibling(dest,tag); // no method insertAfter... 
			if (dest == null)
				to = "last";
		}
		if (to == "previous")
			dest = ajaxart.xml.PrevSibling(elem,tag); 
		if (to == "first")
			dest = ajaxart.xml.FirstChild(parent,tag); 
		if (to == "last")
		{
			dest = ajaxart.xml.FirstChild(parent,tag);
			var last_of_tag = dest; // helper for last
		  	while (dest != null)
		  	{
		  		last_of_tag = dest;
		  		dest = ajaxart.xml.NextSibling(dest,tag);
		  	}
			var theElement = parent.removeChild(elem);
			if (last_of_tag == null || last_of_tag.nextSibling == null)
				parent.appendChild(theElement);
			else
				parent.insertBefore(theElement,last_of_tag.nextSibling);
			return;
		}

		if (dest == elem) return data;
		if (dest != null)
		{
			var theElement = parent.removeChild(elem);
			parent.insertBefore(theElement,dest);
		}
		if (parent != null) aa_triggerXmlChange(parent);
		
		return data;
		
	},
	RegisterModifyOnXml: function (profile,data,context)
	{
		var xml = aa_first(data,profile,'Xml',context);
		var id = aa_text(data,profile,'SingletonId',context);
		ajaxart._RegModifyXmlChangeID = ajaxart._RegModifyXmlChangeID || {};
		aa_unbindXmlChange(ajaxart._RegModifyXmlChangeID[id]);

		ajaxart._RegModifyXmlChangeID[id] = aa_bindXmlChange(xml,function(changedXml) {
			ajaxart.run(changedXml ? [changedXml] : [],profile,'Action',context);
		});
	},
	RemoveAttributes: function(profile, data, context) 
	{
		if (data.length == 0 || !ajaxart.isxml(data) || data[0].nodeType != 1)
			return [];
		var attributes = ajaxart_run_commas(data,profile, 'AttributeNames', context);
		for (i in attributes) 
			data[0].removeAttribute( ajaxart.totext(attributes[i]) );
		return data;
	},
	HasAttribute: function(profile, data, context) {
	  var attr = aa_text(data,profile,'Attribute',context);
	  if ((! ajaxart.isxml(data)) || data[0].nodeType != 1) return [];
	  if (aa_hasAttribute(data[0],attr)) 
		  return ["true"];
	  return [];
	},
	HasParent: function(profile, data, context) {
		if (! ajaxart.isxml(data)) return [];
		if (data[0].parentNode == null) return [];
		return ["true"];
	},
	AddSiblings: function(profile, data, context) {
		var elem = aa_first(data,profile,'ExistingElement',context);
		var newElems = aa_run(data,profile,'NewElements',context);
		var addAfter = aa_text(data,profile,'Position',context) == 'after';
		var out = [];

		if (!elem || !elem.parentNode) return;
		for(var i=0;i<newElems.length;i++) {
			if (!newElems[i]) continue;
			var newElem = aa_importNode(newElems[i],elem);
			out.push(newElem);

			if (addAfter)
				elem = $(newElem).insertAfter(elem)[0];
			else
				elem.parentNode.insertBefore(newElem,elem);
		}
		
		aa_run(out,profile,'DoOnNewChild',context);
		aa_triggerXmlChange(elem.parentNode);
	},
	AddChildInPosition: function(profile, data, context) {
		var inputForChanges = ajaxart.getVariable(context,"InputForChanges");
		var child = aa_first(inputForChanges,profile, 'Child', context);
		var posObj = aa_first(inputForChanges,profile, 'Position', context);
		if (child == null || ! ajaxart.isxml(child) || ! ajaxart.isxml(data)) return data;
		var identicalTags = aa_bool(data,profile,'IdenticalTags',context);
		
		var parent=data[0];
		var tag = aa_tag(child);
		
		var insertBeforeMe = null;
		if (posObj != null) 
		{
			var pos = parseInt(ajaxart.totext(posObj));
			var counter=0;
			var node = data[0].firstChild;
			while (node != null)
			{
				if (node.nodeType == 1 && ( aa_tag(node) == aa_tag(child) || !identicalTags))
				{
					if (++counter == pos) insertBeforeMe = node;
				}
				node = node.nextSibling;
			}
		}
		child = aa_importNode(child, data[0]);
		
		if (insertBeforeMe == null)
		{
			// find last of tag and add after it
			var dest = ajaxart.xml.FirstChild(parent,tag);
			var last_of_tag = dest; // helper for last
		  	while(dest != null)
		  	{
		  		last_of_tag = dest;
		  		dest = ajaxart.xml.NextSibling(dest,tag);
		  	}

			if (last_of_tag == null || last_of_tag.nextSibling == null)
					parent.appendChild(child);
				else
					parent.insertBefore(child,last_of_tag.nextSibling);
		}
		else
			data[0].insertBefore(child,insertBeforeMe);
		
		ajaxart.run([child],profile,'DoOnNewChild',context);
		aa_triggerXmlChange(parent);
		
		return [child];
	},
	RemoveXmlAttribute: function(profile, data, context) {
		var parent = aa_first(data,profile,'Element',context);
		var attr = aa_text(data,profile,'AttributeName',context);
		if (parent && parent.nodeType == 1 && aa_hasAttribute(parent,attr)) {
			parent.removeAttribute(attr);
			aa_triggerXmlChange(parent);
		}
	},
	RemoveXmlNode: function(profile, data, context) {
		var xml = aa_first(data,profile,'Xml',context);
		if (!xml || !xml.nodeType) return;
		var parent = aa_xpath(xml,'..')[0];
		if (!parent) return;

		if (xml.nodeType == 2) // attribute
			parent.removeAttribute(xml.nodeName);

		if (xml.nodeType == 1)
			parent.removeChild(xml);

		aa_triggerXmlChange(parent);
	},
	AddXmlChildren: function(profile, data, context) {
		var parent = aa_first(data,profile,'Parent',context);
		var children = ajaxart.run(data,profile,'Children',context);
		var clone = aa_bool(data,profile,'CloneChildren',context);
		var asFirst = aa_bool(data,profile,'AddAsFirst',context);
		if (!parent) return;
		
		var adddedChildren = [];
		for(var i=0;i<children.length;i++) {
			if (children[i].nodeType != 1) continue;
			var item = (clone) ? children[i].cloneNode(true) : children[i];
			adddedChildren.push( aa_xml_appendChild(parent,item,asFirst) );
		}
		
		if (children.length > 0) aa_triggerXmlChange(parent);
		
		ajaxart.run(adddedChildren,profile,'DoOnAddedChildren',context);
	},
	ReplaceChildren: function(profile, data, context) {
		var inputForChanges = ajaxart.getVariable(context,"InputForChanges");
		var children = ajaxart.run(inputForChanges,profile, 'Children', context);
		var clone = aa_bool(inputForChanges,profile,'CloneChildren',context);
		if (data.length == 0) return [];
		
		while (data[0].firstChild != null)
			data[0].removeChild(data[0].firstChild);
		
		ajaxart.each(children,function(item) {
			if (!clone)
				aa_xml_appendChild(data[0],item);
			else
				aa_xml_appendChild(data[0],ajaxart.xml.clone([item]));
		});
		if (children.length > 0) aa_triggerXmlChange(data[0]);
		return data;
	},
	PerformChanges : function(profile, data, context) {
		var changeProfiles = ajaxart.subprofiles(profile, 'Change');
		for(var i=0;i<changeProfiles.length;i++)
			ajaxart.run(data,changeProfiles[i],'',context);
		return ["true"];
	},
	MultiChange : function(profile, data, context) {
		var changeProfiles = ajaxart.subprofiles(profile, 'Change');
		var inputforChanges = ajaxart.getVariable(context,"InputForChanges");
		var dataForChanges = ajaxart.run(inputforChanges,profile, 'DataForChanges', context);
		var performChangesOn = ajaxart.run(data,profile, 'PerformChangesOn', context);
		var newContext = ajaxart.clone_context(context);

		ajaxart.each(dataForChanges, function(item) {
			ajaxart.setVariable(newContext,"InputForChanges",[item]);
			if (performChangesOn.length == 0) {
				for(var i=0;i<changeProfiles.length;i++)
					ajaxart.run(data,changeProfiles[i],'',newContext);
			} else 
				ajaxart.each(performChangesOn, function(change_item) {
					for(var i=0;i<changeProfiles.length;i++)
						ajaxart.run([change_item],changeProfiles[i],'',newContext);
				});
		});
			
		return data;
	},
	UpTillMatchesFilter: function(profile, data, context)
	{
		if (! ajaxart.isxml(data)) return [];
		var xml = data[0];
		if (aa_bool([xml],profile,'Filter',context))
			return [xml];
		var xml = ajaxart.xml.parentNode(xml);
		while (xml != null && xml.nodeType == 1)
		{
			if (aa_bool([xml],profile,'Filter',context))
				return [xml];
			xml = xml.parentNode;
		}
		return [];
		
	},
	RemoveInnerText: function(profile, data, context)
	{
		if (! ajaxart.isxml(data)) return data;
		var xml = data[0];
		if (xml.nodeType == 1)
		{
			 var node = xml.firstChild;
			 while (node != null)
			 {
				var prev = node;
				node=node.nextSibling;
				if (prev.nodeType == 3 || prev.nodeType == 4) xml.removeChild(prev);
			 }			
			 aa_triggerXmlChange(data[0]);
		}
		return data;
	},
	InnerTextValue: function(profile, data, context) 
	{
		if (!ajaxart.isxml(data)) return [];
		
		var node = data[0].firstChild;
		while (node != null) {
			if (node.nodeType == 3 || node.nodeType == 4) return [node];
			node=node.nextSibling;
		}
		
		return [];
	},
	InnerText: function(profile, data, context) {
		var out = [];
		ajaxart.each(data,function(item) {
			if (! ajaxart.isxml(item)) {
				return [];
			}
			if (item.nodeType == 2) return [item];
			var text_node = item.firstChild;
			if (text_node == null)	{
				text_node = item.ownerDocument.createTextNode("");
				item.appendChild(text_node);
			}
			out.push(text_node);
		});
		return out;
	},
	IndexOfElement: function(profile,data,context)
	{
		var startIndex = aa_text(data,profile,'IndexOfFirstElement',context);
		if (ajaxart.isxml(data) && data[0].nodeType == 1 && data[0].parentNode != null)
		{
			var xml_item = data[0];
			var count = startIndex;

			for (var i=0;i<xml_item.parentNode.childNodes.length;i++)
			{
				var brother = xml_item.parentNode.childNodes.item(i);
				if (brother.nodeType == 1 && aa_tag(brother) == aa_tag(xml_item))
				{
					if ( brother == xml_item ) return [""+count];
					count++;
				}
			}
		}
		return [];
	},
	IsAttribute: function(profile,data,context)
	{
		if (ajaxart.isxml(data) && data[0].nodeType == 2 ) return ["true"];
		return [];
	},
	AreSiblings: function(profile,data,context)
	{
  		var parent = null;
  		for (var i=0;i < data.length; i++)
  		{
  			var new_parent = data[i].parentNode;
  			if (new_parent != parent && i != 0) 
  				return [];
  			parent = new_parent;
  			if (parent == null || parent == undefined) 
  				return [];
  		}
		return ["true"];
	},
	IsElement: function(profile,data,context)
	{
		if (ajaxart.isxml(data) && data[0].nodeType == 1 ) return ["true"];
		return [];
	},
	IsCData: function(profile,data,context)
	{
		if (ajaxart.isxml(data) && data[0].nodeType == 4 ) return ["true"];
		return [];
	},
	ByTag: function(profile,data,context)
	{
		var tag = aa_text(data,profile, 'Tag', context);
		if (tag == "") return [];
		var xmlForDocument = aa_first(data,profile,'XmlForDocument',context);
		var elem = aa_createElement(xmlForDocument,tag);
		
		if (elem == null) return [];
		var newContext = ajaxart.clone_context(context);
		ajaxart.setVariable(newContext,"InputForChanges",data);
		var changes = ajaxart.subprofiles(profile,'Change');
		for(var i=0;i<changes.length;i++)
			ajaxart.run([elem],changes[i], "", newContext);
		return [elem];
	},
	ElementOfDynamicTag: function(profile,data,context)
	{
		var tag = aa_text(data,profile, 'Tag', context);
		if (tag.length == 0) return [];
		var elem = aa_createElement(data[0],tag);  
		if (elem == null) return [];
		var newContext = ajaxart.clone_context(context);
		ajaxart.setVariable(newContext,"InputForChanges",data);
		var changes = ajaxart.subprofiles(profile,'Change');
		ajaxart.each(changes,function(changeProfile) {
			ajaxart.run([elem],changeProfile, "", newContext);
		});
		return [elem];
	},
	XmlWithChangedTag: function(profile,data,context)
	{
		var tag = aa_text(data,profile, 'Tag', context);
		var base = aa_first(data,profile, 'BaseXml', context);
		if (tag.length == 0 || (! ajaxart.isxml(base)) ) return [];
		var elem = aa_createElement(base,tag);  
		if (elem == null) return [];
		ajaxart.xml.copyElementContents(elem,base);
		return [elem];
	},
	FindElementByID: function(profile,data,context)
	{
		var id = aa_text(data,profile, 'Id', context);
		if (data.length == 0) return [];
		result = ajaxart.xml.findById(data[0],id);
		if (result == null) return [];
		return [result];
	},
	Clone: function(profile,data,context)
	{
		var xml = aa_first(data,profile,'Xml',context);
		if (xml == null) return [];
		if (!ajaxart.isxml(xml)) return [];

		return [ ajaxart.xml.clone([xml]) ];
	},
	TextRowToXml: function(profile,data,context)
	{
		var tag = aa_text(data,profile,'Tag',context);
		var atts = aa_text(data,profile,'Attributes',context);
		var sep = aa_text(data,profile,'Separator',context);
		
		var src_list = data[0].split(sep);
		var atts_list = atts.split(',');
		var result = aa_createElement(data[0],tag);  

		for(var i=0;i<atts_list.length;i++)
			result.setAttribute(atts_list[i],src_list[i]);
		
		return [ result ];
	},
	CopyAttributes: function(profile,data,context)
	{
		var inputForChanges = ajaxart.getVariable(context,"InputForChanges");
		var source = ajaxart.run(inputForChanges, profile, 'SourceElement', context);
		var overrideExistingAttributes = aa_bool(data,profile, 'OverrideExistingAttributes', context);
		
		if (data.length == 0 || source.length == 0 || source[0].nodeType != 1 || data[0].nodeType != 1) return data;

		var atts = source[0].attributes;
		if (atts != null)
		for (var i = 0; i < atts.length; i++) {
			var attName = atts.item(i).nodeName;
			if (overrideExistingAttributes || aa_hasAttribute(source[0],attName) )
				data[0].setAttribute(attName, source[0].getAttribute(attName) || '' );
		}

		return data;
	},
	OverrideAttributesAndElements: function (profile,data,context)
	{
		var inputForChanges = ajaxart.getVariable(context,"InputForChanges");
		var source = aa_first(inputForChanges, profile, 'SourceXml', context);
		if (data.length == 0 || source == null || source.nodeType != 1 || data[0].nodeType != 1) return data;
		var target = data[0];
		
		var atts = source.attributes;
		for (var i = 0; i < atts.length; i++) {
			var attName = atts.item(i).nodeName;
			  target.setAttribute(attName, source.getAttribute(attName) || '');
		}

		jQuery(target).empty();
		
		var child = source.firstChild; 
		while (child != null)
		{
			if (child.nodeType == 1)
			  target.appendChild(child.cloneNode(true));
			child = child.nextSibling;
		}
		
		return data;
	},
	IfThenElse : function (profile,data,context)
	{
		var passed = aa_bool(data,profile,'If',context);
		if (passed)
			ajaxart.run(data,profile,'Then',context);
		else
			ajaxart.run(data,profile,'Else',context);
		return data;
	},
	  MoveBefore: function (profile,data,context)
	  {
		if (data.length == 0) return [];
	    var item = data[0].Item[0];
	    var to = data[0].BeforeItem[0];
		if (ajaxart.isxml(to) && ajaxart.isxml(item) )
			if (to.parentNode == item.parentNode && item.parentNode != null)
				to.parentNode.insertBefore(item,to);
	    return [];
	  },
	  MoveToEnd: function (profile,data,context)
	  {
		if (data.length == 0) return [];
	    var item = data[0];
		if (ajaxart.isxml(item) && item.parentNode != null)
			item.parentNode.appendChild(item);
				
	    return [];
	  },
	CleanEmptyAttributes: function (profile,data,context)
	{
		var recursive = aa_bool(data,profile,'Recursive',context);
		var ignore = ajaxart.run(data,profile,'IgnoreAttributes',context);
		var ignore_str = "";
		for(var i=0;i<ignore.length;i++) ignore_str += "," + ignore[i] + ",";
		
		if (! ajaxart.isxml(data)) return [];
		
		var cleanElement = function(element,ignore_str,recursive) {
			for (var i=0;i<element.attributes.length;i++) {
				var attr = element.attributes.item(i).name;
				if ((element.getAttribute(attr) == "") && (ignore_str.indexOf(","+attr+",") == -1) )
				{
					element.removeAttribute(attr);
					i--;
				}
			}
			if (recursive) {
				var elem = element.firstChild;
				while (elem != null) {
					if (elem.nodeType == 1) cleanElement(elem,ignore_str,true);
					elem = elem.nextSibling;
				}
			}
		}
		if (data[0].nodeType == 1)
			cleanElement(data[0],ignore_str,recursive);
		
		return ["true"];
	},
	XmlInfo: function (profile,data,context)
	{
		if (! ajaxart.isxml(data)) return;
		var info = aa_getXmlInfo(data[0],context);
		if (info == null) return [];
		return [info];
	},
	UpTillHasXmlInfoWithMethod: function (profile,data,context)
	{
		if (! ajaxart.isxml(data)) return;
		var xml = data[0];
		if (xml.nodeType != "1") xml = aa_xpath(xml,'..')[0];
		
		while (xml.nodeType == 1) {
		  var info = aa_getXmlInfo(xml,context,true);
		  if (info) return [info];
		  xml = xml.parentNode;
		}
	},
	RunMethodOnXml: function (profile,data,context)
	{
		var xml = aa_first(data,profile,'Xml',context);
		var method = aa_text(data,profile,'Method',context);
		var info = aa_getXmlInfo(xml,context);
		if (!info || ! info[method]) return [];
		return info[method](data,context);
	},
	XmlQuery: function (profile,data,context)
	{
		var items = ajaxart.run(data,profile,'Items',context);
		var query = aa_first(data,profile,'Query',context);
		if (query == null) return items;
		
		var subitems = aa_xpath(query,'xmlfilter');
		if (subitems.length == 0) return items;
		var current = items;
		var out = [];
		
		for(var i=0;i<subitems.length;i++) {
			var xmlfilter = subitems[i];
			out = [];
			var xpath = '' + xmlfilter.getAttribute('xpath');
			var op = '' + xmlfilter.getAttribute('op');
			var value = '' + xmlfilter.getAttribute('value') || '';
			if (op == 'contains') var valueLower = value.toLowerCase();
			
			var disabled = '' + xmlfilter.getAttribute('disabled');
			if ("true" == disabled) { out = current; continue; }
			
			if (op == 'date_between') var from = aadate_date2int('' + xmlfilter.getAttribute('from'));
			// to fix: assuming 'to' has no time.
			if (op == 'date_between') var to = aadate_date2int('' + xmlfilter.getAttribute('to')) + 1440;
			if (op == 'date_between' && to == 1440) to = 12949120000;
			var oneOfList = [];
			if (op == 'one of') oneOfList = (''+xmlfilter.getAttribute('value')).split(',');
			
			for(var j=0;j<oneOfList.length;j++)
				oneOfList[j] = ',' + oneOfList[j] + ',';
			
			for (var j=0;j<current.length;j++)
			{
				var item = current[j];
				var inneritem = item;
				if (xpath != null && xpath.length > 0)
				{
					if (xpath[0] == "@")
					{
						var fld = xpath.split("@")[1];
						inneritem = '' + item.getAttribute(fld);
					}
					else if (xpath == "by xtml")
					{
						inneritem = aa_first([item],xmlfilter,'xpath_by_xtml',context);
						if (inneritem == null) continue;
					}
					else {
					  var inneritemslist = aa_xpath(item,xpath);
					  if (inneritemslist.length == 0) continue;
					  inneritem = inneritemslist[0];
					}
				}
				var inneritemValue = ajaxart.totext(inneritem);
				if (op == '=') {
					if ( value == "" || inneritemValue == value ) out.push(item);
				}
				if (op == '!=') {
					if ( inneritemValue != value ) out.push(item);
				}
				if (op == '<' || op == "<=" || op == ">" || op == ">=") {
					try {
					  var valint = parseInt(value);
					  var itemint = parseInt(inneritemValue);
					  if (op == '<' && itemint < valint ) out.push(item);
					  if (op == '<=' && itemint <= valint ) out.push(item);
					  if (op == '>' && itemint > valint ) out.push(item);
					  if (op == '>=' && itemint >= valint ) out.push(item);
					} catch(e) { continue; }
				}
				if (op == 'contains') {
					if (inneritemValue.toLowerCase().indexOf(valueLower) > -1)
						out.push(item);
				}
				else if (op == 'one of' && xmlfilter.getAttribute('value') == "_all") {
					out.push(item);
				}
				else if (op == 'one of' && xmlfilter.getAttribute('value') == "") {
					out.push(item);
				}
				else if (op == 'one of' && xmlfilter.getAttribute('value') == "_blank") {
					if (inneritemValue == '')
						out.push(item);
				}
				else if (op == 'one of') {
					inneritemValue = "," + inneritemValue + ",";
					for(var k=0;k<oneOfList.length;k++) 
						if (inneritemValue.indexOf(oneOfList[k]) != -1) 
							out.push(item);
				}
				else if (op == 'date_between') {
					var intValue = aadate_date2int(inneritemValue);
					if (from <= intValue && intValue <= to)
						out.push(item);
				}
				else if (op == 'xtml') {
					var xtml_list = aa_xpath(xmlfilter,'xtml');
					if (xtml_list.length == 0) continue;
					if ( aa_bool([inneritem],xtml_list[0],'',context) )
					  out.push(item);
				}
			}
			
			current = out;
		}
		return out;
	},
    Switch: function (profile,data,context)
    {
	  return aa_switch(profile,data,context);
    },
    PerformChangeOnElements: function (profile,data,context)
    {
		  var elements = ajaxart.run(data,profile,'Elements',context);
		  for (var i in elements)
				ajaxart.run([elements[i]],profile,'Change',context);
    },
    PerformChangeWithManyInputs: function (profile,data,context)
	{
  	  var inputs = ajaxart.run(data,profile,'Inputs',context);
  	  var local_context = ajaxart.clone_context(context); 
  	  for (var i in inputs) {
  			ajaxart.setVariable(local_context,"InputForChanges",[ inputs[i] ]);
  			ajaxart.run(data,profile,'Change',local_context);
  	  }
  	  return data;
	},
	Filter: function (profile,data,context)
	{
		var items = ajaxart.run(data,profile,'Items',context);
		var filter = aa_text(data,profile,'Filter',context);
		
		var out = [];
		for(var i=0;i<items.length;i++)
		{
			var xpath = "." + filter;
			if (aa_xpath(items[i],xpath).length > 0)
				out.push( items[i] );
		}
		
		return out;
	},
	Siblings: function (profile,data,context)
	{
		var xml_item = aa_first(data,profile,'Element',context);
		if (!xml_item || xml_item.nodeType != 1 || !xml_item.parentNode) return [];
		var onlyWithSameTag = aa_bool(data,profile,'OnlyWithSameTag',context);
		if (xml_item.nodeType != 1)
			return [];
		
		var out = [];
		for (i=0;i<xml_item.parentNode.childNodes.length;i++)
		{
			var sibling = xml_item.parentNode.childNodes.item(i);
			if (sibling != xml_item && sibling.nodeType == 1)
				if (aa_tag(sibling) == aa_tag(xml_item) || !onlyWithSameTag )
					out.push(sibling);
		}
		return out;		
	},
	XmlParsingError: function (profile,data,context)
	{
		var xmlAsText = aa_text(data,profile,'XmlAsText',context);
		var error = [];
		aa_parsexml(xmlAsText,"",error,true);
		return error;
	},
	WriteCData: function (profile,data,context)
	{
		var element = aa_first(data,profile,'Element',context);
		var cdata_text = aa_text(data,profile,'CDataText',context);

		aa_write_cdata(element,cdata_text);
	},
	CDataValue: function (profile,data,context)
	{
		var element = aa_first(data,profile,'Element',context);
		if (!element) return [];
		var cdataValue = aa_cdata_value(element);
		return (cdataValue) ? [cdataValue] : [];
	},
	CData: function (profile,data,context)
	{
		var cdataValue = aa_cdata_value(profile);
		if (!cdataValue) return [];
		if (aa_bool(data,profile,'DynamicContent',context))
	    	return ajaxart.dynamicText(data,cdataValue,context,data,false);
	},
	CDataRef: function (profile,data,context)
	{
		var element = aa_first(data,profile,'Element',context);
		if (aa_cdata_value(element) == null)
			aa_write_cdata(element,'');
		return [element];
	},
	CreateXml: function (profile, data, context)
	{
		var tag = aa_text(data,profile,'Tag',context);
		var xml = aa_createElement(null, tag);
		var attributes = ajaxart.childElems(profile,"Attribute");
		for (var i=0; i<attributes.length; i++) {
			var attrName = aa_text(data,attributes[i],'Name',context);
			var value = aa_text(data,attributes[i],'Value',context);
			if (attrName && value)
				xml.setAttribute(attrName,value);
		}
		var elements =  ajaxart.runsubprofiles(data,profile,'Element',context);
		for (var i=0; i<elements.length; i++)
			if (ajaxart.isxml(elements[i]))
				xml.appendChild( aa_importNode(elements[i], xml) );

		var changes = ajaxart.subprofiles(profile,'Change');
		ajaxart.each(changes,function(changeProfile) {
			ajaxart.run([xml],changeProfile, "", aa_ctx(context, {InputForChanges: data}));
		});

		return [xml];
	},
	CDataNode: function(profile,data,context) {
		var tag = aa_text(data,profile,'Tag',context);
		var xml = aa_createElement(null, tag);
		var cdata_text = aa_text(data,profile,'CDataContent',context);
		aa_write_cdata(xml,cdata_text);
		return [xml];
	}
});


ajaxart.xml.findById = function(node,id)
{
	if (! ajaxart.isxml(node)) return null;
	
	if (node.nodeType != 1)	return null; // not element
	if (node.getAttribute('id') == id) return node;
	var child = node.firstChild;
	while (child != null)
	{
		var result = ajaxart.xml.findById(child,id); 
		if (result != null) return result; 
		child = child.nextSibling;
	}
	return null;
}

ajaxart.xml.xpath_of_node = function(xml,id,specific,top)
{
	if ( ! ajaxart.isxml(xml) ) return "";
	
	var result = "";
	var xml_item = xml;
	if (top == xml) return "";
	while (xml_item != null)
	{
		var slash = "/";
		if (result == "") slash = "";
		var xpath_elem = "";
		if (xml_item.nodeType == 9)	{ // document
			xml_item = null;
			continue;
		}
		if (xml_item.nodeType == 1)	// element
		{
			if (xml_item.parentNode == null || xml_item.parentNode.nodeType == 9) // top level
			{
				xml_item = null;
				continue;
			}
			xpath_elem = '' + aa_tag(xml_item);
			if (specific)
			{
				if (id.length > 0 && aa_hasAttribute(xml_item,id))
					xpath_elem += '[@'+id+"='"+ xml_item.getAttribute(id) +"']";
				else {
					if (typeof(xml_item.parentNode) != "undefined")
					{
						var my_count = 0;
						var count = 0;
						var i=0;
	
						for (i=0;i<xml_item.parentNode.childNodes.length;i++)
						{
							var brother = xml_item.parentNode.childNodes.item(i);
							if (brother.nodeType == 1 && aa_tag(brother) == aa_tag(xml_item))
							{
								count++;
								if ( brother == xml_item ) my_count = count;
							}
						}
						if (my_count > 0 && count > 1) {
							var id_empty = !aa_hasAttribute(xml_item,"id") || xml_item.getAttribute("id") == "";
							var name_empty = !aa_hasAttribute(xml_item,"name") || xml_item.getAttribute("name") == "";
							if ( !id_empty || !name_empty ) {
								if (!id_empty)
									xpath_elem += "[@id='" + xml_item.getAttribute("id") + "']";
								else
									xpath_elem += "[@name='" + xml_item.getAttribute("name") + "']";
							}
							else 
								xpath_elem += "[" + my_count + "]";
						}
					}
				}
			}
		}
		if (xml_item.nodeType == 2) // attribute
			xpath_elem = "@" + xml_item.name;
		
		if (xpath_elem != "")
			result = xpath_elem + slash + result;

		if (id.length > 0 && xml_item.nodeType == 1 && aa_hasAttribute(xml_item,id))
			return result;
		
		var orig_item = xml_item;
		xml_item = xml_item.parentNode;
		if (xml_item == null)
			xml_item = ajaxart.xml.parentNode(orig_item);
		if (xml_item == top) xml_item = null;
	}
	return result;
};

ajaxart.xml.set_tagname = function(old_elem, tagName) 
{
	if (old_elem == null) return null;

	var new_elem = aa_createElement(old_elem, tagName); // aa_parsexml("<" + tagName + "/>"); //old_elem.ownerDocument.createElement(tagName);
	ajaxart.xml.copyElementContents(new_elem,old_elem);

	if (old_elem.parent != null)
		old_elem.parent.replaceChild(new_elem, old_elem);
	return new_elem;
};

ajaxart.xml.copyElementContents = function(target,source,keepSourceContent)
{
	if (source.nodeType != 1 || target.nodeType != 1) return;
	// remove all children & attributes
	if (!keepSourceContent) {
		while(target.firstChild)
			target.removeChild( target.firstChild );
		
		while (target.attributes.length > 0)
			target.removeAttribute(target.attributes.item(0).name);
	}
	
	// copy all attributes
	var atts = source.attributes;
	if (atts != null)
		for (var i = 0; i < atts.length; i++)
			target.setAttribute(atts.item(i).name, atts.item(i).value);

	source = aa_importNode(source,target);
	
	// copy all sub
	var childNode = source.firstChild;
	var ownerDoc = target.ownerDocument;
	while (childNode != null)
	{
		var item = childNode;
		if (typeof(childNode.cloneNode) != "undefined")
			target.appendChild(childNode.cloneNode(true));
		else if (childNode.nodeType == 3 ) // text node
			target.appendChild(ownerDoc.createTextNode(childNode.nodeValue));
		else if (childNode.nodeType == 4) // cdata
			target.appendChild(ownerDoc.createCDATASection(childNode.nodeValue));
		
		childNode = childNode.nextSibling;
	}
}

ajaxart.xml.setAsOnlyChildElem = function(parent,newchild)
{
	if ( parent == null || parent.childNodes == null ) return;
	var node = parent.firstChild;
	while (node != null)
	{
		var next_sibling = node.nextSibling;
		if (node.nodeType == 1) { // element
			parent.removeChild(node);
		}
		node = next_sibling;
	}
	aa_xml_appendChild(parent,newchild);
};
ajaxart.xml.innerTextStr = function(element)
{
	var node = element.firstChild;
	while (node != null) {
		if (node.nodeType == 3 || node.nodeType == 4) return node.nodeValue;
		node=node.nextSibling;
	}
	return "";
}
ajaxart.xml.FirstChild = function(parent,tag)
{
	var res = parent.firstChild;
	if (res == null) return null;
	if (res.nodeType != 1 || aa_tag(res) != tag) 
		res = ajaxart.xml.NextSibling(res,tag);

	return res;
};
ajaxart.xml.NextSibling = function(elem,tag)
{
	if (elem == null) return null;
	var res = elem.nextSibling;
	if (res == null) return null;
	if (res.nodeType != 1) return ajaxart.xml.NextSibling(res,tag);
	if (tag != null && aa_tag(res) != tag) return ajaxart.xml.NextSibling(res,tag);
	return res;
}
ajaxart.xml.PrevSibling = function(elem,tag)
{
	if (elem == null) return null;
	var res = elem.previousSibling;
	if (res == null) return null;
	if (res.nodeType != 1) return ajaxart.xml.PrevSibling(res,tag);
	if (tag != null && aa_tag(res) != tag) return ajaxart.xml.PrevSibling(res,tag);
	return res;
}
ajaxart.xml.root = function(node)
{
	if (!node) return null;
	var parent = ajaxart.xml.parentNode(node);
	if (parent == null) return node;
	var prev,next = parent;
	while (next != null && next.nodeType == 1)
	{
		prev = next;
		next = next.parentNode;
	}
	return prev;
}
ajaxart.xml.autosave = function(xml,attachment,saveAction) 
{
	var savefunc = function(force) {
		if (attachment.saving == true && !force) return false;
		
		attachment.saving = true;
		var success = aa_bool([xml],attachment.profile,'SaveAction',attachment.context);
		if (success) attachment.modified = false;
		attachment.saving = false;
		
		return true;
	}
	if (attachment.autosavedelay == 0) savefunc();
	else 
		aa_delayedRun(savefunc,xml,2500,6000);
};
function ajaxart_delete_child_elem(xml,tag)
{
	var child= xml.firstChild;
	while (child != null) {
		if (aa_tag(child) == tag) { xml.removeChild(child); return; }
		child = child.nextSibling;
	}
		
}
function aa_xmlbyid(list,id)
{
  for(var i=0;i<list.length;i++)
	  if (id == list[i].getAttribute('id')) return list[i];
  return null;
}

function aa_cdata_value(element) {
	if (!element) return null;
	for (var child = element.firstChild; child!=null; child=child.nextSibling)
		if (child.nodeType == 4 && child.nodeValue)
			return child.nodeValue;
	return null;
}

function aa_write_cdata(element,value) {
	if (!element) return;
	value = value || '';
	
	while (element.firstChild) element.removeChild(element.firstChild);  // delete all children first
	var cdata = element.ownerDocument.createCDATASection(value.replace(/]]>/g,']] >'));
	element.appendChild(cdata);
	aa_triggerXmlChange(element);
}

function aa_xml_appendChild(parent,child,asFirst) {
	try {
	  if ( !ajaxart.isxml(parent) ) { ajaxart.log("cannot append to non-xml parent","error");return; }
	  if (child != null && child.nodeType == 1 && parent != null)
	  {
		  child = aa_importNode(child, parent);
		  if (asFirst && parent.firstChild)
			  parent.insertBefore(child,parent.firstChild);
		  else
			  parent.appendChild(child);		  
		  return child;
	  }
	} catch(e) { ajaxart.logException(e);}	
}


function aa_xpath_text(xml,xpath) {
	return aa_totext(aa_xpath(xml,xpath));
}
function aa_xpath_with_hash(xml,xpath) {
	// e.g. %$Data/person[#homer]/@age -> which matches for %$Data/person[@id='homer']/@age%
	var id = xpath.match(/\[\#([^\]]*)\]/)[1];
	var fixed_xpath = xpath.replace('[#'+id+']',"[@id='"+id+"']");
	return aa_xpath(xml,fixed_xpath);
}

ajaxart.xml2text = function(xml) 
{
	if (xml == null) return '';

	if (! ajaxart.ishtml(xml))
		return ajaxart.xml.prettyPrint(xml,"",true);
	
	if (aa_isArray(xml))
	{
		if (xml.length > 0 ) return ajaxart.xml2text(xml[0]);
		return '';
	}
	return aa_xml2htmltext(xml);
};
ajaxart.xml.clone = function(xml)
{
	if (xml.length == 0) return null;
	return xml[0].cloneNode(true);
}
ajaxart.xml.prettyPrint = function(xml,indent,compact)
{
    if (compact) indent = "";
    var newline = compact ? "" : "\r";
	if (xml == null) return "";
	if (aa_isArray(xml))
	{
		if (xml.length > 0 ) return ajaxart.xml.prettyPrint(xml[0],indent,compact);
		return "";
	}

    if (typeof(indent) == "undefined") indent = "";
    if (! ajaxart.isxml(xml)) return xml;
    if (xml.nodeType == 2 || xml.nodeType == 3) 
    	return aa_xmlescape(xml.nodeValue);
    if (xml.nodeType == 4) // cdata
    	return '<![CDATA[' + xml.nodeValue + String.fromCharCode(93) + ']>';	// last 2 parts are separated so this js code could be embedded in xml
    if (xml.nodeType == 8) return ''; // comment
    // head
    var out = indent + "<" + aa_tag(xml);

	var atts = xml.attributes;
	if (atts != null) {
		for (var i = 0; i < atts.length; i++)
		{
			var val = aa_xmlescape(atts.item(i).value).replace(/&apos;/g, "'");
			// var name = atts.item(i).localName || atts.item(i).name;
			var name = atts.item(i).name;
			if (name=='xmlns') continue;
			out += " " + name + '="'+ val +'"';
		}
	}
    if (xml.childNodes.length == 0) out += "/>"
    else out += ">";

    // child elements
    var childs_length = xml.childNodes.length;
    if (childs_length == 1 && (xml.childNodes[0].nodeType == 3)) // || xml.childNodes.item(0).nodeType == 4)) // inner text
    	out += aa_xmlescape(xml.childNodes[0].nodeValue);
    else
    {
    	var only_cdata = false;
    	for (var i = 0; i < childs_length; i++)
    	{
    		var child = xml.childNodes[i];
    		if (child.nodeType == 4) {  // cdata (no need for newline and indents)
    			out += ajaxart.xml.prettyPrint(child);
    			if (childs_length == 1) only_cdata=true;
    		} 
    		else if (child.nodeType != 3) 
    			out += newline + ajaxart.xml.prettyPrint(child,indent + "  ",compact);
    	}
    	if (childs_length > 0 && !compact && !only_cdata) out += newline + indent;
    }
    if (xml.childNodes.length > 0) out += "</" + aa_tag(xml) + ">";
    return out;
} 
ajaxart.isxmlelement = function(xml)
{
	return (ajaxart.isxml(xml) && xml.nodeType == 1);
};
jBart.xpath = function(xml,xpath,createIfDoesNotExist) {
	return aa_xpath(xml,xpath,createIfDoesNotExist);
}

function aa_xpath(xml,xpath,createIfNotExist,defaultValue) {
	if (!xpath) return [xml];
    if (xpath.charAt(0) == "!") 
    	return aa_xpath(xml,xpath.substring(1,xpath.length),true);

	if (!xml || !xml.nodeType ) return [];
	var result = [];

	var isJBartXPath = xpath.indexOf('[#') > -1;

	if (isJBartXPath && !createIfNotExist) 
		return aa_xpath_with_hash(xml,xpath);

	if (!isJBartXPath) {
		try {		
			if (window.jBartNodeJS) 
				result = window.jBartNodeJS.xpath(xml,''+xpath);
			else {
				var isIE =  /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);

				if (isIE && typeof(xml.selectNodes) != "undefined" ) // IE && xml
				{
					xml.ownerDocument.setProperty("SelectionLanguage", "XPath");
					var nodes = xml.selectNodes(""+xpath);
					for (var i=0;i<nodes.length;i++)
						result.push(nodes[i]);
				}	else {    
					// Firefox or html in IE
					var docForXpath = xml.ownerDocument;
					if (window.jbUsingJSXPath) docForXpath = document;
					var iter = (!window.jbUsingJSXPath) ? docForXpath.evaluate(xpath, xml, null,0, null) : docForXpath.evaluate2(xpath, xml, null,0, null);

					if (iter) 
					{
						var node = iter.iterateNext();
						while (node) {
							result.push(node);
							node = iter.iterateNext();
						}
					}
				}
			}
		}
		catch (e) {
			var xmltext = (ajaxart.xml2text && ajaxart.xml2text(xml).substring(0,50)) || '';
			log( 'error calculating xpath: ' + xpath + ", xml:" +  xmltext + '  ' + (e.stack || e.message || ''),"warning"); 
	//		ajaxart.log( e.message,"error"); 
			}
		if (result.length > 0 && result[0].nodeType == 9) // document
			return [];
	}
	
	if (result.length == 0 && createIfNotExist)
	{
		try {
			var subpath = xpath;
			var item = xml;
			while (subpath.indexOf('/') > -1 )
			{
				var pos = subpath.indexOf('/');
				var tag = subpath.substring(0,pos);
				
				var item = aa_xpath(item,tag,true)[0];
				subpath = subpath.substring(pos+1);
			}
			if (subpath.charAt(0) == "@") {
				var attrName = subpath.substring(1);
				if (typeof(defaultValue) == "undefined") defaultValue=""; 
				if (attrName.indexOf('/') == -1)
					item.setAttribute(attrName,defaultValue);
			}
			else if (aa_xpath(item,subpath).length == 0) { // element
				if (subpath.indexOf('[#') > -1) {
					var pos = subpath.indexOf('[#');
					var pos2 = subpath.indexOf(']',pos);
					var tag = subpath.substring(0,pos).replace('self::','');
					var id = subpath.substring(pos+2,pos2);

					var newelem = item.ownerDocument.createElement(tag);
					newelem.setAttribute('id',id);
					item.appendChild(newelem);
				} else {
					var newelem = aa_createElement(item,subpath);
					if (typeof(defaultValue) != 'undefined' && defaultValue != "")
						newelem.appendChild(newelem.ownerDocument.createTextNode(defaultValue));
					item.appendChild( newelem );
				}
			}
			result = aa_xpath(xml,xpath,false);
		} catch(e) { log("failed create xpath item :" + xpath + "," + e.message); return []; }
	}
	
	return result;
    
  function log(msg) {
  	if (ajaxart.log) ajaxart.log(msg);
  }	
}
aa_xmlinfos = [];
function aa_getXmlInfo(xml,context,donotcreate)
{
  if (xml && !xml.nodeType ) return xml;
  if (!xml || xml.nodeType != 1) return null;
  for(var i=aa_xmlinfos.length-1;i>=0;i--)   // we'll probably use the last ones defined 
	  if (aa_xmlinfos[i].Xml == xml) return aa_xmlinfos[i];
  
  if (donotcreate) return null;
  
  var out = { isObject: true, Xml: xml };
  aa_xmlinfos.push(out);
  return out;
}
function aa_removeXmlInfo(xml,context)
{
  for(var i=aa_xmlinfos.length-1;i>=0;i--)   // we'll probably use the last ones defined 
	  if (aa_xmlinfos[i].Xml == xml) { 
		  aa_xmlinfos.splice(i,1); 
		  return;
	  }
}

function aa_nextElementSibling(node) {
	var out = node.nextSibling;
	if (out && out.nodeType != 1) return aa_nextElementSibling(out);
	return out;
}

function aa_prevElementSibling(node) {
	var out = node.previousSibling;
	if (out && out.nodeType != 1) return aa_prevElementSibling(out);
	return out;
}

function aa_insertAfter(newnode,existingnode) {
	if (!existingnode) return;
	existingnode.parentNode.insertBefore(newnode,existingnode.nextSibling);
}

function aa_xml_cloneNodeCleanNS(elem,doc) {
	if (elem.nodeType != 1) return null;
	doc = doc || elem.ownerDocument;
	var out = doc.createElement(getLocalName(elem.localName,elem.tagName));

	for (var i=0; i<elem.attributes.length; i++) {
		var attr = elem.attributes.item(i);
		if (attr.name == 'xmlns') continue;
		if (attr.name.indexOf('xmlns:') == 0) continue;
		out.setAttribute(getLocalName(attr.localName,attr.name),attr.nodeValue);		
	}

	for (var childNode = elem.firstChild;childNode != null;childNode=childNode.nextSibling)
	{
		if (childNode.nodeType == 1) 
			out.appendChild(aa_xml_cloneNodeCleanNS(childNode,doc));
		else if (childNode.nodeType == 3)  // text node
			out.appendChild(doc.createTextNode(childNode.nodeValue));		 
		else if (childNode.nodeType == 4)  // CDATA
			out.appendChild(doc.createCDATASection(childNode.nodeValue));		 
		else if (childNode.nodeType == 8)  // Comment
			out.appendChild(doc.createComment(childNode.nodeValue));		 
	}

	return out;

	function getLocalName(localName,name) {
		if (localName) return localName;
		if (name.indexOf(':') == -1) return name;
		return name.split(':')[1];
	}
}

function aa_xml2JSON(topXml) {
	if (!topXml || topXml.nodeType != 1) return {};
	var result = xmlToObject(topXml);

	return JSON.stringify(result);

	function xmlToObject(xml) {
		var obj = {};
		var isArray = false;
		var jbType;

		for (var i=0; i<xml.attributes.length; i++) {
			if (xml.attributes.item(i).name == '_jbType') {
				isArray = true;
				jbType = xml.attributes.item(i).value;
				obj = [];
			} else
				obj[xml.attributes.item(i).name] = xml.attributes.item(i).value;
		}
		for (var i=0;i<xml.childNodes.length;i++) {
			var child = xml.childNodes.item(i);			
			if (child.nodeType == 1) {
				if (isArray) {
					if (jbType == 'string[]')
						obj.push(child.firstChild ? child.firstChild.nodeValue : '');
					else if (jbType == 'number[]')
						obj.push(parseFloat(child.firstChild ? child.firstChild.nodeValue : ''));
					else if (jbType == 'boolean[]')
						obj.push((child.firstChild ? child.firstChild.nodeValue : '') == 'true');
					else
						obj.push(xmlToObject(child))
				} else
					obj[child.tagName] = xmlToObject(child);
			}
		}
		return obj;
	}
}

function aa_JSON2Xml(obj,tag,result)
{
	return json2Xml(obj || {},result || aa_parsexml('<' + tag + '/>'),0);
	function json2Xml(obj,result,depth)
	{
		if (typeof obj.cloneNode == 'function') 
			return obj.cloneNode(); // xml inside js object
		if (depth == 20) { debugger; return result.ownerDocument.createElement('TooMuchRecursion'); }
		if (typeof obj == 'string') {
			try {
				return json2Xml(JSON.parse(obj),result,depth+1);
			} catch(e) { 
				ajaxart.log("jsonToxml - Can not parse json " + obj,"error");
				return null; 
			}
		}
	
		try {
			var inner_tag;
			var isArray = aa_isArray(obj);
			if (isArray)
			{
				result.setAttribute('_jbType','array');
				inner_tag = 'item';
				var primitiveArrayItemType = '';
				for(var att in obj) {
				  if (typeof(obj[att]) == 'string') primitiveArrayItemType = 'string';
				  else if (typeof(obj[att]) == 'number') primitiveArrayItemType = 'number';
				  else if (typeof(obj[att]) == 'boolean') primitiveArrayItemType = 'boolean';
				}

				if (primitiveArrayItemType)
				{
					result.setAttribute('_jbType',primitiveArrayItemType+'[]');
					for(var k=0;k<obj.length;k++) {
						var item = result.ownerDocument.createElement(inner_tag);
						item.appendChild(item.ownerDocument.createTextNode(obj[k]));
						result.appendChild(item);
					}
					return result;
				}
			}
			// atts
			for(var att in obj) 
			 if (obj.hasOwnProperty(att)) {
				var inner = obj[att];
				if (inner == null) continue;
				var matchResult = att.match(/[a-zA-Z_0-9]+/);
				var att_fixed = matchResult ? matchResult[0] : '';
				if (att_fixed == '' || !isNaN(att_fixed.charAt(0)))
					att_fixed = '_jb_' + att_fixed;
				
				var _type = typeof(inner);
				if (_type == 'string' || _type == 'number' || _type == 'boolean') {
				  result.setAttribute(att_fixed,inner);
				} else { // elements
					var child = result.ownerDocument.createElement(inner_tag || att_fixed);
					child = json2Xml(inner,child,depth+1);
					result.appendChild(child);
				}
			}
		} catch (e) {
					debugger;
					alert(e);
		}
		return result;
	}
}

function aa_xml_clean_inner_texts(xml)
{
	var innerTexts = [];
	for(var iter=xml.firstChild;iter;iter=iter.nextSibling)
		if (iter.nodeType == 3) innerTexts.push(iter);

	for(var i=0;i<innerTexts.length;i++)
		xml.removeChild(innerTexts[i]);
}

function aa_innerText(elem,autoCreate) {
	for(var iter=elem && elem.firstChild;iter;iter=iter.nextSibling)
		if (iter.nodeType == 3) return iter;
	if (autoCreate) {
		var out = elem.ownerDocument.createTextNode('');
		elem.appendChild(out);
		return out;
	}
}
ajaxart.load_usage_plugin("xml");



aa_gcs("xmlui",{
	CallUpdateOfCodeMirror: function(profile, data, context) {
		var iframe = ajaxart.getControlElement(context, true);
		if (iframe != null && iframe.contentWindow != null) {
			var txt = iframe.contentWindow.editor.getCode();
			if (iframe.getAttribute("type") == "css") txt = txt.replace(/\n/g, '/*nl*/');
			ajaxart_update(iframe, txt);
		}
	},
	InsertTextToCodeMirror: function(profile, data, context) {
		var wrapper = ajaxart.getControlElement(context, true);
		if (!wrapper || !wrapper.jbCodeMirrorEditor) {
			ajaxart.log("InsertTextToCodeMirror: Cannot find codemirror", "error");
			return;
		}
		wrapper.jbCodeMirrorEditor.replaceSelection(aa_text(data, profile, 'Text', context));
	},
	CodeMirrorTextarea: function(profile, data, context) {
		// return [ aa_codemirror({}) ];
		var text = ajaxart.run(data, profile, 'Text', context);
		var type = aa_text(data, profile, 'Type', context);
		var width = aa_text(data, profile, 'Width', context);
		var height = aa_text(data, profile, 'Height', context);
		var useResizing = aa_bool(data, profile, 'Resizer', context);
		var autoIntent = aa_bool(data, profile, 'AutoIndent', context);
		if (useResizing) {
			var identifier = aa_text(data, profile, 'IdentifierToRecallLastSize', context);
			jBart.vars.codeMirrorSizes = jBart.vars.codeMirrorSizes || {};
			var lastSize = jBart.vars.codeMirrorSizes[identifier];
			if (lastSize) {
				width = lastSize.width + 'px';
				height = lastSize.height + 'px';
			}
		}
		var mode = '';
		switch (type) {
			case 'xml':
				mode = 'xml';
				break;
			case 'js':
				mode = 'javascript';
				break;
			case 'css':
				mode = 'css';
				break;
			case 'html':
				mode = 'htmlmixed';
				break;
		}
		var settings = {
			value: aa_totext(text),
			mode: mode,
			lineNumbers: aa_bool(data, profile, 'LineNumbers', context),
			lineWrapping: aa_bool(data, profile, 'TextWrapping', context),
			readOnly: aa_bool(data, profile, 'ReadOnly', context),
			autofocus: aa_bool(data, profile, 'AutoFocus', context),
			height: height,
			width: width,
			extraKeys: {
				"Ctrl-Enter": function(editor) {
					ajaxart.run([editor.getValue()], profile, 'OnCtrlEnter', context);
				},
				"Shift-Enter": function(editor) {
					ajaxart.run([editor.getValue()], profile, 'OnShiftEnter', context);
				},
				"Ctrl-I": function(editor) {
					var cursorPos = editor.getCursor(true);
					indent(editor);
					editor.setCursor(cursorPos);
					editor.setSelection(cursorPos);
				}
			},
			onchange: function(editor) {
				ajaxart.writevalue(text, editor.getValue());
				ajaxart.run(text, profile, 'OnUpdate', aa_ctx(context, {
					ControlElement: [wrapper]
				}));
			},
			oninit: function(editor) {
				if (autoIntent)
					indent(editor);
				if (aa_bool(data, profile, 'Resizer', context)) {
					setTimeout(function() {
						aa_addResizer(wrapper, {
							onResize: function(width, height) {
								jBart.vars.codeMirrorSizes[identifier] = jBart.vars.codeMirrorSizes[identifier] || {};
								jBart.vars.codeMirrorSizes[identifier].width = width;
								jBart.vars.codeMirrorSizes[identifier].height = height;
								editor.setSize(width, height);
							}
						});
					}, 20);
				}
			}
		};

		if (aa_bool(data, profile, 'ShowJavascriptErrorsOnCtrlSpace', context) && mode == 'javascript') aa_showJsErrorsOnCodeMirror(settings);

		if (aa_bool(data, profile, 'EnableFullScreen', context)) aa_enableFullScreenForCodeMirror(settings);

		var wrapper = aa_codemirror(settings);
		jQuery(wrapper).addClass(aa_attach_global_css(aa_text(data, profile, 'Css', context), null, 'codemirror_wrapper'));
		return [wrapper];

		function indent(editor) {
			if (mode == 'css')
				editor.setValue(css_beautify(editor.getValue(), { indent_size: 2 }).replace(/\n\n/g,'\n').replace(/: /g,':'));
			if (mode == 'javascript')
				editor.setValue(js_beautify(editor.getValue(), { indent_size: 2 }).replace(/\n\n/g,'\n'));
			if (mode == 'xml')
				editor.setValue(html_beautify(editor.getValue(), { indent_size: 2}).replace(/\n\n/g,'\n'));			
		}
	}
});

function aa_codemirror(settings) {
	var wrapper = document.createElement('div');

	if (!window.CodeMirror)
		console.error('CodeMirror lib is not loaded: https://codemirror.net/');

	init();
	// var cssList = [ aa_base_lib() + '/codemirror-3.2/codemirror4jbart.css' ];
	// var jsList = [ aa_base_lib() + '/codemirror-3.2/codemirror4jbart.js', aa_base_lib() + '/codemirror-3.2/js-beautify-jbart.min.js'];
	// $.when( aa_loadLib("codemirror", cssList , jsList) ).then( init );

	jQuery(wrapper).css({
		height: settings.height,
		width: settings.width
	}); // to give the right size untill code mirror is loaded
	settings.extraKeys = settings.extraKeys || {};
	settings.extraKeys["Ctrl-Space"] =	 function(cm) {
		if (settings.mode == 'javascript') CodeMirror.showHint(cm, CodeMirror.javascriptHint);
		if (settings.mode == 'xml') CodeMirror.showHint(cm, CodeMirror.xmlHint);
	};
	settings.extraKeys["Ctrl-H"] = 'replace';

	function init() {
		aa_addOnAttachMultiple(wrapper, function() {
			var editor = CodeMirror(wrapper, settings);
			var width = settings.width;
			var height = settings.height;

			if (settings.resizer && sessionStorage['jbCodeMirrorResizerWidth' + settings.identifier]) {
				width = sessionStorage['jbCodeMirrorResizerWidth' + settings.identifier];
				height = sessionStorage['jbCodeMirrorResizerHeight' + settings.identifier];
			}
			editor.setSize(width, height);
			wrapper.style.height = '';
			wrapper.style.width = '';
			if (settings.onchange) editor.on("change", settings.onchange);
			editor.setOption("theme", "solarized light");

			// jQuery(wrapper).removeClass('aa_dialog_not_ready');
			wrapper.jbCodeMirrorEditor = editor;
			aa_fixTopDialogPosition(); // Sometimes the dialog position changes becuase of codemirror size
			editor.refresh(); // When codemirror in open and not visible, it needs a refresh when becomes visible

			if (settings.oninit) settings.oninit(editor);
			if (settings.resizer) initResizer(wrapper, editor);
			if (settings.mode == 'xml') addXmlValidation(wrapper,editor);
		});
	}

	// jQuery(wrapper).addClass('aa_dialog_not_ready');	// marking the dialog as not ready to wait for code mirror to load
	return wrapper;

	function initResizer(wrapper, editor) {
		aa_addResizer(wrapper.firstChild, {
			onResizeEnd: function(width, height) {
				sessionStorage['jbCodeMirrorResizerWidth' + settings.identifier] = width;
				sessionStorage['jbCodeMirrorResizerHeight' + settings.identifier] = height;
			}
		});
	}

	function addXmlValidation(wrapper,editor) {
		$(wrapper).addClass('aa_has_validations');
		aa_bind(wrapper,'validation',function(validationObject) {
			var error = [];
			aa_parsexml(editor.getValue(),"",error,true);
			if (aa_totext(error)) {
				validationObject.passed = false;
				validationObject.errorMessage = 'xml parsing error: ' + aa_totext(error);
			}
		},'CodeMirrorXmlValidation');

	}
};

function aa_enableFullScreenForCodeMirror(cmSettings, settings) {
	settings = settings || {};
	jQuery.extend(settings, {
		escText: "<span>Press ESC or F11 to exit full screen</span>",
		escCss: '#this { cursor:default; text-align: center; width: 100%; position:absolute; top:0px; left:0px; font-family: arial; font-size: 11px; color: #a00; padding: 2px 5px 3px; } #this:hover { text-decoration: underline; }',
		escHeight: 20,
		fullScreenBtnHtml: '<div><img title="Full Screen (F11)" src="http://png-1.findicons.com/files/icons/1150/tango/22/view_fullscreen.png"/></div>',
		fullScreenBtnCss: "#this { position:absolute; bottom:5px; right:5px; -webkit-transition: opacity 1s; z-index: 20; } #this.hidden { opacity:0; } ",
		editorCss: "#this { position:relative; }",
		fullScreenEditorCss: "#this { display: block; position: fixed !important; top: 0; left: 0; z-index: 9999; }",
		lineNumbers: true
	});
	var prevOnInit = cmSettings.oninit;
	var prevOverflow = document.documentElement.style.overflow;
	cmSettings.oninit = function(editor) {
		if (prevOnInit) prevOnInit(editor);
		var jEditorElem = jQuery(editor.getWrapperElement()).addClass(aa_attach_global_css(settings.editorCss));
		var prevLineNumbers = editor.getOption("lineNumbers");
		var jFullScreenButton = jQuery(settings.fullScreenBtnHtml).addClass(aa_attach_global_css(settings.fullScreenBtnCss)).appendTo(jEditorElem)
			.addClass('hidden').click(function() {
			switchMode();
		});
		jEditorElem.
		mouseover(function() {
			jFullScreenButton.removeClass('hidden');
		}).
		mouseout(function() {
			jFullScreenButton.addClass('hidden');
		});
		var fullScreenClass = aa_attach_global_css(settings.fullScreenEditorCss + "#this { padding-top: " + settings.escHeight + "px; }");

		function onresize() {
			var screen_size = aa_screen_size();
			editor.setSize(screen_size.width, screen_size.height - settings.escHeight);
			// jEditorElem.height( aa_document_height() + 'px' );
		}

		function switchMode(onlyBackToNormal) {
			if (jEditorElem.hasClass(fullScreenClass)) {
				jEditorElem.removeClass(fullScreenClass);
				window.removeEventListener('resize', onresize);
				document.documentElement.style.overflow = prevOverflow;
				editor.setOption("lineNumbers", prevLineNumbers);
				editor.setSize(cmSettings.width, cmSettings.height);
				editor.refresh();
				jEditorElem[0].jEsc.remove();
			} else if (!onlyBackToNormal) {
				jEditorElem.addClass(fullScreenClass);
				window.addEventListener('resize', onresize);
				onresize();
				document.documentElement.style.overflow = "hidden";
				if (settings.lineNumbers) editor.setOption("lineNumbers", true);
				editor.refresh();
				var jEsc = jQuery(settings.escText).addClass(aa_attach_global_css(settings.escCss)).click(function() {
					switchMode(true)
				});
				jEditorElem.append(jEsc);
				jEditorElem[0].jEsc = jEsc;
				editor.focus();
			}
		}
		editor.addKeyMap({
			"F11": function(editor) {
				switchMode();
			},
			"Esc": function(editor) {
				switchMode(true);
			}
		});
	}
}

function aa_showJsErrorsOnCodeMirror(cmSettings, settings) {
	var errorCss = (settings && settings.errorCss) ? settings.errorCss :
		"#this { font-family: arial; font-size: 10px; background: #ffa; color: #a00; padding: 2px 5px 3px; }" +
		"#this .icon { color: white; background-color: red; font-weight: bold; border-radius: 50%; padding: 0 3px; margin-right: 7px;}";

	var prevOnChange = cmSettings.onchange;
	cmSettings.onchange = function(editor) {
		if (prevOnChange) prevOnChange(editor);
		// cleaning error on every change
		editor.jbWidgets = editor.jbWidgets || [];
		for (var i = 0; i < editor.jbWidgets.length; ++i)
		editor.removeLineWidget(editor.jbWidgets[i]);
	}
	cmSettings.extraKeys = cmSettings.extraKeys || {};
	var prevCtrlEnter = cmSettings.extraKeys["Ctrl-Enter"];
	cmSettings.extraKeys["Ctrl-Enter"] = function(editor) {
		editor.jbWidgets = editor.jbWidgets || [];
		for (var i = 0; i < editor.jbWidgets.length; ++i)
		editor.removeLineWidget(editor.jbWidgets[i]);
		jBart.onJsError = function(e, js) {
			if (js != editor.getValue()) return; // not our error
			var stack = e.stack;
			var message = stack.split("\n")[0];
			var line = stack.match(/<anonymous>:([0-9]+)/);
			if (line && line.length > 1) line = parseInt(line[1]);
			line = line || 1;

			var jText = $('<span class="text"></span>').text(message);
			var jErr = $('<div><span class="icon">!</span></div>').append(jText).addClass(aa_attach_global_css(errorCss));

			editor.jbWidgets.push(editor.addLineWidget(line - 1, jErr[0], {
				coverGutter: false,
				noHScroll: true,
				above: true
			}));
		}
		if (prevCtrlEnter) prevCtrlEnter(editor);
		jBart.onJsError = null;
	}
}
ajaxart.load_usage_plugin("xmlui");




aa_gcs("xtml", {
  RunXtml: function (profile,data,context)
  {
	  var xtml = ajaxart.run(data,profile,'Xtml',context);
	  if (xtml.length == 0) return [];

	  var method = "";
	  if (aa_hasAttribute(profile,'Method') || ajaxart.childElem(profile,'Method') != null)
		  method = aa_text(data,profile,'Method',context); 

	  var field = "";
	  if (aa_hasAttribute(profile,'Field')) // || ajaxart.childElem(profile,'Field') != null)
		  field = aa_text(data,profile,'Field',context);

	  var input = data;
	  if (aa_hasAttribute(profile,'Input') || ajaxart.childElem(profile,'Input') != null)
		  input = ajaxart.run(data,profile,'Input',context);

	  if (typeof(xtml[0].script) != "undefined" || xtml[0].compiled != null)	// xtml containing script and context
	  {
		  if (typeof(xtml[0].input) != "undefined")
			  if (! aa_bool(data,profile,'ForceInputParam',context) )
				  input = xtml[0].input;

	  	  if (xtml[0].compiled == "same") return input;

	  	  var newContext = ajaxart.newContext();
	  	  
		  if (xtml[0].context) { // the xtml object comes with its own context
		  	  newContext.params = xtml[0].context.params;
		  	  newContext.componentContext = xtml[0].context.componentContext;
		  } 
 	      newContext.vars = context.vars;
		  if (typeof(xtml[0].objectForMethod) != 'undefined')
			  newContext._This = xtml[0].objectForMethod[0];
		  
		  if (xtml[0].compiled == null) {
  		    if (xtml[0].script == null) return null;
		    return ajaxart.run(input,xtml[0].script,field,newContext,method);
		  }
		  else
			return xtml[0].compiled(input,newContext);
	  }
	  
	  if (! ajaxart.isxml(xtml[0]) ) {
		  // dynamic text maybe
		  var result = ajaxart.dynamicText(input,aa_totext(xtml),context,null,false);
		  return [result];
	  }

	  /* var newContext = ajaxart.clone_context(context);	// SLOW. is done because of $InputForChanges - find a way to fix that  
	    */
	  var newContext = {};
	  newContext.vars = context.vars;
	  newContext.componentContext = context.componentContext;
	  newContext.params = [];
	  
	  return ajaxart.run(input,xtml[0],field,newContext,method);
  },
  RunCircuit: function (profile,data,context)
  {
  	var circuit = aa_first(data,profile,'Circuit',context);
  	if (!circuit || !circuit.script || !circuit.context) return [];
  	var input = circuit.OrigData || circuit.Input || [];
  	return ajaxart.run(input,circuit.script,'',circuit.context);
  },
	Profile: function(profile, data, context) {
		return [profile.parentNode];
	},
	RunXtmlByComponentId: function(profile, data, context) {
		var id = aa_text(data, profile, 'ComponentID', context);
		if (id == '') return [];
		var input = ajaxart.run(data, profile, 'Input', context);
		return aa_run_component(id, input, context);
	},
	RunDynamicText: function(profile, data, context) {
		var text = aa_text(data, profile, 'Text', context);
		var relevant_context = aa_first(data, profile, 'Context', context);
		if (relevant_context == null) relevant_context = context;
		var relevant_data = ajaxart.run(data, profile, 'Input', context);
		if (relevant_data == null) relevant_data = data;
		if (relevant_context == null) return [];
		return ajaxart.dynamicText(relevant_data, text, relevant_context);
	},
	RunXtmlAsBoolean: function(profile, data, context) {
		var xtml = ajaxart.run(data, profile, 'Xtml', context);
		var emptyAsTrue = aa_bool(data, profile, 'EmptyAsTrue', context);

		if (xtml.length == 0) return [];

		var method = "";
		if (profile.getAttribute('Method') != null) // || ajaxart.childElem(profile,'Method') != null)
		method = aa_text(data, profile, 'Method', context);

		var field = "";
		if (profile.getAttribute('Field') != null) // || ajaxart.childElem(profile,'Field') != null)
		field = aa_text(data, profile, 'Field', context);

		var input = data;
		if (profile.getAttribute('Input') != null || ajaxart.childElem(profile, 'Input') != null) input = ajaxart.run(data, profile, 'Input', context);

		//	  if (typeof(xtml[0])=="function") {
		//		  var text = aa_totext(xtml[0](input,context));
		//		  var bool = aa_text2bool(text);
		//		  return (bool) ? ["true"] : [];
		//	  }

		if (xtml[0].script != null) // typeof(xtml[0].script) != "undefined")	// xtml containing script and context
		{
			if (emptyAsTrue) if (xtml[0].script.getAttribute(field) == null && aa_xpath(xtml[0].script, field).length == 0) return ["true"];

			if (typeof(xtml[0].input) != "undefined") if (!aa_bool(data, profile, 'ForceInputParam', context)) input = xtml[0].input;

			var newContext = ajaxart.newContext();

			if (xtml[0].context != null) { // the xtml object comes with its own context
				newContext.params = xtml[0].context.params;
				newContext.componentContext = xtml[0].context.componentContext;
			}
			newContext.vars = context.vars;
			if (xtml[0].objectForMethod) newContext._This = xtml[0].objectForMethod[0];

			if (!ajaxart.isxml(xtml[0].script)) {
				ajaxart.log("RunXtml trying to run script not in xml");
				return [];
			}
			var result = aa_bool(input, xtml[0].script, field, newContext, method);
			if (result) return ["true"];
			else return [];
		}

		if (!ajaxart.isxml(xtml[0])) return emptyAsTrue ? ["true"] : [];
		if (emptyAsTrue) if (xtml[0].getAttribute(field) == null && aa_xpath(xtml[0], field).length == 0) return ["true"];

		/* var newContext = ajaxart.clone_context(context);	// SLOW. is done because of $InputForChanges - find a way to fix that  
		 */
		var newContext = {};
		newContext.vars = context.vars;
		newContext.componentContext = context.componentContext;
		newContext.params = [];

		var result = aa_bool(input, xtml[0], field, newContext, method);
		if (result) return ["true"];
		else return [];
	},
	UseParamAsBoolean: function(profile, data, context) {
		var param = aa_text(data, profile, 'Param', context);
		var input = ajaxart.run(data, profile, 'Input', context);

		var paramScript = context.params[param];
		if (aa_isArray(paramScript)) // script='false'
		return paramScript;

		if (paramScript == null || paramScript.script == null) return [];
		if (paramScript.compiled == "same") return input;

		// if we're here we are in script=true

		var newContext = {};
		newContext.vars = context.vars;
		newContext.params = context.componentContext.params;
		newContext.componentContext = context.componentContext.componentContext;

		if (paramScript.compiled == null) return aa_bool(input, paramScript.script, "", newContext);
		else return aa_text2bool(aa_totext(paramScript.compiled(input, newContext)));
	},
	UseParamExcludeVariable: function(profile, data, context) {
		var param = aa_text(data, profile, 'Param', context);
		var excludeVar = aa_text(data, profile, 'ExcludeVariable', context);

		var paramScript = context.params[param];
		if (paramScript == null || paramScript.script == null) return [];

		var newContext = ajaxart.newContext();
		for (i in context.vars) {
			if (i != excludeVar) newContext.vars[i] = context.vars[i];
		}
		newContext.params = context.componentContext.params;
		newContext.componentContext = context.componentContext.componentContext;

		return ajaxart.run(data, paramScript.script, "", newContext);
	},
	ParamEmpty: function(profile, data, context) {
		var paramName = aa_text(data, profile, 'Param', context);
		var param = ajaxart.getVariable(context, paramName);
		if (param == null) return ["true"];
		if (typeof(param.script) != "undefined" || param.length > 0) return [];

		return ["true"];
	},
	ParamsWithChanges: function(profile, data, context) {
		var orig = aa_first(data, profile, 'Params', context);
		var overrides = ajaxart.gcs.xtml.Params(profile, data, context)[0];
		var out = {
			isObject: true
		};
		for (var i in orig)
		out[i] = orig[i];
		for (var i in overrides)
		out[i] = overrides[i];

		return [out];
	},
	CopyAllParams: function(profile, data, context) {
		var out = {};

		for (var i in context.params) {
			var name = i;
			var val = context.params[i];
			if (val.isParamScript == true) {
				out[name] = val;
				out[name].context = context.componentContext;
			} else out[name] = val;
		}

		return [out];
	},
	ScriptParamArrayContents: function(profile, data, context) {
		var param = aa_text(data, profile, 'Param', context);
		var paramValue = context.params[param];
		if (typeof(paramValue) == "undefined" || !aa_isArray(paramValue)) return [];
		out = [];
		for (var i = 0; i < paramValue.length; i++)
		out.push({
			script: paramValue[i],
			context: context.componentContext
		});

		return out;
	},
	Xtml: function(profile, data, context) {
		var xtml = ajaxart.run(data, profile, 'Xtml', context);
		var input = ajaxart.run(data, profile, 'Input', context);
		var definedContext = aa_first(data, profile, 'Context', context);

		if (xtml.length == 0) return [];
		var out = {};
		if (typeof(xtml[0].script) != "undefined") {
			for (i in xtml[0]) out[i] = xtml[0][i];
		} else out = {
			script: xtml[0],
			context: context.componentContext
		};

		if (definedContext != null) out.context = definedContext;
		if (out.context == null) out.context = ajaxart.newContext();

		// put resources as vars as well
		if (context.vars._GlobalVars && !aa_tobool(context.vars._DisableResourcesAsVars)) {
			out.context.vars._GlobalVars = context.vars._GlobalVars;
		}
		if (input.length > 0) out["input"] = input;

		return [out];
	},
	ToScript: function(profile, data, context) {
		data = ajaxart.run(data, profile, 'Xtml', context);
		if (data.length == 0) return [];
		if (typeof(data[0].script) == "undefined") return [];
		return [data[0].script];
	},
	ToInput: function(profile, data, context) {
		if (data.length == 0) return [];
		if (typeof(data[0].input) == "undefined") return [];
		return data[0].input;
	},
	VariableValue: function(profile, data, context) {
		var varName = aa_text(data, profile, 'VarName', context);

		var out = context.vars[varName];
		if (out == null || typeof(out) == "undefined") return [];
		return out;
	},
	UsagesOfPlugin: function(profile, data, context) {
		var plugin = aa_text(data, profile, 'Plugin', context);

		var out = [];
		for (_plugin in ajaxart.usages)
		if (plugin == "" || plugin == _plugin) {
			for (usage in ajaxart.usages[_plugin])
			out.push(ajaxart.usages[_plugin][usage]);
		}
		return out;
	},
	ComponentsOfPlugin: function(profile, data, context) {
		var plugin = aa_text(data, profile, 'Plugin', context);
		var type = aa_text(data, profile, 'Type', context);
		var resultType = aa_text(data, profile, 'Result', context);
		var alsoHidden = aa_bool(data, profile, 'AlsoHidden', context);
		if (plugin.length == 0) return [];

		var out = [];
		var plugin_obj = ajaxart.components[plugin];
		for (i in plugin_obj) {
			if (type.length > 0 && type != plugin_obj[i].getAttribute('type')) continue;

			if (!alsoHidden && "true" == plugin_obj[i].getAttribute('hidden')) continue;

			if (resultType == "full id") out.push(plugin + "." + i);
			else out.push(plugin_obj[i]);
		}
		return out;
	},
	LoadedPlugins: function(profile, data, context) {
		var includeUsages = aa_bool(data, profile, 'IncludeUsages', context);

		var list = {};
		var out = [];
		for (i in ajaxart.components) {
			if (!includeUsages && i.indexOf("usage", i.length - 5) != -1) continue;
			out.push(i);
			list[i] = true;
		}
		if (includeUsages) {
			for (i in ajaxart.usages)
			if (list[i] == null) {
				out.push(i);
				list[i] = true;
			}
		}
		return out;
	},
	LoadComponents: function(profile, data, context) {
		var ns = aa_text(data, profile, 'Namespace', context);
		var comps = ajaxart.run(data, profile, 'Components', context);

		if (ajaxart.components[ns] == null || aa_bool(data, profile, 'ClearNSBefore', context)) ajaxart.components[ns] = [];

		for (var i = 0; i < comps.length; i++) {
			if (!ajaxart.isxml(comps[i])) continue;
			ajaxart.components[ns][comps[i].getAttribute("id")] = comps[i];
			aa_load_inplace_gc(comps[i], ns);
		}

		ajaxart.componentsXtmlCache = [];
		window.aaxtmldt_options_cache = window.ajaxart_light_compoftype = window.ajaxart_comp_of_type_cache = null;

		return ["true"];
	},
	PluginDescriptor: function(profile, data, context) {
		var plugin_name = aa_text(data, profile, 'Plugin', context);
		var plugin = ajaxart.plugins[plugin_name];
		if (typeof(plugin) == "undefined") return [];
		return [plugin];
	},
	AllTypes: function(profile, data, context) {
		var out = [];
		for (var i in ajaxart.types) {
			var ns = ajaxart.types[i].parentNode.getAttribute('ns');
			if (ns == null) ns = ajaxart.types[i].parentNode.getAttribute('id');
			var id = ajaxart.types[i].getAttribute('id');
			var text = ns + "." + id;
			out.push(text);
		}
		return out;
	},
	TypeDefinition: function(profile, data, context) {
		var type = aa_text(data, profile, 'Type', context);
		type = type.replace("\.", "_");
		var typeobj = ajaxart.types[type];
		if (typeobj == null) return [];
		return [typeobj];
	},
	GlobalVariables: function(profile, data, context) {
		var out = [];
		if (context.vars._GlobalVars) for (var i in context.vars._GlobalVars[0])
		out.push(i);
		return out;
	},
	DebugVariableValue: function(profile, data, context) {
		var varName = aa_text(data, profile, 'Variable', context);
		if (varName == "") return [];
		if (ajaxart.debugData && ajaxart.debugData[varName] != null) return ajaxart.debugData[varName];
		return [];
	},
	DebugDataVariables: function(profile, data, context) {
		var out = [];
		for (varName in ajaxart.debugData)
		out.push(varName);
		return out;
	},
	VariablesOfContext: function(profile, data, context) {
		var scriptAndContext = aa_first(data, profile, 'ScriptAndContext', context);
		var out = [];
		var ctx;
		if (scriptAndContext != null && 'context' in scriptAndContext) ctx = scriptAndContext.context;
		else return [];
		for (varName in ctx.params)
		out.push(varName);
		for (varName in ctx.vars) {
			if (varName != '_GlobalVars') out.push(varName);
			else {
				var gvars = ctx.vars._GlobalVars[0];
				for (varName2 in gvars) out.push(varName2);
			}
		}
		return out;
	},
	VariableValueFromContext: function(profile, data, context) {
		var scriptAndContext = aa_first(data, profile, 'ScriptAndContext', context);
		if (!scriptAndContext) return [];
		var varName = aa_text(data, profile, 'Variable', context);
		if (scriptAndContext.context) {
			var val = ajaxart.getVariable(scriptAndContext.context, varName);
			if (val == null) val = [scriptAndContext.context.params[varName]];
			return val;
		}
		return [];
	},
	Logs: function(profile, data, context) {
		var out = [];
		var errors = ajaxart.logs["error"];
		if (errors) {
			for (var i in errors)
			out.push({
				isObject: true,
				Level: "error",
				Log: errors[i]
			});
		}
		for (i in ajaxart.logs)
		if (i != 'error') for (var j in ajaxart.logs[i])
		out.push({
			isObject: true,
			Level: i,
			Log: ajaxart.logs[i][j]
		});

		return out;
	},
	LogContent: function(profile, data, context) {
		var level = aa_text(data, profile, 'Level', context);
		var out = ajaxart.logs[level];
		return (out == null) ? [] : out;
	},
	ActiveLogLevels: function(profile, data, context) {
		var out = [];
		for (i in ajaxart.logs)
		if (i == 'error') // insert at beginning
		out = [i].concat(out);
		else out.push(i);
		return out;
	},
	LoadXtmlFile: function(profile, data, context) {
		var contents = aa_first(data, profile, 'Contents', context);
		if (ajaxart.isxml(contents)) ajaxart.load_xtml_content('', contents);
		return ["true"];
	},
	RunUsage: function(profile, data, context) {
		if (data.length == 0) return data;

		var result = ajaxart.run([""], data[0], "", context);
		if (result.length == 0) // success
		ajaxart.run(data, profile, 'OnSuccess', context);
		else ajaxart.run(data, profile, 'OnFailure', context);
		ajaxart.run(data, profile, 'OnFinish', context);
	},
	CleanLog: function(profile, data, context) {
		var cleanAllLogs = aa_bool(data, profile, 'CleanAllLogs', context);
		var level = aa_text(data, profile, 'Level', context);
		if (cleanAllLogs) logs = {};
		else if (level != "") ajaxart.logs[level] = [];

		return data;
	},
	AllComponentIds: function(profile, data, context) {
		var out = [];
		for (plugin in ajaxart.components)
		for (j in ajaxart.components[plugin])
		out.push(plugin + "." + ajaxart.components[plugin][j].getAttribute("id"));
		return out;
	},
	AllComponentDefinitions: function(profile, data, context) {
		var out = [];
		for (plugin in ajaxart.components)
		for (j in ajaxart.components[plugin])
			out.push(ajaxart.components[plugin][j]);
		return out;
	},
	ComponentIdsOfType: function(profile, data, context) {
		var type = aa_text(data, profile, 'Type', context);
		var out = [];
		for (plugin in ajaxart.components)
		for (j in ajaxart.components[plugin]) {
			if (ajaxart.components[plugin][j].getAttribute("type") == type) out.push(plugin + "." + ajaxart.components[plugin][j].getAttribute("id"));
		}
		return out;
	},
	PartsOfContext: function(profile, data, context) {
		var ctx = aa_first(data, profile, 'Context', context);
		if (ctx == null) return [];
		var part = aa_text(data, profile, 'Part', context);
		var out = [];
		if (part == "Global Variable Names") {
			if (!ctx.vars._GlobalVars) return [];
			for (var j in ctx.vars._GlobalVars[0]) {
				if (j != 'isObject' && j != 'XtmlSource') out.push(j);
			}
		}
		if (part == "Variable Names") {
			for (i in ctx.vars) {
				if (i != "_GlobalVars") out.push(i);
				else for (j in ctx.vars._GlobalVars[0]) {
					if (j != 'isObject' && j != 'XtmlSource') out.push(j);
				}
			}
		} else if (part == "Param Names") {
			for (i in ctx.params)
			out.push(i);
		} else if (part == "Component Context") return [ctx.componentContext];
		return out;
	},
	CurrentContext: function(profile, data, context) {
		return [context];
	},
	ManualContext: function(profile, data, context) {
		var vars = ajaxart.run(data, profile, 'Variables', context);
		var out = ajaxart.newContext();
		for (var i = 0; i < vars.length; i++)
		ajaxart.setVariable(out, vars[i]["Name"], vars[i]["Value"]);
		return [out];
	},
	BuildVersion: function(profile, data, context) {
		return [ajaxart.build_version];
	},
	XtmlOfParamArray: function(profile, data, context) {
		var param = aa_text(data, profile, 'Param', context);
		var paramScript = context.params[param];
		if (aa_isArray(paramScript)) return []; // script='false'

		return aa_xpath(paramScript.script, param);
	},
	ClearComponentsCache: function(profile, data, context) {
		ajaxart.componentsXtmlCache = [];
	}
});


if (!ajaxart.xtml) ajaxart.xtml = {};
ajaxart.run_xtml_object = function(data, xtmlObject, context) {
	var newContext = ajaxart.newContext();

	if (xtmlObject.context != null) { // the xtml object comes with its own context
		newContext.params = xtmlObject.context.params;
		newContext.componentContext = xtmlObject.context.componentContext;
	}
	newContext.vars = context.vars;
	if (xtmlObject.objectForMethod) newContext._This = xtmlObject.objectForMethod[0];

	return ajaxart.run(data, xtmlObject.script, '', newContext);
}
ajaxart.component_exists = function(id) {
	var middlePos = id.indexOf('.');
	var ns = id.substring(0, middlePos);
	var compName = id.substr(middlePos + 1);
	if (ajaxart.components[ns] == null) return false;
	if (ajaxart.components[ns][compName] == null) return false;
	return true;
}
//ajaxart_runMethod = function(data,object,method,context)
//{
//	return ajaxart.runScriptParam(data,object[method],context);
//}

function aa_component_definition(component) {
	if (!component) return null;
	var middlePos = component.indexOf('.');
	var ns = component.substring(0, middlePos);
	var compName = component.substr(middlePos + 1);

	return ajaxart.components[ns] && ajaxart.components[ns][compName];
}

function aa_component_param_def(component_id, param) {
	var comp = aa_component_definition(component_id);
	var param = aa_xpath(comp, "Param[@name='" + param + "']");
	if (param.length > 0) return param[0];
	else return null;
}

function aa_component_param_type(component, param) {
	var type = aa_totext(aa_xpath(component, "Param[@name='" + param + "']/@type"));
	if (type == "") return "data.Data";
	return type;
}
ajaxart.load_usage_plugin("xtml");





aa_gcs("yesno", {
	EqualsTo: function(profile, data, context) {
		var to = ajaxart.run(data, profile, 'To', context);

		if (to.length == 0 && data.length == 0) return ["true"];
		if (to.length == 0 || data.length == 0) return [];

		var to_comp = to[0];
		var data_comp = data[0];

		if (aa_itemsEqual(to_comp, data_comp)) return ["true"];
		return [];
	},
	BooleansEqual: function(profile, data, context) {
		var item1 = aa_bool(data, profile, 'Item1', context);
		var item2 = aa_bool(data, profile, 'Item2', context);
		if (item1 == item2) return ["true"];
		return [];
	},
	IsOneOf: function(profile, data, context) {
		var val = aa_first(data, profile, 'Value', context);
		var optionProfs = ajaxart.subprofiles(profile, 'Option');

		if (val == null) return [];

		for (var i in optionProfs) {
			var options = ajaxart.run(data, optionProfs[i], '', context);
			for (var j in options)
			if (aa_itemsEqual(val, options[j])) return ["true"];
		}
		return [];
	},
	EqualsToList: function(profile, data, context) {
		var list = ajaxart.run(data, profile, 'To', context);
		if (list.length != data.length) return [];

		for (var i = 0; i < list.length; i++) {
			if (!aa_itemsEqual(list[i], data[i])) return [];
		}
		return ["true"];
	},
	GreaterThan: function(profile, data, context) {
		var type = aa_text(data, profile, 'Type', context);
		var alsoEqual = aa_bool(data, profile, 'AlsoEqual', context);
		var i1,i2;
		if (type == 'number') { i1 = aa_int(data, profile, 'Item', context); i2 = aa_int(data, profile, 'Than', context) }
		if (type == 'text') { i1 = aa_text(data, profile, 'Item', context); i2 = aa_text(data, profile, 'Than', context) }
		if (type == 'date') { i1 = aadate_date2int(aa_text(data, profile, 'Item', context)); i2 = aadate_date2int(aa_text(data, profile, 'Than', context)) };
	    if (i1 > i2 || (alsoEqual && i1 >= i2)) return ['true'];
		return [];
	},
	LessThan: function(profile, data, context) {
		var type = aa_text(data, profile, 'Type', context);
		var alsoEqual = aa_bool(data, profile, 'AlsoEqual', context);
		var i1,i2;
		if (type == 'number') { i1 = aa_int(data, profile, 'Item', context); i2 = aa_int(data, profile, 'Than', context) }
		if (type == 'text') { i1 = aa_text(data, profile, 'Item', context); i2 = aa_text(data, profile, 'Than', context) }
		if (type == 'date') { i1 = aadate_date2int(aa_text(data, profile, 'Item', context)); i2 = aadate_date2int(aa_text(data, profile, 'Than', context)) };
	    if (i1 < i2 || (alsoEqual && i1 <= i2)) return ['true'];
		return [];
	},
	MathCondition: function(profile, data, context) {
	  var exp = aa_text(data,profile,'Expression',context);
	  try
	  {
		  eval('var val = ' + exp);
		  return aa_frombool(!!val);
	  }
	  catch(e) {}
	},
	DynamicAnd: function(profile, data, context) {
		var items = ajaxart.run(data, profile, 'DynamicItems', context);
		var ctx1 = aa_ctx(context, { OriginalInput: data });

		for (var i = 0; i < items.length; i++) {
			if (!aa_bool([items[i]], profile, 'ConditionOnItem', ctx1)) return [];
		}
		return ["true"];
	},
	ContainsRegex: function(profile, data, context) {
		var text = aa_text(data, profile, 'Text', context);
		var regex = aa_text(data, profile, 'Regex', context);

		if (text.search(regex) > -1) return ["true"];
	},
	Contains: function(profile, data, context) {
		var ignoreCase = aa_bool(data, profile, 'IgnoreCase', context);
		var ignoreOrder = aa_bool(data, profile, 'IgnoreOrder', context);
		var oneOf = aa_bool(data, profile, 'OneOf', context);
		var allText = ajaxart.run(data, profile, 'AllText', context);

		var data_text = "";
		if (ajaxart.isxml(allText)) data_text = ajaxart.xml2text(allText);
		else data_text = ajaxart.totext(allText);

		data_text = data_text.replace(/\s+/g, ' '); // normalize white spaces
		//if (data_text == "") return [];
		var text_items = ajaxart.runsubprofiles(data, profile, 'Text', context);
		//var text_profiles = ajaxart.subprofiles(profile,'Text');
		var startIndex = 0;
		if (data_text == null || text_items.length == 0) return [];
		if (ignoreCase) data_text = data_text.toLowerCase();
		for (var i = 0; i < text_items.length; i++) {
			var text = ajaxart.totext_item(text_items[i]).replace(/\s+/g, ' ');
			if (ignoreCase) text = text.toLowerCase();
			var new_index = data_text.indexOf(text, startIndex);
			if (!oneOf && new_index == -1) return [];
			if (oneOf && new_index != -1) return ['true'];
			startIndex = new_index + text.length;
			if (ignoreOrder || oneOf) startIndex = 0;
		};

		if (oneOf) return [];
		return ['true'];
	},
	IsInList: function(profile, data, context) {
		var list = ajaxart.run(data, profile, 'List', context);
		var item = aa_first(data, profile, 'Item', context);
		if (item == null) return [];

		for (var i = 0; i < list.length; i++) {
			if (aa_itemsEqual(item, list[i])) return ["true"];
		}
		return [];
	},
	IsStruct: function(profile, data, context) {
		return aa_frombool(ajaxart.isObject(data[0]));
	},
	IsXml: function(profile, data, context) {
		if (data.length == 0) return [];
		if (ajaxart.isxml(data[0])) return ["true"];
		return [];
	},
	VariableExists: function(profile, data, context) {
		var varname = aa_text(data, profile, 'VarName', context);
		if (!context.vars[varname]) return [];
		return ["true"];
	},
	NotInLocalHost: function(profile, data, context) {
		if (window.location.href.indexOf('localhost') > -1) return [];
		return ["true"];
	},
	ConditionByJavascript: function(profile, data, context) {
		var code = aa_text(data, profile, 'Javascript', context);
		var result = aa_run_js_code(code, data, context);
		if (result == true) return ['true'];
	},
	IsSingleValue: function(profile, data, context) {
		var val = ajaxart.run(data, profile, 'Value', context);
		if (val.length == 1) return ["true"];
		return [];
	},
	IsMultipleValue: function(profile, data, context) {
		var value = ajaxart.run(data, profile, 'Value', context);
		if (value.length > 1) return ["true"];
		return [];
	},
	ListContains: function(profile, data, context) {
		var inner = aa_run(data,profile,'InnerList',context);
		var outer = aa_run(data,profile,'OuterList',context);
		var contains = aa_text(data,profile,'Contains',context);

		for(var i=0;i<inner.length;i++) {
			var found = itemInOuter(inner[i]);
			if (contains == 'one of' && found) return ['true'];
			if (contains == 'all' && !found) return [];
		}
		if (contains == 'one of') return [];
		return ['true'];

		function itemInOuter(item) {
			for(var i=0;i<outer.length;i++)
				if (outer[i] == item) return true;

			return false;
		}
	},
	NumberInRange: function(profile, data, context) {
		var from = aa_float(data, profile, 'From', context);
		var to = aa_float(data, profile, 'To', context);
		var num = parseFloat(ajaxart.totext(data));
		if (num >= from && num <= to) return ["true"];
		return [];
	},
	NotAnyOf: function(profile, data, context) {
		var subprofiles = ajaxart.subprofiles(profile, 'Item');

		for (var i = 0; i < subprofiles.length; i++) {
			if (aa_bool(data, subprofiles[i], "", context)) return [];
		};
		return ["true"];
	},
	PassesCondition: function(profile, data, context) {
		return aa_bool(data, profile, 'Expression', context);
	},
	IsWritableText: function(profile, data, context) {
		if (ajaxart.isxml(data)) return ["true"];
		return [];
	},
	IsNumber: function(profile, data, context) {
		var value = aa_text(data, profile, 'Value', context);
		if (value == "") return [];
		if (!isNaN(Number(value))) return ["true"];
		return [];
	},
	InStudio: function(profile, data, context) {
		return aa_frombool(ajaxart.jbart_studio);
	}

});


function aa_textInList(text, list) {
	for (var i = 0; i < list.length; i++)
	if (text == list[i]) return true;
	return false;
}

function aa_isEmpty(data, checkInnerText) {
	if (data.length == 0) return ["true"];
	for (var i=0; i<data.length; i++)
		if (!isEmpty(data[i]))
			return [];
	return ["true"];
	
	function isEmpty(item) {
		if (item.GetValue) item = item.GetValue()[0];
		if (typeof(item) == "string" && item == "") return true;
		if (ajaxart.isxml(item)) {
			if (item.nodeType == 3 || item.nodeType == 4) // inner text
			return item.nodeValue == "";
			if (item.nodeType == 2) // attribute
			return item.nodeValue == "";
			if (item.nodeType == 1 && checkInnerText) // element
			{
				if (item.attributes.length > 0) return false;
				var children = item.childNodes;
				if (children.length == 0) return true;
				if (children.length == 1 && (children[0].nodeType == 3 || children[0].nodeType == 4) && children[0].nodeValue == "") return ["true"];
			}
		}
	}
}

function aa_itemsEqual(item1, item2) {
	var item1Comp = item1;
	var item2Comp = item2;

	if (ajaxart.isxml(item1)) {
		if (item1.nodeType == 2) // att
		item1Comp = '' + item1.nodeValue;
		else item1Comp = ajaxart.xml2text(item1).replace(/\n/g, "").replace(/\r/g, "").replace(/\t/g, "").replace(/>[ ]*</g, "><");
		if (ajaxart.ishtml(item1)) item1Comp = item1Comp.replace(/class=(\w+)/g, 'class="$1"');
	}
	if (ajaxart.isxml(item2)) {
		if (item2.nodeType == 2) // att
		item2Comp = '' + item2.nodeValue;
		else item2Comp = ajaxart.xml2text(item2).replace(/\n/g, "").replace(/\r/g, "").replace(/\t/g, "").replace(/>[ ]*</g, "><");
		if (ajaxart.ishtml(item2)) item2Comp = item2Comp.replace(/class=(\w+)/g, 'class="$1"');
	}
	// Compare text to xml element : compare to inner text
	if (ajaxart.isxml(item1) && !ajaxart.isxmlelement(item2) && item1.nodeType == 1) item1Comp = ajaxart.xml.innerTextStr(item1);
	if (ajaxart.isxml(item2) && !ajaxart.isxmlelement(item1) && item2.nodeType == 1) item2Comp = ajaxart.xml.innerTextStr(item2);

	if (ajaxart.isObject(item1) || ajaxart.isObject(item2)) {
		if (ajaxart.isObject(item1) && ajaxart.isObject(item2)) {
			for (i in item1) {
				if (i != "isObject") {
					var item1val = item1[i];
					var item2val = item2[i];
					if (typeof(item2val) != typeof(item1val)) return false;
					if (typeof(item1val) == "undefined" && typeof(item2val) == "undefined") continue;
					if (aa_isArray(item1val) && item1val.length > 0) item1val = item1val[0];
					if (aa_isArray(item2val) && item2val.length > 0) item2val = item2val[0];
					if (aa_isArray(item1val) && item1val.length == 0 && aa_isArray(item2val) && item2val.length == 0) continue;
					if (!aa_itemsEqual(item1val, item2val)) return false;
				}
			}
			return true;
		}
		return false;
	}

	if (item1Comp == item2Comp) return true;

	return false;
}
ajaxart.load_usage_plugin("yesno");

aa_wicked_good_xpath();

function aa_wicked_good_xpath() {
    // https://code.google.com/p/wicked-good-xpath/
// all .toLowerCase() was removed from the code [YANIV]
  if (window.document.evaluate) {
		var xml = aa_parsexml('<xml><elem/></xml>');
		if (aa_xpath(xml,'elem')[0]) return;
	}
	
	if (ajaxart.log) ajaxart.log('Using wicked good xpath lib');
	window.jbUsingJSXPath = true;

(function(){function h(a){return function(){return this[a]}}function k(a){return function(){return a}}var l=this;
function aa(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function m(a){return"string"==typeof a}function ba(a,b,c){return a.call.apply(a.bind,arguments)}function ca(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}
function n(a,b,c){n=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ba:ca;return n.apply(null,arguments)}function da(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}function r(a){var b=s;function c(){}c.prototype=b.prototype;a.t=b.prototype;a.prototype=new c}
Function.prototype.bind=Function.prototype.bind||function(a,b){if(1<arguments.length){var c=Array.prototype.slice.call(arguments,1);c.unshift(this,a);return n.apply(null,c)}return n(this,a)};function t(a,b,c){this.a=a;this.b=b||1;this.d=c||1};var u,ea,fa,ga;function ha(){return l.navigator?l.navigator.userAgent:null}ga=fa=ea=u=!1;var w;if(w=ha()){var ia=l.navigator;u=0==w.lastIndexOf("Opera",0);ea=!u&&(-1!=w.indexOf("MSIE")||-1!=w.indexOf("Trident"));fa=!u&&-1!=w.indexOf("WebKit");ga=!u&&!fa&&!ea&&"Gecko"==ia.product}var y=ea,ja=ga,ka=fa;function la(){var a=l.document;return a?a.documentMode:void 0}var ma;
n:{var na="",oa;if(u&&l.opera)var pa=l.opera.version,na="function"==typeof pa?pa():pa;else if(ja?oa=/rv\:([^\);]+)(\)|;)/:y?oa=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:ka&&(oa=/WebKit\/(\S+)/),oa)var qa=oa.exec(ha()),na=qa?qa[1]:"";if(y){var ra=la();if(ra>parseFloat(na)){ma=String(ra);break n}}ma=na}var sa=ma,ta={};
function ua(a){if(!ta[a]){for(var b=0,c=String(sa).replace(/^[\s\xa0]+|[\s\xa0]+$/g,"").split("."),d=String(a).replace(/^[\s\xa0]+|[\s\xa0]+$/g,"").split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",p=d[f]||"",q=RegExp("(\\d*)(\\D*)","g"),x=RegExp("(\\d*)(\\D*)","g");do{var v=q.exec(g)||["","",""],J=x.exec(p)||["","",""];if(0==v[0].length&&0==J[0].length)break;b=((0==v[1].length?0:parseInt(v[1],10))<(0==J[1].length?0:parseInt(J[1],10))?-1:(0==v[1].length?0:parseInt(v[1],10))>
(0==J[1].length?0:parseInt(J[1],10))?1:0)||((0==v[2].length)<(0==J[2].length)?-1:(0==v[2].length)>(0==J[2].length)?1:0)||(v[2]<J[2]?-1:v[2]>J[2]?1:0)}while(0==b)}ta[a]=0<=b}}var va=l.document,wa=va&&y?la()||("CSS1Compat"==va.compatMode?parseInt(sa,10):5):void 0;var z=y&&!(y&&9<=wa),xa=y&&!(y&&8<=wa);function A(a,b,c,d){this.a=a;this.nodeName=c;this.nodeValue=d;this.nodeType=2;this.parentNode=this.ownerElement=b}function ya(a,b){var c=xa&&"href"==b.nodeName?a.getAttribute(b.nodeName,2):b.nodeValue;return new A(b,a,b.nodeName,c)};function za(a){this.b=a;this.a=0}function Aa(a){a=a.match(Ba);for(var b=0;b<a.length;b++)Ca.test(a[b])&&a.splice(b,1);return new za(a)}var Ba=RegExp("\\$?(?:(?![0-9-])[\\w-]+:)?(?![0-9-])[\\w-]+|\\/\\/|\\.\\.|::|\\d+(?:\\.\\d*)?|\\.\\d+|\"[^\"]*\"|'[^']*'|[!<>]=|\\s+|.","g"),Ca=/^\s/;function B(a,b){return a.b[a.a+(b||0)]}function C(a){return a.b[a.a++]};var D=Array.prototype,Da=D.indexOf?function(a,b,c){return D.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(m(a))return m(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},E=D.forEach?function(a,b,c){D.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=m(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)},Ea=D.filter?function(a,b,c){return D.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=m(a)?
a.split(""):a,p=0;p<d;p++)if(p in g){var q=g[p];b.call(c,q,p,a)&&(e[f++]=q)}return e},F=D.reduce?function(a,b,c,d){d&&(b=n(b,d));return D.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;E(a,function(c,g){e=b.call(d,e,c,g,a)});return e},Fa=D.some?function(a,b,c){return D.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=m(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
function Ga(a,b){var c;n:{c=a.length;for(var d=m(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){c=e;break n}c=-1}return 0>c?null:m(a)?a.charAt(c):a[c]}function Ha(a){return D.concat.apply(D,arguments)}function Ia(a,b,c){return 2>=arguments.length?D.slice.call(a,b):D.slice.call(a,b,c)};!ja&&!y||y&&y&&9<=wa||ja&&ua("1.9.1");y&&ua("9");function Ja(a,b){if(a.contains&&1==b.nodeType)return a==b||a.contains(b);if("undefined"!=typeof a.compareDocumentPosition)return a==b||Boolean(a.compareDocumentPosition(b)&16);for(;b&&a!=b;)b=b.parentNode;return b==a}
function Ka(a,b){if(a==b)return 0;if(a.compareDocumentPosition)return a.compareDocumentPosition(b)&2?1:-1;if(y&&!(y&&9<=wa)){if(9==a.nodeType)return-1;if(9==b.nodeType)return 1}if("sourceIndex"in a||a.parentNode&&"sourceIndex"in a.parentNode){var c=1==a.nodeType,d=1==b.nodeType;if(c&&d)return a.sourceIndex-b.sourceIndex;var e=a.parentNode,f=b.parentNode;return e==f?La(a,b):!c&&Ja(e,b)?-1*Ma(a,b):!d&&Ja(f,a)?Ma(b,a):(c?a.sourceIndex:e.sourceIndex)-(d?b.sourceIndex:f.sourceIndex)}d=9==a.nodeType?a:
a.ownerDocument||a.document;c=d.createRange();c.selectNode(a);c.collapse(!0);d=d.createRange();d.selectNode(b);d.collapse(!0);return c.compareBoundaryPoints(l.Range.START_TO_END,d)}function Ma(a,b){var c=a.parentNode;if(c==b)return-1;for(var d=b;d.parentNode!=c;)d=d.parentNode;return La(d,a)}function La(a,b){for(var c=b;c=c.previousSibling;)if(c==a)return-1;return 1};function G(a){var b=null,c=a.nodeType;1==c&&(b=a.textContent,b=void 0==b||null==b?a.innerText:b,b=void 0==b||null==b?"":b);if("string"!=typeof b)if(z&&"title"==a.nodeName&&1==c)b=a.text;else if(9==c||1==c){a=9==c?a.documentElement:a.firstChild;for(var c=0,d=[],b="";a;){do 1!=a.nodeType&&(b+=a.nodeValue),z&&"title"==a.nodeName&&(b+=a.text),d[c++]=a;while(a=a.firstChild);for(;c&&!(a=d[--c].nextSibling););}}else b=a.nodeValue;return""+b}
function H(a,b,c){if(null===b)return!0;try{if(!a.getAttribute)return!1}catch(d){return!1}xa&&"class"==b&&(b="className");return null==c?!!a.getAttribute(b):a.getAttribute(b,2)==c}function Na(a,b,c,d,e){return(z?Oa:Pa).call(null,a,b,m(c)?c:null,m(d)?d:null,e||new I)}
function Oa(a,b,c,d,e){if(a instanceof K||8==a.b||c&&null===a.b){var f=b.all;if(!f)return e;a=Qa(a);if("*"!=a&&(f=b.getElementsByTagName(a),!f))return e;if(c){for(var g=[],p=0;b=f[p++];)H(b,c,d)&&g.push(b);f=g}for(p=0;b=f[p++];)"*"==a&&"!"==b.tagName||L(e,b);return e}Ra(a,b,c,d,e);return e}
function Pa(a,b,c,d,e){b.getElementsByName&&d&&"name"==c&&!y?(b=b.getElementsByName(d),E(b,function(b){a.a(b)&&L(e,b)})):b.getElementsByClassName&&d&&"class"==c?(b=b.getElementsByClassName(d),E(b,function(b){b.className==d&&a.a(b)&&L(e,b)})):a instanceof M?Ra(a,b,c,d,e):b.getElementsByTagName&&(b=b.getElementsByTagName(a.d()),E(b,function(a){H(a,c,d)&&L(e,a)}));return e}
function Sa(a,b,c,d,e){var f;if((a instanceof K||8==a.b||c&&null===a.b)&&(f=b.childNodes)){var g=Qa(a);if("*"!=g&&(f=Ea(f,function(a){return a.tagName&&a.tagName==g}),!f))return e;c&&(f=Ea(f,function(a){return H(a,c,d)}));E(f,function(a){"*"==g&&("!"==a.tagName||"*"==g&&1!=a.nodeType)||L(e,a)});return e}return Ta(a,b,c,d,e)}function Ta(a,b,c,d,e){for(b=b.firstChild;b;b=b.nextSibling)H(b,c,d)&&a.a(b)&&L(e,b);return e}
function Ra(a,b,c,d,e){for(b=b.firstChild;b;b=b.nextSibling)H(b,c,d)&&a.a(b)&&L(e,b),Ra(a,b,c,d,e)}function Qa(a){if(a instanceof M){if(8==a.b)return"!";if(null===a.b)return"*"}return a.d()};function I(){this.b=this.a=null;this.i=0}function Ua(a){this.b=a;this.a=this.d=null}function Va(a,b){if(!a.a)return b;if(!b.a)return a;for(var c=a.a,d=b.a,e=null,f=null,g=0;c&&d;)c.b==d.b||c.b instanceof A&&d.b instanceof A&&c.b.a==d.b.a?(f=c,c=c.a,d=d.a):0<Ka(c.b,d.b)?(f=d,d=d.a):(f=c,c=c.a),(f.d=e)?e.a=f:a.a=f,e=f,g++;for(f=c||d;f;)f.d=e,e=e.a=f,g++,f=f.a;a.b=e;a.i=g;return a}function Wa(a,b){var c=new Ua(b);c.a=a.a;a.b?a.a.d=c:a.a=a.b=c;a.a=c;a.i++}
function L(a,b){var c=new Ua(b);c.d=a.b;a.a?a.b.a=c:a.a=a.b=c;a.b=c;a.i++}function Xa(a){return(a=a.a)?a.b:null}function Ya(a){return(a=Xa(a))?G(a):""}function N(a,b){return new Za(a,!!b)}function Za(a,b){this.d=a;this.b=(this.c=b)?a.b:a.a;this.a=null}function O(a){var b=a.b;if(null==b)return null;var c=a.a=b;a.b=a.c?b.d:b.a;return c.b};function $a(a){switch(a.nodeType){case 1:return da(ab,a);case 9:return $a(a.documentElement);case 2:return a.ownerElement?$a(a.ownerElement):bb;case 11:case 10:case 6:case 12:return bb;default:return a.parentNode?$a(a.parentNode):bb}}function bb(){return null}function ab(a,b){if(a.prefix==b)return a.namespaceURI||"http://www.w3.org/1999/xhtml";var c=a.getAttributeNode("xmlns:"+b);return c&&c.specified?c.value||null:a.parentNode&&9!=a.parentNode.nodeType?ab(a.parentNode,b):null};function s(a){this.g=a;this.b=this.f=!1;this.d=null}function P(a){return"\n  "+a.toString().split("\n").join("\n  ")}function cb(a,b){a.f=b}function db(a,b){a.b=b}function Q(a,b){var c=a.a(b);return c instanceof I?+Ya(c):+c}function R(a,b){var c=a.a(b);return c instanceof I?Ya(c):""+c}function S(a,b){var c=a.a(b);return c instanceof I?!!c.i:!!c};function eb(a,b,c){s.call(this,a.g);this.c=a;this.e=b;this.j=c;this.f=b.f||c.f;this.b=b.b||c.b;this.c==fb&&(c.b||c.f||4==c.g||0==c.g||!b.d?b.b||b.f||4==b.g||0==b.g||!c.d||(this.d={name:c.d.name,l:b}):this.d={name:b.d.name,l:c})}r(eb);
function T(a,b,c,d,e){b=b.a(d);c=c.a(d);var f;if(b instanceof I&&c instanceof I){e=N(b);for(d=O(e);d;d=O(e))for(b=N(c),f=O(b);f;f=O(b))if(a(G(d),G(f)))return!0;return!1}if(b instanceof I||c instanceof I){b instanceof I?e=b:(e=c,c=b);e=N(e);b=typeof c;for(d=O(e);d;d=O(e)){switch(b){case "number":d=+G(d);break;case "boolean":d=!!G(d);break;case "string":d=G(d);break;default:throw Error("Illegal primitive type for comparison.");}if(a(d,c))return!0}return!1}return e?"boolean"==typeof b||"boolean"==typeof c?
a(!!b,!!c):"number"==typeof b||"number"==typeof c?a(+b,+c):a(b,c):a(+b,+c)}eb.prototype.a=function(a){return this.c.k(this.e,this.j,a)};eb.prototype.toString=function(){var a="Binary Expression: "+this.c,a=a+P(this.e);return a+=P(this.j)};function gb(a,b,c,d){this.a=a;this.p=b;this.g=c;this.k=d}gb.prototype.toString=h("a");var hb={};function U(a,b,c,d){if(hb.hasOwnProperty(a))throw Error("Binary operator already created: "+a);a=new gb(a,b,c,d);return hb[a.toString()]=a}
U("div",6,1,function(a,b,c){return Q(a,c)/Q(b,c)});U("mod",6,1,function(a,b,c){return Q(a,c)%Q(b,c)});U("*",6,1,function(a,b,c){return Q(a,c)*Q(b,c)});U("+",5,1,function(a,b,c){return Q(a,c)+Q(b,c)});U("-",5,1,function(a,b,c){return Q(a,c)-Q(b,c)});U("<",4,2,function(a,b,c){return T(function(a,b){return a<b},a,b,c)});U(">",4,2,function(a,b,c){return T(function(a,b){return a>b},a,b,c)});U("<=",4,2,function(a,b,c){return T(function(a,b){return a<=b},a,b,c)});
U(">=",4,2,function(a,b,c){return T(function(a,b){return a>=b},a,b,c)});var fb=U("=",3,2,function(a,b,c){return T(function(a,b){return a==b},a,b,c,!0)});U("!=",3,2,function(a,b,c){return T(function(a,b){return a!=b},a,b,c,!0)});U("and",2,2,function(a,b,c){return S(a,c)&&S(b,c)});U("or",1,2,function(a,b,c){return S(a,c)||S(b,c)});function ib(a,b){if(b.a.length&&4!=a.g)throw Error("Primary expression must evaluate to nodeset if filter has predicate(s).");s.call(this,a.g);this.c=a;this.e=b;this.f=a.f;this.b=a.b}r(ib);ib.prototype.a=function(a){a=this.c.a(a);return jb(this.e,a)};ib.prototype.toString=function(){var a;a="Filter:"+P(this.c);return a+=P(this.e)};function kb(a,b){if(b.length<a.o)throw Error("Function "+a.h+" expects at least"+a.o+" arguments, "+b.length+" given");if(null!==a.n&&b.length>a.n)throw Error("Function "+a.h+" expects at most "+a.n+" arguments, "+b.length+" given");a.s&&E(b,function(b,d){if(4!=b.g)throw Error("Argument "+d+" to function "+a.h+" is not of type Nodeset: "+b);});s.call(this,a.g);this.e=a;this.c=b;cb(this,a.f||Fa(b,function(a){return a.f}));db(this,a.r&&!b.length||a.q&&!!b.length||Fa(b,function(a){return a.b}))}r(kb);
kb.prototype.a=function(a){return this.e.k.apply(null,Ha(a,this.c))};kb.prototype.toString=function(){var a="Function: "+this.e;if(this.c.length)var b=F(this.c,function(a,b){return a+P(b)},"Arguments:"),a=a+P(b);return a};function lb(a,b,c,d,e,f,g,p,q){this.h=a;this.g=b;this.f=c;this.r=d;this.q=e;this.k=f;this.o=g;this.n=void 0!==p?p:g;this.s=!!q}lb.prototype.toString=h("h");var mb={};
function V(a,b,c,d,e,f,g,p){if(mb.hasOwnProperty(a))throw Error("Function already created: "+a+".");mb[a]=new lb(a,b,c,d,!1,e,f,g,p)}V("boolean",2,!1,!1,function(a,b){return S(b,a)},1);V("ceiling",1,!1,!1,function(a,b){return Math.ceil(Q(b,a))},1);V("concat",3,!1,!1,function(a,b){var c=Ia(arguments,1);return F(c,function(b,c){return b+R(c,a)},"")},2,null);V("contains",2,!1,!1,function(a,b,c){b=R(b,a);a=R(c,a);return-1!=b.indexOf(a)},2);V("count",1,!1,!1,function(a,b){return b.a(a).i},1,1,!0);
V("false",2,!1,!1,k(!1),0);V("floor",1,!1,!1,function(a,b){return Math.floor(Q(b,a))},1);V("id",4,!1,!1,function(a,b){function c(a){if(z){var b=e.all[a];if(b){if(b.nodeType&&a==b.id)return b;if(b.length)return Ga(b,function(b){return a==b.id})}return null}return e.getElementById(a)}var d=a.a,e=9==d.nodeType?d:d.ownerDocument,d=R(b,a).split(/\s+/),f=[];E(d,function(a){a=c(a);!a||0<=Da(f,a)||f.push(a)});f.sort(Ka);var g=new I;E(f,function(a){L(g,a)});return g},1);V("lang",2,!1,!1,k(!1),1);
V("last",1,!0,!1,function(a){if(1!=arguments.length)throw Error("Function last expects ()");return a.d},0);V("local-name",3,!1,!0,function(a,b){var c=b?Xa(b.a(a)):a.a;return c?c.nodeName:""},0,1,!0);V("name",3,!1,!0,function(a,b){var c=b?Xa(b.a(a)):a.a;return c?c.nodeName:""},0,1,!0);V("namespace-uri",3,!0,!1,k(""),0,1,!0);V("normalize-space",3,!1,!0,function(a,b){return(b?R(b,a):G(a.a)).replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")},0,1);
V("not",2,!1,!1,function(a,b){return!S(b,a)},1);V("number",1,!1,!0,function(a,b){return b?Q(b,a):+G(a.a)},0,1);V("position",1,!0,!1,function(a){return a.b},0);V("round",1,!1,!1,function(a,b){return Math.round(Q(b,a))},1);V("starts-with",2,!1,!1,function(a,b,c){b=R(b,a);a=R(c,a);return 0==b.lastIndexOf(a,0)},2);V("string",3,!1,!0,function(a,b){return b?R(b,a):G(a.a)},0,1);V("string-length",1,!1,!0,function(a,b){return(b?R(b,a):G(a.a)).length},0,1);
V("substring",3,!1,!1,function(a,b,c,d){c=Q(c,a);if(isNaN(c)||Infinity==c||-Infinity==c)return"";d=d?Q(d,a):Infinity;if(isNaN(d)||-Infinity===d)return"";c=Math.round(c)-1;var e=Math.max(c,0);a=R(b,a);if(Infinity==d)return a.substring(e);b=Math.round(d);return a.substring(e,c+b)},2,3);V("substring-after",3,!1,!1,function(a,b,c){b=R(b,a);a=R(c,a);c=b.indexOf(a);return-1==c?"":b.substring(c+a.length)},2);
V("substring-before",3,!1,!1,function(a,b,c){b=R(b,a);a=R(c,a);a=b.indexOf(a);return-1==a?"":b.substring(0,a)},2);V("sum",1,!1,!1,function(a,b){for(var c=N(b.a(a)),d=0,e=O(c);e;e=O(c))d+=+G(e);return d},1,1,!0);V("translate",3,!1,!1,function(a,b,c,d){b=R(b,a);c=R(c,a);var e=R(d,a);a=[];for(d=0;d<c.length;d++){var f=c.charAt(d);f in a||(a[f]=e.charAt(d))}c="";for(d=0;d<b.length;d++)f=b.charAt(d),c+=f in a?a[f]:f;return c},3);V("true",2,!1,!1,k(!0),0);function M(a,b){this.e=a;this.c=void 0!==b?b:null;this.b=null;switch(a){case "comment":this.b=8;break;case "text":this.b=3;break;case "processing-instruction":this.b=7;break;case "node":break;default:throw Error("Unexpected argument");}}function nb(a){return"comment"==a||"text"==a||"processing-instruction"==a||"node"==a}M.prototype.a=function(a){return null===this.b||this.b==a.nodeType};M.prototype.d=h("e");M.prototype.toString=function(){var a="Kind Test: "+this.e;null===this.c||(a+=P(this.c));return a};function ob(a){s.call(this,3);this.c=a.substring(1,a.length-1)}r(ob);ob.prototype.a=h("c");ob.prototype.toString=function(){return"Literal: "+this.c};function K(a,b){this.h=a;this.c=b?b:"http://www.w3.org/1999/xhtml"}K.prototype.a=function(a){var b=a.nodeType;return 1!=b&&2!=b?!1:"*"!=this.h&&this.h!=a.nodeName?!1:this.c==(a.namespaceURI?a.namespaceURI:"http://www.w3.org/1999/xhtml")};K.prototype.d=h("h");K.prototype.toString=function(){return"Name Test: "+("http://www.w3.org/1999/xhtml"==this.c?"":this.c+":")+this.h};function pb(a){s.call(this,1);this.c=a}r(pb);pb.prototype.a=h("c");pb.prototype.toString=function(){return"Number: "+this.c};function qb(a,b){s.call(this,a.g);this.e=a;this.c=b;this.f=a.f;this.b=a.b;if(1==this.c.length){var c=this.c[0];c.m||c.c!=rb||(c=c.j,"*"!=c.d()&&(this.d={name:c.d(),l:null}))}}r(qb);function sb(){s.call(this,4)}r(sb);sb.prototype.a=function(a){var b=new I;a=a.a;9==a.nodeType?L(b,a):L(b,a.ownerDocument);return b};sb.prototype.toString=k("Root Helper Expression");function tb(){s.call(this,4)}r(tb);tb.prototype.a=function(a){var b=new I;L(b,a.a);return b};tb.prototype.toString=k("Context Helper Expression");
qb.prototype.a=function(a){var b=this.e.a(a);if(!(b instanceof I))throw Error("Filter expression must evaluate to nodeset.");a=this.c;for(var c=0,d=a.length;c<d&&b.i;c++){var e=a[c],f=N(b,e.c.a),g;if(e.f||e.c!=ub)if(e.f||e.c!=vb)for(g=O(f),b=e.a(new t(g));null!=(g=O(f));)g=e.a(new t(g)),b=Va(b,g);else g=O(f),b=e.a(new t(g));else{for(g=O(f);(b=O(f))&&(!g.contains||g.contains(b))&&b.compareDocumentPosition(g)&8;g=b);b=e.a(new t(g))}}return b};
qb.prototype.toString=function(){var a;a="Path Expression:"+P(this.e);if(this.c.length){var b=F(this.c,function(a,b){return a+P(b)},"Steps:");a+=P(b)}return a};function wb(a,b){this.a=a;this.b=!!b}
function jb(a,b,c){for(c=c||0;c<a.a.length;c++)for(var d=a.a[c],e=N(b),f=b.i,g,p=0;g=O(e);p++){var q=a.b?f-p:p+1;g=d.a(new t(g,q,f));if("number"==typeof g)q=q==g;else if("string"==typeof g||"boolean"==typeof g)q=!!g;else if(g instanceof I)q=0<g.i;else throw Error("Predicate.evaluate returned an unexpected type.");if(!q){q=e;g=q.d;var x=q.a;if(!x)throw Error("Next must be called at least once before remove.");var v=x.d,x=x.a;v?v.a=x:g.a=x;x?x.d=v:g.b=v;g.i--;q.a=null}}return b}
wb.prototype.toString=function(){return F(this.a,function(a,b){return a+P(b)},"Predicates:")};function W(a,b,c,d){s.call(this,4);this.c=a;this.j=b;this.e=c||new wb([]);this.m=!!d;b=0<this.e.a.length?this.e.a[0].d:null;a.b&&b&&(a=b.name,a=z?a:a,this.d={name:a,l:b.l});n:{a=this.e;for(b=0;b<a.a.length;b++)if(c=a.a[b],c.f||1==c.g||0==c.g){a=!0;break n}a=!1}this.f=a}r(W);
W.prototype.a=function(a){var b=a.a,c=null,c=this.d,d=null,e=null,f=0;c&&(d=c.name,e=c.l?R(c.l,a):null,f=1);if(this.m)if(this.f||this.c!=xb)if(a=N((new W(yb,new M("node"))).a(a)),b=O(a))for(c=this.k(b,d,e,f);null!=(b=O(a));)c=Va(c,this.k(b,d,e,f));else c=new I;else c=Na(this.j,b,d,e),c=jb(this.e,c,f);else c=this.k(a.a,d,e,f);return c};W.prototype.k=function(a,b,c,d){a=this.c.d(this.j,a,b,c);return a=jb(this.e,a,d)};
W.prototype.toString=function(){var a;a="Step:"+P("Operator: "+(this.m?"//":"/"));this.c.h&&(a+=P("Axis: "+this.c));a+=P(this.j);if(this.e.a.length){var b=F(this.e.a,function(a,b){return a+P(b)},"Predicates:");a+=P(b)}return a};function zb(a,b,c,d){this.h=a;this.d=b;this.a=c;this.b=d}zb.prototype.toString=h("h");var Ab={};function X(a,b,c,d){if(Ab.hasOwnProperty(a))throw Error("Axis already created: "+a);b=new zb(a,b,c,!!d);return Ab[a]=b}
X("ancestor",function(a,b){for(var c=new I,d=b;d=d.parentNode;)a.a(d)&&Wa(c,d);return c},!0);X("ancestor-or-self",function(a,b){var c=new I,d=b;do a.a(d)&&Wa(c,d);while(d=d.parentNode);return c},!0);
var rb=X("attribute",function(a,b){var c=new I,d=a.d();if("style"==d&&b.style&&z)return L(c,new A(b.style,b,"style",b.style.cssText)),c;var e=b.attributes;if(e)if(a instanceof M&&null===a.b||"*"==d)for(var d=0,f;f=e[d];d++)z?f.nodeValue&&L(c,ya(b,f)):L(c,f);else(f=e.getNamedItem(d))&&(z?f.nodeValue&&L(c,ya(b,f)):L(c,f));return c},!1),xb=X("child",function(a,b,c,d,e){return(z?Sa:Ta).call(null,a,b,m(c)?c:null,m(d)?d:null,e||new I)},!1,!0);X("descendant",Na,!1,!0);
var yb=X("descendant-or-self",function(a,b,c,d){var e=new I;H(b,c,d)&&a.a(b)&&L(e,b);return Na(a,b,c,d,e)},!1,!0),ub=X("following",function(a,b,c,d){var e=new I;do for(var f=b;f=f.nextSibling;)H(f,c,d)&&a.a(f)&&L(e,f),e=Na(a,f,c,d,e);while(b=b.parentNode);return e},!1,!0);X("following-sibling",function(a,b){for(var c=new I,d=b;d=d.nextSibling;)a.a(d)&&L(c,d);return c},!1);X("namespace",function(){return new I},!1);
var Bb=X("parent",function(a,b){var c=new I;if(9==b.nodeType)return c;if(2==b.nodeType)return L(c,b.ownerElement),c;var d=b.parentNode;a.a(d)&&L(c,d);return c},!1),vb=X("preceding",function(a,b,c,d){var e=new I,f=[];do f.unshift(b);while(b=b.parentNode);for(var g=1,p=f.length;g<p;g++){var q=[];for(b=f[g];b=b.previousSibling;)q.unshift(b);for(var x=0,v=q.length;x<v;x++)b=q[x],H(b,c,d)&&a.a(b)&&L(e,b),e=Na(a,b,c,d,e)}return e},!0,!0);
X("preceding-sibling",function(a,b){for(var c=new I,d=b;d=d.previousSibling;)a.a(d)&&Wa(c,d);return c},!0);var Cb=X("self",function(a,b){var c=new I;a.a(b)&&L(c,b);return c},!1);function Db(a){s.call(this,1);this.c=a;this.f=a.f;this.b=a.b}r(Db);Db.prototype.a=function(a){return-Q(this.c,a)};Db.prototype.toString=function(){return"Unary Expression: -"+P(this.c)};function Eb(a){s.call(this,4);this.c=a;cb(this,Fa(this.c,function(a){return a.f}));db(this,Fa(this.c,function(a){return a.b}))}r(Eb);Eb.prototype.a=function(a){var b=new I;E(this.c,function(c){c=c.a(a);if(!(c instanceof I))throw Error("Path expression must evaluate to NodeSet.");b=Va(b,c)});return b};Eb.prototype.toString=function(){return F(this.c,function(a,b){return a+P(b)},"Union Expression:")};function Fb(a,b){this.a=a;this.b=b}function Gb(a){for(var b,c=[];;){Y(a,"Missing right hand side of binary expression.");b=Hb(a);var d=C(a.a);if(!d)break;var e=(d=hb[d]||null)&&d.p;if(!e){a.a.a--;break}for(;c.length&&e<=c[c.length-1].p;)b=new eb(c.pop(),c.pop(),b);c.push(b,d)}for(;c.length;)b=new eb(c.pop(),c.pop(),b);return b}function Y(a,b){if(a.a.b.length<=a.a.a)throw Error(b);}function Ib(a,b){var c=C(a.a);if(c!=b)throw Error("Bad token, expected: "+b+" got: "+c);}
function Jb(a){a=C(a.a);if(")"!=a)throw Error("Bad token: "+a);}function Kb(a){a=C(a.a);if(2>a.length)throw Error("Unclosed literal string");return new ob(a)}function Lb(a){var b=C(a.a),c=b.indexOf(":");if(-1==c)return new K(b);var d=b.substring(0,c);a=a.b(d);if(!a)throw Error("Namespace prefix not declared: "+d);b=b.substr(c+1);return new K(b,a)}
function Mb(a){var b,c=[],d;if("/"==B(a.a)||"//"==B(a.a)){b=C(a.a);d=B(a.a);if("/"==b&&(a.a.b.length<=a.a.a||"."!=d&&".."!=d&&"@"!=d&&"*"!=d&&!/(?![0-9])[\w]/.test(d)))return new sb;d=new sb;Y(a,"Missing next location step.");b=Nb(a,b);c.push(b)}else{n:{b=B(a.a);d=b.charAt(0);switch(d){case "$":throw Error("Variable reference not allowed in HTML XPath");case "(":C(a.a);b=Gb(a);Y(a,'unclosed "("');Ib(a,")");break;case '"':case "'":b=Kb(a);break;default:if(isNaN(+b))if(!nb(b)&&/(?![0-9])[\w]/.test(d)&&
"("==B(a.a,1)){b=C(a.a);b=mb[b]||null;C(a.a);for(d=[];")"!=B(a.a);){Y(a,"Missing function argument list.");d.push(Gb(a));if(","!=B(a.a))break;C(a.a)}Y(a,"Unclosed function argument list.");Jb(a);b=new kb(b,d)}else{b=null;break n}else b=new pb(+C(a.a))}"["==B(a.a)&&(d=new wb(Ob(a)),b=new ib(b,d))}if(b)if("/"==B(a.a)||"//"==B(a.a))d=b;else return b;else b=Nb(a,"/"),d=new tb,c.push(b)}for(;"/"==B(a.a)||"//"==B(a.a);)b=C(a.a),Y(a,"Missing next location step."),b=Nb(a,b),c.push(b);return new qb(d,c)}
function Nb(a,b){var c,d,e;if("/"!=b&&"//"!=b)throw Error('Step op should be "/" or "//"');if("."==B(a.a))return d=new W(Cb,new M("node")),C(a.a),d;if(".."==B(a.a))return d=new W(Bb,new M("node")),C(a.a),d;var f;if("@"==B(a.a))f=rb,C(a.a),Y(a,"Missing attribute name");else if("::"==B(a.a,1)){if(!/(?![0-9])[\w]/.test(B(a.a).charAt(0)))throw Error("Bad token: "+C(a.a));c=C(a.a);f=Ab[c]||null;if(!f)throw Error("No axis with name: "+c);C(a.a);Y(a,"Missing node name")}else f=xb;c=B(a.a);if(/(?![0-9])[\w]/.test(c.charAt(0)))if("("==
B(a.a,1)){if(!nb(c))throw Error("Invalid node type: "+c);c=C(a.a);if(!nb(c))throw Error("Invalid type name: "+c);Ib(a,"(");Y(a,"Bad nodetype");e=B(a.a).charAt(0);var g=null;if('"'==e||"'"==e)g=Kb(a);Y(a,"Bad nodetype");Jb(a);c=new M(c,g)}else c=Lb(a);else if("*"==c)c=Lb(a);else throw Error("Bad token: "+C(a.a));e=new wb(Ob(a),f.a);return d||new W(f,c,e,"//"==b)}
function Ob(a){for(var b=[];"["==B(a.a);){C(a.a);Y(a,"Missing predicate expression.");var c=Gb(a);b.push(c);Y(a,"Unclosed predicate expression.");Ib(a,"]")}return b}function Hb(a){if("-"==B(a.a))return C(a.a),new Db(Hb(a));var b=Mb(a);if("|"!=B(a.a))a=b;else{for(b=[b];"|"==C(a.a);)Y(a,"Missing next union location path."),b.push(Mb(a));a.a.a--;a=new Eb(b)}return a};function Pb(a,b){if(!a.length)throw Error("Empty XPath expression.");var c=Aa(a);if(c.b.length<=c.a)throw Error("Invalid XPath expression.");b?"function"==aa(b)||(b=n(b.lookupNamespaceURI,b)):b=k(null);var d=Gb(new Fb(c,b));if(!(c.b.length<=c.a))throw Error("Bad token: "+C(c));this.evaluate=function(a,b){var c=d.a(new t(a));return new Z(c,b)}}
function Z(a,b){if(0==b)if(a instanceof I)b=4;else if("string"==typeof a)b=2;else if("number"==typeof a)b=1;else if("boolean"==typeof a)b=3;else throw Error("Unexpected evaluation result.");if(2!=b&&1!=b&&3!=b&&!(a instanceof I))throw Error("value could not be converted to the specified type");this.resultType=b;var c;switch(b){case 2:this.stringValue=a instanceof I?Ya(a):""+a;break;case 1:this.numberValue=a instanceof I?+Ya(a):+a;break;case 3:this.booleanValue=a instanceof I?0<a.i:!!a;break;case 4:case 5:case 6:case 7:var d=
N(a);c=[];for(var e=O(d);e;e=O(d))c.push(e instanceof A?e.a:e);this.snapshotLength=a.i;this.invalidIteratorState=!1;break;case 8:case 9:d=Xa(a);this.singleNodeValue=d instanceof A?d.a:d;break;default:throw Error("Unknown XPathResult type.");}var f=0;this.iterateNext=function(){if(4!=b&&5!=b)throw Error("iterateNext called with wrong result type");return f>=c.length?null:c[f++]};this.snapshotItem=function(a){if(6!=b&&7!=b)throw Error("snapshotItem called with wrong result type");return a>=c.length||
0>a?null:c[a]}}Z.ANY_TYPE=0;Z.NUMBER_TYPE=1;Z.STRING_TYPE=2;Z.BOOLEAN_TYPE=3;Z.UNORDERED_NODE_ITERATOR_TYPE=4;Z.ORDERED_NODE_ITERATOR_TYPE=5;Z.UNORDERED_NODE_SNAPSHOT_TYPE=6;Z.ORDERED_NODE_SNAPSHOT_TYPE=7;Z.ANY_UNORDERED_NODE_TYPE=8;Z.FIRST_ORDERED_NODE_TYPE=9;function Qb(a){this.lookupNamespaceURI=$a(a)};function Rb(a){a=a||l;var b=a.document;(a.XPathResult=Z,b.evaluate2=function(a,b,e,f){return(new Pb(a,e)).evaluate(b,f)},b.createExpression=function(a,b){return new Pb(a,b)},b.createNSResolver=function(a){return new Qb(a)})}var Sb=["wgxpath","install"],$=l;Sb[0]in $||!$.execScript||$.execScript("var "+Sb[0]);for(var Tb;Sb.length&&(Tb=Sb.shift());)Sb.length||void 0===Rb?$=$[Tb]?$[Tb]:$[Tb]={}:$[Tb]=Rb;})()

	wgxpath.install();
}

function aa_moment(arg) {
	if (!window.moment)
		console.error('moment.js lib is not loaded: http://momentjs.com/');
	if (arg)
		return moment.apply(moment,arguments);
	else
		return moment;
}
/*!

JSZip - A Javascript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/
!function(a){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=a();else if("function"==typeof define&&define.amd)define([],a);else{var b;"undefined"!=typeof window?b=window:"undefined"!=typeof global?b=global:"undefined"!=typeof self&&(b=self),b.JSZip=a()}}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error("Cannot find module '"+g+"'")}var j=c[g]={exports:{}};b[g][0].call(j.exports,function(a){var c=b[g][1][a];return e(c?c:a)},j,j.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){"use strict";var d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";c.encode=function(a){for(var b,c,e,f,g,h,i,j="",k=0;k<a.length;)b=a.charCodeAt(k++),c=a.charCodeAt(k++),e=a.charCodeAt(k++),f=b>>2,g=(3&b)<<4|c>>4,h=(15&c)<<2|e>>6,i=63&e,isNaN(c)?h=i=64:isNaN(e)&&(i=64),j=j+d.charAt(f)+d.charAt(g)+d.charAt(h)+d.charAt(i);return j},c.decode=function(a){var b,c,e,f,g,h,i,j="",k=0;for(a=a.replace(/[^A-Za-z0-9\+\/\=]/g,"");k<a.length;)f=d.indexOf(a.charAt(k++)),g=d.indexOf(a.charAt(k++)),h=d.indexOf(a.charAt(k++)),i=d.indexOf(a.charAt(k++)),b=f<<2|g>>4,c=(15&g)<<4|h>>2,e=(3&h)<<6|i,j+=String.fromCharCode(b),64!=h&&(j+=String.fromCharCode(c)),64!=i&&(j+=String.fromCharCode(e));return j}},{}],2:[function(a,b){"use strict";function c(){this.compressedSize=0,this.uncompressedSize=0,this.crc32=0,this.compressionMethod=null,this.compressedContent=null}c.prototype={getContent:function(){return null},getCompressedContent:function(){return null}},b.exports=c},{}],3:[function(a,b,c){"use strict";c.STORE={magic:"\x00\x00",compress:function(a){return a},uncompress:function(a){return a},compressInputType:null,uncompressInputType:null},c.DEFLATE=a("./flate")},{"./flate":8}],4:[function(a,b){"use strict";var c=a("./utils"),d=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];b.exports=function(a,b){if("undefined"==typeof a||!a.length)return 0;var e="string"!==c.getTypeOf(a);"undefined"==typeof b&&(b=0);var f=0,g=0,h=0;b=-1^b;for(var i=0,j=a.length;j>i;i++)h=e?a[i]:a.charCodeAt(i),g=255&(b^h),f=d[g],b=b>>>8^f;return-1^b}},{"./utils":21}],5:[function(a,b){"use strict";function c(){this.data=null,this.length=0,this.index=0}var d=a("./utils");c.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<a||0>a)throw new Error("End of data reached (data length = "+this.length+", asked index = "+a+"). Corrupted zip ?")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(){},readInt:function(a){var b,c=0;for(this.checkOffset(a),b=this.index+a-1;b>=this.index;b--)c=(c<<8)+this.byteAt(b);return this.index+=a,c},readString:function(a){return d.transformTo("string",this.readData(a))},readData:function(){},lastIndexOfSignature:function(){},readDate:function(){var a=this.readInt(4);return new Date((a>>25&127)+1980,(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1)}},b.exports=c},{"./utils":21}],6:[function(a,b,c){"use strict";c.base64=!1,c.binary=!1,c.dir=!1,c.createFolders=!1,c.date=null,c.compression=null,c.compressionOptions=null,c.comment=null,c.unixPermissions=null,c.dosPermissions=null},{}],7:[function(a,b,c){"use strict";var d=a("./utils");c.string2binary=function(a){return d.string2binary(a)},c.string2Uint8Array=function(a){return d.transformTo("uint8array",a)},c.uint8Array2String=function(a){return d.transformTo("string",a)},c.string2Blob=function(a){var b=d.transformTo("arraybuffer",a);return d.arrayBuffer2Blob(b)},c.arrayBuffer2Blob=function(a){return d.arrayBuffer2Blob(a)},c.transformTo=function(a,b){return d.transformTo(a,b)},c.getTypeOf=function(a){return d.getTypeOf(a)},c.checkSupport=function(a){return d.checkSupport(a)},c.MAX_VALUE_16BITS=d.MAX_VALUE_16BITS,c.MAX_VALUE_32BITS=d.MAX_VALUE_32BITS,c.pretty=function(a){return d.pretty(a)},c.findCompression=function(a){return d.findCompression(a)},c.isRegExp=function(a){return d.isRegExp(a)}},{"./utils":21}],8:[function(a,b,c){"use strict";var d="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,e=a("pako");c.uncompressInputType=d?"uint8array":"array",c.compressInputType=d?"uint8array":"array",c.magic="\b\x00",c.compress=function(a,b){return e.deflateRaw(a,{level:b.level||-1})},c.uncompress=function(a){return e.inflateRaw(a)}},{pako:24}],9:[function(a,b){"use strict";function c(a,b){return this instanceof c?(this.files={},this.comment=null,this.root="",a&&this.load(a,b),void(this.clone=function(){var a=new c;for(var b in this)"function"!=typeof this[b]&&(a[b]=this[b]);return a})):new c(a,b)}var d=a("./base64");c.prototype=a("./object"),c.prototype.load=a("./load"),c.support=a("./support"),c.defaults=a("./defaults"),c.utils=a("./deprecatedPublicUtils"),c.base64={encode:function(a){return d.encode(a)},decode:function(a){return d.decode(a)}},c.compressions=a("./compressions"),b.exports=c},{"./base64":1,"./compressions":3,"./defaults":6,"./deprecatedPublicUtils":7,"./load":10,"./object":13,"./support":17}],10:[function(a,b){"use strict";var c=a("./base64"),d=a("./zipEntries");b.exports=function(a,b){var e,f,g,h;for(b=b||{},b.base64&&(a=c.decode(a)),f=new d(a,b),e=f.files,g=0;g<e.length;g++)h=e[g],this.file(h.fileName,h.decompressed,{binary:!0,optimizedBinaryString:!0,date:h.date,dir:h.dir,comment:h.fileComment.length?h.fileComment:null,unixPermissions:h.unixPermissions,dosPermissions:h.dosPermissions,createFolders:b.createFolders});return f.zipComment.length&&(this.comment=f.zipComment),this}},{"./base64":1,"./zipEntries":22}],11:[function(a,b){(function(a){"use strict";b.exports=function(b,c){return new a(b,c)},b.exports.test=function(b){return a.isBuffer(b)}}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{}],12:[function(a,b){"use strict";function c(a){this.data=a,this.length=this.data.length,this.index=0}var d=a("./uint8ArrayReader");c.prototype=new d,c.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.index,this.index+a);return this.index+=a,b},b.exports=c},{"./uint8ArrayReader":18}],13:[function(a,b){"use strict";var c=a("./support"),d=a("./utils"),e=a("./crc32"),f=a("./signature"),g=a("./defaults"),h=a("./base64"),i=a("./compressions"),j=a("./compressedObject"),k=a("./nodeBuffer"),l=a("./utf8"),m=a("./stringWriter"),n=a("./uint8ArrayWriter"),o=function(a){if(a._data instanceof j&&(a._data=a._data.getContent(),a.options.binary=!0,a.options.base64=!1,"uint8array"===d.getTypeOf(a._data))){var b=a._data;a._data=new Uint8Array(b.length),0!==b.length&&a._data.set(b,0)}return a._data},p=function(a){var b=o(a),e=d.getTypeOf(b);return"string"===e?!a.options.binary&&c.nodebuffer?k(b,"utf-8"):a.asBinary():b},q=function(a){var b=o(this);return null===b||"undefined"==typeof b?"":(this.options.base64&&(b=h.decode(b)),b=a&&this.options.binary?D.utf8decode(b):d.transformTo("string",b),a||this.options.binary||(b=d.transformTo("string",D.utf8encode(b))),b)},r=function(a,b,c){this.name=a,this.dir=c.dir,this.date=c.date,this.comment=c.comment,this.unixPermissions=c.unixPermissions,this.dosPermissions=c.dosPermissions,this._data=b,this.options=c,this._initialMetadata={dir:c.dir,date:c.date}};r.prototype={asText:function(){return q.call(this,!0)},asBinary:function(){return q.call(this,!1)},asNodeBuffer:function(){var a=p(this);return d.transformTo("nodebuffer",a)},asUint8Array:function(){var a=p(this);return d.transformTo("uint8array",a)},asArrayBuffer:function(){return this.asUint8Array().buffer}};var s=function(a,b){var c,d="";for(c=0;b>c;c++)d+=String.fromCharCode(255&a),a>>>=8;return d},t=function(){var a,b,c={};for(a=0;a<arguments.length;a++)for(b in arguments[a])arguments[a].hasOwnProperty(b)&&"undefined"==typeof c[b]&&(c[b]=arguments[a][b]);return c},u=function(a){return a=a||{},a.base64!==!0||null!==a.binary&&void 0!==a.binary||(a.binary=!0),a=t(a,g),a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),a},v=function(a,b,c){var e,f=d.getTypeOf(b);if(c=u(c),"string"==typeof c.unixPermissions&&(c.unixPermissions=parseInt(c.unixPermissions,8)),c.unixPermissions&&16384&c.unixPermissions&&(c.dir=!0),c.dosPermissions&&16&c.dosPermissions&&(c.dir=!0),c.dir&&(a=x(a)),c.createFolders&&(e=w(a))&&y.call(this,e,!0),c.dir||null===b||"undefined"==typeof b)c.base64=!1,c.binary=!1,b=null,f=null;else if("string"===f)c.binary&&!c.base64&&c.optimizedBinaryString!==!0&&(b=d.string2binary(b));else{if(c.base64=!1,c.binary=!0,!(f||b instanceof j))throw new Error("The data of '"+a+"' is in an unsupported format !");"arraybuffer"===f&&(b=d.transformTo("uint8array",b))}var g=new r(a,b,c);return this.files[a]=g,g},w=function(a){"/"==a.slice(-1)&&(a=a.substring(0,a.length-1));var b=a.lastIndexOf("/");return b>0?a.substring(0,b):""},x=function(a){return"/"!=a.slice(-1)&&(a+="/"),a},y=function(a,b){return b="undefined"!=typeof b?b:!1,a=x(a),this.files[a]||v.call(this,a,null,{dir:!0,createFolders:b}),this.files[a]},z=function(a,b,c){var f,g=new j;return a._data instanceof j?(g.uncompressedSize=a._data.uncompressedSize,g.crc32=a._data.crc32,0===g.uncompressedSize||a.dir?(b=i.STORE,g.compressedContent="",g.crc32=0):a._data.compressionMethod===b.magic?g.compressedContent=a._data.getCompressedContent():(f=a._data.getContent(),g.compressedContent=b.compress(d.transformTo(b.compressInputType,f),c))):(f=p(a),(!f||0===f.length||a.dir)&&(b=i.STORE,f=""),g.uncompressedSize=f.length,g.crc32=e(f),g.compressedContent=b.compress(d.transformTo(b.compressInputType,f),c)),g.compressedSize=g.compressedContent.length,g.compressionMethod=b.magic,g},A=function(a,b){var c=a;return a||(c=b?16893:33204),(65535&c)<<16},B=function(a){return 63&(a||0)},C=function(a,b,c,g,h){var i,j,k,m,n=(c.compressedContent,d.transformTo("string",l.utf8encode(b.name))),o=b.comment||"",p=d.transformTo("string",l.utf8encode(o)),q=n.length!==b.name.length,r=p.length!==o.length,t=b.options,u="",v="",w="";k=b._initialMetadata.dir!==b.dir?b.dir:t.dir,m=b._initialMetadata.date!==b.date?b.date:t.date;var x=0,y=0;k&&(x|=16),"UNIX"===h?(y=798,x|=A(b.unixPermissions,k)):(y=20,x|=B(b.dosPermissions,k)),i=m.getHours(),i<<=6,i|=m.getMinutes(),i<<=5,i|=m.getSeconds()/2,j=m.getFullYear()-1980,j<<=4,j|=m.getMonth()+1,j<<=5,j|=m.getDate(),q&&(v=s(1,1)+s(e(n),4)+n,u+="up"+s(v.length,2)+v),r&&(w=s(1,1)+s(this.crc32(p),4)+p,u+="uc"+s(w.length,2)+w);var z="";z+="\n\x00",z+=q||r?"\x00\b":"\x00\x00",z+=c.compressionMethod,z+=s(i,2),z+=s(j,2),z+=s(c.crc32,4),z+=s(c.compressedSize,4),z+=s(c.uncompressedSize,4),z+=s(n.length,2),z+=s(u.length,2);var C=f.LOCAL_FILE_HEADER+z+n+u,D=f.CENTRAL_FILE_HEADER+s(y,2)+z+s(p.length,2)+"\x00\x00\x00\x00"+s(x,4)+s(g,4)+n+u+p;return{fileRecord:C,dirRecord:D,compressedObject:c}},D={load:function(){throw new Error("Load method is not defined. Is the file jszip-load.js included ?")},filter:function(a){var b,c,d,e,f=[];for(b in this.files)this.files.hasOwnProperty(b)&&(d=this.files[b],e=new r(d.name,d._data,t(d.options)),c=b.slice(this.root.length,b.length),b.slice(0,this.root.length)===this.root&&a(c,e)&&f.push(e));return f},file:function(a,b,c){if(1===arguments.length){if(d.isRegExp(a)){var e=a;return this.filter(function(a,b){return!b.dir&&e.test(a)})}return this.filter(function(b,c){return!c.dir&&b===a})[0]||null}return a=this.root+a,v.call(this,a,b,c),this},folder:function(a){if(!a)return this;if(d.isRegExp(a))return this.filter(function(b,c){return c.dir&&a.test(b)});var b=this.root+a,c=y.call(this,b),e=this.clone();return e.root=c.name,e},remove:function(a){a=this.root+a;var b=this.files[a];if(b||("/"!=a.slice(-1)&&(a+="/"),b=this.files[a]),b&&!b.dir)delete this.files[a];else for(var c=this.filter(function(b,c){return c.name.slice(0,a.length)===a}),d=0;d<c.length;d++)delete this.files[c[d].name];return this},generate:function(a){a=t(a||{},{base64:!0,compression:"STORE",compressionOptions:null,type:"base64",platform:"DOS",comment:null,mimeType:"application/zip"}),d.checkSupport(a.type),("darwin"===a.platform||"freebsd"===a.platform||"linux"===a.platform||"sunos"===a.platform)&&(a.platform="UNIX"),"win32"===a.platform&&(a.platform="DOS");var b,c,e=[],g=0,j=0,k=d.transformTo("string",this.utf8encode(a.comment||this.comment||""));for(var l in this.files)if(this.files.hasOwnProperty(l)){var o=this.files[l],p=o.options.compression||a.compression.toUpperCase(),q=i[p];if(!q)throw new Error(p+" is not a valid compression method !");var r=o.options.compressionOptions||a.compressionOptions||{},u=z.call(this,o,q,r),v=C.call(this,l,o,u,g,a.platform);g+=v.fileRecord.length+u.compressedSize,j+=v.dirRecord.length,e.push(v)}var w="";w=f.CENTRAL_DIRECTORY_END+"\x00\x00\x00\x00"+s(e.length,2)+s(e.length,2)+s(j,4)+s(g,4)+s(k.length,2)+k;var x=a.type.toLowerCase();for(b="uint8array"===x||"arraybuffer"===x||"blob"===x||"nodebuffer"===x?new n(g+j+w.length):new m(g+j+w.length),c=0;c<e.length;c++)b.append(e[c].fileRecord),b.append(e[c].compressedObject.compressedContent);for(c=0;c<e.length;c++)b.append(e[c].dirRecord);b.append(w);var y=b.finalize();switch(a.type.toLowerCase()){case"uint8array":case"arraybuffer":case"nodebuffer":return d.transformTo(a.type.toLowerCase(),y);case"blob":return d.arrayBuffer2Blob(d.transformTo("arraybuffer",y),a.mimeType);case"base64":return a.base64?h.encode(y):y;default:return y}},crc32:function(a,b){return e(a,b)},utf8encode:function(a){return d.transformTo("string",l.utf8encode(a))},utf8decode:function(a){return l.utf8decode(a)}};b.exports=D},{"./base64":1,"./compressedObject":2,"./compressions":3,"./crc32":4,"./defaults":6,"./nodeBuffer":11,"./signature":14,"./stringWriter":16,"./support":17,"./uint8ArrayWriter":19,"./utf8":20,"./utils":21}],14:[function(a,b,c){"use strict";c.LOCAL_FILE_HEADER="PK",c.CENTRAL_FILE_HEADER="PK",c.CENTRAL_DIRECTORY_END="PK",c.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",c.ZIP64_CENTRAL_DIRECTORY_END="PK",c.DATA_DESCRIPTOR="PK\b"},{}],15:[function(a,b){"use strict";function c(a,b){this.data=a,b||(this.data=e.string2binary(this.data)),this.length=this.data.length,this.index=0}var d=a("./dataReader"),e=a("./utils");c.prototype=new d,c.prototype.byteAt=function(a){return this.data.charCodeAt(a)},c.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)},c.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.index,this.index+a);return this.index+=a,b},b.exports=c},{"./dataReader":5,"./utils":21}],16:[function(a,b){"use strict";var c=a("./utils"),d=function(){this.data=[]};d.prototype={append:function(a){a=c.transformTo("string",a),this.data.push(a)},finalize:function(){return this.data.join("")}},b.exports=d},{"./utils":21}],17:[function(a,b,c){(function(a){"use strict";if(c.base64=!0,c.array=!0,c.string=!0,c.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,c.nodebuffer="undefined"!=typeof a,c.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)c.blob=!1;else{var b=new ArrayBuffer(0);try{c.blob=0===new Blob([b],{type:"application/zip"}).size}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;f.append(b),c.blob=0===f.getBlob("application/zip").size}catch(d){c.blob=!1}}}}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{}],18:[function(a,b){"use strict";function c(a){a&&(this.data=a,this.length=this.data.length,this.index=0)}var d=a("./dataReader");c.prototype=new d,c.prototype.byteAt=function(a){return this.data[a]},c.prototype.lastIndexOfSignature=function(a){for(var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=this.length-4;f>=0;--f)if(this.data[f]===b&&this.data[f+1]===c&&this.data[f+2]===d&&this.data[f+3]===e)return f;return-1},c.prototype.readData=function(a){if(this.checkOffset(a),0===a)return new Uint8Array(0);var b=this.data.subarray(this.index,this.index+a);return this.index+=a,b},b.exports=c},{"./dataReader":5}],19:[function(a,b){"use strict";var c=a("./utils"),d=function(a){this.data=new Uint8Array(a),this.index=0};d.prototype={append:function(a){0!==a.length&&(a=c.transformTo("uint8array",a),this.data.set(a,this.index),this.index+=a.length)},finalize:function(){return this.data}},b.exports=d},{"./utils":21}],20:[function(a,b,c){"use strict";for(var d=a("./utils"),e=a("./support"),f=a("./nodeBuffer"),g=new Array(256),h=0;256>h;h++)g[h]=h>=252?6:h>=248?5:h>=240?4:h>=224?3:h>=192?2:1;g[254]=g[254]=1;var i=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;h>f;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=128>c?1:2048>c?2:65536>c?3:4;for(b=e.uint8array?new Uint8Array(i):new Array(i),g=0,f=0;i>g;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),128>c?b[g++]=c:2048>c?(b[g++]=192|c>>>6,b[g++]=128|63&c):65536>c?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},j=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return 0>c?b:0===c?b:c+g[a[c]]>b?c:b},k=function(a){var b,c,e,f,h=a.length,i=new Array(2*h);for(c=0,b=0;h>b;)if(e=a[b++],128>e)i[c++]=e;else if(f=g[e],f>4)i[c++]=65533,b+=f-1;else{for(e&=2===f?31:3===f?15:7;f>1&&h>b;)e=e<<6|63&a[b++],f--;f>1?i[c++]=65533:65536>e?i[c++]=e:(e-=65536,i[c++]=55296|e>>10&1023,i[c++]=56320|1023&e)}return i.length!==c&&(i.subarray?i=i.subarray(0,c):i.length=c),d.applyFromCharCode(i)};c.utf8encode=function(a){return e.nodebuffer?f(a,"utf-8"):i(a)},c.utf8decode=function(a){if(e.nodebuffer)return d.transformTo("nodebuffer",a).toString("utf-8");a=d.transformTo(e.uint8array?"uint8array":"array",a);for(var b=[],c=0,f=a.length,g=65536;f>c;){var h=j(a,Math.min(c+g,f));b.push(e.uint8array?k(a.subarray(c,h)):k(a.slice(c,h))),c=h}return b.join("")}},{"./nodeBuffer":11,"./support":17,"./utils":21}],21:[function(a,b,c){"use strict";function d(a){return a}function e(a,b){for(var c=0;c<a.length;++c)b[c]=255&a.charCodeAt(c);return b}function f(a){var b=65536,d=[],e=a.length,f=c.getTypeOf(a),g=0,h=!0;try{switch(f){case"uint8array":String.fromCharCode.apply(null,new Uint8Array(0));break;case"nodebuffer":String.fromCharCode.apply(null,j(0))}}catch(i){h=!1}if(!h){for(var k="",l=0;l<a.length;l++)k+=String.fromCharCode(a[l]);return k}for(;e>g&&b>1;)try{d.push("array"===f||"nodebuffer"===f?String.fromCharCode.apply(null,a.slice(g,Math.min(g+b,e))):String.fromCharCode.apply(null,a.subarray(g,Math.min(g+b,e)))),g+=b}catch(i){b=Math.floor(b/2)}return d.join("")}function g(a,b){for(var c=0;c<a.length;c++)b[c]=a[c];return b}var h=a("./support"),i=a("./compressions"),j=a("./nodeBuffer");c.string2binary=function(a){for(var b="",c=0;c<a.length;c++)b+=String.fromCharCode(255&a.charCodeAt(c));return b},c.arrayBuffer2Blob=function(a,b){c.checkSupport("blob"),b=b||"application/zip";try{return new Blob([a],{type:b})}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;return f.append(a),f.getBlob(b)}catch(d){throw new Error("Bug : can't construct the Blob.")}}},c.applyFromCharCode=f;var k={};k.string={string:d,array:function(a){return e(a,new Array(a.length))},arraybuffer:function(a){return k.string.uint8array(a).buffer},uint8array:function(a){return e(a,new Uint8Array(a.length))},nodebuffer:function(a){return e(a,j(a.length))}},k.array={string:f,array:d,arraybuffer:function(a){return new Uint8Array(a).buffer},uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return j(a)}},k.arraybuffer={string:function(a){return f(new Uint8Array(a))},array:function(a){return g(new Uint8Array(a),new Array(a.byteLength))},arraybuffer:d,uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return j(new Uint8Array(a))}},k.uint8array={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return a.buffer},uint8array:d,nodebuffer:function(a){return j(a)}},k.nodebuffer={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return k.nodebuffer.uint8array(a).buffer},uint8array:function(a){return g(a,new Uint8Array(a.length))},nodebuffer:d},c.transformTo=function(a,b){if(b||(b=""),!a)return b;c.checkSupport(a);var d=c.getTypeOf(b),e=k[d][a](b);return e},c.getTypeOf=function(a){return"string"==typeof a?"string":"[object Array]"===Object.prototype.toString.call(a)?"array":h.nodebuffer&&j.test(a)?"nodebuffer":h.uint8array&&a instanceof Uint8Array?"uint8array":h.arraybuffer&&a instanceof ArrayBuffer?"arraybuffer":void 0},c.checkSupport=function(a){var b=h[a.toLowerCase()];if(!b)throw new Error(a+" is not supported by this browser")},c.MAX_VALUE_16BITS=65535,c.MAX_VALUE_32BITS=-1,c.pretty=function(a){var b,c,d="";for(c=0;c<(a||"").length;c++)b=a.charCodeAt(c),d+="\\x"+(16>b?"0":"")+b.toString(16).toUpperCase();return d},c.findCompression=function(a){for(var b in i)if(i.hasOwnProperty(b)&&i[b].magic===a)return i[b];return null},c.isRegExp=function(a){return"[object RegExp]"===Object.prototype.toString.call(a)}},{"./compressions":3,"./nodeBuffer":11,"./support":17}],22:[function(a,b){"use strict";function c(a,b){this.files=[],this.loadOptions=b,a&&this.load(a)}var d=a("./stringReader"),e=a("./nodeBufferReader"),f=a("./uint8ArrayReader"),g=a("./utils"),h=a("./signature"),i=a("./zipEntry"),j=a("./support"),k=a("./object");c.prototype={checkSignature:function(a){var b=this.reader.readString(4);if(b!==a)throw new Error("Corrupted zip or bug : unexpected signature ("+g.pretty(b)+", expected "+g.pretty(a)+")")},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2),this.zipComment=this.reader.readString(this.zipCommentLength),this.zipComment=k.utf8decode(this.zipComment)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.versionMadeBy=this.reader.readString(2),this.versionNeeded=this.reader.readInt(2),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var a,b,c,d=this.zip64EndOfCentralSize-44,e=0;d>e;)a=this.reader.readInt(2),b=this.reader.readInt(4),c=this.reader.readString(b),this.zip64ExtensibleData[a]={id:a,length:b,value:c}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var a,b;for(a=0;a<this.files.length;a++)b=this.files[a],this.reader.setIndex(b.localHeaderOffset),this.checkSignature(h.LOCAL_FILE_HEADER),b.readLocalPart(this.reader),b.handleUTF8(),b.processAttributes()},readCentralDir:function(){var a;for(this.reader.setIndex(this.centralDirOffset);this.reader.readString(4)===h.CENTRAL_FILE_HEADER;)a=new i({zip64:this.zip64},this.loadOptions),a.readCentralPart(this.reader),this.files.push(a)},readEndOfCentral:function(){var a=this.reader.lastIndexOfSignature(h.CENTRAL_DIRECTORY_END);if(-1===a){var b=!0;try{this.reader.setIndex(0),this.checkSignature(h.LOCAL_FILE_HEADER),b=!1}catch(c){}throw new Error(b?"Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html":"Corrupted zip : can't find end of central directory")}if(this.reader.setIndex(a),this.checkSignature(h.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===g.MAX_VALUE_16BITS||this.diskWithCentralDirStart===g.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===g.MAX_VALUE_16BITS||this.centralDirRecords===g.MAX_VALUE_16BITS||this.centralDirSize===g.MAX_VALUE_32BITS||this.centralDirOffset===g.MAX_VALUE_32BITS){if(this.zip64=!0,a=this.reader.lastIndexOfSignature(h.ZIP64_CENTRAL_DIRECTORY_LOCATOR),-1===a)throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");this.reader.setIndex(a),this.checkSignature(h.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(h.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}},prepareReader:function(a){var b=g.getTypeOf(a);this.reader="string"!==b||j.uint8array?"nodebuffer"===b?new e(a):new f(g.transformTo("uint8array",a)):new d(a,this.loadOptions.optimizedBinaryString)},load:function(a){this.prepareReader(a),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},b.exports=c},{"./nodeBufferReader":12,"./object":13,"./signature":14,"./stringReader":15,"./support":17,"./uint8ArrayReader":18,"./utils":21,"./zipEntry":23}],23:[function(a,b){"use strict";function c(a,b){this.options=a,this.loadOptions=b}var d=a("./stringReader"),e=a("./utils"),f=a("./compressedObject"),g=a("./object"),h=0,i=3;c.prototype={isEncrypted:function(){return 1===(1&this.bitFlag)},useUTF8:function(){return 2048===(2048&this.bitFlag)},prepareCompressedContent:function(a,b,c){return function(){var d=a.index;a.setIndex(b);var e=a.readData(c);return a.setIndex(d),e}},prepareContent:function(a,b,c,d,f){return function(){var a=e.transformTo(d.uncompressInputType,this.getCompressedContent()),b=d.uncompress(a);if(b.length!==f)throw new Error("Bug : uncompressed data size mismatch");return b}},readLocalPart:function(a){var b,c;if(a.skip(22),this.fileNameLength=a.readInt(2),c=a.readInt(2),this.fileName=a.readString(this.fileNameLength),a.skip(c),-1==this.compressedSize||-1==this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");if(b=e.findCompression(this.compressionMethod),null===b)throw new Error("Corrupted zip : compression "+e.pretty(this.compressionMethod)+" unknown (inner file : "+this.fileName+")");if(this.decompressed=new f,this.decompressed.compressedSize=this.compressedSize,this.decompressed.uncompressedSize=this.uncompressedSize,this.decompressed.crc32=this.crc32,this.decompressed.compressionMethod=this.compressionMethod,this.decompressed.getCompressedContent=this.prepareCompressedContent(a,a.index,this.compressedSize,b),this.decompressed.getContent=this.prepareContent(a,a.index,this.compressedSize,b,this.uncompressedSize),this.loadOptions.checkCRC32&&(this.decompressed=e.transformTo("string",this.decompressed.getContent()),g.crc32(this.decompressed)!==this.crc32))throw new Error("Corrupted zip : CRC32 mismatch")},readCentralPart:function(a){if(this.versionMadeBy=a.readInt(2),this.versionNeeded=a.readInt(2),this.bitFlag=a.readInt(2),this.compressionMethod=a.readString(2),this.date=a.readDate(),this.crc32=a.readInt(4),this.compressedSize=a.readInt(4),this.uncompressedSize=a.readInt(4),this.fileNameLength=a.readInt(2),this.extraFieldsLength=a.readInt(2),this.fileCommentLength=a.readInt(2),this.diskNumberStart=a.readInt(2),this.internalFileAttributes=a.readInt(2),this.externalFileAttributes=a.readInt(4),this.localHeaderOffset=a.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");this.fileName=a.readString(this.fileNameLength),this.readExtraFields(a),this.parseZIP64ExtraField(a),this.fileComment=a.readString(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var a=this.versionMadeBy>>8;this.dir=16&this.externalFileAttributes?!0:!1,a===h&&(this.dosPermissions=63&this.externalFileAttributes),a===i&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileName.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var a=new d(this.extraFields[1].value);this.uncompressedSize===e.MAX_VALUE_32BITS&&(this.uncompressedSize=a.readInt(8)),this.compressedSize===e.MAX_VALUE_32BITS&&(this.compressedSize=a.readInt(8)),this.localHeaderOffset===e.MAX_VALUE_32BITS&&(this.localHeaderOffset=a.readInt(8)),this.diskNumberStart===e.MAX_VALUE_32BITS&&(this.diskNumberStart=a.readInt(4))}},readExtraFields:function(a){var b,c,d,e=a.index;for(this.extraFields=this.extraFields||{};a.index<e+this.extraFieldsLength;)b=a.readInt(2),c=a.readInt(2),d=a.readString(c),this.extraFields[b]={id:b,length:c,value:d}},handleUTF8:function(){if(this.useUTF8())this.fileName=g.utf8decode(this.fileName),this.fileComment=g.utf8decode(this.fileComment);else{var a=this.findExtraFieldUnicodePath();null!==a&&(this.fileName=a);var b=this.findExtraFieldUnicodeComment();null!==b&&(this.fileComment=b)}},findExtraFieldUnicodePath:function(){var a=this.extraFields[28789];if(a){var b=new d(a.value);return 1!==b.readInt(1)?null:g.crc32(this.fileName)!==b.readInt(4)?null:g.utf8decode(b.readString(a.length-5))
}return null},findExtraFieldUnicodeComment:function(){var a=this.extraFields[25461];if(a){var b=new d(a.value);return 1!==b.readInt(1)?null:g.crc32(this.fileComment)!==b.readInt(4)?null:g.utf8decode(b.readString(a.length-5))}return null}},b.exports=c},{"./compressedObject":2,"./object":13,"./stringReader":15,"./utils":21}],24:[function(a,b){"use strict";var c=a("./lib/utils/common").assign,d=a("./lib/deflate"),e=a("./lib/inflate"),f=a("./lib/zlib/constants"),g={};c(g,d,e,f),b.exports=g},{"./lib/deflate":25,"./lib/inflate":26,"./lib/utils/common":27,"./lib/zlib/constants":30}],25:[function(a,b,c){"use strict";function d(a,b){var c=new s(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function e(a,b){return b=b||{},b.raw=!0,d(a,b)}function f(a,b){return b=b||{},b.gzip=!0,d(a,b)}var g=a("./zlib/deflate.js"),h=a("./utils/common"),i=a("./utils/strings"),j=a("./zlib/messages"),k=a("./zlib/zstream"),l=0,m=4,n=0,o=1,p=-1,q=0,r=8,s=function(a){this.options=h.assign({level:p,method:r,chunkSize:16384,windowBits:15,memLevel:8,strategy:q,to:""},a||{});var b=this.options;b.raw&&b.windowBits>0?b.windowBits=-b.windowBits:b.gzip&&b.windowBits>0&&b.windowBits<16&&(b.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new k,this.strm.avail_out=0;var c=g.deflateInit2(this.strm,b.level,b.method,b.windowBits,b.memLevel,b.strategy);if(c!==n)throw new Error(j[c]);b.header&&g.deflateSetHeader(this.strm,b.header)};s.prototype.push=function(a,b){var c,d,e=this.strm,f=this.options.chunkSize;if(this.ended)return!1;d=b===~~b?b:b===!0?m:l,e.input="string"==typeof a?i.string2buf(a):a,e.next_in=0,e.avail_in=e.input.length;do{if(0===e.avail_out&&(e.output=new h.Buf8(f),e.next_out=0,e.avail_out=f),c=g.deflate(e,d),c!==o&&c!==n)return this.onEnd(c),this.ended=!0,!1;(0===e.avail_out||0===e.avail_in&&d===m)&&this.onData("string"===this.options.to?i.buf2binstring(h.shrinkBuf(e.output,e.next_out)):h.shrinkBuf(e.output,e.next_out))}while((e.avail_in>0||0===e.avail_out)&&c!==o);return d===m?(c=g.deflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===n):!0},s.prototype.onData=function(a){this.chunks.push(a)},s.prototype.onEnd=function(a){a===n&&(this.result="string"===this.options.to?this.chunks.join(""):h.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Deflate=s,c.deflate=d,c.deflateRaw=e,c.gzip=f},{"./utils/common":27,"./utils/strings":28,"./zlib/deflate.js":32,"./zlib/messages":37,"./zlib/zstream":39}],26:[function(a,b,c){"use strict";function d(a,b){var c=new m(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function e(a,b){return b=b||{},b.raw=!0,d(a,b)}var f=a("./zlib/inflate.js"),g=a("./utils/common"),h=a("./utils/strings"),i=a("./zlib/constants"),j=a("./zlib/messages"),k=a("./zlib/zstream"),l=a("./zlib/gzheader"),m=function(a){this.options=g.assign({chunkSize:16384,windowBits:0,to:""},a||{});var b=this.options;b.raw&&b.windowBits>=0&&b.windowBits<16&&(b.windowBits=-b.windowBits,0===b.windowBits&&(b.windowBits=-15)),!(b.windowBits>=0&&b.windowBits<16)||a&&a.windowBits||(b.windowBits+=32),b.windowBits>15&&b.windowBits<48&&0===(15&b.windowBits)&&(b.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new k,this.strm.avail_out=0;var c=f.inflateInit2(this.strm,b.windowBits);if(c!==i.Z_OK)throw new Error(j[c]);this.header=new l,f.inflateGetHeader(this.strm,this.header)};m.prototype.push=function(a,b){var c,d,e,j,k,l=this.strm,m=this.options.chunkSize;if(this.ended)return!1;d=b===~~b?b:b===!0?i.Z_FINISH:i.Z_NO_FLUSH,l.input="string"==typeof a?h.binstring2buf(a):a,l.next_in=0,l.avail_in=l.input.length;do{if(0===l.avail_out&&(l.output=new g.Buf8(m),l.next_out=0,l.avail_out=m),c=f.inflate(l,i.Z_NO_FLUSH),c!==i.Z_STREAM_END&&c!==i.Z_OK)return this.onEnd(c),this.ended=!0,!1;l.next_out&&(0===l.avail_out||c===i.Z_STREAM_END||0===l.avail_in&&d===i.Z_FINISH)&&("string"===this.options.to?(e=h.utf8border(l.output,l.next_out),j=l.next_out-e,k=h.buf2string(l.output,e),l.next_out=j,l.avail_out=m-j,j&&g.arraySet(l.output,l.output,e,j,0),this.onData(k)):this.onData(g.shrinkBuf(l.output,l.next_out)))}while(l.avail_in>0&&c!==i.Z_STREAM_END);return c===i.Z_STREAM_END&&(d=i.Z_FINISH),d===i.Z_FINISH?(c=f.inflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===i.Z_OK):!0},m.prototype.onData=function(a){this.chunks.push(a)},m.prototype.onEnd=function(a){a===i.Z_OK&&(this.result="string"===this.options.to?this.chunks.join(""):g.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Inflate=m,c.inflate=d,c.inflateRaw=e,c.ungzip=d},{"./utils/common":27,"./utils/strings":28,"./zlib/constants":30,"./zlib/gzheader":33,"./zlib/inflate.js":35,"./zlib/messages":37,"./zlib/zstream":39}],27:[function(a,b,c){"use strict";var d="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;c.assign=function(a){for(var b=Array.prototype.slice.call(arguments,1);b.length;){var c=b.shift();if(c){if("object"!=typeof c)throw new TypeError(c+"must be non-object");for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d])}}return a},c.shrinkBuf=function(a,b){return a.length===b?a:a.subarray?a.subarray(0,b):(a.length=b,a)};var e={arraySet:function(a,b,c,d,e){if(b.subarray&&a.subarray)return void a.set(b.subarray(c,c+d),e);for(var f=0;d>f;f++)a[e+f]=b[c+f]},flattenChunks:function(a){var b,c,d,e,f,g;for(d=0,b=0,c=a.length;c>b;b++)d+=a[b].length;for(g=new Uint8Array(d),e=0,b=0,c=a.length;c>b;b++)f=a[b],g.set(f,e),e+=f.length;return g}},f={arraySet:function(a,b,c,d,e){for(var f=0;d>f;f++)a[e+f]=b[c+f]},flattenChunks:function(a){return[].concat.apply([],a)}};c.setTyped=function(a){a?(c.Buf8=Uint8Array,c.Buf16=Uint16Array,c.Buf32=Int32Array,c.assign(c,e)):(c.Buf8=Array,c.Buf16=Array,c.Buf32=Array,c.assign(c,f))},c.setTyped(d)},{}],28:[function(a,b,c){"use strict";function d(a,b){if(65537>b&&(a.subarray&&g||!a.subarray&&f))return String.fromCharCode.apply(null,e.shrinkBuf(a,b));for(var c="",d=0;b>d;d++)c+=String.fromCharCode(a[d]);return c}var e=a("./common"),f=!0,g=!0;try{String.fromCharCode.apply(null,[0])}catch(h){f=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(h){g=!1}for(var i=new e.Buf8(256),j=0;256>j;j++)i[j]=j>=252?6:j>=248?5:j>=240?4:j>=224?3:j>=192?2:1;i[254]=i[254]=1,c.string2buf=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;h>f;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=128>c?1:2048>c?2:65536>c?3:4;for(b=new e.Buf8(i),g=0,f=0;i>g;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),128>c?b[g++]=c:2048>c?(b[g++]=192|c>>>6,b[g++]=128|63&c):65536>c?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},c.buf2binstring=function(a){return d(a,a.length)},c.binstring2buf=function(a){for(var b=new e.Buf8(a.length),c=0,d=b.length;d>c;c++)b[c]=a.charCodeAt(c);return b},c.buf2string=function(a,b){var c,e,f,g,h=b||a.length,j=new Array(2*h);for(e=0,c=0;h>c;)if(f=a[c++],128>f)j[e++]=f;else if(g=i[f],g>4)j[e++]=65533,c+=g-1;else{for(f&=2===g?31:3===g?15:7;g>1&&h>c;)f=f<<6|63&a[c++],g--;g>1?j[e++]=65533:65536>f?j[e++]=f:(f-=65536,j[e++]=55296|f>>10&1023,j[e++]=56320|1023&f)}return d(j,e)},c.utf8border=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return 0>c?b:0===c?b:c+i[a[c]]>b?c:b}},{"./common":27}],29:[function(a,b){"use strict";function c(a,b,c,d){for(var e=65535&a|0,f=a>>>16&65535|0,g=0;0!==c;){g=c>2e3?2e3:c,c-=g;do e=e+b[d++]|0,f=f+e|0;while(--g);e%=65521,f%=65521}return e|f<<16|0}b.exports=c},{}],30:[function(a,b){b.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],31:[function(a,b){"use strict";function c(){for(var a,b=[],c=0;256>c;c++){a=c;for(var d=0;8>d;d++)a=1&a?3988292384^a>>>1:a>>>1;b[c]=a}return b}function d(a,b,c,d){var f=e,g=d+c;a=-1^a;for(var h=d;g>h;h++)a=a>>>8^f[255&(a^b[h])];return-1^a}var e=c();b.exports=d},{}],32:[function(a,b,c){"use strict";function d(a,b){return a.msg=G[b],b}function e(a){return(a<<1)-(a>4?9:0)}function f(a){for(var b=a.length;--b>=0;)a[b]=0}function g(a){var b=a.state,c=b.pending;c>a.avail_out&&(c=a.avail_out),0!==c&&(C.arraySet(a.output,b.pending_buf,b.pending_out,c,a.next_out),a.next_out+=c,b.pending_out+=c,a.total_out+=c,a.avail_out-=c,b.pending-=c,0===b.pending&&(b.pending_out=0))}function h(a,b){D._tr_flush_block(a,a.block_start>=0?a.block_start:-1,a.strstart-a.block_start,b),a.block_start=a.strstart,g(a.strm)}function i(a,b){a.pending_buf[a.pending++]=b}function j(a,b){a.pending_buf[a.pending++]=b>>>8&255,a.pending_buf[a.pending++]=255&b}function k(a,b,c,d){var e=a.avail_in;return e>d&&(e=d),0===e?0:(a.avail_in-=e,C.arraySet(b,a.input,a.next_in,e,c),1===a.state.wrap?a.adler=E(a.adler,b,e,c):2===a.state.wrap&&(a.adler=F(a.adler,b,e,c)),a.next_in+=e,a.total_in+=e,e)}function l(a,b){var c,d,e=a.max_chain_length,f=a.strstart,g=a.prev_length,h=a.nice_match,i=a.strstart>a.w_size-jb?a.strstart-(a.w_size-jb):0,j=a.window,k=a.w_mask,l=a.prev,m=a.strstart+ib,n=j[f+g-1],o=j[f+g];a.prev_length>=a.good_match&&(e>>=2),h>a.lookahead&&(h=a.lookahead);do if(c=b,j[c+g]===o&&j[c+g-1]===n&&j[c]===j[f]&&j[++c]===j[f+1]){f+=2,c++;do;while(j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&m>f);if(d=ib-(m-f),f=m-ib,d>g){if(a.match_start=b,g=d,d>=h)break;n=j[f+g-1],o=j[f+g]}}while((b=l[b&k])>i&&0!==--e);return g<=a.lookahead?g:a.lookahead}function m(a){var b,c,d,e,f,g=a.w_size;do{if(e=a.window_size-a.lookahead-a.strstart,a.strstart>=g+(g-jb)){C.arraySet(a.window,a.window,g,g,0),a.match_start-=g,a.strstart-=g,a.block_start-=g,c=a.hash_size,b=c;do d=a.head[--b],a.head[b]=d>=g?d-g:0;while(--c);c=g,b=c;do d=a.prev[--b],a.prev[b]=d>=g?d-g:0;while(--c);e+=g}if(0===a.strm.avail_in)break;if(c=k(a.strm,a.window,a.strstart+a.lookahead,e),a.lookahead+=c,a.lookahead+a.insert>=hb)for(f=a.strstart-a.insert,a.ins_h=a.window[f],a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+1])&a.hash_mask;a.insert&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+hb-1])&a.hash_mask,a.prev[f&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=f,f++,a.insert--,!(a.lookahead+a.insert<hb)););}while(a.lookahead<jb&&0!==a.strm.avail_in)}function n(a,b){var c=65535;for(c>a.pending_buf_size-5&&(c=a.pending_buf_size-5);;){if(a.lookahead<=1){if(m(a),0===a.lookahead&&b===H)return sb;if(0===a.lookahead)break}a.strstart+=a.lookahead,a.lookahead=0;var d=a.block_start+c;if((0===a.strstart||a.strstart>=d)&&(a.lookahead=a.strstart-d,a.strstart=d,h(a,!1),0===a.strm.avail_out))return sb;if(a.strstart-a.block_start>=a.w_size-jb&&(h(a,!1),0===a.strm.avail_out))return sb}return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.strstart>a.block_start&&(h(a,!1),0===a.strm.avail_out)?sb:sb}function o(a,b){for(var c,d;;){if(a.lookahead<jb){if(m(a),a.lookahead<jb&&b===H)return sb;if(0===a.lookahead)break}if(c=0,a.lookahead>=hb&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+hb-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),0!==c&&a.strstart-c<=a.w_size-jb&&(a.match_length=l(a,c)),a.match_length>=hb)if(d=D._tr_tally(a,a.strstart-a.match_start,a.match_length-hb),a.lookahead-=a.match_length,a.match_length<=a.max_lazy_match&&a.lookahead>=hb){a.match_length--;do a.strstart++,a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+hb-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart;while(0!==--a.match_length);a.strstart++}else a.strstart+=a.match_length,a.match_length=0,a.ins_h=a.window[a.strstart],a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+1])&a.hash_mask;else d=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++;if(d&&(h(a,!1),0===a.strm.avail_out))return sb}return a.insert=a.strstart<hb-1?a.strstart:hb-1,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sb:tb}function p(a,b){for(var c,d,e;;){if(a.lookahead<jb){if(m(a),a.lookahead<jb&&b===H)return sb;if(0===a.lookahead)break}if(c=0,a.lookahead>=hb&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+hb-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),a.prev_length=a.match_length,a.prev_match=a.match_start,a.match_length=hb-1,0!==c&&a.prev_length<a.max_lazy_match&&a.strstart-c<=a.w_size-jb&&(a.match_length=l(a,c),a.match_length<=5&&(a.strategy===S||a.match_length===hb&&a.strstart-a.match_start>4096)&&(a.match_length=hb-1)),a.prev_length>=hb&&a.match_length<=a.prev_length){e=a.strstart+a.lookahead-hb,d=D._tr_tally(a,a.strstart-1-a.prev_match,a.prev_length-hb),a.lookahead-=a.prev_length-1,a.prev_length-=2;do++a.strstart<=e&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+hb-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart);while(0!==--a.prev_length);if(a.match_available=0,a.match_length=hb-1,a.strstart++,d&&(h(a,!1),0===a.strm.avail_out))return sb}else if(a.match_available){if(d=D._tr_tally(a,0,a.window[a.strstart-1]),d&&h(a,!1),a.strstart++,a.lookahead--,0===a.strm.avail_out)return sb}else a.match_available=1,a.strstart++,a.lookahead--}return a.match_available&&(d=D._tr_tally(a,0,a.window[a.strstart-1]),a.match_available=0),a.insert=a.strstart<hb-1?a.strstart:hb-1,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sb:tb}function q(a,b){for(var c,d,e,f,g=a.window;;){if(a.lookahead<=ib){if(m(a),a.lookahead<=ib&&b===H)return sb;if(0===a.lookahead)break}if(a.match_length=0,a.lookahead>=hb&&a.strstart>0&&(e=a.strstart-1,d=g[e],d===g[++e]&&d===g[++e]&&d===g[++e])){f=a.strstart+ib;do;while(d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&f>e);a.match_length=ib-(f-e),a.match_length>a.lookahead&&(a.match_length=a.lookahead)}if(a.match_length>=hb?(c=D._tr_tally(a,1,a.match_length-hb),a.lookahead-=a.match_length,a.strstart+=a.match_length,a.match_length=0):(c=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++),c&&(h(a,!1),0===a.strm.avail_out))return sb}return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sb:tb}function r(a,b){for(var c;;){if(0===a.lookahead&&(m(a),0===a.lookahead)){if(b===H)return sb;break}if(a.match_length=0,c=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++,c&&(h(a,!1),0===a.strm.avail_out))return sb}return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sb:tb}function s(a){a.window_size=2*a.w_size,f(a.head),a.max_lazy_match=B[a.level].max_lazy,a.good_match=B[a.level].good_length,a.nice_match=B[a.level].nice_length,a.max_chain_length=B[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=hb-1,a.match_available=0,a.ins_h=0}function t(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Y,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new C.Buf16(2*fb),this.dyn_dtree=new C.Buf16(2*(2*db+1)),this.bl_tree=new C.Buf16(2*(2*eb+1)),f(this.dyn_ltree),f(this.dyn_dtree),f(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new C.Buf16(gb+1),this.heap=new C.Buf16(2*cb+1),f(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new C.Buf16(2*cb+1),f(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function u(a){var b;return a&&a.state?(a.total_in=a.total_out=0,a.data_type=X,b=a.state,b.pending=0,b.pending_out=0,b.wrap<0&&(b.wrap=-b.wrap),b.status=b.wrap?lb:qb,a.adler=2===b.wrap?0:1,b.last_flush=H,D._tr_init(b),M):d(a,O)}function v(a){var b=u(a);return b===M&&s(a.state),b}function w(a,b){return a&&a.state?2!==a.state.wrap?O:(a.state.gzhead=b,M):O}function x(a,b,c,e,f,g){if(!a)return O;var h=1;if(b===R&&(b=6),0>e?(h=0,e=-e):e>15&&(h=2,e-=16),1>f||f>Z||c!==Y||8>e||e>15||0>b||b>9||0>g||g>V)return d(a,O);8===e&&(e=9);var i=new t;return a.state=i,i.strm=a,i.wrap=h,i.gzhead=null,i.w_bits=e,i.w_size=1<<i.w_bits,i.w_mask=i.w_size-1,i.hash_bits=f+7,i.hash_size=1<<i.hash_bits,i.hash_mask=i.hash_size-1,i.hash_shift=~~((i.hash_bits+hb-1)/hb),i.window=new C.Buf8(2*i.w_size),i.head=new C.Buf16(i.hash_size),i.prev=new C.Buf16(i.w_size),i.lit_bufsize=1<<f+6,i.pending_buf_size=4*i.lit_bufsize,i.pending_buf=new C.Buf8(i.pending_buf_size),i.d_buf=i.lit_bufsize>>1,i.l_buf=3*i.lit_bufsize,i.level=b,i.strategy=g,i.method=c,v(a)}function y(a,b){return x(a,b,Y,$,_,W)}function z(a,b){var c,h,k,l;if(!a||!a.state||b>L||0>b)return a?d(a,O):O;if(h=a.state,!a.output||!a.input&&0!==a.avail_in||h.status===rb&&b!==K)return d(a,0===a.avail_out?Q:O);if(h.strm=a,c=h.last_flush,h.last_flush=b,h.status===lb)if(2===h.wrap)a.adler=0,i(h,31),i(h,139),i(h,8),h.gzhead?(i(h,(h.gzhead.text?1:0)+(h.gzhead.hcrc?2:0)+(h.gzhead.extra?4:0)+(h.gzhead.name?8:0)+(h.gzhead.comment?16:0)),i(h,255&h.gzhead.time),i(h,h.gzhead.time>>8&255),i(h,h.gzhead.time>>16&255),i(h,h.gzhead.time>>24&255),i(h,9===h.level?2:h.strategy>=T||h.level<2?4:0),i(h,255&h.gzhead.os),h.gzhead.extra&&h.gzhead.extra.length&&(i(h,255&h.gzhead.extra.length),i(h,h.gzhead.extra.length>>8&255)),h.gzhead.hcrc&&(a.adler=F(a.adler,h.pending_buf,h.pending,0)),h.gzindex=0,h.status=mb):(i(h,0),i(h,0),i(h,0),i(h,0),i(h,0),i(h,9===h.level?2:h.strategy>=T||h.level<2?4:0),i(h,wb),h.status=qb);else{var m=Y+(h.w_bits-8<<4)<<8,n=-1;n=h.strategy>=T||h.level<2?0:h.level<6?1:6===h.level?2:3,m|=n<<6,0!==h.strstart&&(m|=kb),m+=31-m%31,h.status=qb,j(h,m),0!==h.strstart&&(j(h,a.adler>>>16),j(h,65535&a.adler)),a.adler=1}if(h.status===mb)if(h.gzhead.extra){for(k=h.pending;h.gzindex<(65535&h.gzhead.extra.length)&&(h.pending!==h.pending_buf_size||(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending!==h.pending_buf_size));)i(h,255&h.gzhead.extra[h.gzindex]),h.gzindex++;h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),h.gzindex===h.gzhead.extra.length&&(h.gzindex=0,h.status=nb)}else h.status=nb;if(h.status===nb)if(h.gzhead.name){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.name.length?255&h.gzhead.name.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.gzindex=0,h.status=ob)}else h.status=ob;if(h.status===ob)if(h.gzhead.comment){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.comment.length?255&h.gzhead.comment.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.status=pb)}else h.status=pb;if(h.status===pb&&(h.gzhead.hcrc?(h.pending+2>h.pending_buf_size&&g(a),h.pending+2<=h.pending_buf_size&&(i(h,255&a.adler),i(h,a.adler>>8&255),a.adler=0,h.status=qb)):h.status=qb),0!==h.pending){if(g(a),0===a.avail_out)return h.last_flush=-1,M}else if(0===a.avail_in&&e(b)<=e(c)&&b!==K)return d(a,Q);if(h.status===rb&&0!==a.avail_in)return d(a,Q);if(0!==a.avail_in||0!==h.lookahead||b!==H&&h.status!==rb){var o=h.strategy===T?r(h,b):h.strategy===U?q(h,b):B[h.level].func(h,b);if((o===ub||o===vb)&&(h.status=rb),o===sb||o===ub)return 0===a.avail_out&&(h.last_flush=-1),M;if(o===tb&&(b===I?D._tr_align(h):b!==L&&(D._tr_stored_block(h,0,0,!1),b===J&&(f(h.head),0===h.lookahead&&(h.strstart=0,h.block_start=0,h.insert=0))),g(a),0===a.avail_out))return h.last_flush=-1,M}return b!==K?M:h.wrap<=0?N:(2===h.wrap?(i(h,255&a.adler),i(h,a.adler>>8&255),i(h,a.adler>>16&255),i(h,a.adler>>24&255),i(h,255&a.total_in),i(h,a.total_in>>8&255),i(h,a.total_in>>16&255),i(h,a.total_in>>24&255)):(j(h,a.adler>>>16),j(h,65535&a.adler)),g(a),h.wrap>0&&(h.wrap=-h.wrap),0!==h.pending?M:N)}function A(a){var b;return a&&a.state?(b=a.state.status,b!==lb&&b!==mb&&b!==nb&&b!==ob&&b!==pb&&b!==qb&&b!==rb?d(a,O):(a.state=null,b===qb?d(a,P):M)):O}var B,C=a("../utils/common"),D=a("./trees"),E=a("./adler32"),F=a("./crc32"),G=a("./messages"),H=0,I=1,J=3,K=4,L=5,M=0,N=1,O=-2,P=-3,Q=-5,R=-1,S=1,T=2,U=3,V=4,W=0,X=2,Y=8,Z=9,$=15,_=8,ab=29,bb=256,cb=bb+1+ab,db=30,eb=19,fb=2*cb+1,gb=15,hb=3,ib=258,jb=ib+hb+1,kb=32,lb=42,mb=69,nb=73,ob=91,pb=103,qb=113,rb=666,sb=1,tb=2,ub=3,vb=4,wb=3,xb=function(a,b,c,d,e){this.good_length=a,this.max_lazy=b,this.nice_length=c,this.max_chain=d,this.func=e};B=[new xb(0,0,0,0,n),new xb(4,4,8,4,o),new xb(4,5,16,8,o),new xb(4,6,32,32,o),new xb(4,4,16,16,p),new xb(8,16,32,32,p),new xb(8,16,128,128,p),new xb(8,32,128,256,p),new xb(32,128,258,1024,p),new xb(32,258,258,4096,p)],c.deflateInit=y,c.deflateInit2=x,c.deflateReset=v,c.deflateResetKeep=u,c.deflateSetHeader=w,c.deflate=z,c.deflateEnd=A,c.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":27,"./adler32":29,"./crc32":31,"./messages":37,"./trees":38}],33:[function(a,b){"use strict";function c(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}b.exports=c},{}],34:[function(a,b){"use strict";var c=30,d=12;b.exports=function(a,b){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C;e=a.state,f=a.next_in,B=a.input,g=f+(a.avail_in-5),h=a.next_out,C=a.output,i=h-(b-a.avail_out),j=h+(a.avail_out-257),k=e.dmax,l=e.wsize,m=e.whave,n=e.wnext,o=e.window,p=e.hold,q=e.bits,r=e.lencode,s=e.distcode,t=(1<<e.lenbits)-1,u=(1<<e.distbits)-1;a:do{15>q&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=r[p&t];b:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,0===w)C[h++]=65535&v;else{if(!(16&w)){if(0===(64&w)){v=r[(65535&v)+(p&(1<<w)-1)];continue b}if(32&w){e.mode=d;break a}a.msg="invalid literal/length code",e.mode=c;break a}x=65535&v,w&=15,w&&(w>q&&(p+=B[f++]<<q,q+=8),x+=p&(1<<w)-1,p>>>=w,q-=w),15>q&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=s[p&u];c:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,!(16&w)){if(0===(64&w)){v=s[(65535&v)+(p&(1<<w)-1)];continue c}a.msg="invalid distance code",e.mode=c;break a}if(y=65535&v,w&=15,w>q&&(p+=B[f++]<<q,q+=8,w>q&&(p+=B[f++]<<q,q+=8)),y+=p&(1<<w)-1,y>k){a.msg="invalid distance too far back",e.mode=c;break a}if(p>>>=w,q-=w,w=h-i,y>w){if(w=y-w,w>m&&e.sane){a.msg="invalid distance too far back",e.mode=c;break a}if(z=0,A=o,0===n){if(z+=l-w,x>w){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}else if(w>n){if(z+=l+n-w,w-=n,x>w){x-=w;do C[h++]=o[z++];while(--w);if(z=0,x>n){w=n,x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}}else if(z+=n-w,x>w){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}for(;x>2;)C[h++]=A[z++],C[h++]=A[z++],C[h++]=A[z++],x-=3;x&&(C[h++]=A[z++],x>1&&(C[h++]=A[z++]))}else{z=h-y;do C[h++]=C[z++],C[h++]=C[z++],C[h++]=C[z++],x-=3;while(x>2);x&&(C[h++]=C[z++],x>1&&(C[h++]=C[z++]))}break}}break}}while(g>f&&j>h);x=q>>3,f-=x,q-=x<<3,p&=(1<<q)-1,a.next_in=f,a.next_out=h,a.avail_in=g>f?5+(g-f):5-(f-g),a.avail_out=j>h?257+(j-h):257-(h-j),e.hold=p,e.bits=q}},{}],35:[function(a,b,c){"use strict";function d(a){return(a>>>24&255)+(a>>>8&65280)+((65280&a)<<8)+((255&a)<<24)}function e(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function f(a){var b;return a&&a.state?(b=a.state,a.total_in=a.total_out=b.total=0,a.msg="",b.wrap&&(a.adler=1&b.wrap),b.mode=K,b.last=0,b.havedict=0,b.dmax=32768,b.head=null,b.hold=0,b.bits=0,b.lencode=b.lendyn=new r.Buf32(ob),b.distcode=b.distdyn=new r.Buf32(pb),b.sane=1,b.back=-1,C):F}function g(a){var b;return a&&a.state?(b=a.state,b.wsize=0,b.whave=0,b.wnext=0,f(a)):F}function h(a,b){var c,d;return a&&a.state?(d=a.state,0>b?(c=0,b=-b):(c=(b>>4)+1,48>b&&(b&=15)),b&&(8>b||b>15)?F:(null!==d.window&&d.wbits!==b&&(d.window=null),d.wrap=c,d.wbits=b,g(a))):F}function i(a,b){var c,d;return a?(d=new e,a.state=d,d.window=null,c=h(a,b),c!==C&&(a.state=null),c):F}function j(a){return i(a,rb)}function k(a){if(sb){var b;for(p=new r.Buf32(512),q=new r.Buf32(32),b=0;144>b;)a.lens[b++]=8;for(;256>b;)a.lens[b++]=9;for(;280>b;)a.lens[b++]=7;for(;288>b;)a.lens[b++]=8;for(v(x,a.lens,0,288,p,0,a.work,{bits:9}),b=0;32>b;)a.lens[b++]=5;v(y,a.lens,0,32,q,0,a.work,{bits:5}),sb=!1}a.lencode=p,a.lenbits=9,a.distcode=q,a.distbits=5}function l(a,b,c,d){var e,f=a.state;return null===f.window&&(f.wsize=1<<f.wbits,f.wnext=0,f.whave=0,f.window=new r.Buf8(f.wsize)),d>=f.wsize?(r.arraySet(f.window,b,c-f.wsize,f.wsize,0),f.wnext=0,f.whave=f.wsize):(e=f.wsize-f.wnext,e>d&&(e=d),r.arraySet(f.window,b,c-d,e,f.wnext),d-=e,d?(r.arraySet(f.window,b,c-d,d,0),f.wnext=d,f.whave=f.wsize):(f.wnext+=e,f.wnext===f.wsize&&(f.wnext=0),f.whave<f.wsize&&(f.whave+=e))),0}function m(a,b){var c,e,f,g,h,i,j,m,n,o,p,q,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,Ab=0,Bb=new r.Buf8(4),Cb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!a||!a.state||!a.output||!a.input&&0!==a.avail_in)return F;c=a.state,c.mode===V&&(c.mode=W),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,o=i,p=j,xb=C;a:for(;;)switch(c.mode){case K:if(0===c.wrap){c.mode=W;break}for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(2&c.wrap&&35615===m){c.check=0,Bb[0]=255&m,Bb[1]=m>>>8&255,c.check=t(c.check,Bb,2,0),m=0,n=0,c.mode=L;break}if(c.flags=0,c.head&&(c.head.done=!1),!(1&c.wrap)||(((255&m)<<8)+(m>>8))%31){a.msg="incorrect header check",c.mode=lb;break}if((15&m)!==J){a.msg="unknown compression method",c.mode=lb;break}if(m>>>=4,n-=4,wb=(15&m)+8,0===c.wbits)c.wbits=wb;else if(wb>c.wbits){a.msg="invalid window size",c.mode=lb;break}c.dmax=1<<wb,a.adler=c.check=1,c.mode=512&m?T:V,m=0,n=0;break;case L:for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.flags=m,(255&c.flags)!==J){a.msg="unknown compression method",c.mode=lb;break}if(57344&c.flags){a.msg="unknown header flags set",c.mode=lb;break}c.head&&(c.head.text=m>>8&1),512&c.flags&&(Bb[0]=255&m,Bb[1]=m>>>8&255,c.check=t(c.check,Bb,2,0)),m=0,n=0,c.mode=M;case M:for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.head&&(c.head.time=m),512&c.flags&&(Bb[0]=255&m,Bb[1]=m>>>8&255,Bb[2]=m>>>16&255,Bb[3]=m>>>24&255,c.check=t(c.check,Bb,4,0)),m=0,n=0,c.mode=N;case N:for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.head&&(c.head.xflags=255&m,c.head.os=m>>8),512&c.flags&&(Bb[0]=255&m,Bb[1]=m>>>8&255,c.check=t(c.check,Bb,2,0)),m=0,n=0,c.mode=O;case O:if(1024&c.flags){for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length=m,c.head&&(c.head.extra_len=m),512&c.flags&&(Bb[0]=255&m,Bb[1]=m>>>8&255,c.check=t(c.check,Bb,2,0)),m=0,n=0}else c.head&&(c.head.extra=null);c.mode=P;case P:if(1024&c.flags&&(q=c.length,q>i&&(q=i),q&&(c.head&&(wb=c.head.extra_len-c.length,c.head.extra||(c.head.extra=new Array(c.head.extra_len)),r.arraySet(c.head.extra,e,g,q,wb)),512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,c.length-=q),c.length))break a;c.length=0,c.mode=Q;case Q:if(2048&c.flags){if(0===i)break a;q=0;do wb=e[g+q++],c.head&&wb&&c.length<65536&&(c.head.name+=String.fromCharCode(wb));while(wb&&i>q);if(512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,wb)break a}else c.head&&(c.head.name=null);c.length=0,c.mode=R;case R:if(4096&c.flags){if(0===i)break a;q=0;do wb=e[g+q++],c.head&&wb&&c.length<65536&&(c.head.comment+=String.fromCharCode(wb));while(wb&&i>q);if(512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,wb)break a}else c.head&&(c.head.comment=null);c.mode=S;case S:if(512&c.flags){for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(65535&c.check)){a.msg="header crc mismatch",c.mode=lb;break}m=0,n=0}c.head&&(c.head.hcrc=c.flags>>9&1,c.head.done=!0),a.adler=c.check=0,c.mode=V;break;case T:for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}a.adler=c.check=d(m),m=0,n=0,c.mode=U;case U:if(0===c.havedict)return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,E;a.adler=c.check=1,c.mode=V;case V:if(b===A||b===B)break a;case W:if(c.last){m>>>=7&n,n-=7&n,c.mode=ib;break}for(;3>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}switch(c.last=1&m,m>>>=1,n-=1,3&m){case 0:c.mode=X;break;case 1:if(k(c),c.mode=bb,b===B){m>>>=2,n-=2;break a}break;case 2:c.mode=$;break;case 3:a.msg="invalid block type",c.mode=lb}m>>>=2,n-=2;break;case X:for(m>>>=7&n,n-=7&n;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if((65535&m)!==(m>>>16^65535)){a.msg="invalid stored block lengths",c.mode=lb;break}if(c.length=65535&m,m=0,n=0,c.mode=Y,b===B)break a;case Y:c.mode=Z;case Z:if(q=c.length){if(q>i&&(q=i),q>j&&(q=j),0===q)break a;r.arraySet(f,e,g,q,h),i-=q,g+=q,j-=q,h+=q,c.length-=q;break}c.mode=V;break;case $:for(;14>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.nlen=(31&m)+257,m>>>=5,n-=5,c.ndist=(31&m)+1,m>>>=5,n-=5,c.ncode=(15&m)+4,m>>>=4,n-=4,c.nlen>286||c.ndist>30){a.msg="too many length or distance symbols",c.mode=lb;break}c.have=0,c.mode=_;case _:for(;c.have<c.ncode;){for(;3>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.lens[Cb[c.have++]]=7&m,m>>>=3,n-=3}for(;c.have<19;)c.lens[Cb[c.have++]]=0;if(c.lencode=c.lendyn,c.lenbits=7,yb={bits:c.lenbits},xb=v(w,c.lens,0,19,c.lencode,0,c.work,yb),c.lenbits=yb.bits,xb){a.msg="invalid code lengths set",c.mode=lb;break}c.have=0,c.mode=ab;case ab:for(;c.have<c.nlen+c.ndist;){for(;Ab=c.lencode[m&(1<<c.lenbits)-1],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(16>sb)m>>>=qb,n-=qb,c.lens[c.have++]=sb;else{if(16===sb){for(zb=qb+2;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m>>>=qb,n-=qb,0===c.have){a.msg="invalid bit length repeat",c.mode=lb;break}wb=c.lens[c.have-1],q=3+(3&m),m>>>=2,n-=2}else if(17===sb){for(zb=qb+3;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qb,n-=qb,wb=0,q=3+(7&m),m>>>=3,n-=3}else{for(zb=qb+7;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qb,n-=qb,wb=0,q=11+(127&m),m>>>=7,n-=7}if(c.have+q>c.nlen+c.ndist){a.msg="invalid bit length repeat",c.mode=lb;break}for(;q--;)c.lens[c.have++]=wb}}if(c.mode===lb)break;if(0===c.lens[256]){a.msg="invalid code -- missing end-of-block",c.mode=lb;break}if(c.lenbits=9,yb={bits:c.lenbits},xb=v(x,c.lens,0,c.nlen,c.lencode,0,c.work,yb),c.lenbits=yb.bits,xb){a.msg="invalid literal/lengths set",c.mode=lb;break}if(c.distbits=6,c.distcode=c.distdyn,yb={bits:c.distbits},xb=v(y,c.lens,c.nlen,c.ndist,c.distcode,0,c.work,yb),c.distbits=yb.bits,xb){a.msg="invalid distances set",c.mode=lb;break}if(c.mode=bb,b===B)break a;case bb:c.mode=cb;case cb:if(i>=6&&j>=258){a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,u(a,p),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,c.mode===V&&(c.back=-1);
break}for(c.back=0;Ab=c.lencode[m&(1<<c.lenbits)-1],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(rb&&0===(240&rb)){for(tb=qb,ub=rb,vb=sb;Ab=c.lencode[vb+((m&(1<<tb+ub)-1)>>tb)],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=tb+qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=tb,n-=tb,c.back+=tb}if(m>>>=qb,n-=qb,c.back+=qb,c.length=sb,0===rb){c.mode=hb;break}if(32&rb){c.back=-1,c.mode=V;break}if(64&rb){a.msg="invalid literal/length code",c.mode=lb;break}c.extra=15&rb,c.mode=db;case db:if(c.extra){for(zb=c.extra;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}c.was=c.length,c.mode=eb;case eb:for(;Ab=c.distcode[m&(1<<c.distbits)-1],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(0===(240&rb)){for(tb=qb,ub=rb,vb=sb;Ab=c.distcode[vb+((m&(1<<tb+ub)-1)>>tb)],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=tb+qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=tb,n-=tb,c.back+=tb}if(m>>>=qb,n-=qb,c.back+=qb,64&rb){a.msg="invalid distance code",c.mode=lb;break}c.offset=sb,c.extra=15&rb,c.mode=fb;case fb:if(c.extra){for(zb=c.extra;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.offset+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}if(c.offset>c.dmax){a.msg="invalid distance too far back",c.mode=lb;break}c.mode=gb;case gb:if(0===j)break a;if(q=p-j,c.offset>q){if(q=c.offset-q,q>c.whave&&c.sane){a.msg="invalid distance too far back",c.mode=lb;break}q>c.wnext?(q-=c.wnext,ob=c.wsize-q):ob=c.wnext-q,q>c.length&&(q=c.length),pb=c.window}else pb=f,ob=h-c.offset,q=c.length;q>j&&(q=j),j-=q,c.length-=q;do f[h++]=pb[ob++];while(--q);0===c.length&&(c.mode=cb);break;case hb:if(0===j)break a;f[h++]=c.length,j--,c.mode=cb;break;case ib:if(c.wrap){for(;32>n;){if(0===i)break a;i--,m|=e[g++]<<n,n+=8}if(p-=j,a.total_out+=p,c.total+=p,p&&(a.adler=c.check=c.flags?t(c.check,f,p,h-p):s(c.check,f,p,h-p)),p=j,(c.flags?m:d(m))!==c.check){a.msg="incorrect data check",c.mode=lb;break}m=0,n=0}c.mode=jb;case jb:if(c.wrap&&c.flags){for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(4294967295&c.total)){a.msg="incorrect length check",c.mode=lb;break}m=0,n=0}c.mode=kb;case kb:xb=D;break a;case lb:xb=G;break a;case mb:return H;case nb:default:return F}return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,(c.wsize||p!==a.avail_out&&c.mode<lb&&(c.mode<ib||b!==z))&&l(a,a.output,a.next_out,p-a.avail_out)?(c.mode=mb,H):(o-=a.avail_in,p-=a.avail_out,a.total_in+=o,a.total_out+=p,c.total+=p,c.wrap&&p&&(a.adler=c.check=c.flags?t(c.check,f,p,a.next_out-p):s(c.check,f,p,a.next_out-p)),a.data_type=c.bits+(c.last?64:0)+(c.mode===V?128:0)+(c.mode===bb||c.mode===Y?256:0),(0===o&&0===p||b===z)&&xb===C&&(xb=I),xb)}function n(a){if(!a||!a.state)return F;var b=a.state;return b.window&&(b.window=null),a.state=null,C}function o(a,b){var c;return a&&a.state?(c=a.state,0===(2&c.wrap)?F:(c.head=b,b.done=!1,C)):F}var p,q,r=a("../utils/common"),s=a("./adler32"),t=a("./crc32"),u=a("./inffast"),v=a("./inftrees"),w=0,x=1,y=2,z=4,A=5,B=6,C=0,D=1,E=2,F=-2,G=-3,H=-4,I=-5,J=8,K=1,L=2,M=3,N=4,O=5,P=6,Q=7,R=8,S=9,T=10,U=11,V=12,W=13,X=14,Y=15,Z=16,$=17,_=18,ab=19,bb=20,cb=21,db=22,eb=23,fb=24,gb=25,hb=26,ib=27,jb=28,kb=29,lb=30,mb=31,nb=32,ob=852,pb=592,qb=15,rb=qb,sb=!0;c.inflateReset=g,c.inflateReset2=h,c.inflateResetKeep=f,c.inflateInit=j,c.inflateInit2=i,c.inflate=m,c.inflateEnd=n,c.inflateGetHeader=o,c.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":27,"./adler32":29,"./crc32":31,"./inffast":34,"./inftrees":36}],36:[function(a,b){"use strict";var c=a("../utils/common"),d=15,e=852,f=592,g=0,h=1,i=2,j=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],k=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],l=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],m=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];b.exports=function(a,b,n,o,p,q,r,s){var t,u,v,w,x,y,z,A,B,C=s.bits,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=null,O=0,P=new c.Buf16(d+1),Q=new c.Buf16(d+1),R=null,S=0;for(D=0;d>=D;D++)P[D]=0;for(E=0;o>E;E++)P[b[n+E]]++;for(H=C,G=d;G>=1&&0===P[G];G--);if(H>G&&(H=G),0===G)return p[q++]=20971520,p[q++]=20971520,s.bits=1,0;for(F=1;G>F&&0===P[F];F++);for(F>H&&(H=F),K=1,D=1;d>=D;D++)if(K<<=1,K-=P[D],0>K)return-1;if(K>0&&(a===g||1!==G))return-1;for(Q[1]=0,D=1;d>D;D++)Q[D+1]=Q[D]+P[D];for(E=0;o>E;E++)0!==b[n+E]&&(r[Q[b[n+E]]++]=E);if(a===g?(N=R=r,y=19):a===h?(N=j,O-=257,R=k,S-=257,y=256):(N=l,R=m,y=-1),M=0,E=0,D=F,x=q,I=H,J=0,v=-1,L=1<<H,w=L-1,a===h&&L>e||a===i&&L>f)return 1;for(var T=0;;){T++,z=D-J,r[E]<y?(A=0,B=r[E]):r[E]>y?(A=R[S+r[E]],B=N[O+r[E]]):(A=96,B=0),t=1<<D-J,u=1<<I,F=u;do u-=t,p[x+(M>>J)+u]=z<<24|A<<16|B|0;while(0!==u);for(t=1<<D-1;M&t;)t>>=1;if(0!==t?(M&=t-1,M+=t):M=0,E++,0===--P[D]){if(D===G)break;D=b[n+r[E]]}if(D>H&&(M&w)!==v){for(0===J&&(J=H),x+=F,I=D-J,K=1<<I;G>I+J&&(K-=P[I+J],!(0>=K));)I++,K<<=1;if(L+=1<<I,a===h&&L>e||a===i&&L>f)return 1;v=M&w,p[v]=H<<24|I<<16|x-q|0}}return 0!==M&&(p[x+M]=D-J<<24|64<<16|0),s.bits=H,0}},{"../utils/common":27}],37:[function(a,b){"use strict";b.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],38:[function(a,b,c){"use strict";function d(a){for(var b=a.length;--b>=0;)a[b]=0}function e(a){return 256>a?gb[a]:gb[256+(a>>>7)]}function f(a,b){a.pending_buf[a.pending++]=255&b,a.pending_buf[a.pending++]=b>>>8&255}function g(a,b,c){a.bi_valid>V-c?(a.bi_buf|=b<<a.bi_valid&65535,f(a,a.bi_buf),a.bi_buf=b>>V-a.bi_valid,a.bi_valid+=c-V):(a.bi_buf|=b<<a.bi_valid&65535,a.bi_valid+=c)}function h(a,b,c){g(a,c[2*b],c[2*b+1])}function i(a,b){var c=0;do c|=1&a,a>>>=1,c<<=1;while(--b>0);return c>>>1}function j(a){16===a.bi_valid?(f(a,a.bi_buf),a.bi_buf=0,a.bi_valid=0):a.bi_valid>=8&&(a.pending_buf[a.pending++]=255&a.bi_buf,a.bi_buf>>=8,a.bi_valid-=8)}function k(a,b){var c,d,e,f,g,h,i=b.dyn_tree,j=b.max_code,k=b.stat_desc.static_tree,l=b.stat_desc.has_stree,m=b.stat_desc.extra_bits,n=b.stat_desc.extra_base,o=b.stat_desc.max_length,p=0;for(f=0;U>=f;f++)a.bl_count[f]=0;for(i[2*a.heap[a.heap_max]+1]=0,c=a.heap_max+1;T>c;c++)d=a.heap[c],f=i[2*i[2*d+1]+1]+1,f>o&&(f=o,p++),i[2*d+1]=f,d>j||(a.bl_count[f]++,g=0,d>=n&&(g=m[d-n]),h=i[2*d],a.opt_len+=h*(f+g),l&&(a.static_len+=h*(k[2*d+1]+g)));if(0!==p){do{for(f=o-1;0===a.bl_count[f];)f--;a.bl_count[f]--,a.bl_count[f+1]+=2,a.bl_count[o]--,p-=2}while(p>0);for(f=o;0!==f;f--)for(d=a.bl_count[f];0!==d;)e=a.heap[--c],e>j||(i[2*e+1]!==f&&(a.opt_len+=(f-i[2*e+1])*i[2*e],i[2*e+1]=f),d--)}}function l(a,b,c){var d,e,f=new Array(U+1),g=0;for(d=1;U>=d;d++)f[d]=g=g+c[d-1]<<1;for(e=0;b>=e;e++){var h=a[2*e+1];0!==h&&(a[2*e]=i(f[h]++,h))}}function m(){var a,b,c,d,e,f=new Array(U+1);for(c=0,d=0;O-1>d;d++)for(ib[d]=c,a=0;a<1<<_[d];a++)hb[c++]=d;for(hb[c-1]=d,e=0,d=0;16>d;d++)for(jb[d]=e,a=0;a<1<<ab[d];a++)gb[e++]=d;for(e>>=7;R>d;d++)for(jb[d]=e<<7,a=0;a<1<<ab[d]-7;a++)gb[256+e++]=d;for(b=0;U>=b;b++)f[b]=0;for(a=0;143>=a;)eb[2*a+1]=8,a++,f[8]++;for(;255>=a;)eb[2*a+1]=9,a++,f[9]++;for(;279>=a;)eb[2*a+1]=7,a++,f[7]++;for(;287>=a;)eb[2*a+1]=8,a++,f[8]++;for(l(eb,Q+1,f),a=0;R>a;a++)fb[2*a+1]=5,fb[2*a]=i(a,5);kb=new nb(eb,_,P+1,Q,U),lb=new nb(fb,ab,0,R,U),mb=new nb(new Array(0),bb,0,S,W)}function n(a){var b;for(b=0;Q>b;b++)a.dyn_ltree[2*b]=0;for(b=0;R>b;b++)a.dyn_dtree[2*b]=0;for(b=0;S>b;b++)a.bl_tree[2*b]=0;a.dyn_ltree[2*X]=1,a.opt_len=a.static_len=0,a.last_lit=a.matches=0}function o(a){a.bi_valid>8?f(a,a.bi_buf):a.bi_valid>0&&(a.pending_buf[a.pending++]=a.bi_buf),a.bi_buf=0,a.bi_valid=0}function p(a,b,c,d){o(a),d&&(f(a,c),f(a,~c)),E.arraySet(a.pending_buf,a.window,b,c,a.pending),a.pending+=c}function q(a,b,c,d){var e=2*b,f=2*c;return a[e]<a[f]||a[e]===a[f]&&d[b]<=d[c]}function r(a,b,c){for(var d=a.heap[c],e=c<<1;e<=a.heap_len&&(e<a.heap_len&&q(b,a.heap[e+1],a.heap[e],a.depth)&&e++,!q(b,d,a.heap[e],a.depth));)a.heap[c]=a.heap[e],c=e,e<<=1;a.heap[c]=d}function s(a,b,c){var d,f,i,j,k=0;if(0!==a.last_lit)do d=a.pending_buf[a.d_buf+2*k]<<8|a.pending_buf[a.d_buf+2*k+1],f=a.pending_buf[a.l_buf+k],k++,0===d?h(a,f,b):(i=hb[f],h(a,i+P+1,b),j=_[i],0!==j&&(f-=ib[i],g(a,f,j)),d--,i=e(d),h(a,i,c),j=ab[i],0!==j&&(d-=jb[i],g(a,d,j)));while(k<a.last_lit);h(a,X,b)}function t(a,b){var c,d,e,f=b.dyn_tree,g=b.stat_desc.static_tree,h=b.stat_desc.has_stree,i=b.stat_desc.elems,j=-1;for(a.heap_len=0,a.heap_max=T,c=0;i>c;c++)0!==f[2*c]?(a.heap[++a.heap_len]=j=c,a.depth[c]=0):f[2*c+1]=0;for(;a.heap_len<2;)e=a.heap[++a.heap_len]=2>j?++j:0,f[2*e]=1,a.depth[e]=0,a.opt_len--,h&&(a.static_len-=g[2*e+1]);for(b.max_code=j,c=a.heap_len>>1;c>=1;c--)r(a,f,c);e=i;do c=a.heap[1],a.heap[1]=a.heap[a.heap_len--],r(a,f,1),d=a.heap[1],a.heap[--a.heap_max]=c,a.heap[--a.heap_max]=d,f[2*e]=f[2*c]+f[2*d],a.depth[e]=(a.depth[c]>=a.depth[d]?a.depth[c]:a.depth[d])+1,f[2*c+1]=f[2*d+1]=e,a.heap[1]=e++,r(a,f,1);while(a.heap_len>=2);a.heap[--a.heap_max]=a.heap[1],k(a,b),l(f,j,a.bl_count)}function u(a,b,c){var d,e,f=-1,g=b[1],h=0,i=7,j=4;for(0===g&&(i=138,j=3),b[2*(c+1)+1]=65535,d=0;c>=d;d++)e=g,g=b[2*(d+1)+1],++h<i&&e===g||(j>h?a.bl_tree[2*e]+=h:0!==e?(e!==f&&a.bl_tree[2*e]++,a.bl_tree[2*Y]++):10>=h?a.bl_tree[2*Z]++:a.bl_tree[2*$]++,h=0,f=e,0===g?(i=138,j=3):e===g?(i=6,j=3):(i=7,j=4))}function v(a,b,c){var d,e,f=-1,i=b[1],j=0,k=7,l=4;for(0===i&&(k=138,l=3),d=0;c>=d;d++)if(e=i,i=b[2*(d+1)+1],!(++j<k&&e===i)){if(l>j){do h(a,e,a.bl_tree);while(0!==--j)}else 0!==e?(e!==f&&(h(a,e,a.bl_tree),j--),h(a,Y,a.bl_tree),g(a,j-3,2)):10>=j?(h(a,Z,a.bl_tree),g(a,j-3,3)):(h(a,$,a.bl_tree),g(a,j-11,7));j=0,f=e,0===i?(k=138,l=3):e===i?(k=6,l=3):(k=7,l=4)}}function w(a){var b;for(u(a,a.dyn_ltree,a.l_desc.max_code),u(a,a.dyn_dtree,a.d_desc.max_code),t(a,a.bl_desc),b=S-1;b>=3&&0===a.bl_tree[2*cb[b]+1];b--);return a.opt_len+=3*(b+1)+5+5+4,b}function x(a,b,c,d){var e;for(g(a,b-257,5),g(a,c-1,5),g(a,d-4,4),e=0;d>e;e++)g(a,a.bl_tree[2*cb[e]+1],3);v(a,a.dyn_ltree,b-1),v(a,a.dyn_dtree,c-1)}function y(a){var b,c=4093624447;for(b=0;31>=b;b++,c>>>=1)if(1&c&&0!==a.dyn_ltree[2*b])return G;if(0!==a.dyn_ltree[18]||0!==a.dyn_ltree[20]||0!==a.dyn_ltree[26])return H;for(b=32;P>b;b++)if(0!==a.dyn_ltree[2*b])return H;return G}function z(a){pb||(m(),pb=!0),a.l_desc=new ob(a.dyn_ltree,kb),a.d_desc=new ob(a.dyn_dtree,lb),a.bl_desc=new ob(a.bl_tree,mb),a.bi_buf=0,a.bi_valid=0,n(a)}function A(a,b,c,d){g(a,(J<<1)+(d?1:0),3),p(a,b,c,!0)}function B(a){g(a,K<<1,3),h(a,X,eb),j(a)}function C(a,b,c,d){var e,f,h=0;a.level>0?(a.strm.data_type===I&&(a.strm.data_type=y(a)),t(a,a.l_desc),t(a,a.d_desc),h=w(a),e=a.opt_len+3+7>>>3,f=a.static_len+3+7>>>3,e>=f&&(e=f)):e=f=c+5,e>=c+4&&-1!==b?A(a,b,c,d):a.strategy===F||f===e?(g(a,(K<<1)+(d?1:0),3),s(a,eb,fb)):(g(a,(L<<1)+(d?1:0),3),x(a,a.l_desc.max_code+1,a.d_desc.max_code+1,h+1),s(a,a.dyn_ltree,a.dyn_dtree)),n(a),d&&o(a)}function D(a,b,c){return a.pending_buf[a.d_buf+2*a.last_lit]=b>>>8&255,a.pending_buf[a.d_buf+2*a.last_lit+1]=255&b,a.pending_buf[a.l_buf+a.last_lit]=255&c,a.last_lit++,0===b?a.dyn_ltree[2*c]++:(a.matches++,b--,a.dyn_ltree[2*(hb[c]+P+1)]++,a.dyn_dtree[2*e(b)]++),a.last_lit===a.lit_bufsize-1}var E=a("../utils/common"),F=4,G=0,H=1,I=2,J=0,K=1,L=2,M=3,N=258,O=29,P=256,Q=P+1+O,R=30,S=19,T=2*Q+1,U=15,V=16,W=7,X=256,Y=16,Z=17,$=18,_=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],ab=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],bb=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],cb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],db=512,eb=new Array(2*(Q+2));d(eb);var fb=new Array(2*R);d(fb);var gb=new Array(db);d(gb);var hb=new Array(N-M+1);d(hb);var ib=new Array(O);d(ib);var jb=new Array(R);d(jb);var kb,lb,mb,nb=function(a,b,c,d,e){this.static_tree=a,this.extra_bits=b,this.extra_base=c,this.elems=d,this.max_length=e,this.has_stree=a&&a.length},ob=function(a,b){this.dyn_tree=a,this.max_code=0,this.stat_desc=b},pb=!1;c._tr_init=z,c._tr_stored_block=A,c._tr_flush_block=C,c._tr_tally=D,c._tr_align=B},{"../utils/common":27}],39:[function(a,b){"use strict";function c(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}b.exports=c},{}]},{},[9])(9)});
aa_loadZippedXtml('');
